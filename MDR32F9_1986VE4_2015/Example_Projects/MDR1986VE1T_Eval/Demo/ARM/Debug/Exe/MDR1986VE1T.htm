<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Debug\Exe\MDR1986VE1T.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Debug\Exe\MDR1986VE1T.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Tue Jul 21 15:22:19 2015
<BR><P>
<H3>Maximum Stack Usage =        260 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Calendar_Init &rArr; DatePreAdjustFunc &rArr; Date_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[119]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">NMI_Handler</a><BR>
 <LI><a href="#[1c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">HardFault_Handler</a><BR>
 <LI><a href="#[1d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">SVC_Handler</a><BR>
 <LI><a href="#[1e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">MIL_STD_1553B2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">MIL_STD_1553B2_IRQHandler</a><BR>
 <LI><a href="#[21]">MIL_STD_1553B1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">MIL_STD_1553B1_IRQHandler</a><BR>
 <LI><a href="#[23]">CAN1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">CAN1_IRQHandler</a><BR>
 <LI><a href="#[24]">CAN2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">CAN2_IRQHandler</a><BR>
 <LI><a href="#[25]">DMA_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">DMA_IRQHandler</a><BR>
 <LI><a href="#[28]">SSP1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">SSP1_IRQHandler</a><BR>
 <LI><a href="#[29]">BUSY_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">BUSY_IRQHandler</a><BR>
 <LI><a href="#[2a]">ARINC429R_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ARINC429R_IRQHandler</a><BR>
 <LI><a href="#[2b]">POWER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">POWER_IRQHandler</a><BR>
 <LI><a href="#[2c]">WWDG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">WWDG_IRQHandler</a><BR>
 <LI><a href="#[2d]">TIMER4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">TIMER4_IRQHandler</a><BR>
 <LI><a href="#[2e]">TIMER1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">TIMER1_IRQHandler</a><BR>
 <LI><a href="#[2f]">TIMER2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">TIMER2_IRQHandler</a><BR>
 <LI><a href="#[30]">TIMER3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">TIMER3_IRQHandler</a><BR>
 <LI><a href="#[32]">ETHERNET_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ETHERNET_IRQHandler</a><BR>
 <LI><a href="#[33]">SSP3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">SSP3_IRQHandler</a><BR>
 <LI><a href="#[34]">SSP2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">SSP2_IRQHandler</a><BR>
 <LI><a href="#[35]">ARINC429T1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">ARINC429T1_IRQHandler</a><BR>
 <LI><a href="#[36]">ARINC429T2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">ARINC429T2_IRQHandler</a><BR>
 <LI><a href="#[37]">ARINC429T3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">ARINC429T3_IRQHandler</a><BR>
 <LI><a href="#[38]">ARINC429T4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">ARINC429T4_IRQHandler</a><BR>
 <LI><a href="#[3a]">EXT_INT1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">EXT_INT1_IRQHandler</a><BR>
 <LI><a href="#[3b]">EXT_INT2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">EXT_INT2_IRQHandler</a><BR>
 <LI><a href="#[3c]">EXT_INT3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">EXT_INT3_IRQHandler</a><BR>
 <LI><a href="#[3d]">EXT_INT4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">EXT_INT4_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC_IRQHandler</a> from mdr1986ve1t_it.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[2a]">ARINC429R_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[35]">ARINC429T1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[36]">ARINC429T2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[37]">ARINC429T3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[38]">ARINC429T4_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[19]">AboutFunc</a> from menu_text.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[a]">AlarmAdjustFunc</a> from menu_time.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[b]">AlarmShowFunc</a> from menu_time.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[39]">BKP_IRQHandler</a> from mdr1986ve1t_it.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[29]">BUSY_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[13]">BookFunc</a> from menu_text.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[23]">CAN1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[24]">CAN2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[25]">DMA_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[8]">DateAdjustFunc</a> from menu_time.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[9]">DateShowFunc</a> from menu_time.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[32]">ETHERNET_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[3a]">EXT_INT1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[3b]">EXT_INT2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[3c]">EXT_INT3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[3d]">EXT_INT4_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[14]">ElementsFunc</a> from menu_gl.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[11]">FontFunc</a> from menu_text.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1c]">HardFault_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[10]">IdleFunc</a> from menu.o(.text) referenced 28 times from menu.o(.data)
 <LI><a href="#[15]">IndicatorsFunc</a> from menu_gl.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[16]">LightsOnFunc</a> from menu_leds.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[21]">MIL_STD_1553B1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[20]">MIL_STD_1553B2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1b]">NMI_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[2b]">POWER_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[47]">ReceiverFunc</a> from menu_vcom.o(.text) referenced from menu_vcom.o(.text)
 <LI><a href="#[45]">ReceiverFuncFIFODemo</a> from menu_uart.o(.text) referenced from menu_uart.o(.text)
 <LI><a href="#[1a]">Reset_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[7]">ReturnFunc</a> from menu.o(.text) referenced 28 times from menu.o(.data)
 <LI><a href="#[28]">SSP1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[34]">SSP2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[33]">SSP3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[d]">STANDBYMode_RTCAlarm</a> from menu_lowpower.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[c]">STANDBYMode_WAKEUP</a> from menu_lowpower.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1d]">SVC_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[48]">SenderFunc</a> from menu_vcom.o(.text) referenced from menu_vcom.o(.text)
 <LI><a href="#[46]">SenderFuncFIFODemo</a> from menu_uart.o(.text) referenced from menu_uart.o(.text)
 <LI><a href="#[12]">StyleFunc</a> from menu_text.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1f]">SysTick_Handler</a> from mdr1986ve1t_it.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[2e]">TIMER1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[2f]">TIMER2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[30]">TIMER3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[2d]">TIMER4_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[18]">TSENSORFunc</a> from menu_tsensor.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[5]">TimeAdjustFunc</a> from menu_time.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[6]">TimeShowFunc</a> from menu_time.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[26]">UART1_IRQHandler</a> from mdr1986ve1t_it.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[27]">UART2_IRQHandler</a> from mdr1986ve1t_it.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[f]">UARTFunc</a> from menu_uart.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[e]">UARTwFIFOFunc</a> from menu_uart.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[41]">USB_CDC_DoDataOut</a> from mdr32f9qx_usb_cdc.o(.text) referenced from mdr32f9qx_usb_cdc.o(.text)
 <LI><a href="#[3e]">USB_CDC_OnDataReceive</a> from mdr32f9qx_usb_cdc.o(.text) referenced from mdr32f9qx_usb_cdc.o(.text)
 <LI><a href="#[3f]">USB_CDC_OnDataSent</a> from mdr32f9qx_usb_cdc.o(.text) referenced from mdr32f9qx_usb_cdc.o(.text)
 <LI><a href="#[40]">USB_DeviceDoStatusOutAck</a> from mdr32f9qx_usb_device.o(.text) referenced from mdr32f9qx_usb_cdc.o(.text)
 <LI><a href="#[43]">USB_DeviceSetupPacket</a> from mdr32f9qx_usb_device.o(.text) referenced from mdr32f9qx_usb_device.o(.text)
 <LI><a href="#[42]">USB_Device_setAddressWork</a> from mdr32f9qx_usb_device.o(.text) referenced from mdr32f9qx_usb_device.o(.text)
 <LI><a href="#[22]">USB_IRQHandler</a> from mdr32f9qx_usb_device.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[17]">VCOMFunc</a> from menu_vcom.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[2c]">WWDG_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[49]">__main</a> from __main.o(!!!main) referenced from startup_mdr1986ve1t.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[50]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))

<P><STRONG><a name="[120]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[121]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[122]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[123]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[124]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[125]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[126]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[127]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[128]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[130]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[131]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[132]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[55]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[133]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[4b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[139]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[13a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[51]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Calendar_Init &rArr; DatePreAdjustFunc &rArr; Date_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[11b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[54]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[13c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[56]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a8]"></a>ADC_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temp_Sensor_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[aa]"></a>ADC_Init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temp_Sensor_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[a9]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temp_Sensor_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[13d]"></a>ADC_SetTrim</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>ADC1_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temp_Sensor_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[ab]"></a>ADCx_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[c9]"></a>ADC1_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSORFunc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StyleFunc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
</UL>

<P><STRONG><a name="[13e]"></a>ADC1_SetChannel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>ADC1_SetChannels</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>ADC1_OperationModeConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>ADC1_SamplingModeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>ADC1_ChannelSwithingConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>ADC1_LevelsConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>ADC1_SetLowLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>ADC1_SetHighLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>ADC1_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>ADC1_GetResult</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSORFunc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS_Ex
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>ADC_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
</UL>

<P><STRONG><a name="[147]"></a>ADC1_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, mdr32f9qx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetStatus
</UL>

<P><STRONG><a name="[115]"></a>ADC1_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>ADC1_ClearOverwriteFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>ADC1_ClearOutOfRangeFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>ADC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>ADC1_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSORFunc
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>ADC_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, mdr32f9qx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetStatus
</UL>

<P><STRONG><a name="[14a]"></a>ADC1_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>BKP_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>BKP_RTCclkSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[d1]"></a>BKP_RTC_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[d0]"></a>BKP_RTC_Calibration</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[db]"></a>BKP_RTC_Reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
</UL>

<P><STRONG><a name="[d2]"></a>BKP_RTC_ITConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[d6]"></a>BKP_RTC_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
</UL>

<P><STRONG><a name="[dc]"></a>BKP_RTC_SetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
</UL>

<P><STRONG><a name="[e5]"></a>BKP_RTC_SetAlarm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
</UL>

<P><STRONG><a name="[14c]"></a>BKP_RTC_GetDivider</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>BKP_RTC_SetPrescaler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[ce]"></a>BKP_RTC_WaitForUpdate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Regulate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Update
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[117]"></a>BKP_RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>EBC_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_ebc.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>EBC_Init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, mdr32f9qx_ebc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EBC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBus_Setup
</UL>

<P><STRONG><a name="[109]"></a>EBC_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_ebc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBus_Setup
</UL>

<P><STRONG><a name="[5b]"></a>EBC_CalcWaitStates</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mdr32f9qx_ebc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[5d]"></a>EBC_CalcNandCycles</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mdr32f9qx_ebc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[14e]"></a>EBC_GetBusyStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_ebc.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>EBC_MemRegionStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_ebc.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>EBC_MemRegionInit</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, mdr32f9qx_ebc.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>EBC_MemRegionCMD</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mdr32f9qx_ebc.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>EEPROM_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_eeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
</UL>

<P><STRONG><a name="[100]"></a>PORT_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SaveConfig
</UL>

<P><STRONG><a name="[fd]"></a>PORT_Init</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
</UL>

<P><STRONG><a name="[152]"></a>PORT_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>PORT_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[b4]"></a>PORT_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftLights
</UL>

<P><STRONG><a name="[112]"></a>PORT_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLCD
</UL>

<P><STRONG><a name="[ca]"></a>PORT_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsOnFunc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLCD
</UL>

<P><STRONG><a name="[153]"></a>PORT_WriteBit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mdr32f9qx_port.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>PORT_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftLights
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCrystal
</UL>

<P><STRONG><a name="[154]"></a>POWER_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>POWER_DUccMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>POWER_DUccTrim</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>POWER_DUccStandby</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>POWER_PVDlevelConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>POWER_PVBDlevelConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>POWER_SetFlagPOR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>POWER_FlagPORstatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>POWER_PVDenable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>POWER_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>POWER_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>POWER_PVD_ITconfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>POWER_PVD_INVconfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>POWER_EnterSLEEPMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>POWER_EnterSTANDBYMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_WAKEUP
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_RTCAlarm
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOPMode_RTCAlarm
</UL>

<P><STRONG><a name="[162]"></a>POWER_SetTrim</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_power.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temp_Sensor_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBus_Setup
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_USB
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
</UL>

<P><STRONG><a name="[62]"></a>RST_CLK_CPUclkSelection</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[5f]"></a>RST_CLK_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_USB_PLLstatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSIstatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSEstatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSE2status
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
</UL>

<P><STRONG><a name="[5e]"></a>RST_CLK_HSIstatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_HSIstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
</UL>

<P><STRONG><a name="[61]"></a>RST_CLK_HSIcmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
</UL>

<P><STRONG><a name="[60]"></a>RST_CLK_WarmDeInit</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIcmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
</UL>

<P><STRONG><a name="[63]"></a>RST_CLK_DeInit</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>

<P><STRONG><a name="[f4]"></a>RST_CLK_HSEconfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[163]"></a>RST_CLK_HSE2config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>RST_CLK_HSEstatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_HSEstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[66]"></a>RST_CLK_HSE2status</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[cc]"></a>RST_CLK_LSEconfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[67]"></a>RST_CLK_LSEstatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_LSEstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[164]"></a>RST_CLK_HSIadjust</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>RST_CLK_LSIcmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>RST_CLK_LSIadjust</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>RST_CLK_LSIstatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[f5]"></a>RST_CLK_CPU_PLLconfig</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_CPU_PLLconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[f8]"></a>RST_CLK_CPU_PLLuse</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[f6]"></a>RST_CLK_CPU_PLLcmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[69]"></a>RST_CLK_CPU_PLLstatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_CPU_PLLstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[f7]"></a>RST_CLK_CPUclkPrescaler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[167]"></a>RST_CLK_USB_PLLconfig</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>RST_CLK_USB_PLLuse</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>RST_CLK_USB_PLLcmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>RST_CLK_USB_PLLstatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[16a]"></a>RST_CLK_USBclkPrescaler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>RST_CLK_USBclkEnable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>RST_CLK_ADCclkSelection</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>RST_CLK_ADCclkPrescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>RST_CLK_ADCclkEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>RST_CLK_HSIclkPrescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>RST_CLK_RTC_HSIclkEnable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>RST_CLK_HSEclkPrescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>RST_CLK_RTC_HSEclkEnable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>RST_CLK_GetClocksFreq</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDAConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e9]"></a>UART_DeInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SetLineCoding
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
</UL>

<P><STRONG><a name="[6c]"></a>UART_Init</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SetLineCoding
</UL>

<P><STRONG><a name="[173]"></a>UART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>UART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SetLineCoding
</UL>

<P><STRONG><a name="[ef]"></a>UART_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SetLineCoding
</UL>

<P><STRONG><a name="[174]"></a>UART_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>UART_GetITStatusMasked</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>UART_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
</UL>

<P><STRONG><a name="[f1]"></a>UART_DMACmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
</UL>

<P><STRONG><a name="[ec]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenderFunc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenderFuncFIFODemo
</UL>

<P><STRONG><a name="[ee]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverFunc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverFuncFIFODemo
</UL>

<P><STRONG><a name="[177]"></a>UART_BreakLine</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>UART_IrDAConfig</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, mdr32f9qx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[178]"></a>UART_IrDACmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>UART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverFunc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenderFunc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverFuncFIFODemo
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenderFuncFIFODemo
</UL>

<P><STRONG><a name="[e8]"></a>UART_BRGInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
</UL>

<P><STRONG><a name="[96]"></a>USB_BRGInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[6f]"></a>USB_SetHSCR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevicePowerOff
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevicePowerOn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[6e]"></a>USB_Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetHSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[179]"></a>USB_GetHSCR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>USB_GetHSVR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>USB_GetHTXC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>USB_SetHTXC</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>USB_GetHTXT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>USB_SetHTXT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>USB_GetHTXLC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>USB_SetHTXLC</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>USB_GetHTXSE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>USB_SetHTXSE</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>USB_GetHTXA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>USB_SetHTXA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>USB_GetHTXE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>USB_SetHTXE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>USB_GetHFN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>USB_GetHIS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>USB_SetHIS</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>USB_GetHIM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>USB_SetHIM</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>USB_GetHRXS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>USB_GetHRXP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>USB_GetHRXA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>USB_GetHRXE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>USB_GetHRXCS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>USB_GetHSTM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>USB_GetHRXFD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>USB_GetHRXFDC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>USB_GetHRXFC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>USB_SetHRXFC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>USB_GetHTXFD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>USB_SetHTXFD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>USB_GetHTXFC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>USB_SetHTXFC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>USB_GetSEPxCTRL</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[80]"></a>USB_SetSEPxCTRL</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetSEPxCTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Init
</UL>

<P><STRONG><a name="[8b]"></a>USB_GetSEPxSTS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[8c]"></a>USB_GetSEPxTS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[19a]"></a>USB_GetSEPxNTS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>USB_GetSC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>USB_SetSC</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[19c]"></a>USB_GetSLS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>USB_GetSIS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
</UL>

<P><STRONG><a name="[83]"></a>USB_SetSIS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
</UL>

<P><STRONG><a name="[19d]"></a>USB_GetSIM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>USB_SetSIM</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_USB
</UL>

<P><STRONG><a name="[19e]"></a>USB_GetSA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>USB_SetSA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_setAddressWork
</UL>

<P><STRONG><a name="[19f]"></a>USB_GetSFN</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>USB_GetSEPxRXFD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[8f]"></a>USB_GetSEPxRXFDC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[1a0]"></a>USB_GetSEPxRXFC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>USB_SetSEPxRXFC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[1a1]"></a>USB_GetSEPxTXFD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>USB_SetSEPxTXFD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
</UL>

<P><STRONG><a name="[1a2]"></a>USB_GetSEPxTXFDC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>USB_SetSEPxTXFDC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
</UL>

<P><STRONG><a name="[87]"></a>USB_SEPxToggleEPDATASEQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
</UL>

<P><STRONG><a name="[71]"></a>USB_CDC_SetReceiveBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb_cdc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Init
</UL>

<P><STRONG><a name="[70]"></a>USB_CDC_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, mdr32f9qx_usb_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_CDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SetReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
</UL>

<P><STRONG><a name="[74]"></a>USB_CDC_ReceiveStart</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mdr32f9qx_usb_cdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
</UL>

<P><STRONG><a name="[75]"></a>USB_CDC_ReceiveStop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mdr32f9qx_usb_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_CDC_ReceiveStop &rArr; USB_EP_Stall &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
</UL>

<P><STRONG><a name="[77]"></a>USB_CDC_SendData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mdr32f9qx_usb_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_CDC_SendData &rArr; USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverFunc
</UL>

<P><STRONG><a name="[79]"></a>USB_CDC_Reset</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mdr32f9qx_usb_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_CDC_Reset &rArr; USB_EP_doDataOut &rArr; USB_EP_Idle &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_USB
</UL>

<P><STRONG><a name="[7c]"></a>USB_CDC_GetDescriptor</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mdr32f9qx_usb_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_CDC_GetDescriptor &rArr; USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
</UL>

<P><STRONG><a name="[7e]"></a>USB_CDC_ClassRequest</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mdr32f9qx_usb_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_CDC_ClassRequest &rArr; USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_GetLineCoding
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
</UL>

<P><STRONG><a name="[1a3]"></a>USB_CDC_DummyDataReceive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_cdc.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>USB_CDC_DummyDataSent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_usb_cdc.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>USB_CDC_DummyGetLineCoding</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_cdc.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>USB_CDC_DummySetLineCoding</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_cdc.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>USB_EP_Init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EP_Init &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxCTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Reset
</UL>

<P><STRONG><a name="[81]"></a>USB_EP_Reset</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxCTRL
</UL>

<P><STRONG><a name="[84]"></a>USB_EP_Idle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_EP_Idle &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClearFeature
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_setSetupHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
</UL>

<P><STRONG><a name="[76]"></a>USB_EP_Stall</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_EP_Stall &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetFeature
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ReceiveStop
</UL>

<P><STRONG><a name="[78]"></a>USB_EP_doDataIn</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ClassRequest
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_GetDescriptor
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SendData
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_DoDataOut
</UL>

<P><STRONG><a name="[73]"></a>USB_EP_doDataOut</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_EP_doDataOut &rArr; USB_EP_Idle &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDoStatusOutAck
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ClassRequest
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ReceiveStart
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_OnDataReceive
</UL>

<P><STRONG><a name="[89]"></a>USB_EP_setSetupHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_EP_setSetupHandler &rArr; USB_EP_Idle &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[8a]"></a>USB_EP_dispatchEvent</STRONG> (Thumb, 650 bytes, Stack size 48 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_EP_dispatchEvent &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxRXFC
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSEPxRXFDC
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSEPxRXFD
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSEPxTS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSEPxSTS
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSEPxCTRL
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Idle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
</UL>

<P><STRONG><a name="[93]"></a>USB_DeviceSetFeature</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceSetFeature &rArr; USB_EP_Stall &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
</UL>

<P><STRONG><a name="[94]"></a>USB_DeviceClearFeature</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DeviceClearFeature &rArr; USB_EP_Idle &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
</UL>

<P><STRONG><a name="[43]"></a>USB_DeviceSetupPacket</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USB_DeviceSetupPacket &rArr; USB_CDC_ClassRequest &rArr; USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClearFeature
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetFeature
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ClassRequest
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_GetDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr32f9qx_usb_device.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>USB_DeviceInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceInit &rArr; USB_EP_setSetupHandler &rArr; USB_EP_Idle &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSC
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetHSCR
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BRGInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_setSetupHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_USB
</UL>

<P><STRONG><a name="[98]"></a>USB_DevicePowerOn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevicePowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetHSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_USB
</UL>

<P><STRONG><a name="[99]"></a>USB_DevicePowerOff</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevicePowerOff
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetHSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
</UL>

<P><STRONG><a name="[7a]"></a>USB_DeviceReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Reset
</UL>

<P><STRONG><a name="[1a7]"></a>USB_DeviceSuspend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>USB_DeviceResume</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>USB_DeviceDoStatusInAck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>USB_DeviceDoStatusOutAck</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_DeviceDoStatusOutAck &rArr; USB_EP_doDataOut &rArr; USB_EP_Idle &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr32f9qx_usb_cdc.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>USB_DeviceDispatchEvent</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_DeviceDispatchEvent &rArr; USB_EP_dispatchEvent &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSIS
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSIS
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_IRQHandler &rArr; USB_DeviceDispatchEvent &rArr; USB_EP_dispatchEvent &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>USB_DeviceDummyGetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>USB_DeviceDummySetAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>USB_DeviceDummyGetDescriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>USB_DeviceDummySetDescriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>USB_DeviceDummyGetConfiguration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>USB_DeviceDummySetConfiguration</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>USB_DeviceDummyGetInterface</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>USB_DeviceDummySetInterface</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>USB_DeviceDummySyncFrame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>USB_DeviceDummyClassRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>USB_DeviceDummyVendorRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>USB_DeviceDummyDataError</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>MIL_STD_1553B2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>MIL_STD_1553B1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SSP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BUSY_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUSY_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUSY_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ARINC429R_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429R_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429R_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>POWER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ETHERNET_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SSP3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SSP2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ARINC429T1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ARINC429T2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ARINC429T3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ARINC429T4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9c]"></a>LCD_PUT_BYTE</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLCD_Data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLCD_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCrystal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLCD_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTC
</UL>

<P><STRONG><a name="[a1]"></a>LCD_PUTC</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUT_BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS_Ex
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Display
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDigit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSelDigit
</UL>

<P><STRONG><a name="[a2]"></a>LCD_PUTS</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTC
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeShowFunc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSORFunc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StyleFunc
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_WAKEUP
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_RTCAlarm
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsOnFunc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontFunc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateShowFunc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BookFunc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmShowFunc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutFunc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuItemString
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS_Ex
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOPMode_RTCAlarm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMHelp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisplayError
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHelp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePreAdjustFunc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Regulate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCHelp
</UL>

<P><STRONG><a name="[a3]"></a>LCD_PUTS_Ex</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = LCD_PUTS_Ex &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetResult
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTC
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StyleFunc
</UL>

<P><STRONG><a name="[a7]"></a>ADC_Config</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Config &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_StructInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StyleFunc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
</UL>

<P><STRONG><a name="[ad]"></a>ADC_Temp_Sensor_Config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Temp_Sensor_Config &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSORFunc
</UL>

<P><STRONG><a name="[ae]"></a>LCD_PutPixel</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_PutPixel &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLCD_Data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLCD_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCrystal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLCD_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Circle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
</UL>

<P><STRONG><a name="[af]"></a>LCD_Line</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, gl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_Line &rArr; LCD_PutPixel &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFillingRectangle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRectangle
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFillingTriangle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTriangle
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
</UL>

<P><STRONG><a name="[b0]"></a>LCD_Circle</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, gl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_Circle &rArr; LCD_PutPixel &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFillingCircle
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElementsFunc
</UL>

<P><STRONG><a name="[b1]"></a>GetKey</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeShowFunc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSORFunc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StyleFunc
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_WAKEUP
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_RTCAlarm
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsOnFunc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontFunc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElementsFunc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateShowFunc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BookFunc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmShowFunc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToMenuOnBack
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToMenuOnSel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOPMode_RTCAlarm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMHelp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisplayError
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePreAdjustFunc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCHelp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDigit
</UL>

<P><STRONG><a name="[b3]"></a>ShiftLights</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, leds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ShiftLights
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsOnFunc
</UL>

<P><STRONG><a name="[52]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = main &rArr; Calendar_Init &rArr; DatePreAdjustFunc &rArr; Date_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>DisplayMenuTitle</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeShowFunc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSORFunc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StyleFunc
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_WAKEUP
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_RTCAlarm
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontFunc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElementsFunc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateShowFunc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmShowFunc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOPMode_RTCAlarm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMHelp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePreAdjustFunc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
</UL>

<P><STRONG><a name="[ba]"></a>DisplayMenu</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuItemString
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeShowFunc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeAdjustFunc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSORFunc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StyleFunc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_RTCAlarm
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsOnFunc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateShowFunc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateAdjustFunc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BookFunc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmShowFunc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToMenuOnBack
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToMenuOnSel
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnFunc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelFunc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOPMode_RTCAlarm
</UL>

<P><STRONG><a name="[c2]"></a>BackToMenuOnSel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[c3]"></a>BackToMenuOnBack</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = BackToMenuOnBack &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontFunc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElementsFunc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutFunc
</UL>

<P><STRONG><a name="[bb]"></a>ReadKey</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ReadKey &rArr; ReturnFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnFunc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelFunc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>Menu_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>DisplayFillingCircle</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, menu_gl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DisplayFillingCircle &rArr; LCD_Circle &rArr; LCD_PutPixel &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Circle
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElementsFunc
</UL>

<P><STRONG><a name="[c7]"></a>DisplayRectangle</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, menu_gl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DisplayRectangle &rArr; LCD_Line &rArr; LCD_PutPixel &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElementsFunc
</UL>

<P><STRONG><a name="[c8]"></a>DisplayFillingRectangle</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, menu_gl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DisplayFillingRectangle &rArr; LCD_Line &rArr; LCD_PutPixel &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElementsFunc
</UL>

<P><STRONG><a name="[14]"></a>ElementsFunc</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, menu_gl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ElementsFunc &rArr; BackToMenuOnBack &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFillingRectangle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRectangle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFillingCircle
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFillingTriangle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTriangle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToMenuOnBack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Circle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>IndicatorsFunc</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, menu_gl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = IndicatorsFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetResult
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFillingRectangle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRectangle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Circle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>LightsOnFunc</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, menu_leds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = LightsOnFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftLights
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>FontFunc</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, menu_text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FontFunc &rArr; BackToMenuOnBack &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToMenuOnBack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>StyleFunc</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, menu_text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = StyleFunc &rArr; LCD_PUTS_Ex &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS_Ex
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>BookFunc</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, menu_text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = BookFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>AboutFunc</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, menu_text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = AboutFunc &rArr; BackToMenuOnBack &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToMenuOnBack
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>RTC_Configuration</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Configuration &rArr; RST_CLK_LSEstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSEstatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSEconfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_WaitForUpdate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_SetPrescaler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_ITConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_Calibration
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_Enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTCclkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
</UL>

<P><STRONG><a name="[d3]"></a>ShowSelDigit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTC
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDigit
</UL>

<P><STRONG><a name="[d4]"></a>ReadDigit</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTC
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSelDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Regulate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Regulate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Regulate
</UL>

<P><STRONG><a name="[d5]"></a>Time_Display</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Time_Display &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_GetCounter
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeShowFunc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
</UL>

<P><STRONG><a name="[d8]"></a>Time_Regulate</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Time_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
</UL>

<P><STRONG><a name="[d9]"></a>RTCHelp</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RTCHelp &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeShowFunc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateShowFunc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmShowFunc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePreAdjustFunc
</UL>

<P><STRONG><a name="[da]"></a>TimePreAdjustFunc</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TimePreAdjustFunc &rArr; Time_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_WaitForUpdate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_SetCounter
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_Reset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Regulate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeAdjustFunc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
</UL>

<P><STRONG><a name="[5]"></a>TimeAdjustFunc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = TimeAdjustFunc &rArr; TimePreAdjustFunc &rArr; Time_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>TimeShowFunc</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TimeShowFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCHelp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>Date_Update</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Date_Update &rArr; IsLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_WaitForUpdate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>IsValidDate</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsValidDate &rArr; IsLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Regulate
</UL>

<P><STRONG><a name="[e0]"></a>Date_Display</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Date_Display &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateShowFunc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePreAdjustFunc
</UL>

<P><STRONG><a name="[e1]"></a>Date_Regulate</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Date_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_WaitForUpdate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidDate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePreAdjustFunc
</UL>

<P><STRONG><a name="[e2]"></a>DatePreAdjustFunc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = DatePreAdjustFunc &rArr; Date_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Regulate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Display
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCHelp
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateAdjustFunc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
</UL>

<P><STRONG><a name="[8]"></a>DateAdjustFunc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DateAdjustFunc &rArr; DatePreAdjustFunc &rArr; Date_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePreAdjustFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>DateShowFunc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DateShowFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Display
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCHelp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>Alarm_Display</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Alarm_Display &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmShowFunc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
</UL>

<P><STRONG><a name="[e4]"></a>Alarm_Regulate</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Alarm_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
</UL>

<P><STRONG><a name="[a]"></a>AlarmAdjustFunc</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = AlarmAdjustFunc &rArr; Alarm_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_WaitForUpdate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_SetAlarm
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_ITConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Regulate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCHelp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>AlarmShowFunc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = AlarmShowFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCHelp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[b7]"></a>Calendar_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Calendar_Init &rArr; DatePreAdjustFunc &rArr; Date_Regulate &rArr; ReadDigit &rArr; ShowSelDigit &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_WaitForUpdate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_SetCounter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_GetCounter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePreAdjustFunc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Update
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>TSENSORFunc</STRONG> (Thumb, 708 bytes, Stack size 32 bytes, menu_tsensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TSENSORFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_ITConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetResult
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temp_Sensor_Config
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[e7]"></a>UARTConfiguration</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, menu_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTConfiguration &rArr; UART_BRGInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BRGInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
</UL>

<P><STRONG><a name="[ea]"></a>UARTHelp</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, menu_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = UARTHelp &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
</UL>

<P><STRONG><a name="[eb]"></a>UARTDisplayError</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, menu_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UARTDisplayError &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFunc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverFuncFIFODemo
</UL>

<P><STRONG><a name="[46]"></a>SenderFuncFIFODemo</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, menu_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SenderFuncFIFODemo
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_uart.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>ReceiverFuncFIFODemo</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, menu_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ReceiverFuncFIFODemo &rArr; UARTDisplayError &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisplayError
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwFIFOFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_uart.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>UARTwFIFOFunc</STRONG> (Thumb, 796 bytes, Stack size 48 bytes, menu_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UARTwFIFOFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMACmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverFuncFIFODemo
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenderFuncFIFODemo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHelp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>UARTFunc</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, menu_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = UARTFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTC
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisplayError
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHelp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>USB_CDC_RecieveData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menu_vcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_CDC_RecieveData &rArr; SenderFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenderFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_OnDataReceive
</UL>

<P><STRONG><a name="[7f]"></a>USB_CDC_GetLineCoding</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menu_vcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ClassRequest
</UL>

<P><STRONG><a name="[7d]"></a>USB_CDC_SetLineCoding</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, menu_vcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USB_CDC_SetLineCoding &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_DoDataOut
</UL>

<P><STRONG><a name="[fe]"></a>VCOMHelp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, menu_vcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = VCOMHelp &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
</UL>

<P><STRONG><a name="[17]"></a>VCOMFunc</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, menu_vcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = VCOMFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIcmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevicePowerOff
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ReceiveStop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMHelp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_USB
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[b9]"></a>LowPower_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_lowpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LowPower_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>Clock_SaveConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menu_lowpower.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOPMode_RTCAlarm
</UL>

<P><STRONG><a name="[104]"></a>Clock_RestoreConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menu_lowpower.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOPMode_RTCAlarm
</UL>

<P><STRONG><a name="[c]"></a>STANDBYMode_WAKEUP</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, menu_lowpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = STANDBYMode_WAKEUP &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnterSTANDBYMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>STANDBYMode_RTCAlarm</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, menu_lowpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = STANDBYMode_RTCAlarm &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnterSTANDBYMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>STOPMode_RTCAlarm</STRONG> (Thumb, 694 bytes, Stack size 8 bytes, menu_lowpower.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnterSTANDBYMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_RestoreConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SaveConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_RestoreConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SaveConfig
</UL>

<P><STRONG><a name="[106]"></a>SysTickStart</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
</UL>

<P><STRONG><a name="[107]"></a>SysTickStop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
</UL>

<P><STRONG><a name="[a5]"></a>SysTickDelay</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickStop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickStart
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS_Ex
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Regulate
</UL>

<P><STRONG><a name="[108]"></a>ExtBus_Setup</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, demo_init_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ExtBus_Setup &rArr; EBC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_StructInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[10b]"></a>ClockConfigure</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, demo_init_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClockConfigure &rArr; RST_CLK_CPU_PLLstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkPrescaler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLcmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLuse
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLconfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEconfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[b6]"></a>Demo_Init</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, demo_init_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Demo_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfigure
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBus_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>ReadLCD_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
</UL>

<P><STRONG><a name="[111]"></a>ResetLCD</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ResetLCD &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pause
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhileStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
</UL>

<P><STRONG><a name="[9d]"></a>SetCrystal</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetCrystal &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Write
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhileStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUT_BYTE
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
</UL>

<P><STRONG><a name="[9e]"></a>WriteLCD_Cmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WriteLCD_Cmd &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhileStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUT_BYTE
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
</UL>

<P><STRONG><a name="[a0]"></a>WriteLCD_Data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhileStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUT_BYTE
</UL>

<P><STRONG><a name="[9f]"></a>ReadLCD_Data</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ReadLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhileStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUT_BYTE
</UL>

<P><STRONG><a name="[10d]"></a>LCD_INIT</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_INIT &rArr; WriteLCD_Cmd &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLCD_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCrystal
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLCD
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhileStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[be]"></a>LCD_CLS</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_CLS &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLCD_Data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLCD_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCrystal
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhileStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeShowFunc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSORFunc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StyleFunc
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_WAKEUP
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STANDBYMode_RTCAlarm
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsOnFunc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatorsFunc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontFunc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElementsFunc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateShowFunc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BookFunc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmShowFunc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmAdjustFunc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutFunc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOPMode_RTCAlarm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMHelp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHelp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePreAdjustFunc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePreAdjustFunc
</UL>

<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mdr1986ve1t_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART1_IRQHandler &rArr; UARTx_HandlerWork
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_HandlerWork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mdr1986ve1t_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_IRQHandler &rArr; UARTx_HandlerWork
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_HandlerWork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mdr1986ve1t_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_IRQHandler &rArr; ADC1_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_ITConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_ClearOverwriteFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetFlagStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>BKP_IRQHandler</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, mdr1986ve1t_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BKP_IRQHandler &rArr; Date_Update &rArr; IsLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_GetFlagStatus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_WaitForUpdate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_SetCounter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_GetCounter
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_RTC_ITConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuTitle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuItemString
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS_Ex
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDAConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_CalcNandCycles
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_CalcWaitStates
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLeapYear
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSORFunc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Regulate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Display
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
</UL>

<P><STRONG><a name="[1b8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[53]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1bb]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1bc]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1bd]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdr32f9qx_dma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUT_BYTE
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SetLineCoding
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3e]"></a>USB_CDC_OnDataReceive</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mdr32f9qx_usb_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_CDC_OnDataReceive &rArr; USB_EP_doDataOut &rArr; USB_EP_Idle &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_RecieveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr32f9qx_usb_cdc.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>USB_CDC_OnDataSent</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mdr32f9qx_usb_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_CDC_OnDataSent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr32f9qx_usb_cdc.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>USB_CDC_DoDataOut</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mdr32f9qx_usb_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USB_CDC_DoDataOut &rArr; USB_CDC_SetLineCoding &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SetLineCoding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr32f9qx_usb_cdc.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>USB_EP_SetReady</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSIS
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxCTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Idle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Stall
</UL>

<P><STRONG><a name="[85]"></a>USB_EP_sendInDataPortion</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_EP_sendInDataPortion &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SEPxToggleEPDATASEQ
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxTXFDC
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxTXFD
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxCTRL
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
</UL>

<P><STRONG><a name="[42]"></a>USB_Device_setAddressWork</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_Device_setAddressWork
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr32f9qx_usb_device.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>DisplayMenuItemString</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DisplayMenuItemString &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>

<P><STRONG><a name="[10]"></a>IdleFunc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>SelFunc</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SelFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>

<P><STRONG><a name="[c0]"></a>UpFunc</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UpFunc &rArr; DisplayMenuItemString &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuItemString
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>

<P><STRONG><a name="[c1]"></a>DownFunc</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DownFunc &rArr; DisplayMenuItemString &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenuItemString
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PUTS
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>

<P><STRONG><a name="[7]"></a>ReturnFunc</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ReturnFunc &rArr; DisplayMenu &rArr; DisplayMenuTitle &rArr; LCD_PUTS &rArr; LCD_PUTC &rArr; LCD_PUT_BYTE &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>DisplayTriangle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, menu_gl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DisplayTriangle &rArr; LCD_Line &rArr; LCD_PutPixel &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElementsFunc
</UL>

<P><STRONG><a name="[c5]"></a>DisplayFillingTriangle</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, menu_gl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DisplayFillingTriangle &rArr; LCD_Line &rArr; LCD_PutPixel &rArr; WriteLCD_Data &rArr; WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElementsFunc
</UL>

<P><STRONG><a name="[dd]"></a>IsLeapYear</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, menu_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidDate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Update
</UL>

<P><STRONG><a name="[f3]"></a>Setup_CPU_Clock</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, menu_vcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Setup_CPU_Clock &rArr; RST_CLK_CPU_PLLstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkPrescaler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLcmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLuse
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLconfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEconfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
</UL>

<P><STRONG><a name="[f9]"></a>Setup_USB</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, menu_vcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Setup_USB &rArr; USB_CDC_Reset &rArr; USB_EP_doDataOut &rArr; USB_EP_Idle &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSIM
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevicePowerOn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Reset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
</UL>

<P><STRONG><a name="[48]"></a>SenderFunc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, menu_vcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SenderFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_RecieveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_vcom.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>UARTConfiguration</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, menu_vcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UARTConfiguration &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BRGInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOMFunc
</UL>

<P><STRONG><a name="[47]"></a>ReceiverFunc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu_vcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReceiverFunc &rArr; USB_CDC_SendData &rArr; USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady &rArr; USB_SetSEPxCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_vcom.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_vcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfiguration
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_USB
</UL>

<P><STRONG><a name="[ff]"></a>PORT_SaveConfig</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, menu_lowpower.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOPMode_RTCAlarm
</UL>

<P><STRONG><a name="[105]"></a>PORT_RestoreConfig</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, menu_lowpower.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOPMode_RTCAlarm
</UL>

<P><STRONG><a name="[10e]"></a>GetStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLCD_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhileStatus
</UL>

<P><STRONG><a name="[110]"></a>WhileStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WhileStatus &rArr; GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLCD_Data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLCD_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCrystal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLCD_Data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLCD
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
</UL>

<P><STRONG><a name="[113]"></a>Pause</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd_mdr1986ve1t.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pause
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLCD
</UL>

<P><STRONG><a name="[114]"></a>UARTx_HandlerWork</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mdr1986ve1t_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTx_HandlerWork
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[11a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
