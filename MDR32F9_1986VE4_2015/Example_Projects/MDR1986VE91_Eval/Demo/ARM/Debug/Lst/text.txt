; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\text.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\text.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\text.crf ..\..\src\text.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_PUT_BYTE PROC
;;;65     *******************************************************************************/
;;;66     void LCD_PUT_BYTE(uint8_t x, uint8_t y, uint8_t data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;67     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;68       uint32_t tmp_data, page, shift_num, shift_num_ex;
;;;69     
;;;70       if ((x>MAX_X)|(y>MAX_Y))
00000a  2c7f              CMP      r4,#0x7f
00000c  dd01              BLE      |L1.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L1.20|
                  |L1.18|
000012  2000              MOVS     r0,#0
                  |L1.20|
000014  2f3f              CMP      r7,#0x3f
000016  dd01              BLE      |L1.28|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L1.30|
                  |L1.28|
00001c  2100              MOVS     r1,#0
                  |L1.30|
00001e  4308              ORRS     r0,r0,r1
000020  d001              BEQ      |L1.38|
                  |L1.34|
;;;71       {
;;;72         return;
;;;73       }
;;;74     
;;;75       /* Select crystal and x offset */
;;;76       SetCrystal((LCD_Crystal)(x/64));
;;;77       x %= 64;
;;;78       /* Determine first page and y offset */
;;;79       page = y/8;
;;;80       shift_num = y%8;
;;;81       shift_num_ex = 8 - shift_num;
;;;82     
;;;83       /* First page */
;;;84     
;;;85       /* Read current value */
;;;86       LCD_SET_PAGE(page);
;;;87       LCD_SET_ADDRESS(x);
;;;88       tmp_data = ReadLCD_Data();
;;;89       /* Write modified value */
;;;90       LCD_SET_PAGE(page);
;;;91       LCD_SET_ADDRESS(x);
;;;92       switch (CurrentMethod)
;;;93       {
;;;94         case MET_OR:
;;;95           WriteLCD_Data(tmp_data | (data << shift_num));
;;;96           break;
;;;97         case MET_XOR:
;;;98           WriteLCD_Data(tmp_data ^ (data << shift_num));
;;;99           break;
;;;100        case MET_NOT_OR:
;;;101          WriteLCD_Data(tmp_data | ((data ^ 0xFF) << shift_num));
;;;102          break;
;;;103        case MET_NOT_XOR:
;;;104          WriteLCD_Data(tmp_data ^ ((data ^ 0xFF) << shift_num));
;;;105          break;
;;;106        case MET_AND:
;;;107          WriteLCD_Data(tmp_data & (0xFF >> shift_num_ex) | (data << shift_num));
;;;108          break;
;;;109      }
;;;110    
;;;111      /* Second page (if any) */
;;;112      if (shift_num > 0)
;;;113      {
;;;114        /* Read current value */
;;;115        LCD_SET_PAGE(page+1);
;;;116        LCD_SET_ADDRESS(x);
;;;117        tmp_data = ReadLCD_Data();
;;;118        /* Write modified value */
;;;119        LCD_SET_PAGE(page+1);
;;;120        LCD_SET_ADDRESS(x);
;;;121        switch (CurrentMethod)
;;;122        {
;;;123          case MET_OR:
;;;124            WriteLCD_Data(tmp_data | (data >> shift_num_ex));
;;;125            break;
;;;126          case MET_XOR:
;;;127            WriteLCD_Data(tmp_data ^ (data >> shift_num_ex));
;;;128            break;
;;;129          case MET_NOT_OR:
;;;130            WriteLCD_Data(tmp_data | ((data ^ 0xFF) >> shift_num_ex));
;;;131            break;
;;;132          case MET_NOT_XOR:
;;;133            WriteLCD_Data(tmp_data ^ ((data ^ 0xFF)>> shift_num_ex));
;;;134            break;
;;;135          case MET_AND:
;;;136            WriteLCD_Data(tmp_data & (0xFF << shift_num) | (data >> shift_num_ex));
;;;137            break;
;;;138        }
;;;139      }
;;;140    }
000022  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.38|
000026  46a3              MOV      r11,r4                ;76
000028  17e1              ASRS     r1,r4,#31             ;76
00002a  eb046191          ADD      r1,r4,r1,LSR #26      ;76
00002e  1188              ASRS     r0,r1,#6              ;76
000030  f7fffffe          BL       SetCrystal
000034  4620              MOV      r0,r4                 ;77
000036  17e1              ASRS     r1,r4,#31             ;77
000038  eb046191          ADD      r1,r4,r1,LSR #26      ;77
00003c  1189              ASRS     r1,r1,#6              ;77
00003e  eba41181          SUB      r1,r4,r1,LSL #6       ;77
000042  b2cc              UXTB     r4,r1                 ;77
000044  4638              MOV      r0,r7                 ;79
000046  17f9              ASRS     r1,r7,#31             ;79
000048  eb077151          ADD      r1,r7,r1,LSR #29      ;79
00004c  ea4f0ae1          ASR      r10,r1,#3             ;79
000050  17f9              ASRS     r1,r7,#31             ;80
000052  eb077151          ADD      r1,r7,r1,LSR #29      ;80
000056  10c9              ASRS     r1,r1,#3              ;80
000058  eba708c1          SUB      r8,r7,r1,LSL #3       ;80
00005c  f1c80908          RSB      r9,r8,#8              ;81
000060  f04a00b8          ORR      r0,r10,#0xb8          ;86
000064  f7fffffe          BL       WriteLCD_Cmd
000068  f0440040          ORR      r0,r4,#0x40           ;87
00006c  f7fffffe          BL       WriteLCD_Cmd
000070  f7fffffe          BL       ReadLCD_Data
000074  4606              MOV      r6,r0                 ;88
000076  f04a00b8          ORR      r0,r10,#0xb8          ;90
00007a  f7fffffe          BL       WriteLCD_Cmd
00007e  f0440040          ORR      r0,r4,#0x40           ;91
000082  f7fffffe          BL       WriteLCD_Cmd
000086  48b4              LDR      r0,|L1.856|
000088  7800              LDRB     r0,[r0,#0]            ;92  ; CurrentMethod
00008a  2805              CMP      r0,#5                 ;92
00008c  d22f              BCS      |L1.238|
00008e  e8dff000          TBB      [pc,r0]               ;92
000092  030a              DCB      0x03,0x0a
000094  111a2300          DCB      0x11,0x1a,0x23,0x00
000098  fa05f108          LSL      r1,r5,r8              ;95
00009c  ea410006          ORR      r0,r1,r6              ;95
0000a0  f7fffffe          BL       WriteLCD_Data
0000a4  e023              B        |L1.238|
0000a6  fa05f108          LSL      r1,r5,r8              ;98
0000aa  ea810006          EOR      r0,r1,r6              ;98
0000ae  f7fffffe          BL       WriteLCD_Data
0000b2  e01c              B        |L1.238|
0000b4  f08501ff          EOR      r1,r5,#0xff           ;101
0000b8  fa01f108          LSL      r1,r1,r8              ;101
0000bc  ea410006          ORR      r0,r1,r6              ;101
0000c0  f7fffffe          BL       WriteLCD_Data
0000c4  e013              B        |L1.238|
0000c6  f08501ff          EOR      r1,r5,#0xff           ;104
0000ca  fa01f108          LSL      r1,r1,r8              ;104
0000ce  ea810006          EOR      r0,r1,r6              ;104
0000d2  f7fffffe          BL       WriteLCD_Data
0000d6  e00a              B        |L1.238|
0000d8  21ff              MOVS     r1,#0xff              ;107
0000da  fa41f109          ASR      r1,r1,r9              ;107
0000de  4031              ANDS     r1,r1,r6              ;107
0000e0  fa05f208          LSL      r2,r5,r8              ;107
0000e4  ea410002          ORR      r0,r1,r2              ;107
0000e8  f7fffffe          BL       WriteLCD_Data
0000ec  bf00              NOP                            ;108
                  |L1.238|
0000ee  bf00              NOP                            ;96
0000f0  f1b80f00          CMP      r8,#0                 ;112
0000f4  d04b              BEQ      |L1.398|
0000f6  f10a0101          ADD      r1,r10,#1             ;115
0000fa  f04100b8          ORR      r0,r1,#0xb8           ;115
0000fe  f7fffffe          BL       WriteLCD_Cmd
000102  f0440040          ORR      r0,r4,#0x40           ;116
000106  f7fffffe          BL       WriteLCD_Cmd
00010a  f7fffffe          BL       ReadLCD_Data
00010e  4606              MOV      r6,r0                 ;117
000110  f10a0101          ADD      r1,r10,#1             ;119
000114  f04100b8          ORR      r0,r1,#0xb8           ;119
000118  f7fffffe          BL       WriteLCD_Cmd
00011c  f0440040          ORR      r0,r4,#0x40           ;120
000120  f7fffffe          BL       WriteLCD_Cmd
000124  488c              LDR      r0,|L1.856|
000126  7800              LDRB     r0,[r0,#0]            ;121  ; CurrentMethod
000128  2805              CMP      r0,#5                 ;121
00012a  d22f              BCS      |L1.396|
00012c  e8dff000          TBB      [pc,r0]               ;121
000130  030a111a          DCB      0x03,0x0a,0x11,0x1a
000134  2300              DCB      0x23,0x00
000136  fa45f109          ASR      r1,r5,r9              ;124
00013a  ea410006          ORR      r0,r1,r6              ;124
00013e  f7fffffe          BL       WriteLCD_Data
000142  e023              B        |L1.396|
000144  fa45f109          ASR      r1,r5,r9              ;127
000148  ea810006          EOR      r0,r1,r6              ;127
00014c  f7fffffe          BL       WriteLCD_Data
000150  e01c              B        |L1.396|
000152  f08501ff          EOR      r1,r5,#0xff           ;130
000156  fa41f109          ASR      r1,r1,r9              ;130
00015a  ea410006          ORR      r0,r1,r6              ;130
00015e  f7fffffe          BL       WriteLCD_Data
000162  e013              B        |L1.396|
000164  f08501ff          EOR      r1,r5,#0xff           ;133
000168  fa41f109          ASR      r1,r1,r9              ;133
00016c  ea810006          EOR      r0,r1,r6              ;133
000170  f7fffffe          BL       WriteLCD_Data
000174  e00a              B        |L1.396|
000176  21ff              MOVS     r1,#0xff              ;136
000178  fa01f108          LSL      r1,r1,r8              ;136
00017c  4031              ANDS     r1,r1,r6              ;136
00017e  fa45f209          ASR      r2,r5,r9              ;136
000182  ea410002          ORR      r0,r1,r2              ;136
000186  f7fffffe          BL       WriteLCD_Data
00018a  bf00              NOP                            ;137
                  |L1.396|
00018c  bf00              NOP                            ;125
                  |L1.398|
00018e  bf00              NOP      
000190  e747              B        |L1.34|
;;;141    
                          ENDP

                  LCD_PUTC PROC
;;;152    *******************************************************************************/
;;;153    void LCD_PUTC(uint8_t x, uint8_t y, uint8_t ch)
000192  e92d47f0          PUSH     {r4-r10,lr}
;;;154    {
000196  4607              MOV      r7,r0
000198  4688              MOV      r8,r1
00019a  4691              MOV      r9,r2
;;;155      uint32_t i, j, line;
;;;156      ucint8_t *sym;
;;;157    
;;;158      sym = Get_Char_Data_Addr(ch);
00019c  486f              LDR      r0,|L1.860|
00019e  6800              LDR      r0,[r0,#0]  ; CurrentFont
0001a0  68c2              LDR      r2,[r0,#0xc]
0001a2  486e              LDR      r0,|L1.860|
0001a4  6800              LDR      r0,[r0,#0]  ; CurrentFont
0001a6  6841              LDR      r1,[r0,#4]
0001a8  fb01f109          MUL      r1,r1,r9
0001ac  486b              LDR      r0,|L1.860|
0001ae  6800              LDR      r0,[r0,#0]  ; CurrentFont
0001b0  7800              LDRB     r0,[r0,#0]
0001b2  f0100f07          TST      r0,#7
0001b6  d006              BEQ      |L1.454|
0001b8  4868              LDR      r0,|L1.860|
0001ba  6800              LDR      r0,[r0,#0]  ; CurrentFont
0001bc  6800              LDR      r0,[r0,#0]
0001be  2301              MOVS     r3,#1
0001c0  eb0300d0          ADD      r0,r3,r0,LSR #3
0001c4  e003              B        |L1.462|
                  |L1.454|
0001c6  4865              LDR      r0,|L1.860|
0001c8  6800              LDR      r0,[r0,#0]  ; CurrentFont
0001ca  6800              LDR      r0,[r0,#0]
0001cc  08c0              LSRS     r0,r0,#3
                  |L1.462|
0001ce  fb012a00          MLA      r10,r1,r0,r2
;;;159      line = CurrentFont->Height / 8;
0001d2  4862              LDR      r0,|L1.860|
0001d4  6800              LDR      r0,[r0,#0]  ; CurrentFont
0001d6  6800              LDR      r0,[r0,#0]
0001d8  08c6              LSRS     r6,r0,#3
;;;160      if (CurrentFont->Height % 8)
0001da  4860              LDR      r0,|L1.860|
0001dc  6800              LDR      r0,[r0,#0]  ; CurrentFont
0001de  7800              LDRB     r0,[r0,#0]
0001e0  f0100f07          TST      r0,#7
0001e4  d000              BEQ      |L1.488|
;;;161      {
;;;162        line++;
0001e6  1c76              ADDS     r6,r6,#1
                  |L1.488|
;;;163      }
;;;164    
;;;165      for (j = 0; j < line; j++)
0001e8  2400              MOVS     r4,#0
0001ea  e016              B        |L1.538|
                  |L1.492|
;;;166      {
;;;167        for( i = 0; i < CurrentFont->Width; i++)
0001ec  2500              MOVS     r5,#0
0001ee  e00e              B        |L1.526|
                  |L1.496|
;;;168        {
;;;169          LCD_PUT_BYTE(x + i, y + j*8, sym[i + CurrentFont->Width*j]);
0001f0  4b5a              LDR      r3,|L1.860|
0001f2  681b              LDR      r3,[r3,#0]  ; CurrentFont
0001f4  685b              LDR      r3,[r3,#4]
0001f6  fb035304          MLA      r3,r3,r4,r5
0001fa  f81a2003          LDRB     r2,[r10,r3]
0001fe  eb0803c4          ADD      r3,r8,r4,LSL #3
000202  b2d9              UXTB     r1,r3
000204  197b              ADDS     r3,r7,r5
000206  b2d8              UXTB     r0,r3
000208  f7fffffe          BL       LCD_PUT_BYTE
00020c  1c6d              ADDS     r5,r5,#1              ;167
                  |L1.526|
00020e  4853              LDR      r0,|L1.860|
000210  6800              LDR      r0,[r0,#0]            ;167  ; CurrentFont
000212  6840              LDR      r0,[r0,#4]            ;167
000214  42a8              CMP      r0,r5                 ;167
000216  d8eb              BHI      |L1.496|
000218  1c64              ADDS     r4,r4,#1              ;165
                  |L1.538|
00021a  42b4              CMP      r4,r6                 ;165
00021c  d3e6              BCC      |L1.492|
;;;170        }
;;;171      }
;;;172    }
00021e  e8bd87f0          POP      {r4-r10,pc}
;;;173    
                          ENDP

                  LCD_PUTS PROC
;;;182    *******************************************************************************/
;;;183    void LCD_PUTS(uint8_t x, uint8_t y, ucint8_t* str)
000222  e92d41f0          PUSH     {r4-r8,lr}
;;;184    {
000226  4606              MOV      r6,r0
000228  460f              MOV      r7,r1
00022a  4615              MOV      r5,r2
;;;185      uint32_t i;
;;;186    
;;;187      for (i=0; str[i]; i++)
00022c  2400              MOVS     r4,#0
00022e  e00a              B        |L1.582|
                  |L1.560|
;;;188      {
;;;189        LCD_PUTC(x + i*CurrentFont->Width, y, str[i]);
000230  5d2a              LDRB     r2,[r5,r4]
000232  494a              LDR      r1,|L1.860|
000234  6809              LDR      r1,[r1,#0]  ; CurrentFont
000236  6849              LDR      r1,[r1,#4]
000238  fb046101          MLA      r1,r4,r1,r6
00023c  b2c8              UXTB     r0,r1
00023e  4639              MOV      r1,r7
000240  f7fffffe          BL       LCD_PUTC
000244  1c64              ADDS     r4,r4,#1              ;187
                  |L1.582|
000246  5d28              LDRB     r0,[r5,r4]            ;187
000248  2800              CMP      r0,#0                 ;187
00024a  d1f1              BNE      |L1.560|
;;;190      }
;;;191    }
00024c  e8bd81f0          POP      {r4-r8,pc}
;;;192    
                          ENDP

                  LCD_PUTS_Ex PROC
;;;202    *******************************************************************************/
;;;203    void LCD_PUTS_Ex(uint8_t x, uint8_t y, ucint8_t* str, uint8_t style)
000250  e92d47f0          PUSH     {r4-r10,lr}
;;;204    {
000254  4605              MOV      r5,r0
000256  460e              MOV      r6,r1
000258  4617              MOV      r7,r2
00025a  4698              MOV      r8,r3
;;;205      uint32_t i, DelayCount;
;;;206    
;;;207      LCD_Method OldMethod = CurrentMethod;
00025c  483e              LDR      r0,|L1.856|
00025e  f890a000          LDRB     r10,[r0,#0]  ; CurrentMethod
;;;208    
;;;209      /* Trimming results in animation speed changes */
;;;210      DelayCount = (ADC1_GetResult() & ADC_RESULT_Msk) + 51;
000262  f7fffffe          BL       ADC1_GetResult
000266  f3c0000b          UBFX     r0,r0,#0,#12
00026a  f1000933          ADD      r9,r0,#0x33
;;;211    
;;;212      switch (style)
00026e  f1b80f00          CMP      r8,#0
000272  d009              BEQ      |L1.648|
000274  f1b80f01          CMP      r8,#1
000278  d00f              BEQ      |L1.666|
00027a  f1b80f02          CMP      r8,#2
00027e  d02a              BEQ      |L1.726|
000280  f1b80f03          CMP      r8,#3
000284  d162              BNE      |L1.844|
000286  e04e              B        |L1.806|
                  |L1.648|
;;;213      {
;;;214        /* Simple string */
;;;215        case StyleSimple:
;;;216          CurrentMethod = MET_AND;
000288  2004              MOVS     r0,#4
00028a  4933              LDR      r1,|L1.856|
00028c  7008              STRB     r0,[r1,#0]
;;;217          LCD_PUTS(x, y, str);
00028e  463a              MOV      r2,r7
000290  4631              MOV      r1,r6
000292  4628              MOV      r0,r5
000294  f7fffffe          BL       LCD_PUTS
;;;218          break;
000298  e058              B        |L1.844|
                  |L1.666|
;;;219        /* Blinking strings */
;;;220        case StyleBlink:
;;;221          CurrentMethod = MET_AND;
00029a  2004              MOVS     r0,#4
00029c  492e              LDR      r1,|L1.856|
00029e  7008              STRB     r0,[r1,#0]
;;;222          LCD_PUTS(x, y, str);
0002a0  463a              MOV      r2,r7
0002a2  4631              MOV      r1,r6
0002a4  4628              MOV      r0,r5
0002a6  f7fffffe          BL       LCD_PUTS
;;;223          SysTickDelay(DelayCount);
0002aa  4648              MOV      r0,r9
0002ac  f7fffffe          BL       SysTickDelay
;;;224          for (i = 0; i < strlen((const char *)str); i++)
0002b0  2400              MOVS     r4,#0
0002b2  e00a              B        |L1.714|
                  |L1.692|
;;;225            LCD_PUTC(x + ((CurrentFont->Width) * i), y, 0x20);
0002b4  4929              LDR      r1,|L1.860|
0002b6  6809              LDR      r1,[r1,#0]  ; CurrentFont
0002b8  6849              LDR      r1,[r1,#4]
0002ba  fb015104          MLA      r1,r1,r4,r5
0002be  b2c8              UXTB     r0,r1
0002c0  2220              MOVS     r2,#0x20
0002c2  4631              MOV      r1,r6
0002c4  f7fffffe          BL       LCD_PUTC
0002c8  1c64              ADDS     r4,r4,#1              ;224
                  |L1.714|
0002ca  4638              MOV      r0,r7                 ;224
0002cc  f7fffffe          BL       strlen
0002d0  42a0              CMP      r0,r4                 ;224
0002d2  d8ef              BHI      |L1.692|
;;;226          break;
0002d4  e03a              B        |L1.844|
                  |L1.726|
;;;227        /* String with modified background */
;;;228        case StyleFlipFlop:
;;;229          CurrentMethod = MET_AND;
0002d6  2004              MOVS     r0,#4
0002d8  491f              LDR      r1,|L1.856|
0002da  7008              STRB     r0,[r1,#0]
;;;230          LCD_PUTS(x, y, str);
0002dc  463a              MOV      r2,r7
0002de  4631              MOV      r1,r6
0002e0  4628              MOV      r0,r5
0002e2  f7fffffe          BL       LCD_PUTS
;;;231          CurrentMethod = MET_XOR;
0002e6  2001              MOVS     r0,#1
0002e8  491b              LDR      r1,|L1.856|
0002ea  7008              STRB     r0,[r1,#0]
;;;232          LCD_PUTS(x, y, str);
0002ec  463a              MOV      r2,r7
0002ee  4631              MOV      r1,r6
0002f0  4628              MOV      r0,r5
0002f2  f7fffffe          BL       LCD_PUTS
;;;233          CurrentMethod = MET_NOT_XOR;
0002f6  2003              MOVS     r0,#3
0002f8  4917              LDR      r1,|L1.856|
0002fa  7008              STRB     r0,[r1,#0]
;;;234          LCD_PUTS(x, y, str);
0002fc  463a              MOV      r2,r7
0002fe  4631              MOV      r1,r6
000300  4628              MOV      r0,r5
000302  f7fffffe          BL       LCD_PUTS
;;;235          SysTickDelay(DelayCount * 2);
000306  ea4f0049          LSL      r0,r9,#1
00030a  f7fffffe          BL       SysTickDelay
;;;236          CurrentMethod = MET_AND;
00030e  2004              MOVS     r0,#4
000310  4911              LDR      r1,|L1.856|
000312  7008              STRB     r0,[r1,#0]
;;;237          LCD_PUTS(x, y, str);
000314  463a              MOV      r2,r7
000316  4631              MOV      r1,r6
000318  4628              MOV      r0,r5
00031a  f7fffffe          BL       LCD_PUTS
;;;238          SysTickDelay(DelayCount);
00031e  4648              MOV      r0,r9
000320  f7fffffe          BL       SysTickDelay
;;;239          break;
000324  e012              B        |L1.844|
                  |L1.806|
;;;240        /* Shiver string */
;;;241        case StyleVibratory:
;;;242          CurrentMethod = MET_AND;
000326  2004              MOVS     r0,#4
000328  490b              LDR      r1,|L1.856|
00032a  7008              STRB     r0,[r1,#0]
;;;243          LCD_PUTS(x, y, str);
00032c  463a              MOV      r2,r7
00032e  4631              MOV      r1,r6
000330  4628              MOV      r0,r5
000332  f7fffffe          BL       LCD_PUTS
;;;244          SysTickDelay(DelayCount);
000336  4648              MOV      r0,r9
000338  f7fffffe          BL       SysTickDelay
;;;245          LCD_PUTS(x+1, y+1, str);
00033c  1c72              ADDS     r2,r6,#1
00033e  b2d1              UXTB     r1,r2
000340  1c6a              ADDS     r2,r5,#1
000342  b2d0              UXTB     r0,r2
000344  463a              MOV      r2,r7
000346  f7fffffe          BL       LCD_PUTS
;;;246          break;
00034a  bf00              NOP      
                  |L1.844|
00034c  bf00              NOP                            ;218
;;;247      }
;;;248      CurrentMethod = OldMethod;
00034e  4802              LDR      r0,|L1.856|
000350  f880a000          STRB     r10,[r0,#0]
;;;249    }
000354  e8bd87f0          POP      {r4-r10,pc}
;;;250    
                          ENDP

                  |L1.856|
                          DCD      CurrentMethod
                  |L1.860|
                          DCD      CurrentFont

                          AREA ||.data||, DATA, ALIGN=2

                  CurrentFont
                          DCD      Font_6x8

;*** Start embedded assembler ***

#line 1 "..\\..\\src\\text.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_text_c_b2adcef7____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___6_text_c_b2adcef7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_text_c_b2adcef7____REVSH|
#line 144
|__asm___6_text_c_b2adcef7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
