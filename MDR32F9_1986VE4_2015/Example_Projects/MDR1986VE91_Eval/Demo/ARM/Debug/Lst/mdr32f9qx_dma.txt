; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\mdr32f9qx_dma.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\mdr32f9qx_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\mdr32f9qx_dma.crf ..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_CtrlDataInit PROC
;;;112      */
;;;113    void DMA_CtrlDataInit(DMA_CtrlDataInitTypeDef *DMA_ctrl_data_ptr, DMA_CtrlDataTypeDef *DMA_ctrl_table_ptr)
000000  6882              LDR      r2,[r0,#8]
;;;114    {
;;;115      /* Check DMA configuration parameters */
;;;116      assert_param(IS_DMA_CHANNELS(DMA_Channels_Number));
;;;117      assert_param(IS_DMA_ALTERNATE_DATA(DMA_AlternateData));
;;;118    
;;;119      /* Check the parameters */
;;;120      assert_param(IS_DMA_SOURCE_INC_STATE(DMA_ctrl_data_ptr->DMA_SourceIncSize));
;;;121      assert_param(IS_DMA_DEST_INC_STATE(DMA_ctrl_data_ptr->DMA_DestIncSize));
;;;122      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_ctrl_data_ptr->DMA_MemoryDataSize));
;;;123      assert_param(IS_DMA_MODE(DMA_ctrl_data_ptr->DMA_Mode));
;;;124      assert_param(IS_DMA_CYCLE_SIZE(DMA_ctrl_data_ptr->DMA_CycleSize));
;;;125      assert_param(IS_DMA_CONTINUOUS_NUMBER(DMA_ctrl_data_ptr->DMA_NumContinuous));
;;;126      assert_param(IS_DMA_SOURCE_PROT(DMA_ctrl_data_ptr->DMA_SourceProtCtrl));
;;;127      assert_param(IS_DMA_DEST_PROT(DMA_ctrl_data_ptr->DMA_DestProtCtrl));
;;;128    
;;;129      /* DMA Source Data End Address */
;;;130      if (DMA_ctrl_data_ptr->DMA_SourceIncSize == DMA_SourceIncNo)
000002  f1b26f40          CMP      r2,#0xc000000
000006  d102              BNE      |L1.14|
;;;131      {
;;;132        DMA_ctrl_table_ptr->DMA_SourceEndAddr = DMA_ctrl_data_ptr->DMA_SourceBaseAddr;
000008  6802              LDR      r2,[r0,#0]
00000a  600a              STR      r2,[r1,#0]
00000c  e007              B        |L1.30|
                  |L1.14|
;;;133      }
;;;134      else
;;;135      {
;;;136        DMA_ctrl_table_ptr->DMA_SourceEndAddr = ( DMA_ctrl_data_ptr->DMA_SourceBaseAddr +
00000e  6982              LDR      r2,[r0,#0x18]
000010  1e52              SUBS     r2,r2,#1
000012  6883              LDR      r3,[r0,#8]
000014  0e9b              LSRS     r3,r3,#26
000016  409a              LSLS     r2,r2,r3
000018  6803              LDR      r3,[r0,#0]
00001a  441a              ADD      r2,r2,r3
00001c  600a              STR      r2,[r1,#0]
                  |L1.30|
;;;137            ((DMA_ctrl_data_ptr->DMA_CycleSize - 1) << (DMA_ctrl_data_ptr->DMA_SourceIncSize >> 26)));
;;;138      }
;;;139    
;;;140      /* DMA Destination Data End Address */
;;;141      if (DMA_ctrl_data_ptr->DMA_Mode == DMA_Mode_MemScatterPri)
00001e  6942              LDR      r2,[r0,#0x14]
000020  2a04              CMP      r2,#4
000022  d103              BNE      |L1.44|
;;;142      {
;;;143        /* Memory Scatter-Gather mode */
;;;144        DMA_ctrl_table_ptr->DMA_DestEndAddr = (DMA_ctrl_data_ptr->DMA_DestBaseAddr + 12);
000024  6842              LDR      r2,[r0,#4]
000026  320c              ADDS     r2,r2,#0xc
000028  604a              STR      r2,[r1,#4]
00002a  e00e              B        |L1.74|
                  |L1.44|
;;;145      }
;;;146      else
;;;147      {
;;;148        /* Other modes */
;;;149        if (DMA_ctrl_data_ptr->DMA_DestIncSize == DMA_DestIncNo)
00002c  68c2              LDR      r2,[r0,#0xc]
00002e  f1b24f40          CMP      r2,#0xc0000000
000032  d102              BNE      |L1.58|
;;;150        {
;;;151          DMA_ctrl_table_ptr->DMA_DestEndAddr = DMA_ctrl_data_ptr->DMA_DestBaseAddr;
000034  6842              LDR      r2,[r0,#4]
000036  604a              STR      r2,[r1,#4]
000038  e007              B        |L1.74|
                  |L1.58|
;;;152        }
;;;153        else
;;;154        {
;;;155          DMA_ctrl_table_ptr->DMA_DestEndAddr = ( DMA_ctrl_data_ptr->DMA_DestBaseAddr +
00003a  6982              LDR      r2,[r0,#0x18]
00003c  1e52              SUBS     r2,r2,#1
00003e  68c3              LDR      r3,[r0,#0xc]
000040  0f9b              LSRS     r3,r3,#30
000042  409a              LSLS     r2,r2,r3
000044  6843              LDR      r3,[r0,#4]
000046  441a              ADD      r2,r2,r3
000048  604a              STR      r2,[r1,#4]
                  |L1.74|
;;;156            ((DMA_ctrl_data_ptr->DMA_CycleSize - 1) << (DMA_ctrl_data_ptr->DMA_DestIncSize >> 30)));
;;;157        }
;;;158      }
;;;159    
;;;160      /* DMA Control Data */
;;;161      DMA_ctrl_table_ptr->DMA_Control = (DMA_ctrl_data_ptr->DMA_DestIncSize     |
00004a  e9d02303          LDRD     r2,r3,[r0,#0xc]
00004e  431a              ORRS     r2,r2,r3
000050  6883              LDR      r3,[r0,#8]
000052  431a              ORRS     r2,r2,r3
000054  6a43              LDR      r3,[r0,#0x24]
000056  431a              ORRS     r2,r2,r3
000058  6a03              LDR      r3,[r0,#0x20]
00005a  431a              ORRS     r2,r2,r3
00005c  69c3              LDR      r3,[r0,#0x1c]
00005e  431a              ORRS     r2,r2,r3
000060  6983              LDR      r3,[r0,#0x18]
000062  1e5b              SUBS     r3,r3,#1
000064  ea421203          ORR      r2,r2,r3,LSL #4
000068  6943              LDR      r3,[r0,#0x14]
00006a  431a              ORRS     r2,r2,r3
00006c  608a              STR      r2,[r1,#8]
;;;162                                         DMA_ctrl_data_ptr->DMA_MemoryDataSize  |
;;;163                                         DMA_ctrl_data_ptr->DMA_SourceIncSize   |
;;;164                                         DMA_ctrl_data_ptr->DMA_DestProtCtrl    |
;;;165                                         DMA_ctrl_data_ptr->DMA_SourceProtCtrl  |
;;;166                                         DMA_ctrl_data_ptr->DMA_NumContinuous   |
;;;167                                         ((DMA_ctrl_data_ptr->DMA_CycleSize - 1) << 4)  |
;;;168                                         DMA_ctrl_data_ptr->DMA_Mode);
;;;169    }
00006e  4770              BX       lr
;;;170    
                          ENDP

                  DMA_DeInit PROC
;;;175      */
;;;176    void DMA_DeInit(void)
000070  2000              MOVS     r0,#0
;;;177    {
;;;178      MDR_DMA->CFG = 0;                           /* Master Enable Off */
000072  499b              LDR      r1,|L1.736|
000074  6048              STR      r0,[r1,#4]
;;;179      MDR_DMA->CTRL_BASE_PTR = 0;                 /* Control data base pointer */
000076  6088              STR      r0,[r1,#8]
;;;180      MDR_DMA->CHNL_SW_REQUEST = 0;               /* Disable all sw requests */
000078  6148              STR      r0,[r1,#0x14]
;;;181      MDR_DMA->CHNL_USEBURST_CLR = 0xFFFFFFFF;    /* Disable burst mode */
00007a  1e40              SUBS     r0,r0,#1
00007c  61c8              STR      r0,[r1,#0x1c]
;;;182      MDR_DMA->CHNL_REQ_MASK_CLR = 0xFFFFFFFF;    /* Clear mask request */
00007e  6248              STR      r0,[r1,#0x24]
;;;183      MDR_DMA->CHNL_ENABLE_CLR = 0xFFFFFFFF;      /* Clear channel enable */
000080  62c8              STR      r0,[r1,#0x2c]
;;;184      MDR_DMA->CHNL_PRI_ALT_CLR = 0xFFFFFFFF;     /* Reset to primary data structure */
000082  6348              STR      r0,[r1,#0x34]
;;;185      MDR_DMA->CHNL_PRIORITY_CLR = 0xFFFFFFFF;    /* Reset to default priority */
000084  63c8              STR      r0,[r1,#0x3c]
;;;186      MDR_DMA->ERR_CLR = 0x01;                    /* Clear dma_err status */
000086  2001              MOVS     r0,#1
000088  64c8              STR      r0,[r1,#0x4c]
;;;187    }
00008a  4770              BX       lr
;;;188    
                          ENDP

                  DMA_CtrlInit PROC
;;;198      */
;;;199    void DMA_CtrlInit(uint8_t DMA_Channel, uint8_t DMA_CtrlDataType,  DMA_CtrlDataInitTypeDef* DMA_CtrlStruct)
00008c  b5f0              PUSH     {r4-r7,lr}
;;;200    {
00008e  4604              MOV      r4,r0
000090  460d              MOV      r5,r1
000092  4616              MOV      r6,r2
;;;201      /* Primary Control Data Init */
;;;202      if (DMA_CtrlDataType == DMA_CTRL_DATA_PRIMARY)
000094  b935              CBNZ     r5,|L1.164|
;;;203      {
;;;204        DMA_CtrlDataInit(DMA_CtrlStruct, &DMA_ControlTable[DMA_Channel]);
000096  4893              LDR      r0,|L1.740|
000098  eb001104          ADD      r1,r0,r4,LSL #4
00009c  4630              MOV      r0,r6
00009e  f7fffffe          BL       DMA_CtrlDataInit
0000a2  e008              B        |L1.182|
                  |L1.164|
;;;205      }
;;;206    #if (DMA_AlternateData == 1)
;;;207      /* Alternate Control Data Init */
;;;208      else
;;;209      {
;;;210        uint32_t ptr = (MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
0000a4  488e              LDR      r0,|L1.736|
0000a6  68c0              LDR      r0,[r0,#0xc]
0000a8  eb001704          ADD      r7,r0,r4,LSL #4
;;;211        DMA_CtrlDataInit(DMA_CtrlStruct, (DMA_CtrlDataTypeDef *)ptr);
0000ac  4639              MOV      r1,r7
0000ae  4630              MOV      r0,r6
0000b0  f7fffffe          BL       DMA_CtrlDataInit
;;;212      }
0000b4  bf00              NOP      
                  |L1.182|
;;;213    #endif
;;;214    }
0000b6  bdf0              POP      {r4-r7,pc}
;;;215    
                          ENDP

                  DMA_SG_CtrlInit PROC
;;;225      */
;;;226    void DMA_SG_CtrlInit(uint32_t DMA_Task, DMA_CtrlDataTypeDef *DMA_SG_TaskArray,  DMA_CtrlDataInitTypeDef* DMA_CtrlStruct)
0000b8  b570              PUSH     {r4-r6,lr}
;;;227    {
0000ba  4604              MOV      r4,r0
0000bc  460d              MOV      r5,r1
0000be  4616              MOV      r6,r2
;;;228      DMA_CtrlDataInit(DMA_CtrlStruct, &DMA_SG_TaskArray[DMA_Task]);
0000c0  eb051104          ADD      r1,r5,r4,LSL #4
0000c4  4630              MOV      r0,r6
0000c6  f7fffffe          BL       DMA_CtrlDataInit
;;;229    }
0000ca  bd70              POP      {r4-r6,pc}
;;;230    
                          ENDP

                  DMA_SG_Init PROC
;;;237      */
;;;238    void DMA_SG_Init( uint8_t DMA_Channel, DMA_Channel_SG_InitTypeDef *DMA_SG_InitStruct)
0000cc  b530              PUSH     {r4,r5,lr}
;;;239    {
0000ce  b08a              SUB      sp,sp,#0x28
0000d0  4604              MOV      r4,r0
0000d2  460d              MOV      r5,r1
;;;240      DMA_CtrlDataInitTypeDef DMA_PriCtrlData;
;;;241    
;;;242      /* Check the parameters */
;;;243      assert_param(DMA_AlternateData == 1);
;;;244      assert_param(DMA_SG_InitStruct != 0);
;;;245      assert_param(DMA_SG_InitStruct->DMA_SG_TaskNumber != 0);
;;;246      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;247      assert_param(IS_DMA_AHB_PROT(DMA_SG_InitStruct->DMA_ProtCtrl));
;;;248      assert_param(IS_DMA_PRIORITY(DMA_SG_InitStruct->DMA_Priority));
;;;249      assert_param(IS_DMA_SOURCE_PROT(DMA_SG_InitStruct->DMA_SourceProtCtrl));
;;;250      assert_param(IS_DMA_DEST_PROT(DMA_SG_InitStruct->DMA_DestProtCtrl));
;;;251      assert_param(IS_DMA_BURST(DMA_SG_InitStruct->DMA_UseBurst));
;;;252    
;;;253      /* Check the CTRL_BASE_PTR initialisation */
;;;254      MDR_DMA->CTRL_BASE_PTR = (uint32_t)DMA_ControlTable;
0000d4  4883              LDR      r0,|L1.740|
0000d6  4982              LDR      r1,|L1.736|
0000d8  6088              STR      r0,[r1,#8]
;;;255    
;;;256      /* Primary Control Data Init */
;;;257      DMA_PriCtrlData.DMA_SourceBaseAddr = (uint32_t)(DMA_SG_InitStruct->DMA_SG_TaskArray);
0000da  6828              LDR      r0,[r5,#0]
0000dc  9000              STR      r0,[sp,#0]
;;;258      DMA_PriCtrlData.DMA_DestBaseAddr = (MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
0000de  4608              MOV      r0,r1
0000e0  68c0              LDR      r0,[r0,#0xc]
0000e2  eb001004          ADD      r0,r0,r4,LSL #4
0000e6  9001              STR      r0,[sp,#4]
;;;259      DMA_PriCtrlData.DMA_SourceIncSize = DMA_SourceIncWord;
0000e8  f04f6000          MOV      r0,#0x8000000
0000ec  9002              STR      r0,[sp,#8]
;;;260      DMA_PriCtrlData.DMA_DestIncSize = DMA_DestIncWord;
0000ee  0100              LSLS     r0,r0,#4
0000f0  9003              STR      r0,[sp,#0xc]
;;;261      DMA_PriCtrlData.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
0000f2  f04f5008          MOV      r0,#0x22000000
0000f6  9004              STR      r0,[sp,#0x10]
;;;262      DMA_PriCtrlData.DMA_Mode = DMA_Mode_MemScatterPri;
0000f8  2004              MOVS     r0,#4
0000fa  9005              STR      r0,[sp,#0x14]
;;;263      DMA_PriCtrlData.DMA_CycleSize = DMA_SG_InitStruct->DMA_SG_TaskNumber << 2;
0000fc  6868              LDR      r0,[r5,#4]
0000fe  0080              LSLS     r0,r0,#2
000100  9006              STR      r0,[sp,#0x18]
;;;264      DMA_PriCtrlData.DMA_NumContinuous = DMA_Transfers_4;
000102  f44f4000          MOV      r0,#0x8000
000106  9007              STR      r0,[sp,#0x1c]
;;;265      DMA_PriCtrlData.DMA_SourceProtCtrl = DMA_SG_InitStruct->DMA_SourceProtCtrl;
000108  68a8              LDR      r0,[r5,#8]
00010a  9008              STR      r0,[sp,#0x20]
;;;266      DMA_PriCtrlData.DMA_DestProtCtrl = DMA_SG_InitStruct->DMA_DestProtCtrl;
00010c  68e8              LDR      r0,[r5,#0xc]
00010e  9009              STR      r0,[sp,#0x24]
;;;267    
;;;268      DMA_CtrlDataInit(&DMA_PriCtrlData, &DMA_ControlTable[DMA_Channel]);
000110  4874              LDR      r0,|L1.740|
000112  eb001104          ADD      r1,r0,r4,LSL #4
000116  4668              MOV      r0,sp
000118  f7fffffe          BL       DMA_CtrlDataInit
;;;269    
;;;270      /* DMA configuration register */
;;;271      MDR_DMA->CFG = DMA_CFG_MASTER_ENABLE | DMA_SG_InitStruct->DMA_ProtCtrl;
00011c  6928              LDR      r0,[r5,#0x10]
00011e  f0400001          ORR      r0,r0,#1
000122  496f              LDR      r1,|L1.736|
000124  6048              STR      r0,[r1,#4]
;;;272    
;;;273      /* Burst mode */
;;;274      if (DMA_SG_InitStruct->DMA_UseBurst == DMA_BurstSet)
000126  7d68              LDRB     r0,[r5,#0x15]
000128  2801              CMP      r0,#1
00012a  d102              BNE      |L1.306|
;;;275      {
;;;276        MDR_DMA->CHNL_USEBURST_SET = (1 << DMA_Channel);
00012c  40a0              LSLS     r0,r0,r4
00012e  6188              STR      r0,[r1,#0x18]
000130  e003              B        |L1.314|
                  |L1.306|
;;;277      }
;;;278      else
;;;279      {
;;;280        MDR_DMA->CHNL_USEBURST_CLR = (1 << DMA_Channel);
000132  2001              MOVS     r0,#1
000134  40a0              LSLS     r0,r0,r4
000136  496a              LDR      r1,|L1.736|
000138  61c8              STR      r0,[r1,#0x1c]
                  |L1.314|
;;;281      }
;;;282    
;;;283      /* Channel mask clear */
;;;284      MDR_DMA->CHNL_REQ_MASK_CLR = (1 << DMA_Channel);
00013a  2001              MOVS     r0,#1
00013c  40a0              LSLS     r0,r0,r4
00013e  4968              LDR      r1,|L1.736|
000140  6248              STR      r0,[r1,#0x24]
;;;285    
;;;286      /* Enable channel */
;;;287      MDR_DMA->CHNL_ENABLE_SET = (1 << DMA_Channel);
000142  2001              MOVS     r0,#1
000144  40a0              LSLS     r0,r0,r4
000146  6288              STR      r0,[r1,#0x28]
;;;288    
;;;289      /* Primary - Alternate control data structure selection */
;;;290      MDR_DMA->CHNL_PRI_ALT_CLR = (1 << DMA_Channel);       /* Use Primary */
000148  2001              MOVS     r0,#1
00014a  40a0              LSLS     r0,r0,r4
00014c  6348              STR      r0,[r1,#0x34]
;;;291    
;;;292      /* Channel priority set */
;;;293      if (DMA_SG_InitStruct->DMA_Priority == DMA_Priority_High)
00014e  7d28              LDRB     r0,[r5,#0x14]
000150  2801              CMP      r0,#1
000152  d102              BNE      |L1.346|
;;;294      {
;;;295        MDR_DMA->CHNL_PRIORITY_SET = (1 << DMA_Channel);      /* High priority */
000154  40a0              LSLS     r0,r0,r4
000156  6388              STR      r0,[r1,#0x38]
000158  e003              B        |L1.354|
                  |L1.346|
;;;296      }
;;;297      else
;;;298      {
;;;299        MDR_DMA->CHNL_PRIORITY_CLR = (1 << DMA_Channel);      /* Default priority */
00015a  2001              MOVS     r0,#1
00015c  40a0              LSLS     r0,r0,r4
00015e  4960              LDR      r1,|L1.736|
000160  63c8              STR      r0,[r1,#0x3c]
                  |L1.354|
;;;300      }
;;;301    }
000162  b00a              ADD      sp,sp,#0x28
000164  bd30              POP      {r4,r5,pc}
;;;302    
                          ENDP

                  DMA_Init PROC
;;;310      */
;;;311    void DMA_Init(uint8_t DMA_Channel, DMA_ChannelInitTypeDef* DMA_InitStruct)
000166  b570              PUSH     {r4-r6,lr}
;;;312    {
000168  4604              MOV      r4,r0
00016a  460d              MOV      r5,r1
;;;313      /* Check the parameters */
;;;314      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;315      assert_param(IS_DMA_AHB_PROT(DMA_InitStruct->DMA_ProtCtrl));
;;;316      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;317      assert_param(IS_DMA_BURST(DMA_InitStruct->DMA_UseBurst));
;;;318      assert_param(IS_DMA_SELECT_DATA_STRUCTURE(DMA_InitStruct->DMA_SelectDataStructure));
;;;319    
;;;320      /* Check the CTRL_BASE_PTR initialisation */
;;;321      MDR_DMA->CTRL_BASE_PTR = (uint32_t)DMA_ControlTable;
00016c  485d              LDR      r0,|L1.740|
00016e  495c              LDR      r1,|L1.736|
000170  6088              STR      r0,[r1,#8]
;;;322    
;;;323      /* Primary Control Data Init */
;;;324      if (DMA_InitStruct->DMA_PriCtrlData)
000172  6828              LDR      r0,[r5,#0]
000174  b128              CBZ      r0,|L1.386|
;;;325      {
;;;326        DMA_CtrlDataInit(DMA_InitStruct->DMA_PriCtrlData, &DMA_ControlTable[DMA_Channel]);
000176  4a5b              LDR      r2,|L1.740|
000178  eb021104          ADD      r1,r2,r4,LSL #4
00017c  6828              LDR      r0,[r5,#0]
00017e  f7fffffe          BL       DMA_CtrlDataInit
                  |L1.386|
;;;327      }
;;;328    
;;;329    #if (DMA_AlternateData == 1)
;;;330      /* Alternate Control Data Init */
;;;331      if (DMA_InitStruct->DMA_AltCtrlData)
000182  6868              LDR      r0,[r5,#4]
000184  b140              CBZ      r0,|L1.408|
;;;332      {
;;;333        uint32_t ptr = (MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
000186  4856              LDR      r0,|L1.736|
000188  68c0              LDR      r0,[r0,#0xc]
00018a  eb001604          ADD      r6,r0,r4,LSL #4
;;;334        DMA_CtrlDataInit(DMA_InitStruct->DMA_AltCtrlData, (DMA_CtrlDataTypeDef *)ptr);
00018e  4631              MOV      r1,r6
000190  6868              LDR      r0,[r5,#4]
000192  f7fffffe          BL       DMA_CtrlDataInit
;;;335      }
000196  bf00              NOP      
                  |L1.408|
;;;336    #endif
;;;337    
;;;338      /* DMA configuration register */
;;;339      MDR_DMA->CFG = DMA_CFG_MASTER_ENABLE | DMA_InitStruct->DMA_ProtCtrl;
000198  68a8              LDR      r0,[r5,#8]
00019a  f0400001          ORR      r0,r0,#1
00019e  4950              LDR      r1,|L1.736|
0001a0  6048              STR      r0,[r1,#4]
;;;340    
;;;341      /* Burst mode */
;;;342      if (DMA_InitStruct->DMA_UseBurst == DMA_BurstSet)
0001a2  7b68              LDRB     r0,[r5,#0xd]
0001a4  2801              CMP      r0,#1
0001a6  d102              BNE      |L1.430|
;;;343      {
;;;344        MDR_DMA->CHNL_USEBURST_SET = (1 << DMA_Channel);
0001a8  40a0              LSLS     r0,r0,r4
0001aa  6188              STR      r0,[r1,#0x18]
0001ac  e003              B        |L1.438|
                  |L1.430|
;;;345      }
;;;346      else
;;;347      {
;;;348        MDR_DMA->CHNL_USEBURST_CLR = (1 << DMA_Channel);
0001ae  2001              MOVS     r0,#1
0001b0  40a0              LSLS     r0,r0,r4
0001b2  494b              LDR      r1,|L1.736|
0001b4  61c8              STR      r0,[r1,#0x1c]
                  |L1.438|
;;;349      }
;;;350    
;;;351      /* Channel mask clear */
;;;352      MDR_DMA->CHNL_REQ_MASK_CLR = (1 << DMA_Channel);
0001b6  2001              MOVS     r0,#1
0001b8  40a0              LSLS     r0,r0,r4
0001ba  4949              LDR      r1,|L1.736|
0001bc  6248              STR      r0,[r1,#0x24]
;;;353    
;;;354      /* Enable channel */
;;;355      MDR_DMA->CHNL_ENABLE_SET = (1 << DMA_Channel);
0001be  2001              MOVS     r0,#1
0001c0  40a0              LSLS     r0,r0,r4
0001c2  6288              STR      r0,[r1,#0x28]
;;;356    
;;;357      /* Primary - Alternate control data structure selection */
;;;358      if (DMA_InitStruct->DMA_SelectDataStructure == DMA_CTRL_DATA_PRIMARY)
0001c4  7ba8              LDRB     r0,[r5,#0xe]
0001c6  b918              CBNZ     r0,|L1.464|
;;;359      {
;;;360        MDR_DMA->CHNL_PRI_ALT_CLR = (1 << DMA_Channel);       /* Use Primary */
0001c8  2001              MOVS     r0,#1
0001ca  40a0              LSLS     r0,r0,r4
0001cc  6348              STR      r0,[r1,#0x34]
0001ce  e003              B        |L1.472|
                  |L1.464|
;;;361      }
;;;362      else
;;;363      {
;;;364        MDR_DMA->CHNL_PRI_ALT_SET = (1 << DMA_Channel);       /* Use Alternate */
0001d0  2001              MOVS     r0,#1
0001d2  40a0              LSLS     r0,r0,r4
0001d4  4942              LDR      r1,|L1.736|
0001d6  6308              STR      r0,[r1,#0x30]
                  |L1.472|
;;;365      }
;;;366    
;;;367      /* Channel priority set */
;;;368      if (DMA_InitStruct->DMA_Priority == DMA_Priority_High)
0001d8  7b28              LDRB     r0,[r5,#0xc]
0001da  2801              CMP      r0,#1
0001dc  d103              BNE      |L1.486|
;;;369      {
;;;370        MDR_DMA->CHNL_PRIORITY_SET = (1 << DMA_Channel);      /* High priority */
0001de  40a0              LSLS     r0,r0,r4
0001e0  493f              LDR      r1,|L1.736|
0001e2  6388              STR      r0,[r1,#0x38]
0001e4  e003              B        |L1.494|
                  |L1.486|
;;;371      }
;;;372      else
;;;373      {
;;;374        MDR_DMA->CHNL_PRIORITY_CLR = (1 << DMA_Channel);      /* Default priority */
0001e6  2001              MOVS     r0,#1
0001e8  40a0              LSLS     r0,r0,r4
0001ea  493d              LDR      r1,|L1.736|
0001ec  63c8              STR      r0,[r1,#0x3c]
                  |L1.494|
;;;375      }
;;;376    }
0001ee  bd70              POP      {r4-r6,pc}
;;;377    
                          ENDP

                  DMA_StructInit PROC
;;;383      */
;;;384    void DMA_StructInit(DMA_ChannelInitTypeDef* DMA_InitStruct)
0001f0  2100              MOVS     r1,#0
;;;385    {
;;;386      DMA_InitStruct->DMA_PriCtrlData = 0;
0001f2  6001              STR      r1,[r0,#0]
;;;387      DMA_InitStruct->DMA_AltCtrlData = 0;
0001f4  6041              STR      r1,[r0,#4]
;;;388      DMA_InitStruct->DMA_ProtCtrl = 0;
0001f6  6081              STR      r1,[r0,#8]
;;;389      DMA_InitStruct->DMA_Priority = 0;
0001f8  7301              STRB     r1,[r0,#0xc]
;;;390      DMA_InitStruct->DMA_UseBurst = 0;
0001fa  7341              STRB     r1,[r0,#0xd]
;;;391      DMA_InitStruct->DMA_SelectDataStructure = 0;
0001fc  7381              STRB     r1,[r0,#0xe]
;;;392    }
0001fe  4770              BX       lr
;;;393    
                          ENDP

                  DMA_SG_StructInit PROC
;;;399      */
;;;400    void DMA_SG_StructInit(DMA_Channel_SG_InitTypeDef* DMA_SG_InitStruct)
000200  2100              MOVS     r1,#0
;;;401    {
;;;402      DMA_SG_InitStruct->DMA_SG_TaskArray = 0;
000202  6001              STR      r1,[r0,#0]
;;;403      DMA_SG_InitStruct->DMA_SG_TaskNumber = 0;
000204  6041              STR      r1,[r0,#4]
;;;404      DMA_SG_InitStruct->DMA_SourceProtCtrl = 0;
000206  6081              STR      r1,[r0,#8]
;;;405      DMA_SG_InitStruct->DMA_DestProtCtrl = 0;
000208  60c1              STR      r1,[r0,#0xc]
;;;406      DMA_SG_InitStruct->DMA_ProtCtrl = 0;
00020a  6101              STR      r1,[r0,#0x10]
;;;407      DMA_SG_InitStruct->DMA_Priority = 0;
00020c  7501              STRB     r1,[r0,#0x14]
;;;408      DMA_SG_InitStruct->DMA_UseBurst = 0;
00020e  7541              STRB     r1,[r0,#0x15]
;;;409    }
000210  4770              BX       lr
;;;410    
                          ENDP

                  DMA_Cmd PROC
;;;417      */
;;;418    void DMA_Cmd(uint8_t DMA_Channel, FunctionalState NewState)
000212  2901              CMP      r1,#1
;;;419    {
;;;420      /* Check the parameters */
;;;421      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;422    
;;;423      /* Channel Enable/Disable */
;;;424      if ( NewState == ENABLE)
000214  d104              BNE      |L1.544|
;;;425      {
;;;426        MDR_DMA->CHNL_ENABLE_SET = (1 << DMA_Channel);
000216  2201              MOVS     r2,#1
000218  4082              LSLS     r2,r2,r0
00021a  4b31              LDR      r3,|L1.736|
00021c  629a              STR      r2,[r3,#0x28]
00021e  e003              B        |L1.552|
                  |L1.544|
;;;427      }
;;;428      else
;;;429      {
;;;430        MDR_DMA->CHNL_ENABLE_CLR = (1 << DMA_Channel);
000220  2201              MOVS     r2,#1
000222  4082              LSLS     r2,r2,r0
000224  4b2e              LDR      r3,|L1.736|
000226  62da              STR      r2,[r3,#0x2c]
                  |L1.552|
;;;431      }
;;;432    }
000228  4770              BX       lr
;;;433    
                          ENDP

                  DMA_Request PROC
;;;438      */
;;;439    void DMA_Request(uint8_t DMA_Channel)
00022a  2101              MOVS     r1,#1
;;;440    {
;;;441      /* Check the parameters */
;;;442      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;443    
;;;444      /* Set SW Request */
;;;445      MDR_DMA->CHNL_SW_REQUEST = (1 << DMA_Channel);
00022c  4081              LSLS     r1,r1,r0
00022e  4a2c              LDR      r2,|L1.736|
000230  6151              STR      r1,[r2,#0x14]
;;;446    }
000232  4770              BX       lr
;;;447    
                          ENDP

                  DMA_ClearError PROC
;;;452      */
;;;453    void DMA_ClearError(void)
000234  2001              MOVS     r0,#1
;;;454    {
;;;455      MDR_DMA->ERR_CLR = 0x01;            /* Clear dma_err status */
000236  492a              LDR      r1,|L1.736|
000238  64c8              STR      r0,[r1,#0x4c]
;;;456    }
00023a  4770              BX       lr
;;;457    
                          ENDP

                  DMA_GetCurrTransferCounter PROC
;;;466      */
;;;467    uint32_t DMA_GetCurrTransferCounter(uint8_t DMA_Channel, uint8_t DMA_CtrlData)
00023c  4602              MOV      r2,r0
;;;468    {
00023e  460b              MOV      r3,r1
;;;469      DMA_CtrlDataTypeDef *ptr;     /* Pointer to the channels's data structure */
;;;470    
;;;471      /* Check the parameters */
;;;472      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;473      assert_param(IS_DMA_SELECT_DATA_STRUCTURE(DMA_CtrlData));
;;;474    
;;;475      /* Init the control data pointer */
;;;476      if (DMA_CtrlData == DMA_CTRL_DATA_PRIMARY)
000240  b923              CBNZ     r3,|L1.588|
;;;477      {
;;;478        ptr = (DMA_CtrlDataTypeDef *)(MDR_DMA->CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
000242  4827              LDR      r0,|L1.736|
000244  6880              LDR      r0,[r0,#8]
000246  eb001102          ADD      r1,r0,r2,LSL #4
00024a  e003              B        |L1.596|
                  |L1.588|
;;;479      }
;;;480      else
;;;481      {
;;;482        ptr = (DMA_CtrlDataTypeDef *)(MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
00024c  4824              LDR      r0,|L1.736|
00024e  68c0              LDR      r0,[r0,#0xc]
000250  eb001102          ADD      r1,r0,r2,LSL #4
                  |L1.596|
;;;483      }
;;;484    
;;;485      /* Read the number of remaining transfers */
;;;486      return (((ptr->DMA_Control & DMA_CONTROL_MINUS_1)>>4) + 1);
000254  8908              LDRH     r0,[r1,#8]
000256  f3c01009          UBFX     r0,r0,#4,#10
00025a  1c40              ADDS     r0,r0,#1
;;;487    }
00025c  4770              BX       lr
;;;488    
                          ENDP

                  DMA_GetFlagStatus PROC
;;;503      */
;;;504    FlagStatus DMA_GetFlagStatus(uint8_t DMA_Channel, uint8_t DMA_Flag)
00025e  4602              MOV      r2,r0
;;;505    {
;;;506      /* Check the parameters */
;;;507      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;508      assert_param(IS_DMA_FLAG(DMA_Flag));
;;;509    
;;;510      /* Read Flag Status */
;;;511      switch(DMA_Flag)
000260  2909              CMP      r1,#9
000262  d23a              BCS      |L1.730|
000264  e8dff001          TBB      [pc,r1]
000268  39050a0f          DCB      0x39,0x05,0x0a,0x0f
00026c  161d242b          DCB      0x16,0x1d,0x24,0x2b
000270  3200              DCB      0x32,0x00
;;;512      {
;;;513        case DMA_FLAG_DMA_ENA:
;;;514          return (FlagStatus)(MDR_DMA->STATUS & DMA_STATUS_MASTER_ENABLE);
000272  481b              LDR      r0,|L1.736|
000274  6800              LDR      r0,[r0,#0]
000276  f0000001          AND      r0,r0,#1
                  |L1.634|
;;;515        case DMA_FLAG_DMA_ERR:
;;;516          return (FlagStatus)(MDR_DMA->ERR_CLR & 0x01);
;;;517        case DMA_FLAG_CHNL_ENA:
;;;518          return (FlagStatus)(MDR_DMA->CHNL_ENABLE_SET & (1 << DMA_Channel));
;;;519        case DMA_FLAG_CHNL_MASK:
;;;520          return (FlagStatus)(MDR_DMA->CHNL_REQ_MASK_SET & (1 << DMA_Channel));
;;;521        case DMA_FLAG_CHNL_WAIT:
;;;522          return (FlagStatus)(MDR_DMA->WAITONREQ_STATUS & (1 << DMA_Channel));
;;;523        case DMA_FLAG_CHNL_BURST:
;;;524          return (FlagStatus)(MDR_DMA->CHNL_USEBURST_SET & (1 << DMA_Channel));
;;;525        case DMA_FLAG_CHNL_ALT:
;;;526          return (FlagStatus)(MDR_DMA->CHNL_PRI_ALT_SET & (1 << DMA_Channel));
;;;527        case DMA_FLAG_CHNL_PRIORITY:
;;;528          return (FlagStatus)(MDR_DMA->CHNL_PRIORITY_SET & (1 << DMA_Channel));
;;;529        default:
;;;530          return (FlagStatus)0;
;;;531      }
;;;532    }
00027a  4770              BX       lr
00027c  4818              LDR      r0,|L1.736|
00027e  6cc0              LDR      r0,[r0,#0x4c]         ;516
000280  f0000001          AND      r0,r0,#1              ;516
000284  e7f9              B        |L1.634|
000286  4816              LDR      r0,|L1.736|
000288  6a80              LDR      r0,[r0,#0x28]         ;518
00028a  2301              MOVS     r3,#1                 ;518
00028c  4093              LSLS     r3,r3,r2              ;518
00028e  4018              ANDS     r0,r0,r3              ;518
000290  b2c0              UXTB     r0,r0                 ;518
000292  e7f2              B        |L1.634|
000294  4812              LDR      r0,|L1.736|
000296  6a00              LDR      r0,[r0,#0x20]         ;520
000298  2301              MOVS     r3,#1                 ;520
00029a  4093              LSLS     r3,r3,r2              ;520
00029c  4018              ANDS     r0,r0,r3              ;520
00029e  b2c0              UXTB     r0,r0                 ;520
0002a0  e7eb              B        |L1.634|
0002a2  480f              LDR      r0,|L1.736|
0002a4  6900              LDR      r0,[r0,#0x10]         ;522
0002a6  2301              MOVS     r3,#1                 ;522
0002a8  4093              LSLS     r3,r3,r2              ;522
0002aa  4018              ANDS     r0,r0,r3              ;522
0002ac  b2c0              UXTB     r0,r0                 ;522
0002ae  e7e4              B        |L1.634|
0002b0  480b              LDR      r0,|L1.736|
0002b2  6983              LDR      r3,[r0,#0x18]         ;524
0002b4  2001              MOVS     r0,#1                 ;524
0002b6  4090              LSLS     r0,r0,r2              ;524
0002b8  4003              ANDS     r3,r3,r0              ;524
0002ba  b2d8              UXTB     r0,r3                 ;524
0002bc  e7dd              B        |L1.634|
0002be  4808              LDR      r0,|L1.736|
0002c0  6b03              LDR      r3,[r0,#0x30]         ;526
0002c2  2001              MOVS     r0,#1                 ;526
0002c4  4090              LSLS     r0,r0,r2              ;526
0002c6  4003              ANDS     r3,r3,r0              ;526
0002c8  b2d8              UXTB     r0,r3                 ;526
0002ca  e7d6              B        |L1.634|
0002cc  4804              LDR      r0,|L1.736|
0002ce  6b83              LDR      r3,[r0,#0x38]         ;528
0002d0  2001              MOVS     r0,#1                 ;528
0002d2  4090              LSLS     r0,r0,r2              ;528
0002d4  4003              ANDS     r3,r3,r0              ;528
0002d6  b2d8              UXTB     r0,r3                 ;528
0002d8  e7cf              B        |L1.634|
                  |L1.730|
0002da  2000              MOVS     r0,#0                 ;530
0002dc  e7cd              B        |L1.634|
;;;533    
                          ENDP

0002de  0000              DCW      0x0000
                  |L1.736|
                          DCD      0x40028000
                  |L1.740|
                          DCD      DMA_ControlTable

                          AREA ||.bss||, DATA, NOINIT, ALIGN=10

                  DMA_ControlTable
                          %        1024

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_dma.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_dma_c_605561c4____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___15_MDR32F9Qx_dma_c_605561c4____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_dma_c_605561c4____REVSH|
#line 144
|__asm___15_MDR32F9Qx_dma_c_605561c4____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
