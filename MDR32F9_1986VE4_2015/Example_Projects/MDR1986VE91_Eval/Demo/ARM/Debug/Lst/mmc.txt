; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\mmc.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\mmc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\mmc.crf ..\..\src_fatfs\mmc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  xchg_spi PROC
;;;105    static
;;;106    BYTE xchg_spi (
000000  4601              MOV      r1,r0
;;;107      BYTE dat  /* Data to send */
;;;108    )
;;;109    {
;;;110      SSPxDR = dat;
000002  48f7              LDR      r0,|L1.992|
000004  6081              STR      r1,[r0,#8]
;;;111      while (SSPxSR & 0x10) ;
000006  bf00              NOP      
                  |L1.8|
000008  48f5              LDR      r0,|L1.992|
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  f0100f10          TST      r0,#0x10
000010  d1fa              BNE      |L1.8|
;;;112      return SSPxDR;
000012  48f3              LDR      r0,|L1.992|
000014  6880              LDR      r0,[r0,#8]
000016  b2c0              UXTB     r0,r0
;;;113    }
000018  4770              BX       lr
;;;114    
                          ENDP

                  rcvr_spi_multi PROC
;;;117    static
;;;118    void rcvr_spi_multi (
00001a  b530              PUSH     {r4,r5,lr}
;;;119      BYTE *buff,   /* Pointer to data buffer */
;;;120      UINT btr    /* Number of bytes to receive (16, 64 or 512) */
;;;121    )
;;;122    {
00001c  460a              MOV      r2,r1
;;;123      UINT n = 512;
00001e  f44f7300          MOV      r3,#0x200
;;;124      WORD d;
;;;125    
;;;126    
;;;127      SSPxCR0 = 0x000F;       /* Select 16-bit mode */
000022  240f              MOVS     r4,#0xf
000024  4dee              LDR      r5,|L1.992|
000026  602c              STR      r4,[r5,#0]
;;;128    
;;;129      for (n = 0; n < 8; n++)     /* Push 8 frames into pipeline  */
000028  2300              MOVS     r3,#0
00002a  e004              B        |L1.54|
                  |L1.44|
;;;130        SSPxDR = 0xFFFF;
00002c  f64f74ff          MOV      r4,#0xffff
000030  4deb              LDR      r5,|L1.992|
000032  60ac              STR      r4,[r5,#8]
000034  1c5b              ADDS     r3,r3,#1              ;129
                  |L1.54|
000036  2b08              CMP      r3,#8                 ;129
000038  d3f8              BCC      |L1.44|
;;;131      btr -= 16;
00003a  3a10              SUBS     r2,r2,#0x10
;;;132      while (btr) {         /* Receive the data block into buffer */
00003c  e012              B        |L1.100|
                  |L1.62|
;;;133        while (!(SSPxSR & _BV(2))) ;
00003e  bf00              NOP      
                  |L1.64|
000040  4ce7              LDR      r4,|L1.992|
000042  68e4              LDR      r4,[r4,#0xc]
000044  f0140f04          TST      r4,#4
000048  d0fa              BEQ      |L1.64|
;;;134        d = SSPxDR;
00004a  4ce5              LDR      r4,|L1.992|
00004c  68a4              LDR      r4,[r4,#8]
00004e  b2a1              UXTH     r1,r4
;;;135        SSPxDR = 0xFFFF;
000050  f64f74ff          MOV      r4,#0xffff
000054  4de2              LDR      r5,|L1.992|
000056  60ac              STR      r4,[r5,#8]
;;;136        *buff++ = d >> 8;
000058  120c              ASRS     r4,r1,#8
00005a  f8004b01          STRB     r4,[r0],#1
;;;137        *buff++ = d;
00005e  f8001b01          STRB     r1,[r0],#1
;;;138        btr -= 2;
000062  1e92              SUBS     r2,r2,#2
                  |L1.100|
000064  2a00              CMP      r2,#0                 ;132
000066  d1ea              BNE      |L1.62|
;;;139      }
;;;140      for (n = 0; n < 8; n++) {   /* Pop remaining frames from pipeline */
000068  2300              MOVS     r3,#0
00006a  e00e              B        |L1.138|
                  |L1.108|
;;;141        while (!(SSPxSR & _BV(2))) ;
00006c  bf00              NOP      
                  |L1.110|
00006e  4cdc              LDR      r4,|L1.992|
000070  68e4              LDR      r4,[r4,#0xc]
000072  f0140f04          TST      r4,#4
000076  d0fa              BEQ      |L1.110|
;;;142        d = SSPxDR;
000078  4cd9              LDR      r4,|L1.992|
00007a  68a4              LDR      r4,[r4,#8]
00007c  b2a1              UXTH     r1,r4
;;;143        *buff++ = d >> 8;
00007e  120c              ASRS     r4,r1,#8
000080  f8004b01          STRB     r4,[r0],#1
;;;144        *buff++ = d;
000084  f8001b01          STRB     r1,[r0],#1
000088  1c5b              ADDS     r3,r3,#1              ;140
                  |L1.138|
00008a  2b08              CMP      r3,#8                 ;140
00008c  d3ee              BCC      |L1.108|
;;;145      }
;;;146    
;;;147      SSPxCR0 = 0x0007;       /* Select 8-bit mode */
00008e  2407              MOVS     r4,#7
000090  4dd3              LDR      r5,|L1.992|
000092  602c              STR      r4,[r5,#0]
;;;148    }
000094  bd30              POP      {r4,r5,pc}
;;;149    
                          ENDP

                  xmit_spi_multi PROC
;;;152    static
;;;153    void xmit_spi_multi (
000096  b530              PUSH     {r4,r5,lr}
;;;154      const BYTE *buff, /* Pointer to the data */
;;;155      UINT btx      /* Number of bytes to send (512) */
;;;156    )
;;;157    {
000098  460b              MOV      r3,r1
;;;158      UINT n = 512;
00009a  f44f7100          MOV      r1,#0x200
;;;159      WORD d;
;;;160    
;;;161    
;;;162      SSPxCR0 = 0x000F;     /* Select 16-bit mode */
00009e  240f              MOVS     r4,#0xf
0000a0  4dcf              LDR      r5,|L1.992|
0000a2  602c              STR      r4,[r5,#0]
;;;163    
;;;164      for (n = 0; n < 8; n++) { /* Push 8 frames into pipeline  */
0000a4  2100              MOVS     r1,#0
0000a6  e008              B        |L1.186|
                  |L1.168|
;;;165        d = *buff++;
0000a8  f8102b01          LDRB     r2,[r0],#1
;;;166        d = (d << 8) | *buff++;
0000ac  f8105b01          LDRB     r5,[r0],#1
0000b0  ea452202          ORR      r2,r5,r2,LSL #8
;;;167        SSPxDR = d;
0000b4  4cca              LDR      r4,|L1.992|
0000b6  60a2              STR      r2,[r4,#8]
0000b8  1c49              ADDS     r1,r1,#1              ;164
                  |L1.186|
0000ba  2908              CMP      r1,#8                 ;164
0000bc  d3f4              BCC      |L1.168|
;;;168      }
;;;169      btx -= 16;
0000be  3b10              SUBS     r3,r3,#0x10
;;;170      do {            /* Transmit data block */
0000c0  bf00              NOP      
                  |L1.194|
;;;171        d = *buff++;
0000c2  f8102b01          LDRB     r2,[r0],#1
;;;172        d = (d << 8) | *buff++;
0000c6  f8105b01          LDRB     r5,[r0],#1
0000ca  ea452202          ORR      r2,r5,r2,LSL #8
;;;173        while (!(SSPxSR & _BV(2))) ;
0000ce  bf00              NOP      
                  |L1.208|
0000d0  4cc3              LDR      r4,|L1.992|
0000d2  68e4              LDR      r4,[r4,#0xc]
0000d4  f0140f04          TST      r4,#4
0000d8  d0fa              BEQ      |L1.208|
;;;174        SSPxDR; SSPxDR = d;
0000da  4cc1              LDR      r4,|L1.992|
0000dc  68a4              LDR      r4,[r4,#8]
0000de  4cc0              LDR      r4,|L1.992|
0000e0  60a2              STR      r2,[r4,#8]
;;;175      } while (btx -= 2);
0000e2  1e9c              SUBS     r4,r3,#2
0000e4  0023              MOVS     r3,r4
0000e6  d1ec              BNE      |L1.194|
;;;176      for (n = 0; n < 8; n++) {
0000e8  2100              MOVS     r1,#0
0000ea  e008              B        |L1.254|
                  |L1.236|
;;;177        while (!(SSPxSR & _BV(2))) ;
0000ec  bf00              NOP      
                  |L1.238|
0000ee  4cbc              LDR      r4,|L1.992|
0000f0  68e4              LDR      r4,[r4,#0xc]
0000f2  f0140f04          TST      r4,#4
0000f6  d0fa              BEQ      |L1.238|
;;;178        SSPxDR;
0000f8  4cb9              LDR      r4,|L1.992|
0000fa  68a4              LDR      r4,[r4,#8]
0000fc  1c49              ADDS     r1,r1,#1              ;176
                  |L1.254|
0000fe  2908              CMP      r1,#8                 ;176
000100  d3f4              BCC      |L1.236|
;;;179      }
;;;180    
;;;181      SSPxCR0 = 0x0007;     /* Select 8-bit mode */
000102  2407              MOVS     r4,#7
000104  4db6              LDR      r5,|L1.992|
000106  602c              STR      r4,[r5,#0]
;;;182    }
000108  bd30              POP      {r4,r5,pc}
;;;183    
                          ENDP

                  wait_ready PROC
;;;190    static
;;;191    int wait_ready (  /* 1:Ready, 0:Timeout */
00010a  b570              PUSH     {r4-r6,lr}
;;;192      UINT wt     /* Timeout [ms] */
;;;193    )
;;;194    {
00010c  4605              MOV      r5,r0
;;;195      BYTE d;
;;;196    
;;;197    
;;;198      Timer2 = wt;
00010e  48b5              LDR      r0,|L1.996|
000110  6005              STR      r5,[r0,#0]  ; Timer2
;;;199      do {
000112  bf00              NOP      
                  |L1.276|
;;;200        d = xchg_spi(0xFF);
000114  20ff              MOVS     r0,#0xff
000116  f7fffffe          BL       xchg_spi
00011a  4604              MOV      r4,r0
;;;201        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
;;;202      } while (d != 0xFF && Timer2);  /* Wait for card goes ready or timeout */
00011c  2cff              CMP      r4,#0xff
00011e  d003              BEQ      |L1.296|
000120  48b0              LDR      r0,|L1.996|
000122  6800              LDR      r0,[r0,#0]  ; Timer2
000124  2800              CMP      r0,#0
000126  d1f5              BNE      |L1.276|
                  |L1.296|
;;;203    
;;;204      return (d == 0xFF) ? 1 : 0;
000128  2cff              CMP      r4,#0xff
00012a  d101              BNE      |L1.304|
00012c  2001              MOVS     r0,#1
                  |L1.302|
;;;205    }
00012e  bd70              POP      {r4-r6,pc}
                  |L1.304|
000130  2000              MOVS     r0,#0                 ;204
000132  e7fc              B        |L1.302|
;;;206    
                          ENDP

                  deselect PROC
;;;213    static
;;;214    void deselect (void)
000134  b510              PUSH     {r4,lr}
;;;215    {
;;;216      CS_HIGH();    /* CS = H */
000136  48ac              LDR      r0,|L1.1000|
000138  6800              LDR      r0,[r0,#0]
00013a  f0400008          ORR      r0,r0,#8
00013e  49aa              LDR      r1,|L1.1000|
000140  6008              STR      r0,[r1,#0]
;;;217      xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
000142  20ff              MOVS     r0,#0xff
000144  f7fffffe          BL       xchg_spi
;;;218    
;;;219    }
000148  bd10              POP      {r4,pc}
;;;220    
                          ENDP

                  select PROC
;;;227    static
;;;228    int select (void) /* 1:OK, 0:Timeout */
00014a  b510              PUSH     {r4,lr}
;;;229    {
;;;230      CS_LOW();
00014c  48a6              LDR      r0,|L1.1000|
00014e  6800              LDR      r0,[r0,#0]
000150  f0200008          BIC      r0,r0,#8
000154  49a4              LDR      r1,|L1.1000|
000156  6008              STR      r0,[r1,#0]
;;;231      xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
000158  20ff              MOVS     r0,#0xff
00015a  f7fffffe          BL       xchg_spi
;;;232    
;;;233      if (wait_ready(500)) return 1;  /* OK */
00015e  f44f70fa          MOV      r0,#0x1f4
000162  f7fffffe          BL       wait_ready
000166  b108              CBZ      r0,|L1.364|
000168  2001              MOVS     r0,#1
                  |L1.362|
;;;234      deselect();
;;;235      return 0; /* Timeout */
;;;236    }
00016a  bd10              POP      {r4,pc}
                  |L1.364|
00016c  f7fffffe          BL       deselect
000170  2000              MOVS     r0,#0                 ;235
000172  e7fa              B        |L1.362|
;;;237    
                          ENDP

                  power_on PROC
;;;244    static
;;;245    void power_on (void)  /* Enable SSP module and attach it to I/O pads */
000174  489d              LDR      r0,|L1.1004|
;;;246    {
;;;247      MDR_RST_CLK->PER_CLOCK |= 1 << 20 | 1 << 24;    /* Enable SSP, PD module clock */
000176  69c0              LDR      r0,[r0,#0x1c]
000178  f0407088          ORR      r0,r0,#0x1100000
00017c  499b              LDR      r1,|L1.1004|
00017e  61c8              STR      r0,[r1,#0x1c]
;;;248        MDR_RST_CLK->SSP_CLOCK = 2 << RST_CLK_SSP_CLOCK_SSP2_BRG_Pos | 1 << RST_CLK_SSP_CLOCK_SSP2_CLK_EN_Pos;
000180  f04f2002          MOV      r0,#0x2000200
000184  62c8              STR      r0,[r1,#0x2c]
;;;249                                            /* Select frequency for SSP */
;;;250    
;;;251      SSPxCR0 = 0x0007;     /* Set mode: SPI mode 0, 8-bit */
000186  2007              MOVS     r0,#7
000188  4995              LDR      r1,|L1.992|
00018a  6008              STR      r0,[r1,#0]
;;;252      SSPxCR1 = 0x2;        /* Enable SSP with Master */
00018c  2002              MOVS     r0,#2
00018e  6048              STR      r0,[r1,#4]
;;;253    
;;;254      // Attach SCK1, MISO1, MOSI1 and CS# to I/O pad
;;;255        MDR_PORTD->ANALOG &= 0xFF93;
000190  4895              LDR      r0,|L1.1000|
000192  68c0              LDR      r0,[r0,#0xc]
000194  f64f7193          MOV      r1,#0xff93
000198  4008              ANDS     r0,r0,r1
00019a  4993              LDR      r1,|L1.1000|
00019c  60c8              STR      r0,[r1,#0xc]
;;;256        MDR_PORTD->ANALOG |= 0x006C;
00019e  4608              MOV      r0,r1
0001a0  68c0              LDR      r0,[r0,#0xc]
0001a2  f040006c          ORR      r0,r0,#0x6c
0001a6  60c8              STR      r0,[r1,#0xc]
;;;257        MDR_PORTD->FUNC   &= 0xFFFFC30F;
0001a8  4608              MOV      r0,r1
0001aa  6880              LDR      r0,[r0,#8]
0001ac  f64341f0          MOV      r1,#0x3cf0
0001b0  4388              BICS     r0,r0,r1
0001b2  498d              LDR      r1,|L1.1000|
0001b4  6088              STR      r0,[r1,#8]
;;;258        MDR_PORTD->FUNC   |= 0x00002820;
0001b6  4608              MOV      r0,r1
0001b8  6880              LDR      r0,[r0,#8]
0001ba  f6420120          MOV      r1,#0x2820
0001be  4308              ORRS     r0,r0,r1
0001c0  4989              LDR      r1,|L1.1000|
0001c2  6088              STR      r0,[r1,#8]
;;;259        MDR_PORTD->PWR    |= 0x00003CF0;
0001c4  4608              MOV      r0,r1
0001c6  6980              LDR      r0,[r0,#0x18]
0001c8  f64341f0          MOV      r1,#0x3cf0
0001cc  4308              ORRS     r0,r0,r1
0001ce  4986              LDR      r1,|L1.1000|
0001d0  6188              STR      r0,[r1,#0x18]
;;;260    
;;;261        MDR_PORTD->OE |= _BV(6)|_BV(5)|_BV(3);  /* Set SCK1, MOSI1 and CS# as output */
0001d2  4608              MOV      r0,r1
0001d4  6840              LDR      r0,[r0,#4]
0001d6  f0400068          ORR      r0,r0,#0x68
0001da  6048              STR      r0,[r1,#4]
;;;262    
;;;263      CS_HIGH();          /* Set CS# high */
0001dc  4608              MOV      r0,r1
0001de  6800              LDR      r0,[r0,#0]
0001e0  f0400008          ORR      r0,r0,#8
0001e4  6008              STR      r0,[r1,#0]
;;;264    }
0001e6  4770              BX       lr
;;;265    
                          ENDP

                  power_off PROC
;;;267    static
;;;268    void power_off (void)   /* Disable SPI function */
0001e8  b510              PUSH     {r4,lr}
;;;269    {
;;;270      select();       /* Wait for card ready */
0001ea  f7fffffe          BL       select
;;;271      deselect();
0001ee  f7fffffe          BL       deselect
;;;272    }
0001f2  bd10              POP      {r4,pc}
;;;273    
                          ENDP

                  rcvr_datablock PROC
;;;280    static
;;;281    int rcvr_datablock (  /* 1:OK, 0:Error */
0001f4  b570              PUSH     {r4-r6,lr}
;;;282      BYTE *buff,     /* Data buffer */
;;;283      UINT btr      /* Data block length (byte) */
;;;284    )
;;;285    {
0001f6  4605              MOV      r5,r0
0001f8  460e              MOV      r6,r1
;;;286      BYTE token;
;;;287    
;;;288    
;;;289      Timer1 = 200;
0001fa  20c8              MOVS     r0,#0xc8
0001fc  497c              LDR      r1,|L1.1008|
0001fe  6008              STR      r0,[r1,#0]  ; Timer1
;;;290      do {              /* Wait for DataStart token in timeout of 200ms */
000200  bf00              NOP      
                  |L1.514|
;;;291        token = xchg_spi(0xFF);
000202  20ff              MOVS     r0,#0xff
000204  f7fffffe          BL       xchg_spi
000208  4604              MOV      r4,r0
;;;292        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
;;;293      } while ((token == 0xFF) && Timer1);
00020a  2cff              CMP      r4,#0xff
00020c  d103              BNE      |L1.534|
00020e  4878              LDR      r0,|L1.1008|
000210  6800              LDR      r0,[r0,#0]  ; Timer1
000212  2800              CMP      r0,#0
000214  d1f5              BNE      |L1.514|
                  |L1.534|
;;;294      if(token != 0xFE) return 0;   /* Function fails if invalid DataStart token or timeout */
000216  2cfe              CMP      r4,#0xfe
000218  d001              BEQ      |L1.542|
00021a  2000              MOVS     r0,#0
                  |L1.540|
;;;295    
;;;296      rcvr_spi_multi(buff, btr);    /* Store trailing data to the buffer */
;;;297      xchg_spi(0xFF); xchg_spi(0xFF);     /* Discard CRC */
;;;298    
;;;299      return 1;           /* Function succeeded */
;;;300    }
00021c  bd70              POP      {r4-r6,pc}
                  |L1.542|
00021e  4631              MOV      r1,r6                 ;296
000220  4628              MOV      r0,r5                 ;296
000222  f7fffffe          BL       rcvr_spi_multi
000226  20ff              MOVS     r0,#0xff              ;297
000228  f7fffffe          BL       xchg_spi
00022c  20ff              MOVS     r0,#0xff              ;297
00022e  f7fffffe          BL       xchg_spi
000232  2001              MOVS     r0,#1                 ;299
000234  e7f2              B        |L1.540|
;;;301    
                          ENDP

                  xmit_datablock PROC
;;;308    static
;;;309    int xmit_datablock (  /* 1:OK, 0:Failed */
000236  b570              PUSH     {r4-r6,lr}
;;;310      const BYTE *buff, /* Ponter to 512 byte data to be sent */
;;;311      BYTE token      /* Token */
;;;312    )
;;;313    {
000238  4606              MOV      r6,r0
00023a  460c              MOV      r4,r1
;;;314      BYTE resp;
;;;315    
;;;316    
;;;317      if (!wait_ready(500)) return 0;   /* Wait for card ready */
00023c  f44f70fa          MOV      r0,#0x1f4
000240  f7fffffe          BL       wait_ready
000244  b908              CBNZ     r0,|L1.586|
000246  2000              MOVS     r0,#0
                  |L1.584|
;;;318    
;;;319      xchg_spi(token);          /* Send token */
;;;320      if (token != 0xFD) {        /* Send data if token is other than StopTran */
;;;321        xmit_spi_multi(buff, 512);    /* Data */
;;;322        xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
;;;323    
;;;324        resp = xchg_spi(0xFF);        /* Receive data resp */
;;;325        if ((resp & 0x1F) != 0x05)    /* Function fails if the data packet was not accepted */
;;;326          return 0;
;;;327      }
;;;328      return 1;
;;;329    }
000248  bd70              POP      {r4-r6,pc}
                  |L1.586|
00024a  4620              MOV      r0,r4                 ;319
00024c  f7fffffe          BL       xchg_spi
000250  2cfd              CMP      r4,#0xfd              ;320
000252  d014              BEQ      |L1.638|
000254  f44f7100          MOV      r1,#0x200             ;321
000258  4630              MOV      r0,r6                 ;321
00025a  f7fffffe          BL       xmit_spi_multi
00025e  20ff              MOVS     r0,#0xff              ;322
000260  f7fffffe          BL       xchg_spi
000264  20ff              MOVS     r0,#0xff              ;322
000266  f7fffffe          BL       xchg_spi
00026a  20ff              MOVS     r0,#0xff              ;324
00026c  f7fffffe          BL       xchg_spi
000270  4605              MOV      r5,r0                 ;324
000272  f005001f          AND      r0,r5,#0x1f           ;325
000276  2805              CMP      r0,#5                 ;325
000278  d001              BEQ      |L1.638|
00027a  2000              MOVS     r0,#0                 ;326
00027c  e7e4              B        |L1.584|
                  |L1.638|
00027e  2001              MOVS     r0,#1                 ;328
000280  e7e2              B        |L1.584|
;;;330    
                          ENDP

                  send_cmd PROC
;;;337    static
;;;338    BYTE send_cmd (   /* Return value: R1 resp (bit7==1:Failed to send) */
000282  e92d41f0          PUSH     {r4-r8,lr}
;;;339      BYTE cmd,   /* Command index */
;;;340      DWORD arg   /* Argument */
;;;341    )
;;;342    {
000286  4604              MOV      r4,r0
000288  460d              MOV      r5,r1
;;;343      BYTE n, res;
;;;344    
;;;345    
;;;346      if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
00028a  f0140f80          TST      r4,#0x80
00028e  d00b              BEQ      |L1.680|
;;;347        cmd &= 0x7F;
000290  f004047f          AND      r4,r4,#0x7f
;;;348        res = send_cmd(CMD55, 0);
000294  2100              MOVS     r1,#0
000296  2037              MOVS     r0,#0x37
000298  f7fffffe          BL       send_cmd
00029c  4606              MOV      r6,r0
;;;349        if (res > 1) return res;
00029e  2e01              CMP      r6,#1
0002a0  dd02              BLE      |L1.680|
0002a2  4630              MOV      r0,r6
                  |L1.676|
;;;350      }
;;;351    
;;;352      /* Select card */
;;;353      deselect();
;;;354      if (!select()) return 0xFF;
;;;355    
;;;356      /* Send command packet */
;;;357      xchg_spi(0x40 | cmd);       /* Start + command index */
;;;358      xchg_spi((BYTE)(arg >> 24));    /* Argument[31..24] */
;;;359      xchg_spi((BYTE)(arg >> 16));    /* Argument[23..16] */
;;;360      xchg_spi((BYTE)(arg >> 8));     /* Argument[15..8] */
;;;361      xchg_spi((BYTE)arg);        /* Argument[7..0] */
;;;362      n = 0x01;             /* Dummy CRC + Stop */
;;;363      if (cmd == CMD0) n = 0x95;      /* Valid CRC for CMD0(0) */
;;;364      if (cmd == CMD8) n = 0x87;      /* Valid CRC for CMD8(0x1AA) */
;;;365      xchg_spi(n);
;;;366    
;;;367      /* Receive command resp */
;;;368      if (cmd == CMD12) xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
;;;369      n = 10;               /* Wait for response (10 bytes max) */
;;;370      do
;;;371        res = xchg_spi(0xFF);
;;;372      while ((res & 0x80) && --n);
;;;373    
;;;374      return res;             /* Return received response */
;;;375    }
0002a4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.680|
0002a8  f7fffffe          BL       deselect
0002ac  f7fffffe          BL       select
0002b0  b908              CBNZ     r0,|L1.694|
0002b2  20ff              MOVS     r0,#0xff              ;354
0002b4  e7f6              B        |L1.676|
                  |L1.694|
0002b6  f0440040          ORR      r0,r4,#0x40           ;357
0002ba  f7fffffe          BL       xchg_spi
0002be  0e28              LSRS     r0,r5,#24             ;358
0002c0  f7fffffe          BL       xchg_spi
0002c4  f3c54007          UBFX     r0,r5,#16,#8          ;359
0002c8  f7fffffe          BL       xchg_spi
0002cc  f3c52007          UBFX     r0,r5,#8,#8           ;360
0002d0  f7fffffe          BL       xchg_spi
0002d4  b2e8              UXTB     r0,r5                 ;361
0002d6  f7fffffe          BL       xchg_spi
0002da  2701              MOVS     r7,#1                 ;362
0002dc  b904              CBNZ     r4,|L1.736|
0002de  2795              MOVS     r7,#0x95              ;363
                  |L1.736|
0002e0  2c08              CMP      r4,#8                 ;364
0002e2  d100              BNE      |L1.742|
0002e4  2787              MOVS     r7,#0x87              ;364
                  |L1.742|
0002e6  4638              MOV      r0,r7                 ;365
0002e8  f7fffffe          BL       xchg_spi
0002ec  2c0c              CMP      r4,#0xc               ;368
0002ee  d102              BNE      |L1.758|
0002f0  20ff              MOVS     r0,#0xff              ;368
0002f2  f7fffffe          BL       xchg_spi
                  |L1.758|
0002f6  270a              MOVS     r7,#0xa               ;369
0002f8  bf00              NOP                            ;370
                  |L1.762|
0002fa  20ff              MOVS     r0,#0xff              ;371
0002fc  f7fffffe          BL       xchg_spi
000300  4606              MOV      r6,r0                 ;371
000302  f0160f80          TST      r6,#0x80              ;372
000306  d003              BEQ      |L1.784|
000308  1e78              SUBS     r0,r7,#1              ;372
00030a  b2c0              UXTB     r0,r0                 ;372
00030c  0007              MOVS     r7,r0                 ;372
00030e  d1f4              BNE      |L1.762|
                  |L1.784|
000310  4630              MOV      r0,r6                 ;374
000312  e7c7              B        |L1.676|
;;;376    
                          ENDP

                  disk_initialize PROC
;;;389    
;;;390    DSTATUS disk_initialize (
000314  b5f8              PUSH     {r3-r7,lr}
;;;391      BYTE drv    /* Physical drive number (0) */
;;;392    )
;;;393    {
000316  4607              MOV      r7,r0
;;;394      BYTE n, cmd, ty, ocr[4];
;;;395    
;;;396    
;;;397      if (drv) return STA_NOINIT;     /* Supports only drive 0 */
000318  b10f              CBZ      r7,|L1.798|
00031a  2001              MOVS     r0,#1
                  |L1.796|
;;;398      if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
;;;399    
;;;400      power_on();             /* Initialize SPI */
;;;401      FCLK_SLOW();
;;;402      for (n = 10; n; n--) xchg_spi(0xFF);  /* Send 80 dummy clocks */
;;;403    
;;;404      ty = 0;
;;;405      if (send_cmd(CMD0, 0) == 1) {     /* Put the card SPI/Idle state */
;;;406        Timer1 = 1000;            /* Initialization timeout = 1 sec */
;;;407        if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
;;;408          for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);  /* Get 32 bit return value of R7 resp */
;;;409          if (ocr[2] == 0x01 && ocr[3] == 0xAA) {       /* Is the card supports vcc of 2.7-3.6V? */
;;;410    //                send_cmd(CMD0, 0);
;;;411    //                send_cmd(CMD8, 0x1AA);
;;;412    //        while (Timer1 && send_cmd(ACMD41, 0)) ; /* Wait for end of initialization with ACMD41(HCS) */
;;;413            while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
;;;414            if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
;;;415              for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
;;;416              ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
;;;417            }
;;;418          }
;;;419        } else {  /* Not SDv2 card */
;;;420          if (send_cmd(ACMD41, 0) <= 1)   { /* SDv1 or MMC? */
;;;421            ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
;;;422          } else {
;;;423            ty = CT_MMC; cmd = CMD1;  /* MMCv3 (CMD1(0)) */
;;;424          }
;;;425          while (Timer1 && send_cmd(cmd, 0)) ;    /* Wait for end of initialization */
;;;426          if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
;;;427            ty = 0;
;;;428        }
;;;429      }
;;;430      CardType = ty;  /* Card type */
;;;431      deselect();
;;;432    
;;;433      if (ty) {     /* OK */
;;;434        FCLK_FAST();      /* Set fast clock */
;;;435        Stat &= ~STA_NOINIT;  /* Clear STA_NOINIT flag */
;;;436      } else {      /* Failed */
;;;437        power_off();
;;;438        Stat = STA_NOINIT;
;;;439      }
;;;440    
;;;441      return Stat;
;;;442    }
00031c  bdf8              POP      {r3-r7,pc}
                  |L1.798|
00031e  4835              LDR      r0,|L1.1012|
000320  7800              LDRB     r0,[r0,#0]            ;398  ; Stat
000322  f0100f02          TST      r0,#2                 ;398
000326  d002              BEQ      |L1.814|
000328  4832              LDR      r0,|L1.1012|
00032a  7800              LDRB     r0,[r0,#0]            ;398  ; Stat
00032c  e7f6              B        |L1.796|
                  |L1.814|
00032e  f7fffffe          BL       power_on
000332  20c8              MOVS     r0,#0xc8              ;401
000334  492a              LDR      r1,|L1.992|
000336  6108              STR      r0,[r1,#0x10]         ;401
000338  240a              MOVS     r4,#0xa               ;402
00033a  e004              B        |L1.838|
                  |L1.828|
00033c  20ff              MOVS     r0,#0xff              ;402
00033e  f7fffffe          BL       xchg_spi
000342  1e60              SUBS     r0,r4,#1              ;402
000344  b2c4              UXTB     r4,r0                 ;402
                  |L1.838|
000346  2c00              CMP      r4,#0                 ;402
000348  d1f8              BNE      |L1.828|
00034a  2600              MOVS     r6,#0                 ;404
00034c  2100              MOVS     r1,#0                 ;405
00034e  4608              MOV      r0,r1                 ;405
000350  f7fffffe          BL       send_cmd
000354  2801              CMP      r0,#1                 ;405
000356  d171              BNE      |L1.1084|
000358  f44f707a          MOV      r0,#0x3e8             ;406
00035c  4924              LDR      r1,|L1.1008|
00035e  6008              STR      r0,[r1,#0]            ;406  ; Timer1
000360  f44f71d5          MOV      r1,#0x1aa             ;407
000364  2008              MOVS     r0,#8                 ;407
000366  f7fffffe          BL       send_cmd
00036a  2801              CMP      r0,#1                 ;407
00036c  d147              BNE      |L1.1022|
00036e  bf00              NOP                            ;408
000370  e006              B        |L1.896|
                  |L1.882|
000372  20ff              MOVS     r0,#0xff              ;408
000374  f7fffffe          BL       xchg_spi
000378  f80d0004          STRB     r0,[sp,r4]            ;408
00037c  1c60              ADDS     r0,r4,#1              ;408
00037e  b2c4              UXTB     r4,r0                 ;408
                  |L1.896|
000380  2c04              CMP      r4,#4                 ;408
000382  dbf6              BLT      |L1.882|
000384  f89d0002          LDRB     r0,[sp,#2]            ;409
000388  2801              CMP      r0,#1                 ;409
00038a  d157              BNE      |L1.1084|
00038c  f89d0003          LDRB     r0,[sp,#3]            ;409
000390  28aa              CMP      r0,#0xaa              ;409
000392  d153              BNE      |L1.1084|
000394  bf00              NOP                            ;413
                  |L1.918|
000396  4816              LDR      r0,|L1.1008|
000398  6800              LDR      r0,[r0,#0]            ;413  ; Timer1
00039a  b130              CBZ      r0,|L1.938|
00039c  f04f4180          MOV      r1,#0x40000000        ;413
0003a0  20a9              MOVS     r0,#0xa9              ;413
0003a2  f7fffffe          BL       send_cmd
0003a6  2800              CMP      r0,#0                 ;413
0003a8  d1f5              BNE      |L1.918|
                  |L1.938|
0003aa  4811              LDR      r0,|L1.1008|
0003ac  6800              LDR      r0,[r0,#0]            ;414  ; Timer1
0003ae  2800              CMP      r0,#0                 ;414
0003b0  d044              BEQ      |L1.1084|
0003b2  2100              MOVS     r1,#0                 ;414
0003b4  203a              MOVS     r0,#0x3a              ;414
0003b6  f7fffffe          BL       send_cmd
0003ba  b9f8              CBNZ     r0,|L1.1020|
0003bc  2400              MOVS     r4,#0                 ;415
0003be  e006              B        |L1.974|
                  |L1.960|
0003c0  20ff              MOVS     r0,#0xff              ;415
0003c2  f7fffffe          BL       xchg_spi
0003c6  f80d0004          STRB     r0,[sp,r4]            ;415
0003ca  1c60              ADDS     r0,r4,#1              ;415
0003cc  b2c4              UXTB     r4,r0                 ;415
                  |L1.974|
0003ce  2c04              CMP      r4,#4                 ;415
0003d0  dbf6              BLT      |L1.960|
0003d2  f89d0000          LDRB     r0,[sp,#0]            ;416
0003d6  f0100f40          TST      r0,#0x40              ;416
0003da  d00d              BEQ      |L1.1016|
0003dc  200c              MOVS     r0,#0xc               ;416
0003de  e00c              B        |L1.1018|
                  |L1.992|
                          DCD      0x400a0000
                  |L1.996|
                          DCD      Timer2
                  |L1.1000|
                          DCD      0x400c0000
                  |L1.1004|
                          DCD      0x40020000
                  |L1.1008|
                          DCD      Timer1
                  |L1.1012|
                          DCD      Stat
                  |L1.1016|
0003f8  2004              MOVS     r0,#4                 ;416
                  |L1.1018|
0003fa  4606              MOV      r6,r0                 ;416
                  |L1.1020|
0003fc  e01e              B        |L1.1084|
                  |L1.1022|
0003fe  2100              MOVS     r1,#0                 ;420
000400  20a9              MOVS     r0,#0xa9              ;420
000402  f7fffffe          BL       send_cmd
000406  2801              CMP      r0,#1                 ;420
000408  dc02              BGT      |L1.1040|
00040a  2602              MOVS     r6,#2                 ;421
00040c  25a9              MOVS     r5,#0xa9              ;421
00040e  e001              B        |L1.1044|
                  |L1.1040|
000410  2601              MOVS     r6,#1                 ;423
000412  2501              MOVS     r5,#1                 ;423
                  |L1.1044|
000414  bf00              NOP                            ;425
                  |L1.1046|
000416  48fc              LDR      r0,|L1.2056|
000418  6800              LDR      r0,[r0,#0]            ;425  ; Timer1
00041a  b128              CBZ      r0,|L1.1064|
00041c  2100              MOVS     r1,#0                 ;425
00041e  4628              MOV      r0,r5                 ;425
000420  f7fffffe          BL       send_cmd
000424  2800              CMP      r0,#0                 ;425
000426  d1f6              BNE      |L1.1046|
                  |L1.1064|
000428  48f7              LDR      r0,|L1.2056|
00042a  6800              LDR      r0,[r0,#0]            ;426  ; Timer1
00042c  b128              CBZ      r0,|L1.1082|
00042e  f44f7100          MOV      r1,#0x200             ;426
000432  2010              MOVS     r0,#0x10              ;426
000434  f7fffffe          BL       send_cmd
000438  b100              CBZ      r0,|L1.1084|
                  |L1.1082|
00043a  2600              MOVS     r6,#0                 ;427
                  |L1.1084|
00043c  48f3              LDR      r0,|L1.2060|
00043e  7006              STRB     r6,[r0,#0]            ;430
000440  f7fffffe          BL       deselect
000444  b14e              CBZ      r6,|L1.1114|
000446  2004              MOVS     r0,#4                 ;434
000448  49f1              LDR      r1,|L1.2064|
00044a  6108              STR      r0,[r1,#0x10]         ;434
00044c  48f1              LDR      r0,|L1.2068|
00044e  7800              LDRB     r0,[r0,#0]            ;435  ; Stat
000450  f0200001          BIC      r0,r0,#1              ;435
000454  49ef              LDR      r1,|L1.2068|
000456  7008              STRB     r0,[r1,#0]            ;435
000458  e004              B        |L1.1124|
                  |L1.1114|
00045a  f7fffffe          BL       power_off
00045e  2001              MOVS     r0,#1                 ;438
000460  49ec              LDR      r1,|L1.2068|
000462  7008              STRB     r0,[r1,#0]            ;438
                  |L1.1124|
000464  48eb              LDR      r0,|L1.2068|
000466  7800              LDRB     r0,[r0,#0]            ;441  ; Stat
000468  e758              B        |L1.796|
;;;443    
                          ENDP

                  disk_status PROC
;;;449    
;;;450    DSTATUS disk_status (
00046a  4601              MOV      r1,r0
;;;451      BYTE drv    /* Physical drive number (0) */
;;;452    )
;;;453    {
;;;454      if (drv) return STA_NOINIT;   /* Supports only drive 0 */
00046c  b109              CBZ      r1,|L1.1138|
00046e  2001              MOVS     r0,#1
                  |L1.1136|
;;;455    
;;;456      return Stat;  /* Return disk status */
;;;457    }
000470  4770              BX       lr
                  |L1.1138|
000472  48e8              LDR      r0,|L1.2068|
000474  7800              LDRB     r0,[r0,#0]            ;456  ; Stat
000476  e7fb              B        |L1.1136|
;;;458    
                          ENDP

                  disk_read PROC
;;;464    
;;;465    DRESULT disk_read (
000478  e92d41f0          PUSH     {r4-r8,lr}
;;;466      BYTE drv,   /* Physical drive number (0) */
;;;467      BYTE *buff,   /* Pointer to the data buffer to store read data */
;;;468      DWORD sector, /* Start sector number (LBA) */
;;;469      BYTE count    /* Number of sectors to read (1..128) */
;;;470    )
;;;471    {
00047c  4607              MOV      r7,r0
00047e  460d              MOV      r5,r1
000480  4616              MOV      r6,r2
000482  461c              MOV      r4,r3
;;;472      if (drv || !count) return RES_PARERR;   /* Check parameter */
000484  b907              CBNZ     r7,|L1.1160|
000486  b914              CBNZ     r4,|L1.1166|
                  |L1.1160|
000488  2004              MOVS     r0,#4
                  |L1.1162|
;;;473      if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check if drive is ready */
;;;474    
;;;475      if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
;;;476    
;;;477      if (count == 1) { /* Single sector read */
;;;478        if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
;;;479          && rcvr_datablock(buff, 512))
;;;480          count = 0;
;;;481      }
;;;482      else {        /* Multiple sector read */
;;;483        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
;;;484          do {
;;;485            if (!rcvr_datablock(buff, 512)) break;
;;;486            buff += 512;
;;;487          } while (--count);
;;;488          send_cmd(CMD12, 0);       /* STOP_TRANSMISSION */
;;;489        }
;;;490      }
;;;491      deselect();
;;;492    
;;;493      return count ? RES_ERROR : RES_OK;  /* Return result */
;;;494    }
00048a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1166|
00048e  48e1              LDR      r0,|L1.2068|
000490  7800              LDRB     r0,[r0,#0]            ;473  ; Stat
000492  f0100f01          TST      r0,#1                 ;473
000496  d001              BEQ      |L1.1180|
000498  2003              MOVS     r0,#3                 ;473
00049a  e7f6              B        |L1.1162|
                  |L1.1180|
00049c  48db              LDR      r0,|L1.2060|
00049e  7800              LDRB     r0,[r0,#0]            ;475  ; CardType
0004a0  f0100f08          TST      r0,#8                 ;475
0004a4  d100              BNE      |L1.1192|
0004a6  0276              LSLS     r6,r6,#9              ;475
                  |L1.1192|
0004a8  2c01              CMP      r4,#1                 ;477
0004aa  d10b              BNE      |L1.1220|
0004ac  4631              MOV      r1,r6                 ;478
0004ae  2011              MOVS     r0,#0x11              ;478
0004b0  f7fffffe          BL       send_cmd
0004b4  b9f0              CBNZ     r0,|L1.1268|
0004b6  0261              LSLS     r1,r4,#9              ;479
0004b8  4628              MOV      r0,r5                 ;479
0004ba  f7fffffe          BL       rcvr_datablock
0004be  b1c8              CBZ      r0,|L1.1268|
0004c0  2400              MOVS     r4,#0                 ;480
0004c2  e017              B        |L1.1268|
                  |L1.1220|
0004c4  4631              MOV      r1,r6                 ;483
0004c6  2012              MOVS     r0,#0x12              ;483
0004c8  f7fffffe          BL       send_cmd
0004cc  b990              CBNZ     r0,|L1.1268|
0004ce  bf00              NOP                            ;484
                  |L1.1232|
0004d0  f44f7100          MOV      r1,#0x200             ;485
0004d4  4628              MOV      r0,r5                 ;485
0004d6  f7fffffe          BL       rcvr_datablock
0004da  b900              CBNZ     r0,|L1.1246|
0004dc  e005              B        |L1.1258|
                  |L1.1246|
0004de  f5057500          ADD      r5,r5,#0x200          ;486
0004e2  1e60              SUBS     r0,r4,#1              ;487
0004e4  b2c0              UXTB     r0,r0                 ;487
0004e6  0004              MOVS     r4,r0                 ;487
0004e8  d1f2              BNE      |L1.1232|
                  |L1.1258|
0004ea  bf00              NOP                            ;485
0004ec  2100              MOVS     r1,#0                 ;488
0004ee  200c              MOVS     r0,#0xc               ;488
0004f0  f7fffffe          BL       send_cmd
                  |L1.1268|
0004f4  f7fffffe          BL       deselect
0004f8  b10c              CBZ      r4,|L1.1278|
0004fa  2001              MOVS     r0,#1                 ;493
0004fc  e7c5              B        |L1.1162|
                  |L1.1278|
0004fe  2000              MOVS     r0,#0                 ;493
000500  e7c3              B        |L1.1162|
;;;495    
                          ENDP

                  disk_write PROC
;;;501    
;;;502    DRESULT disk_write (
000502  e92d41f0          PUSH     {r4-r8,lr}
;;;503      BYTE drv,     /* Physical drive number (0) */
;;;504      const BYTE *buff, /* Ponter to the data to write */
;;;505      DWORD sector,   /* Start sector number (LBA) */
;;;506      BYTE count      /* Number of sectors to write (1..128) */
;;;507    )
;;;508    {
000506  4607              MOV      r7,r0
000508  460d              MOV      r5,r1
00050a  4616              MOV      r6,r2
00050c  461c              MOV      r4,r3
;;;509      if (drv || !count) return RES_PARERR;   /* Check parameter */
00050e  b907              CBNZ     r7,|L1.1298|
000510  b914              CBNZ     r4,|L1.1304|
                  |L1.1298|
000512  2004              MOVS     r0,#4
                  |L1.1300|
;;;510      if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check drive status */
;;;511      if (Stat & STA_PROTECT) return RES_WRPRT; /* Check write protect */
;;;512    
;;;513      if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
;;;514    
;;;515      if (count == 1) { /* Single sector write */
;;;516        if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
;;;517          && xmit_datablock(buff, 0xFE))
;;;518          count = 0;
;;;519      }
;;;520      else {        /* Multiple sector write */
;;;521        if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
;;;522        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
;;;523          do {
;;;524            if (!xmit_datablock(buff, 0xFC)) break;
;;;525            buff += 512;
;;;526          } while (--count);
;;;527          if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
;;;528            count = 1;
;;;529        }
;;;530      }
;;;531      deselect();
;;;532    
;;;533      return count ? RES_ERROR : RES_OK;  /* Return result */
;;;534    }
000514  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1304|
000518  48be              LDR      r0,|L1.2068|
00051a  7800              LDRB     r0,[r0,#0]            ;510  ; Stat
00051c  f0100f01          TST      r0,#1                 ;510
000520  d001              BEQ      |L1.1318|
000522  2003              MOVS     r0,#3                 ;510
000524  e7f6              B        |L1.1300|
                  |L1.1318|
000526  48bb              LDR      r0,|L1.2068|
000528  7800              LDRB     r0,[r0,#0]            ;511  ; Stat
00052a  f0100f04          TST      r0,#4                 ;511
00052e  d001              BEQ      |L1.1332|
000530  2002              MOVS     r0,#2                 ;511
000532  e7ef              B        |L1.1300|
                  |L1.1332|
000534  48b5              LDR      r0,|L1.2060|
000536  7800              LDRB     r0,[r0,#0]            ;513  ; CardType
000538  f0100f08          TST      r0,#8                 ;513
00053c  d100              BNE      |L1.1344|
00053e  0276              LSLS     r6,r6,#9              ;513
                  |L1.1344|
000540  2c01              CMP      r4,#1                 ;515
000542  d10b              BNE      |L1.1372|
000544  4631              MOV      r1,r6                 ;516
000546  2018              MOVS     r0,#0x18              ;516
000548  f7fffffe          BL       send_cmd
00054c  bb40              CBNZ     r0,|L1.1440|
00054e  21fe              MOVS     r1,#0xfe              ;517
000550  4628              MOV      r0,r5                 ;517
000552  f7fffffe          BL       xmit_datablock
000556  b318              CBZ      r0,|L1.1440|
000558  2400              MOVS     r4,#0                 ;518
00055a  e021              B        |L1.1440|
                  |L1.1372|
00055c  48ab              LDR      r0,|L1.2060|
00055e  7800              LDRB     r0,[r0,#0]            ;521  ; CardType
000560  f0100f06          TST      r0,#6                 ;521
000564  d003              BEQ      |L1.1390|
000566  4621              MOV      r1,r4                 ;521
000568  2097              MOVS     r0,#0x97              ;521
00056a  f7fffffe          BL       send_cmd
                  |L1.1390|
00056e  4631              MOV      r1,r6                 ;522
000570  2019              MOVS     r0,#0x19              ;522
000572  f7fffffe          BL       send_cmd
000576  b998              CBNZ     r0,|L1.1440|
000578  bf00              NOP                            ;523
                  |L1.1402|
00057a  21fc              MOVS     r1,#0xfc              ;524
00057c  4628              MOV      r0,r5                 ;524
00057e  f7fffffe          BL       xmit_datablock
000582  b900              CBNZ     r0,|L1.1414|
000584  e005              B        |L1.1426|
                  |L1.1414|
000586  f5057500          ADD      r5,r5,#0x200          ;525
00058a  1e60              SUBS     r0,r4,#1              ;526
00058c  b2c0              UXTB     r0,r0                 ;526
00058e  0004              MOVS     r4,r0                 ;526
000590  d1f3              BNE      |L1.1402|
                  |L1.1426|
000592  bf00              NOP                            ;524
000594  21fd              MOVS     r1,#0xfd              ;527
000596  2000              MOVS     r0,#0                 ;527
000598  f7fffffe          BL       xmit_datablock
00059c  b900              CBNZ     r0,|L1.1440|
00059e  2401              MOVS     r4,#1                 ;528
                  |L1.1440|
0005a0  f7fffffe          BL       deselect
0005a4  b10c              CBZ      r4,|L1.1450|
0005a6  2001              MOVS     r0,#1                 ;533
0005a8  e7b4              B        |L1.1300|
                  |L1.1450|
0005aa  2000              MOVS     r0,#0                 ;533
0005ac  e7b2              B        |L1.1300|
;;;535    
                          ENDP

                  disk_ioctl PROC
;;;541    
;;;542    DRESULT disk_ioctl (
0005ae  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;543      BYTE drv,   /* Physical drive number (0) */
;;;544      BYTE ctrl,    /* Control command code */
;;;545      void *buff    /* Pointer to the conrtol data */
;;;546    )
;;;547    {
0005b2  b086              SUB      sp,sp,#0x18
0005b4  4688              MOV      r8,r1
0005b6  4614              MOV      r4,r2
;;;548      DRESULT res;
;;;549      BYTE n, csd[16], *ptr = buff;
0005b8  4627              MOV      r7,r4
;;;550      WORD csize;
;;;551      DWORD *dp, st, ed;
;;;552    
;;;553    
;;;554      if (drv) return RES_PARERR;         /* Check parameter */
0005ba  9806              LDR      r0,[sp,#0x18]
0005bc  b118              CBZ      r0,|L1.1478|
0005be  2004              MOVS     r0,#4
                  |L1.1472|
;;;555      if (Stat & STA_NOINIT) return RES_NOTRDY; /* Check if drive is ready */
;;;556    
;;;557      res = RES_ERROR;
;;;558    
;;;559      switch (ctrl) {
;;;560      case CTRL_SYNC :    /* Wait for end of internal write process of the drive */
;;;561        if (select()) {
;;;562          deselect();
;;;563          res = RES_OK;
;;;564        }
;;;565        break;
;;;566    
;;;567      case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
;;;568        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
;;;569          if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
;;;570            csize = csd[9] + ((WORD)csd[8] << 8) + 1;
;;;571            *(DWORD*)buff = (DWORD)csize << 10;
;;;572          } else {          /* SDC ver 1.XX or MMC ver 3 */
;;;573            n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
;;;574            csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
;;;575            *(DWORD*)buff = (DWORD)csize << (n - 9);
;;;576          }
;;;577          res = RES_OK;
;;;578        }
;;;579        break;
;;;580    
;;;581      case GET_SECTOR_SIZE :  /* Get sector size in unit of byte (WORD) */
;;;582        *(WORD*)buff = 512;
;;;583        res = RES_OK;
;;;584        break;
;;;585    
;;;586      case GET_BLOCK_SIZE : /* Get erase block size in unit of sector (DWORD) */
;;;587        if (CardType & CT_SD2) {  /* SDC ver 2.00 */
;;;588          if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
;;;589            xchg_spi(0xFF);
;;;590            if (rcvr_datablock(csd, 16)) {        /* Read partial block */
;;;591              for (n = 64 - 16; n; n--) xchg_spi(0xFF); /* Purge trailing data */
;;;592              *(DWORD*)buff = 16UL << (csd[10] >> 4);
;;;593              res = RES_OK;
;;;594            }
;;;595          }
;;;596        } else {          /* SDC ver 1.XX or MMC */
;;;597          if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
;;;598            if (CardType & CT_SD1) {  /* SDC ver 1.XX */
;;;599              *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
;;;600            } else {          /* MMC */
;;;601              *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
;;;602            }
;;;603            res = RES_OK;
;;;604          }
;;;605        }
;;;606        break;
;;;607    
;;;608      case CTRL_ERASE_SECTOR :  /* Erase a block of sectors (used when _USE_ERASE == 1) */
;;;609        if (!(CardType & CT_SDC)) break;        /* Check if the card is SDC */
;;;610        if (disk_ioctl(drv, MMC_GET_CSD, csd)) break; /* Get CSD */
;;;611        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
;;;612        dp = buff; st = dp[0]; ed = dp[1];        /* Load sector block */
;;;613        if (!(CardType & CT_BLOCK)) {
;;;614          st *= 512; ed *= 512;
;;;615        }
;;;616        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) /* Erase sector block */
;;;617          res = RES_OK; /* FatFs does not check result of this command */
;;;618        break;
;;;619    
;;;620      /* Following command are not used by FatFs module */
;;;621    
;;;622      case MMC_GET_TYPE :   /* Get MMC/SDC type (BYTE) */
;;;623        *ptr = CardType;
;;;624        res = RES_OK;
;;;625        break;
;;;626    
;;;627      case MMC_GET_CSD :    /* Read CSD (16 bytes) */
;;;628        if (send_cmd(CMD9, 0) == 0    /* READ_CSD */
;;;629          && rcvr_datablock(ptr, 16))
;;;630          res = RES_OK;
;;;631        break;
;;;632    
;;;633      case MMC_GET_CID :    /* Read CID (16 bytes) */
;;;634        if (send_cmd(CMD10, 0) == 0   /* READ_CID */
;;;635          && rcvr_datablock(ptr, 16))
;;;636          res = RES_OK;
;;;637        break;
;;;638    
;;;639      case MMC_GET_OCR :    /* Read OCR (4 bytes) */
;;;640        if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
;;;641          for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
;;;642          res = RES_OK;
;;;643        }
;;;644        break;
;;;645    
;;;646      case MMC_GET_SDSTAT : /* Read SD status (64 bytes) */
;;;647        if (send_cmd(ACMD13, 0) == 0) { /* SD_STATUS */
;;;648          xchg_spi(0xFF);
;;;649          if (rcvr_datablock(ptr, 64))
;;;650            res = RES_OK;
;;;651        }
;;;652        break;
;;;653    
;;;654      default:
;;;655        res = RES_PARERR;
;;;656      }
;;;657    
;;;658      deselect();
;;;659    
;;;660      return res;
;;;661    }
0005c0  b009              ADD      sp,sp,#0x24
0005c2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1478|
0005c6  4893              LDR      r0,|L1.2068|
0005c8  7800              LDRB     r0,[r0,#0]            ;555  ; Stat
0005ca  f0100f01          TST      r0,#1                 ;555
0005ce  d001              BEQ      |L1.1492|
0005d0  2003              MOVS     r0,#3                 ;555
0005d2  e7f5              B        |L1.1472|
                  |L1.1492|
0005d4  2001              MOVS     r0,#1                 ;557
0005d6  9005              STR      r0,[sp,#0x14]         ;557
0005d8  f1b80f0f          CMP      r8,#0xf               ;559
0005dc  d27c              BCS      |L1.1752|
0005de  e8dff008          TBB      [pc,r8]               ;559
0005e2  0810              DCB      0x08,0x10
0005e4  5056b07b          DCB      0x50,0x56,0xb0,0x7b
0005e8  7b7b7b7b          DCB      0x7b,0x7b,0x7b,0x7b
0005ec  f2f8efee          DCB      0xf2,0xf8,0xef,0xee
0005f0  ed00              DCB      0xed,0x00
0005f2  f7fffffe          BL       select
0005f6  b118              CBZ      r0,|L1.1536|
0005f8  f7fffffe          BL       deselect
0005fc  2000              MOVS     r0,#0                 ;563
0005fe  9005              STR      r0,[sp,#0x14]         ;563
                  |L1.1536|
000600  e130              B        |L1.2148|
000602  2100              MOVS     r1,#0                 ;568
000604  2009              MOVS     r0,#9                 ;568
000606  f7fffffe          BL       send_cmd
00060a  bbc8              CBNZ     r0,|L1.1664|
00060c  2110              MOVS     r1,#0x10              ;568
00060e  a801              ADD      r0,sp,#4              ;568
000610  f7fffffe          BL       rcvr_datablock
000614  b3a0              CBZ      r0,|L1.1664|
000616  f89d0004          LDRB     r0,[sp,#4]            ;569
00061a  2101              MOVS     r1,#1                 ;569
00061c  ebb11fa0          CMP      r1,r0,ASR #6          ;569
000620  d10a              BNE      |L1.1592|
000622  f89d000d          LDRB     r0,[sp,#0xd]          ;570
000626  f89d100c          LDRB     r1,[sp,#0xc]          ;570
00062a  eb002001          ADD      r0,r0,r1,LSL #8       ;570
00062e  1c40              ADDS     r0,r0,#1              ;570
000630  b286              UXTH     r6,r0                 ;570
000632  02b0              LSLS     r0,r6,#10             ;571
000634  6020              STR      r0,[r4,#0]            ;571
000636  e021              B        |L1.1660|
                  |L1.1592|
000638  f89d0009          LDRB     r0,[sp,#9]            ;573
00063c  f000000f          AND      r0,r0,#0xf            ;573
000640  f89d100e          LDRB     r1,[sp,#0xe]          ;573
000644  eb0010d1          ADD      r0,r0,r1,LSR #7       ;573
000648  f89d100d          LDRB     r1,[sp,#0xd]          ;573
00064c  f0010103          AND      r1,r1,#3              ;573
000650  eb000041          ADD      r0,r0,r1,LSL #1       ;573
000654  1c85              ADDS     r5,r0,#2              ;573
000656  f89d000c          LDRB     r0,[sp,#0xc]          ;574
00065a  1180              ASRS     r0,r0,#6              ;574
00065c  f89d100b          LDRB     r1,[sp,#0xb]          ;574
000660  eb000081          ADD      r0,r0,r1,LSL #2       ;574
000664  f89d100a          LDRB     r1,[sp,#0xa]          ;574
000668  f0010103          AND      r1,r1,#3              ;574
00066c  eb002081          ADD      r0,r0,r1,LSL #10      ;574
000670  1c46              ADDS     r6,r0,#1              ;574
000672  f1a50009          SUB      r0,r5,#9              ;575
000676  fa06f000          LSL      r0,r6,r0              ;575
00067a  6020              STR      r0,[r4,#0]            ;575
                  |L1.1660|
00067c  2000              MOVS     r0,#0                 ;577
00067e  9005              STR      r0,[sp,#0x14]         ;577
                  |L1.1664|
000680  e0f0              B        |L1.2148|
000682  f44f7000          MOV      r0,#0x200             ;582
000686  8020              STRH     r0,[r4,#0]            ;582
000688  2000              MOVS     r0,#0                 ;583
00068a  9005              STR      r0,[sp,#0x14]         ;583
00068c  e0ea              B        |L1.2148|
00068e  485f              LDR      r0,|L1.2060|
000690  7800              LDRB     r0,[r0,#0]            ;587  ; CardType
000692  f0100f04          TST      r0,#4                 ;587
000696  d020              BEQ      |L1.1754|
000698  2100              MOVS     r1,#0                 ;588
00069a  208d              MOVS     r0,#0x8d              ;588
00069c  f7fffffe          BL       send_cmd
0006a0  2800              CMP      r0,#0                 ;588
0006a2  d14d              BNE      |L1.1856|
0006a4  20ff              MOVS     r0,#0xff              ;589
0006a6  f7fffffe          BL       xchg_spi
0006aa  2110              MOVS     r1,#0x10              ;590
0006ac  a801              ADD      r0,sp,#4              ;590
0006ae  f7fffffe          BL       rcvr_datablock
0006b2  b390              CBZ      r0,|L1.1818|
0006b4  2530              MOVS     r5,#0x30              ;591
0006b6  e004              B        |L1.1730|
                  |L1.1720|
0006b8  20ff              MOVS     r0,#0xff              ;591
0006ba  f7fffffe          BL       xchg_spi
0006be  1e68              SUBS     r0,r5,#1              ;591
0006c0  b2c5              UXTB     r5,r0                 ;591
                  |L1.1730|
0006c2  2d00              CMP      r5,#0                 ;591
0006c4  d1f8              BNE      |L1.1720|
0006c6  f89d000e          LDRB     r0,[sp,#0xe]          ;592
0006ca  1101              ASRS     r1,r0,#4              ;592
0006cc  2010              MOVS     r0,#0x10              ;592
0006ce  4088              LSLS     r0,r0,r1              ;592
0006d0  6020              STR      r0,[r4,#0]            ;592
0006d2  2000              MOVS     r0,#0                 ;593
0006d4  9005              STR      r0,[sp,#0x14]         ;593
0006d6  e033              B        |L1.1856|
                  |L1.1752|
0006d8  e0c1              B        |L1.2142|
                  |L1.1754|
0006da  2100              MOVS     r1,#0                 ;597
0006dc  2009              MOVS     r0,#9                 ;597
0006de  f7fffffe          BL       send_cmd
0006e2  b9d0              CBNZ     r0,|L1.1818|
0006e4  2110              MOVS     r1,#0x10              ;597
0006e6  a801              ADD      r0,sp,#4              ;597
0006e8  f7fffffe          BL       rcvr_datablock
0006ec  b1a8              CBZ      r0,|L1.1818|
0006ee  4847              LDR      r0,|L1.2060|
0006f0  7800              LDRB     r0,[r0,#0]            ;598  ; CardType
0006f2  f0100f02          TST      r0,#2                 ;598
0006f6  d011              BEQ      |L1.1820|
0006f8  f89d000e          LDRB     r0,[sp,#0xe]          ;599
0006fc  0680              LSLS     r0,r0,#26             ;599
0006fe  0e40              LSRS     r0,r0,#25             ;599
000700  f89d100f          LDRB     r1,[sp,#0xf]          ;599
000704  eb0010d1          ADD      r0,r0,r1,LSR #7       ;599
000708  1c40              ADDS     r0,r0,#1              ;599
00070a  f89d1011          LDRB     r1,[sp,#0x11]         ;599
00070e  2201              MOVS     r2,#1                 ;599
000710  ebc211a1          RSB      r1,r2,r1,ASR #6       ;599
000714  4088              LSLS     r0,r0,r1              ;599
000716  6020              STR      r0,[r4,#0]            ;599
000718  e010              B        |L1.1852|
                  |L1.1818|
00071a  e011              B        |L1.1856|
                  |L1.1820|
00071c  f89d000f          LDRB     r0,[sp,#0xf]          ;601
000720  0780              LSLS     r0,r0,#30             ;601
000722  0ec0              LSRS     r0,r0,#27             ;601
000724  f89d100f          LDRB     r1,[sp,#0xf]          ;601
000728  eb001051          ADD      r0,r0,r1,LSR #5       ;601
00072c  1c40              ADDS     r0,r0,#1              ;601
00072e  f89d100e          LDRB     r1,[sp,#0xe]          ;601
000732  f3c10184          UBFX     r1,r1,#2,#5           ;601
000736  1c49              ADDS     r1,r1,#1              ;601
000738  4348              MULS     r0,r1,r0              ;601
00073a  6020              STR      r0,[r4,#0]            ;601
                  |L1.1852|
00073c  2000              MOVS     r0,#0                 ;603
00073e  9005              STR      r0,[sp,#0x14]         ;603
                  |L1.1856|
000740  e090              B        |L1.2148|
000742  4832              LDR      r0,|L1.2060|
000744  7800              LDRB     r0,[r0,#0]            ;609  ; CardType
000746  f0100f06          TST      r0,#6                 ;609
00074a  d100              BNE      |L1.1870|
00074c  e08a              B        |L1.2148|
                  |L1.1870|
00074e  aa01              ADD      r2,sp,#4              ;610
000750  210b              MOVS     r1,#0xb               ;610
000752  9806              LDR      r0,[sp,#0x18]         ;610
000754  f7fffffe          BL       disk_ioctl
000758  b100              CBZ      r0,|L1.1884|
00075a  e083              B        |L1.2148|
                  |L1.1884|
00075c  f89d0004          LDRB     r0,[sp,#4]            ;611
000760  1180              ASRS     r0,r0,#6              ;611
000762  d105              BNE      |L1.1904|
000764  f89d000e          LDRB     r0,[sp,#0xe]          ;611
000768  f0100f40          TST      r0,#0x40              ;611
00076c  d100              BNE      |L1.1904|
00076e  e079              B        |L1.2148|
                  |L1.1904|
000770  46a1              MOV      r9,r4                 ;612
000772  464c              MOV      r4,r9                 ;612
000774  f8d9a000          LDR      r10,[r9,#0]           ;612
000778  f8d9b004          LDR      r11,[r9,#4]           ;612
00077c  4823              LDR      r0,|L1.2060|
00077e  7800              LDRB     r0,[r0,#0]            ;613  ; CardType
000780  f0100f08          TST      r0,#8                 ;613
000784  d103              BNE      |L1.1934|
000786  ea4f2a4a          LSL      r10,r10,#9            ;614
00078a  ea4f2b4b          LSL      r11,r11,#9            ;614
                  |L1.1934|
00078e  4651              MOV      r1,r10                ;616
000790  2020              MOVS     r0,#0x20              ;616
000792  f7fffffe          BL       send_cmd
000796  b980              CBNZ     r0,|L1.1978|
000798  4659              MOV      r1,r11                ;616
00079a  2021              MOVS     r0,#0x21              ;616
00079c  f7fffffe          BL       send_cmd
0007a0  b958              CBNZ     r0,|L1.1978|
0007a2  2100              MOVS     r1,#0                 ;616
0007a4  2026              MOVS     r0,#0x26              ;616
0007a6  f7fffffe          BL       send_cmd
0007aa  b930              CBNZ     r0,|L1.1978|
0007ac  f2475030          MOV      r0,#0x7530            ;616
0007b0  f7fffffe          BL       wait_ready
0007b4  b108              CBZ      r0,|L1.1978|
0007b6  2000              MOVS     r0,#0                 ;617
0007b8  9005              STR      r0,[sp,#0x14]         ;617
                  |L1.1978|
0007ba  e053              B        |L1.2148|
0007bc  e03f              B        |L1.2110|
0007be  e02b              B        |L1.2072|
0007c0  e014              B        |L1.2028|
0007c2  e006              B        |L1.2002|
0007c4  e7ff              B        |L1.1990|
                  |L1.1990|
0007c6  4811              LDR      r0,|L1.2060|
0007c8  7800              LDRB     r0,[r0,#0]            ;623  ; CardType
0007ca  7038              STRB     r0,[r7,#0]            ;623
0007cc  2000              MOVS     r0,#0                 ;624
0007ce  9005              STR      r0,[sp,#0x14]         ;624
0007d0  e048              B        |L1.2148|
                  |L1.2002|
0007d2  2100              MOVS     r1,#0                 ;628
0007d4  2009              MOVS     r0,#9                 ;628
0007d6  f7fffffe          BL       send_cmd
0007da  b930              CBNZ     r0,|L1.2026|
0007dc  2110              MOVS     r1,#0x10              ;629
0007de  4638              MOV      r0,r7                 ;629
0007e0  f7fffffe          BL       rcvr_datablock
0007e4  b108              CBZ      r0,|L1.2026|
0007e6  2000              MOVS     r0,#0                 ;630
0007e8  9005              STR      r0,[sp,#0x14]         ;630
                  |L1.2026|
0007ea  e03b              B        |L1.2148|
                  |L1.2028|
0007ec  2100              MOVS     r1,#0                 ;634
0007ee  200a              MOVS     r0,#0xa               ;634
0007f0  f7fffffe          BL       send_cmd
0007f4  b930              CBNZ     r0,|L1.2052|
0007f6  2110              MOVS     r1,#0x10              ;635
0007f8  4638              MOV      r0,r7                 ;635
0007fa  f7fffffe          BL       rcvr_datablock
0007fe  b108              CBZ      r0,|L1.2052|
000800  2000              MOVS     r0,#0                 ;636
000802  9005              STR      r0,[sp,#0x14]         ;636
                  |L1.2052|
000804  e02e              B        |L1.2148|
000806  0000              DCW      0x0000
                  |L1.2056|
                          DCD      Timer1
                  |L1.2060|
                          DCD      CardType
                  |L1.2064|
                          DCD      0x400a0000
                  |L1.2068|
                          DCD      Stat
                  |L1.2072|
000818  2100              MOVS     r1,#0                 ;640
00081a  203a              MOVS     r0,#0x3a              ;640
00081c  f7fffffe          BL       send_cmd
000820  b960              CBNZ     r0,|L1.2108|
000822  2504              MOVS     r5,#4                 ;641
000824  e006              B        |L1.2100|
                  |L1.2086|
000826  20ff              MOVS     r0,#0xff              ;641
000828  f7fffffe          BL       xchg_spi
00082c  f8070b01          STRB     r0,[r7],#1            ;641
000830  1e68              SUBS     r0,r5,#1              ;641
000832  b2c5              UXTB     r5,r0                 ;641
                  |L1.2100|
000834  2d00              CMP      r5,#0                 ;641
000836  d1f6              BNE      |L1.2086|
000838  2000              MOVS     r0,#0                 ;642
00083a  9005              STR      r0,[sp,#0x14]         ;642
                  |L1.2108|
00083c  e012              B        |L1.2148|
                  |L1.2110|
00083e  2100              MOVS     r1,#0                 ;647
000840  208d              MOVS     r0,#0x8d              ;647
000842  f7fffffe          BL       send_cmd
000846  b948              CBNZ     r0,|L1.2140|
000848  20ff              MOVS     r0,#0xff              ;648
00084a  f7fffffe          BL       xchg_spi
00084e  2140              MOVS     r1,#0x40              ;649
000850  4638              MOV      r0,r7                 ;649
000852  f7fffffe          BL       rcvr_datablock
000856  b108              CBZ      r0,|L1.2140|
000858  2000              MOVS     r0,#0                 ;650
00085a  9005              STR      r0,[sp,#0x14]         ;650
                  |L1.2140|
00085c  e002              B        |L1.2148|
                  |L1.2142|
00085e  2004              MOVS     r0,#4                 ;655
000860  9005              STR      r0,[sp,#0x14]         ;655
000862  bf00              NOP                            ;559
                  |L1.2148|
000864  bf00              NOP                            ;565
000866  f7fffffe          BL       deselect
00086a  9805              LDR      r0,[sp,#0x14]         ;660
00086c  e6a8              B        |L1.1472|
;;;662    
                          ENDP

                  disk_timerproc PROC
;;;670    
;;;671    void disk_timerproc (void)
00086e  4a0d              LDR      r2,|L1.2212|
;;;672    {
;;;673      WORD n;
;;;674      BYTE s;
;;;675    
;;;676    
;;;677      n = Timer1;           /* 1kHz decrement timer stopped at 0 */
000870  6812              LDR      r2,[r2,#0]  ; Timer1
000872  b290              UXTH     r0,r2
;;;678      if (n) Timer1 = --n;
000874  b120              CBZ      r0,|L1.2176|
000876  1e42              SUBS     r2,r0,#1
000878  b292              UXTH     r2,r2
00087a  4610              MOV      r0,r2
00087c  4b09              LDR      r3,|L1.2212|
00087e  601a              STR      r2,[r3,#0]  ; Timer1
                  |L1.2176|
;;;679      n = Timer2;
000880  4a09              LDR      r2,|L1.2216|
000882  6812              LDR      r2,[r2,#0]  ; Timer2
000884  b290              UXTH     r0,r2
;;;680      if (n) Timer2 = --n;
000886  b120              CBZ      r0,|L1.2194|
000888  1e42              SUBS     r2,r0,#1
00088a  b292              UXTH     r2,r2
00088c  4610              MOV      r0,r2
00088e  4b06              LDR      r3,|L1.2216|
000890  601a              STR      r2,[r3,#0]  ; Timer2
                  |L1.2194|
;;;681    
;;;682      s = Stat;
000892  4a06              LDR      r2,|L1.2220|
000894  7811              LDRB     r1,[r2,#0]  ; Stat
;;;683      if (WP)   /* Write protected */
;;;684        s |= STA_PROTECT;
;;;685      else    /* Write enabled */
;;;686        s &= ~STA_PROTECT;
000896  f0210104          BIC      r1,r1,#4
;;;687      if (INS)  /* Card is in socket */
;;;688        s &= ~STA_NODISK;
00089a  f0210102          BIC      r1,r1,#2
;;;689      else    /* Socket empty */
;;;690        s |= (STA_NODISK | STA_NOINIT);
;;;691      Stat = s;
00089e  7011              STRB     r1,[r2,#0]
;;;692    }
0008a0  4770              BX       lr
;;;693    
                          ENDP

0008a2  0000              DCW      0x0000
                  |L1.2212|
                          DCD      Timer1
                  |L1.2216|
                          DCD      Timer2
                  |L1.2220|
                          DCD      Stat

                          AREA ||.data||, DATA, ALIGN=2

                  Stat
000000  01000000          DCB      0x01,0x00,0x00,0x00
                  Timer1
                          DCD      0x00000000
                  Timer2
                          DCD      0x00000000
                  CardType
00000c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\src_fatfs\\mmc.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_mmc_c_b3252454____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___5_mmc_c_b3252454____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_mmc_c_b3252454____REVSH|
#line 144
|__asm___5_mmc_c_b3252454____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
