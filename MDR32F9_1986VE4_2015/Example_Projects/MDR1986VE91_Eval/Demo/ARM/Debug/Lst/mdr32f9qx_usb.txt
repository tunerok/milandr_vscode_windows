; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\mdr32f9qx_usb.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\mdr32f9qx_usb.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\mdr32f9qx_usb.crf ..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_usb.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USB_BRGInit PROC
;;;72     
;;;73     void USB_BRGInit(const USB_Clock_TypeDef* USB_Clock_InitStruct)
000000  4601              MOV      r1,r0
;;;74     {
;;;75       uint32_t tmpreg;
;;;76     
;;;77       /* Check the parameters */
;;;78       assert_param(IS_USB_CLOCK(USB_Clock_InitStruct->USB_PLLUSBMUL, USB_Clock_InitStruct->USB_USBC1_Source));
;;;79     
;;;80       /* USB_CLOCK Configuration */
;;;81       tmpreg  = MDR_RST_CLK->USB_CLOCK;
000002  4ab6              LDR      r2,|L1.732|
000004  6910              LDR      r0,[r2,#0x10]
;;;82       tmpreg |= RST_CLK_USB_CLOCK_USB_CLK_EN;
000006  f4407080          ORR      r0,r0,#0x100
;;;83       tmpreg |= USB_Clock_InitStruct->USB_USBC1_Source;
00000a  680a              LDR      r2,[r1,#0]
00000c  4310              ORRS     r0,r0,r2
;;;84       tmpreg |= USB_PLL;
00000e  f0400004          ORR      r0,r0,#4
;;;85     
;;;86       MDR_RST_CLK->USB_CLOCK = tmpreg;
000012  4ab2              LDR      r2,|L1.732|
000014  6110              STR      r0,[r2,#0x10]
;;;87     
;;;88       /* PLL_CONTROL Configuration */
;;;89       tmpreg  = MDR_RST_CLK->PLL_CONTROL;
000016  6850              LDR      r0,[r2,#4]
;;;90       tmpreg |= RST_CLK_PLL_CONTROL_PLL_USB_ON;
000018  f0400001          ORR      r0,r0,#1
;;;91       tmpreg |= (USB_Clock_InitStruct->USB_PLLUSBMUL << RST_CLK_PLL_CONTROL_PLL_USB_MUL_Pos);
00001c  684a              LDR      r2,[r1,#4]
00001e  ea401002          ORR      r0,r0,r2,LSL #4
;;;92     
;;;93       MDR_RST_CLK->PLL_CONTROL = tmpreg;
000022  4aae              LDR      r2,|L1.732|
000024  6050              STR      r0,[r2,#4]
;;;94       while ((MDR_RST_CLK->CLOCK_STATUS & RST_CLK_CLOCK_STATUS_PLL_USB_RDY) != SET);
000026  bf00              NOP      
                  |L1.40|
000028  4aac              LDR      r2,|L1.732|
00002a  6812              LDR      r2,[r2,#0]
00002c  f0120f01          TST      r2,#1
000030  d0fa              BEQ      |L1.40|
;;;95     }
000032  4770              BX       lr
;;;96     
                          ENDP

                  USB_SetHSCR PROC
;;;132    
;;;133    void USB_SetHSCR(uint32_t RegValue)
000034  bf00              NOP      
;;;134    {
;;;135      /* Check the parameters */
;;;136      assert_param(IS_USB_HSCR_VALUE(RegValue));
;;;137    
;;;138      USB_SFR_SET(MDR_USB->HSCR, RegValue);
000036  4aaa              LDR      r2,|L1.736|
000038  6811              LDR      r1,[r2,#0]
00003a  b282              UXTH     r2,r0
00003c  ea420101          ORR      r1,r2,r1
000040  ea214110          BIC      r1,r1,r0,LSR #16
000044  4aa7              LDR      r2,|L1.740|
000046  f8c21380          STR      r1,[r2,#0x380]
00004a  bf00              NOP      
;;;139    }
00004c  4770              BX       lr
;;;140    
                          ENDP

                  USB_Reset PROC
;;;102    
;;;103    void USB_Reset(void)
00004e  b500              PUSH     {lr}
;;;104    {
;;;105      uint32_t count;
;;;106    
;;;107      USB_SetHSCR(USB_HSCR_RESET_CORE_Reset);  /* Set RESET_CORE bit */
000050  2002              MOVS     r0,#2
000052  f7fffffe          BL       USB_SetHSCR
;;;108      for (count = 0; count < 1000; count++);  /* Hold Reset */
000056  2300              MOVS     r3,#0
000058  e000              B        |L1.92|
                  |L1.90|
00005a  1c5b              ADDS     r3,r3,#1
                  |L1.92|
00005c  f5b37f7a          CMP      r3,#0x3e8
000060  d3fb              BCC      |L1.90|
;;;109      USB_SetHSCR(USB_HSCR_RESET_CORE_Work);
000062  f44f3000          MOV      r0,#0x20000
000066  f7fffffe          BL       USB_SetHSCR
;;;110    }
00006a  bd00              POP      {pc}
;;;111    
                          ENDP

                  USB_GetHSCR PROC
;;;119    
;;;120    uint32_t USB_GetHSCR(void)
00006c  489c              LDR      r0,|L1.736|
;;;121    {
;;;122      return MDR_USB->HSCR;
00006e  6800              LDR      r0,[r0,#0]
;;;123    }
000070  4770              BX       lr
;;;124    
                          ENDP

                  USB_GetHSVR PROC
;;;149    
;;;150    USB_Version_TypeDef USB_GetHSVR(void)
000072  b508              PUSH     {r3,lr}
;;;151    {
;;;152      uint32_t tmpreg;
;;;153      USB_Version_TypeDef s;
;;;154    
;;;155      tmpreg = MDR_USB->HSVR;
000074  489c              LDR      r0,|L1.744|
000076  6801              LDR      r1,[r0,#0]
;;;156    
;;;157      s.USB_Version  = tmpreg & USB_HSVR_VERSION_Msk;
000078  f001000f          AND      r0,r1,#0xf
00007c  f88d0000          STRB     r0,[sp,#0]
;;;158      s.USB_Revision = (tmpreg & USB_HSVR_REVISION_Msk) >> USB_HSVR_REVISION_Pos;
000080  f3c11003          UBFX     r0,r1,#4,#4
000084  f88d0001          STRB     r0,[sp,#1]
;;;159    
;;;160      return s;
000088  f8bd2000          LDRH     r2,[sp,#0]
00008c  4610              MOV      r0,r2
;;;161    }
00008e  bd08              POP      {r3,pc}
;;;162    
                          ENDP

                  USB_GetHTXC PROC
;;;170    
;;;171    uint32_t USB_GetHTXC(void)
000090  4894              LDR      r0,|L1.740|
;;;172    {
;;;173      return MDR_USB->HTXC;
000092  6800              LDR      r0,[r0,#0]
;;;174    }
000094  4770              BX       lr
;;;175    
                          ENDP

                  USB_SetHTXC PROC
;;;183    
;;;184    void     USB_SetHTXC(uint32_t RegValue)
000096  bf00              NOP      
;;;185    {
;;;186      /* Check the parameters */
;;;187      assert_param(IS_USB_HTXC_VALUE(RegValue));
;;;188    
;;;189      USB_SFR_SET(MDR_USB->HTXC, RegValue);
000098  4a92              LDR      r2,|L1.740|
00009a  6811              LDR      r1,[r2,#0]
00009c  b282              UXTH     r2,r0
00009e  4311              ORRS     r1,r1,r2
0000a0  ea214110          BIC      r1,r1,r0,LSR #16
0000a4  4a8f              LDR      r2,|L1.740|
0000a6  6011              STR      r1,[r2,#0]
0000a8  bf00              NOP      
;;;190    }
0000aa  4770              BX       lr
;;;191    
                          ENDP

                  USB_GetHTXT PROC
;;;199    
;;;200    uint32_t USB_GetHTXT(void)
0000ac  488d              LDR      r0,|L1.740|
;;;201    {
;;;202      return MDR_USB->HTXT;
0000ae  6840              LDR      r0,[r0,#4]
;;;203    }
0000b0  4770              BX       lr
;;;204    
                          ENDP

                  USB_SetHTXT PROC
;;;212    
;;;213    void     USB_SetHTXT(uint32_t RegValue)
0000b2  498c              LDR      r1,|L1.740|
;;;214    {
;;;215      /* Check the parameters */
;;;216      assert_param(IS_USB_HTXT_VALUE(RegValue));
;;;217    
;;;218      MDR_USB->HTXT = RegValue;
0000b4  6048              STR      r0,[r1,#4]
;;;219    }
0000b6  4770              BX       lr
;;;220    
                          ENDP

                  USB_GetHTXLC PROC
;;;228    
;;;229    uint32_t USB_GetHTXLC(void)
0000b8  488a              LDR      r0,|L1.740|
;;;230    {
;;;231      return MDR_USB->HTXLC;
0000ba  6880              LDR      r0,[r0,#8]
;;;232    }
0000bc  4770              BX       lr
;;;233    
                          ENDP

                  USB_SetHTXLC PROC
;;;241    
;;;242    void     USB_SetHTXLC(uint32_t RegValue)
0000be  bf00              NOP      
;;;243    {
;;;244      /* Check the parameters */
;;;245      assert_param(IS_USB_HTXLC_VALUE(RegValue));
;;;246    
;;;247      USB_SFR_SET(MDR_USB->HTXLC, RegValue);
0000c0  4a88              LDR      r2,|L1.740|
0000c2  6891              LDR      r1,[r2,#8]
0000c4  b282              UXTH     r2,r0
0000c6  4311              ORRS     r1,r1,r2
0000c8  ea214110          BIC      r1,r1,r0,LSR #16
0000cc  4a85              LDR      r2,|L1.740|
0000ce  6091              STR      r1,[r2,#8]
0000d0  bf00              NOP      
;;;248    }
0000d2  4770              BX       lr
;;;249    
                          ENDP

                  USB_GetHTXSE PROC
;;;257    
;;;258    uint32_t USB_GetHTXSE(void)
0000d4  4883              LDR      r0,|L1.740|
;;;259    {
;;;260      return MDR_USB->HTXSE;
0000d6  68c0              LDR      r0,[r0,#0xc]
;;;261    }
0000d8  4770              BX       lr
;;;262    
                          ENDP

                  USB_SetHTXSE PROC
;;;270    
;;;271    void     USB_SetHTXSE(uint32_t RegValue)
0000da  bf00              NOP      
;;;272    {
;;;273      /* Check the parameters */
;;;274      assert_param(IS_USB_HTXSE_VALUE(RegValue));
;;;275    
;;;276      USB_SFR_SET(MDR_USB->HTXSE, RegValue);
0000dc  4a81              LDR      r2,|L1.740|
0000de  68d1              LDR      r1,[r2,#0xc]
0000e0  b282              UXTH     r2,r0
0000e2  4311              ORRS     r1,r1,r2
0000e4  ea214110          BIC      r1,r1,r0,LSR #16
0000e8  4a7e              LDR      r2,|L1.740|
0000ea  60d1              STR      r1,[r2,#0xc]
0000ec  bf00              NOP      
;;;277    }
0000ee  4770              BX       lr
;;;278    
                          ENDP

                  USB_GetHTXA PROC
;;;286    
;;;287    uint32_t USB_GetHTXA(void)
0000f0  487c              LDR      r0,|L1.740|
;;;288    {
;;;289      return MDR_USB->HTXA;
0000f2  6900              LDR      r0,[r0,#0x10]
;;;290    }
0000f4  4770              BX       lr
;;;291    
                          ENDP

                  USB_SetHTXA PROC
;;;299    
;;;300    void     USB_SetHTXA(uint32_t RegValue)
0000f6  497b              LDR      r1,|L1.740|
;;;301    {
;;;302      /* Check the parameters */
;;;303      assert_param(IS_USB_HTXA_VALUE(RegValue));
;;;304    
;;;305      MDR_USB->HTXA = RegValue;
0000f8  6108              STR      r0,[r1,#0x10]
;;;306    }
0000fa  4770              BX       lr
;;;307    
                          ENDP

                  USB_GetHTXE PROC
;;;315    
;;;316    uint32_t USB_GetHTXE(void)
0000fc  4879              LDR      r0,|L1.740|
;;;317    {
;;;318      return MDR_USB->HTXE;
0000fe  6940              LDR      r0,[r0,#0x14]
;;;319    }
000100  4770              BX       lr
;;;320    
                          ENDP

                  USB_SetHTXE PROC
;;;328    
;;;329    void     USB_SetHTXE(uint32_t RegValue)
000102  4978              LDR      r1,|L1.740|
;;;330    {
;;;331      /* Check the parameters */
;;;332      assert_param(IS_USB_HTXE_VALUE(RegValue));
;;;333    
;;;334      MDR_USB->HTXE = RegValue;
000104  6148              STR      r0,[r1,#0x14]
;;;335    }
000106  4770              BX       lr
;;;336    
                          ENDP

                  USB_GetHFN PROC
;;;344    
;;;345    uint32_t USB_GetHFN(void)
000108  4876              LDR      r0,|L1.740|
;;;346    {
;;;347      return MDR_USB->HFN_H;
00010a  69c0              LDR      r0,[r0,#0x1c]
;;;348    }
00010c  4770              BX       lr
;;;349    
                          ENDP

                  USB_GetHIS PROC
;;;357    
;;;358    uint32_t USB_GetHIS(void)
00010e  4875              LDR      r0,|L1.740|
;;;359    {
;;;360      return MDR_USB->HIS;
000110  6a00              LDR      r0,[r0,#0x20]
;;;361    }
000112  4770              BX       lr
;;;362    
                          ENDP

                  USB_SetHIS PROC
;;;370    
;;;371    void     USB_SetHIS(uint32_t RegValue)
000114  bf00              NOP      
;;;372    {
;;;373      /* Check the parameters */
;;;374      assert_param(IS_USB_HIS_VALUE(RegValue));
;;;375    
;;;376      USB_SFR_SET(MDR_USB->HIS, RegValue);
000116  4a73              LDR      r2,|L1.740|
000118  6a11              LDR      r1,[r2,#0x20]
00011a  b282              UXTH     r2,r0
00011c  4311              ORRS     r1,r1,r2
00011e  ea214110          BIC      r1,r1,r0,LSR #16
000122  4a70              LDR      r2,|L1.740|
000124  6211              STR      r1,[r2,#0x20]
000126  bf00              NOP      
;;;377    }
000128  4770              BX       lr
;;;378    
                          ENDP

                  USB_GetHIM PROC
;;;386    
;;;387    uint32_t USB_GetHIM(void)
00012a  486e              LDR      r0,|L1.740|
;;;388    {
;;;389      return MDR_USB->HIM;
00012c  6a40              LDR      r0,[r0,#0x24]
;;;390    }
00012e  4770              BX       lr
;;;391    
                          ENDP

                  USB_SetHIM PROC
;;;399    
;;;400    void     USB_SetHIM(uint32_t RegValue)
000130  bf00              NOP      
;;;401    {
;;;402      /* Check the parameters */
;;;403      assert_param(IS_USB_HIM_VALUE(RegValue));
;;;404    
;;;405      USB_SFR_SET(MDR_USB->HIM, RegValue);
000132  4a6c              LDR      r2,|L1.740|
000134  6a51              LDR      r1,[r2,#0x24]
000136  b282              UXTH     r2,r0
000138  4311              ORRS     r1,r1,r2
00013a  ea214110          BIC      r1,r1,r0,LSR #16
00013e  4a69              LDR      r2,|L1.740|
000140  6251              STR      r1,[r2,#0x24]
000142  bf00              NOP      
;;;406    }
000144  4770              BX       lr
;;;407    
                          ENDP

                  USB_GetHRXS PROC
;;;415    
;;;416    uint32_t USB_GetHRXS(void)
000146  4867              LDR      r0,|L1.740|
;;;417    {
;;;418      return MDR_USB->HRXS;
000148  6a80              LDR      r0,[r0,#0x28]
;;;419    }
00014a  4770              BX       lr
;;;420    
                          ENDP

                  USB_GetHRXP PROC
;;;428    
;;;429    uint32_t USB_GetHRXP(void)
00014c  4865              LDR      r0,|L1.740|
;;;430    {
;;;431      return MDR_USB->HRXP;
00014e  6ac0              LDR      r0,[r0,#0x2c]
;;;432    }
000150  4770              BX       lr
;;;433    
                          ENDP

                  USB_GetHRXA PROC
;;;441    
;;;442    uint32_t USB_GetHRXA(void)
000152  4864              LDR      r0,|L1.740|
;;;443    {
;;;444      return MDR_USB->HRXA;
000154  6b00              LDR      r0,[r0,#0x30]
;;;445    }
000156  4770              BX       lr
;;;446    
                          ENDP

                  USB_GetHRXE PROC
;;;454    
;;;455    uint32_t USB_GetHRXE(void)
000158  4862              LDR      r0,|L1.740|
;;;456    {
;;;457      return MDR_USB->HRXE;
00015a  6b40              LDR      r0,[r0,#0x34]
;;;458    }
00015c  4770              BX       lr
;;;459    
                          ENDP

                  USB_GetHRXCS PROC
;;;467    
;;;468    uint32_t USB_GetHRXCS(void)
00015e  4861              LDR      r0,|L1.740|
;;;469    {
;;;470      return MDR_USB->HRXCS;
000160  6b80              LDR      r0,[r0,#0x38]
;;;471    }
000162  4770              BX       lr
;;;472    
                          ENDP

                  USB_GetHSTM PROC
;;;480    
;;;481    uint32_t USB_GetHSTM(void)
000164  485f              LDR      r0,|L1.740|
;;;482    {
;;;483      return MDR_USB->HSTM;
000166  6bc0              LDR      r0,[r0,#0x3c]
;;;484    }
000168  4770              BX       lr
;;;485    
                          ENDP

                  USB_GetHRXFD PROC
;;;493    
;;;494    uint32_t USB_GetHRXFD(void)
00016a  4860              LDR      r0,|L1.748|
;;;495    {
;;;496      return MDR_USB->HRXFD;
00016c  6800              LDR      r0,[r0,#0]
;;;497    }
00016e  4770              BX       lr
;;;498    
                          ENDP

                  USB_GetHRXFDC PROC
;;;506    
;;;507    uint32_t USB_GetHRXFDC(void)
000170  485f              LDR      r0,|L1.752|
;;;508    {
;;;509      return MDR_USB->HRXFDC_H;
000172  6800              LDR      r0,[r0,#0]
;;;510    }
000174  4770              BX       lr
;;;511    
                          ENDP

                  USB_GetHRXFC PROC
;;;519    
;;;520    uint32_t USB_GetHRXFC(void)
000176  485f              LDR      r0,|L1.756|
;;;521    {
;;;522      return MDR_USB->HRXFC;
000178  6800              LDR      r0,[r0,#0]
;;;523    }
00017a  4770              BX       lr
;;;524    
                          ENDP

                  USB_SetHRXFC PROC
;;;532    
;;;533    void     USB_SetHRXFC(uint32_t RegValue)
00017c  495d              LDR      r1,|L1.756|
;;;534    {
;;;535      /* Check the parameters */
;;;536      assert_param(IS_USB_HRXFC_VALUE(RegValue));
;;;537    
;;;538      MDR_USB->HRXFC = RegValue;
00017e  6008              STR      r0,[r1,#0]
;;;539    }
000180  4770              BX       lr
;;;540    
                          ENDP

                  USB_GetHTXFD PROC
;;;548    
;;;549    uint32_t USB_GetHTXFD(void)
000182  485d              LDR      r0,|L1.760|
;;;550    {
;;;551      return MDR_USB->HTXFD;
000184  6800              LDR      r0,[r0,#0]
;;;552    }
000186  4770              BX       lr
;;;553    
                          ENDP

                  USB_SetHTXFD PROC
;;;561    
;;;562    void     USB_SetHTXFD(uint32_t RegValue)
000188  495b              LDR      r1,|L1.760|
;;;563    {
;;;564      /* Check the parameters */
;;;565      assert_param(IS_USB_HTXFD_VALUE(RegValue));
;;;566    
;;;567      MDR_USB->HTXFD = RegValue;
00018a  6008              STR      r0,[r1,#0]
;;;568    }
00018c  4770              BX       lr
;;;569    
                          ENDP

                  USB_GetHTXFC PROC
;;;577    
;;;578    uint32_t USB_GetHTXFC(void)
00018e  485b              LDR      r0,|L1.764|
;;;579    {
;;;580      return MDR_USB->HTXFC;
000190  6800              LDR      r0,[r0,#0]
;;;581    }
000192  4770              BX       lr
;;;582    
                          ENDP

                  USB_SetHTXFC PROC
;;;590    
;;;591    void     USB_SetHTXFC(uint32_t RegValue)
000194  4959              LDR      r1,|L1.764|
;;;592    {
;;;593      /* Check the parameters */
;;;594      assert_param(IS_USB_HTXFC_VALUE(RegValue));
;;;595    
;;;596      MDR_USB->HTXFC = RegValue;
000196  6008              STR      r0,[r1,#0]
;;;597    }
000198  4770              BX       lr
;;;598    
                          ENDP

                  USB_GetSEPxCTRL PROC
;;;608    
;;;609    uint32_t USB_GetSEPxCTRL(USB_EP_TypeDef EndPointNumber)
00019a  4601              MOV      r1,r0
;;;610    {
;;;611      /* Check the parameters */
;;;612      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;613    
;;;614      return MDR_USB->USB_SEP[EndPointNumber].CTRL;
00019c  4857              LDR      r0,|L1.764|
00019e  3030              ADDS     r0,r0,#0x30
0001a0  eb001001          ADD      r0,r0,r1,LSL #4
0001a4  6800              LDR      r0,[r0,#0]
;;;615    }
0001a6  4770              BX       lr
;;;616    
                          ENDP

                  USB_SetSEPxCTRL PROC
;;;628    
;;;629    void     USB_SetSEPxCTRL(USB_EP_TypeDef EndPointNumber, uint32_t RegValue)
0001a8  bf00              NOP      
;;;630    {
;;;631      /* Check the parameters */
;;;632      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;633      assert_param(IS_USB_SEPx_CTRL_VALUE(RegValue));
;;;634    
;;;635      USB_SFR_SET(MDR_USB->USB_SEP[EndPointNumber].CTRL, RegValue);
0001aa  4b4e              LDR      r3,|L1.740|
0001ac  eb031300          ADD      r3,r3,r0,LSL #4
0001b0  f8d32100          LDR      r2,[r3,#0x100]
0001b4  b28b              UXTH     r3,r1
0001b6  431a              ORRS     r2,r2,r3
0001b8  ea224211          BIC      r2,r2,r1,LSR #16
0001bc  4b4f              LDR      r3,|L1.764|
0001be  3330              ADDS     r3,r3,#0x30
0001c0  eb031300          ADD      r3,r3,r0,LSL #4
0001c4  601a              STR      r2,[r3,#0]
0001c6  bf00              NOP      
;;;636    }
0001c8  4770              BX       lr
;;;637    
                          ENDP

                  USB_GetSEPxSTS PROC
;;;647    
;;;648    uint32_t USB_GetSEPxSTS(USB_EP_TypeDef EndPointNumber)
0001ca  4601              MOV      r1,r0
;;;649    {
;;;650      /* Check the parameters */
;;;651      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;652    
;;;653      return MDR_USB->USB_SEP[EndPointNumber].STS;
0001cc  484b              LDR      r0,|L1.764|
0001ce  3030              ADDS     r0,r0,#0x30
0001d0  eb001001          ADD      r0,r0,r1,LSL #4
0001d4  6840              LDR      r0,[r0,#4]
;;;654    }
0001d6  4770              BX       lr
;;;655    
                          ENDP

                  USB_GetSEPxTS PROC
;;;665    
;;;666    uint32_t USB_GetSEPxTS(USB_EP_TypeDef EndPointNumber)
0001d8  4601              MOV      r1,r0
;;;667    {
;;;668      /* Check the parameters */
;;;669      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;670    
;;;671      return MDR_USB->USB_SEP[EndPointNumber].TS;
0001da  4848              LDR      r0,|L1.764|
0001dc  3030              ADDS     r0,r0,#0x30
0001de  eb001001          ADD      r0,r0,r1,LSL #4
0001e2  6880              LDR      r0,[r0,#8]
;;;672    }
0001e4  4770              BX       lr
;;;673    
                          ENDP

                  USB_GetSEPxNTS PROC
;;;683    
;;;684    uint32_t USB_GetSEPxNTS(USB_EP_TypeDef EndPointNumber)
0001e6  4601              MOV      r1,r0
;;;685    {
;;;686      /* Check the parameters */
;;;687      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;688    
;;;689      return MDR_USB->USB_SEP[EndPointNumber].NTS;
0001e8  4844              LDR      r0,|L1.764|
0001ea  3030              ADDS     r0,r0,#0x30
0001ec  eb001001          ADD      r0,r0,r1,LSL #4
0001f0  68c0              LDR      r0,[r0,#0xc]
;;;690    }
0001f2  4770              BX       lr
;;;691    
                          ENDP

                  USB_GetSC PROC
;;;699    
;;;700    uint32_t USB_GetSC(void)
0001f4  4842              LDR      r0,|L1.768|
;;;701    {
;;;702      return MDR_USB->SC;
0001f6  6800              LDR      r0,[r0,#0]
;;;703    }
0001f8  4770              BX       lr
;;;704    
                          ENDP

                  USB_SetSC PROC
;;;712    
;;;713    void     USB_SetSC(uint32_t RegValue)
0001fa  bf00              NOP      
;;;714    {
;;;715      /* Check the parameters */
;;;716      assert_param(IS_USB_SC_VALUE(RegValue));
;;;717    
;;;718      USB_SFR_SET(MDR_USB->SC, RegValue);
0001fc  4a40              LDR      r2,|L1.768|
0001fe  6811              LDR      r1,[r2,#0]
000200  b282              UXTH     r2,r0
000202  ea420101          ORR      r1,r2,r1
000206  ea214110          BIC      r1,r1,r0,LSR #16
00020a  4a36              LDR      r2,|L1.740|
00020c  f8c21140          STR      r1,[r2,#0x140]
000210  bf00              NOP      
;;;719    }
000212  4770              BX       lr
;;;720    
                          ENDP

                  USB_GetSLS PROC
;;;728    
;;;729    uint32_t USB_GetSLS(void)
000214  483b              LDR      r0,|L1.772|
;;;730    {
;;;731      return MDR_USB->SLS;
000216  6800              LDR      r0,[r0,#0]
;;;732    }
000218  4770              BX       lr
;;;733    
                          ENDP

                  USB_GetSIS PROC
;;;741    
;;;742    uint32_t USB_GetSIS(void)
00021a  483b              LDR      r0,|L1.776|
;;;743    {
;;;744      return MDR_USB->SIS;
00021c  6800              LDR      r0,[r0,#0]
;;;745    }
00021e  4770              BX       lr
;;;746    
                          ENDP

                  USB_SetSIS PROC
;;;754    
;;;755    void     USB_SetSIS(uint32_t RegValue)
000220  4939              LDR      r1,|L1.776|
;;;756    {
;;;757      /* Check the parameters */
;;;758      assert_param(IS_USB_SIS_VALUE(RegValue));
;;;759    
;;;760      /* USB_SIS bits may be only cleared by writing 1 */
;;;761      MDR_USB->SIS = RegValue;
000222  6008              STR      r0,[r1,#0]
;;;762    }
000224  4770              BX       lr
;;;763    
                          ENDP

                  USB_GetSIM PROC
;;;771    
;;;772    uint32_t USB_GetSIM(void)
000226  4839              LDR      r0,|L1.780|
;;;773    {
;;;774      return MDR_USB->SIM;
000228  6800              LDR      r0,[r0,#0]
;;;775    }
00022a  4770              BX       lr
;;;776    
                          ENDP

                  USB_SetSIM PROC
;;;784    
;;;785    void     USB_SetSIM(uint32_t RegValue)
00022c  bf00              NOP      
;;;786    {
;;;787      /* Check the parameters */
;;;788      assert_param(IS_USB_SIM_VALUE(RegValue));
;;;789    
;;;790      USB_SFR_SET(MDR_USB->SIM, RegValue);
00022e  4a37              LDR      r2,|L1.780|
000230  6811              LDR      r1,[r2,#0]
000232  b282              UXTH     r2,r0
000234  ea420101          ORR      r1,r2,r1
000238  ea214110          BIC      r1,r1,r0,LSR #16
00023c  4a29              LDR      r2,|L1.740|
00023e  f8c2114c          STR      r1,[r2,#0x14c]
000242  bf00              NOP      
;;;791    }
000244  4770              BX       lr
;;;792    
                          ENDP

                  USB_GetSA PROC
;;;800    
;;;801    uint32_t USB_GetSA(void)
000246  4832              LDR      r0,|L1.784|
;;;802    {
;;;803      return MDR_USB->SA;
000248  6800              LDR      r0,[r0,#0]
;;;804    }
00024a  4770              BX       lr
;;;805    
                          ENDP

                  USB_SetSA PROC
;;;813    
;;;814    void     USB_SetSA(uint32_t RegValue)
00024c  4930              LDR      r1,|L1.784|
;;;815    {
;;;816      /* Check the parameters */
;;;817      assert_param(IS_USB_SA_VALUE(RegValue));
;;;818    
;;;819      MDR_USB->SA = RegValue;
00024e  6008              STR      r0,[r1,#0]
;;;820    }
000250  4770              BX       lr
;;;821    
                          ENDP

                  USB_GetSFN PROC
;;;829    
;;;830    uint32_t USB_GetSFN(void)
000252  4830              LDR      r0,|L1.788|
;;;831    {
;;;832      return MDR_USB->SFN_H;
000254  6800              LDR      r0,[r0,#0]
;;;833    }
000256  4770              BX       lr
;;;834    
                          ENDP

                  USB_GetSEPxRXFD PROC
;;;844    
;;;845    uint32_t USB_GetSEPxRXFD(USB_EP_TypeDef EndPointNumber)
000258  4601              MOV      r1,r0
;;;846    {
;;;847      /* Check the parameters */
;;;848      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;849    
;;;850      return MDR_USB->USB_SEP_FIFO[EndPointNumber].RXFD;
00025a  482e              LDR      r0,|L1.788|
00025c  3028              ADDS     r0,r0,#0x28
00025e  eb0010c1          ADD      r0,r0,r1,LSL #7
000262  6800              LDR      r0,[r0,#0]
;;;851    }
000264  4770              BX       lr
;;;852    
                          ENDP

                  USB_GetSEPxRXFDC PROC
;;;862    
;;;863    uint32_t USB_GetSEPxRXFDC(USB_EP_TypeDef EndPointNumber)
000266  4601              MOV      r1,r0
;;;864    {
;;;865      /* Check the parameters */
;;;866      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;867    
;;;868      return MDR_USB->USB_SEP_FIFO[EndPointNumber].RXFDC_H;
000268  482a              LDR      r0,|L1.788|
00026a  3028              ADDS     r0,r0,#0x28
00026c  eb0010c1          ADD      r0,r0,r1,LSL #7
000270  68c0              LDR      r0,[r0,#0xc]
;;;869    }
000272  4770              BX       lr
;;;870    
                          ENDP

                  USB_GetSEPxRXFC PROC
;;;880    
;;;881    uint32_t USB_GetSEPxRXFC(USB_EP_TypeDef EndPointNumber)
000274  4601              MOV      r1,r0
;;;882    {
;;;883      /* Check the parameters */
;;;884      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;885    
;;;886      return MDR_USB->USB_SEP_FIFO[EndPointNumber].RXFC;
000276  4827              LDR      r0,|L1.788|
000278  3028              ADDS     r0,r0,#0x28
00027a  eb0010c1          ADD      r0,r0,r1,LSL #7
00027e  6900              LDR      r0,[r0,#0x10]
;;;887    }
000280  4770              BX       lr
;;;888    
                          ENDP

                  USB_SetSEPxRXFC PROC
;;;900    
;;;901    void     USB_SetSEPxRXFC(USB_EP_TypeDef EndPointNumber, uint32_t RegValue)
000282  4a24              LDR      r2,|L1.788|
;;;902    {
;;;903      /* Check the parameters */
;;;904      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;905      assert_param(IS_USB_SEPx_RXFC_VALUE(RegValue));
;;;906    
;;;907      MDR_USB->USB_SEP_FIFO[EndPointNumber].RXFC = RegValue;
000284  3228              ADDS     r2,r2,#0x28
000286  eb0212c0          ADD      r2,r2,r0,LSL #7
00028a  6111              STR      r1,[r2,#0x10]
;;;908    }
00028c  4770              BX       lr
;;;909    
                          ENDP

                  USB_GetSEPxTXFD PROC
;;;919    
;;;920    uint32_t USB_GetSEPxTXFD(USB_EP_TypeDef EndPointNumber)
00028e  4601              MOV      r1,r0
;;;921    {
;;;922      /* Check the parameters */
;;;923      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;924    
;;;925      return MDR_USB->USB_SEP_FIFO[EndPointNumber].TXFD;
000290  4820              LDR      r0,|L1.788|
000292  3028              ADDS     r0,r0,#0x28
000294  eb0010c1          ADD      r0,r0,r1,LSL #7
000298  6c00              LDR      r0,[r0,#0x40]
;;;926    }
00029a  4770              BX       lr
;;;927    
                          ENDP

                  USB_SetSEPxTXFD PROC
;;;939    
;;;940    void     USB_SetSEPxTXFD(USB_EP_TypeDef EndPointNumber, uint32_t RegValue)
00029c  4a1d              LDR      r2,|L1.788|
;;;941    {
;;;942      /* Check the parameters */
;;;943      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;944      assert_param(IS_USB_SEPx_TXFD_VALUE(RegValue));
;;;945    
;;;946      MDR_USB->USB_SEP_FIFO[EndPointNumber].TXFD = RegValue;
00029e  3228              ADDS     r2,r2,#0x28
0002a0  eb0212c0          ADD      r2,r2,r0,LSL #7
0002a4  6411              STR      r1,[r2,#0x40]
;;;947    }
0002a6  4770              BX       lr
;;;948    
                          ENDP

                  USB_GetSEPxTXFDC PROC
;;;958    
;;;959    uint32_t USB_GetSEPxTXFDC(USB_EP_TypeDef EndPointNumber)
0002a8  4601              MOV      r1,r0
;;;960    {
;;;961      /* Check the parameters */
;;;962      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;963    
;;;964      return MDR_USB->USB_SEP_FIFO[EndPointNumber].TXFDC;
0002aa  481a              LDR      r0,|L1.788|
0002ac  3028              ADDS     r0,r0,#0x28
0002ae  eb0010c1          ADD      r0,r0,r1,LSL #7
0002b2  6d00              LDR      r0,[r0,#0x50]
;;;965    }
0002b4  4770              BX       lr
;;;966    
                          ENDP

                  USB_SetSEPxTXFDC PROC
;;;978    
;;;979    void     USB_SetSEPxTXFDC(USB_EP_TypeDef EndPointNumber, uint32_t RegValue)
0002b6  4a17              LDR      r2,|L1.788|
;;;980    {
;;;981      /* Check the parameters */
;;;982      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;983      assert_param(IS_USB_SEPx_TXFDC_VALUE(RegValue));
;;;984    
;;;985      MDR_USB->USB_SEP_FIFO[EndPointNumber].TXFDC = RegValue;
0002b8  3228              ADDS     r2,r2,#0x28
0002ba  eb0212c0          ADD      r2,r2,r0,LSL #7
0002be  6511              STR      r1,[r2,#0x50]
;;;986    }
0002c0  4770              BX       lr
;;;987    
                          ENDP

                  USB_SEPxToggleEPDATASEQ PROC
;;;997    
;;;998    void     USB_SEPxToggleEPDATASEQ(USB_EP_TypeDef EndPointNumber)
0002c2  4a0e              LDR      r2,|L1.764|
;;;999    {
;;;1000     uint32_t tmpreg;
;;;1001   
;;;1002     /* Check the parameters */
;;;1003     assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;1004   
;;;1005     tmpreg = MDR_USB->USB_SEP[EndPointNumber].CTRL;
0002c4  3230              ADDS     r2,r2,#0x30
0002c6  eb021200          ADD      r2,r2,r0,LSL #4
0002ca  6811              LDR      r1,[r2,#0]
;;;1006     tmpreg = tmpreg ^ USB_SEPx_CTRL_EPDATASEQ_Data1;
0002cc  f0810104          EOR      r1,r1,#4
;;;1007     MDR_USB->USB_SEP[EndPointNumber].CTRL = tmpreg;
0002d0  4a0a              LDR      r2,|L1.764|
0002d2  3230              ADDS     r2,r2,#0x30
0002d4  eb021200          ADD      r2,r2,r0,LSL #4
0002d8  6011              STR      r1,[r2,#0]
;;;1008   }
0002da  4770              BX       lr
;;;1009   
                          ENDP

                  |L1.732|
                          DCD      0x40020000
                  |L1.736|
                          DCD      0x40010380
                  |L1.740|
                          DCD      0x40010000
                  |L1.744|
                          DCD      0x40010384
                  |L1.748|
                          DCD      0x40010080
                  |L1.752|
                          DCD      0x4001008c
                  |L1.756|
                          DCD      0x40010090
                  |L1.760|
                          DCD      0x400100c0
                  |L1.764|
                          DCD      0x400100d0
                  |L1.768|
                          DCD      0x40010140
                  |L1.772|
                          DCD      0x40010144
                  |L1.776|
                          DCD      0x40010148
                  |L1.780|
                          DCD      0x4001014c
                  |L1.784|
                          DCD      0x40010150
                  |L1.788|
                          DCD      0x40010158

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_usb.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_usb_c_732cea89____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___15_MDR32F9Qx_usb_c_732cea89____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_usb_c_732cea89____REVSH|
#line 144
|__asm___15_MDR32F9Qx_usb_c_732cea89____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
