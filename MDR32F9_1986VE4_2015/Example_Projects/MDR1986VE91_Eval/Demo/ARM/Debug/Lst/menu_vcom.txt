; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\menu_vcom.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\menu_vcom.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\menu_vcom.crf ..\..\src\Menu_VCOM.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Setup_CPU_Clock PROC
;;;127    *******************************************************************************/
;;;128    static void Setup_CPU_Clock(void)
000000  b510              PUSH     {r4,lr}
;;;129    {
;;;130      /* Enable HSE */
;;;131      RST_CLK_HSEconfig(RST_CLK_HSE_ON);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RST_CLK_HSEconfig
;;;132      if (RST_CLK_HSEstatus() != SUCCESS)
000008  f7fffffe          BL       RST_CLK_HSEstatus
00000c  2801              CMP      r0,#1
00000e  d001              BEQ      |L1.20|
;;;133      {
;;;134        /* Trap */
;;;135        while (1)
000010  bf00              NOP      
                  |L1.18|
000012  e7fe              B        |L1.18|
                  |L1.20|
;;;136        {
;;;137        }
;;;138      }
;;;139    
;;;140      /* CPU_C1_SEL = HSE */
;;;141      RST_CLK_CPU_PLLconfig(RST_CLK_CPU_PLLsrcHSEdiv1, RST_CLK_CPU_PLLmul10);
000014  2109              MOVS     r1,#9
000016  2002              MOVS     r0,#2
000018  f7fffffe          BL       RST_CLK_CPU_PLLconfig
;;;142      RST_CLK_CPU_PLLcmd(ENABLE);
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       RST_CLK_CPU_PLLcmd
;;;143      if (RST_CLK_CPU_PLLstatus() != SUCCESS)
000022  f7fffffe          BL       RST_CLK_CPU_PLLstatus
000026  2801              CMP      r0,#1
000028  d001              BEQ      |L1.46|
;;;144      {
;;;145        /* Trap */
;;;146        while (1)
00002a  bf00              NOP      
                  |L1.44|
00002c  e7fe              B        |L1.44|
                  |L1.46|
;;;147        {
;;;148        }
;;;149      }
;;;150    
;;;151      /* CPU_C3_SEL = CPU_C2_SEL */
;;;152      RST_CLK_CPUclkPrescaler(RST_CLK_CPUclkDIV1);
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       RST_CLK_CPUclkPrescaler
;;;153      /* CPU_C2_SEL = PLL */
;;;154      RST_CLK_CPU_PLLuse(ENABLE);
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       RST_CLK_CPU_PLLuse
;;;155      /* HCLK_SEL = CPU_C3_SEL */
;;;156      RST_CLK_CPUclkSelection(RST_CLK_CPUclkCPU_C3);
00003a  f44f7080          MOV      r0,#0x100
00003e  f7fffffe          BL       RST_CLK_CPUclkSelection
;;;157    }
000042  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  Setup_USB PROC
;;;164    *******************************************************************************/
;;;165    static void Setup_USB(void)
000044  b510              PUSH     {r4,lr}
;;;166    {
;;;167      /* Enables the CPU_CLK clock on USB */
;;;168      RST_CLK_PCLKcmd(RST_CLK_PCLK_USB, ENABLE);
000046  2101              MOVS     r1,#1
000048  2004              MOVS     r0,#4
00004a  f7fffffe          BL       RST_CLK_PCLKcmd
;;;169    
;;;170      /* Device layer initialization */
;;;171      USB_Clock_InitStruct.USB_USBC1_Source = USB_C1HSEdiv2;
00004e  2003              MOVS     r0,#3
000050  49c1              LDR      r1,|L1.856|
000052  6008              STR      r0,[r1,#0]  ; USB_Clock_InitStruct
;;;172      USB_Clock_InitStruct.USB_PLLUSBMUL    = USB_PLLUSBMUL12;
000054  200b              MOVS     r0,#0xb
000056  6048              STR      r0,[r1,#4]  ; USB_Clock_InitStruct
;;;173    
;;;174      USB_DeviceBUSParam.MODE  = USB_SC_SCFSP_Full;
000058  2010              MOVS     r0,#0x10
00005a  49c0              LDR      r1,|L1.860|
00005c  6088              STR      r0,[r1,#8]  ; USB_DeviceBUSParam
;;;175      USB_DeviceBUSParam.SPEED = USB_SC_SCFSR_12Mb;
00005e  2020              MOVS     r0,#0x20
000060  6048              STR      r0,[r1,#4]  ; USB_DeviceBUSParam
;;;176      USB_DeviceBUSParam.PULL  = USB_HSCR_DP_PULLUP_Set;
000062  2010              MOVS     r0,#0x10
000064  6008              STR      r0,[r1,#0]  ; USB_DeviceBUSParam
;;;177    
;;;178      USB_DeviceInit(&USB_Clock_InitStruct, &USB_DeviceBUSParam);
000066  48bc              LDR      r0,|L1.856|
000068  f7fffffe          BL       USB_DeviceInit
;;;179    
;;;180      /* Enable all USB interrupts */
;;;181      USB_SetSIM(USB_SIS_Msk);
00006c  201f              MOVS     r0,#0x1f
00006e  f7fffffe          BL       USB_SetSIM
;;;182    
;;;183      USB_DevicePowerOn();
000072  f7fffffe          BL       USB_DevicePowerOn
;;;184    
;;;185      /* Enable interrupt on USB */
;;;186    #ifdef USB_INT_HANDLE_REQUIRED
;;;187      NVIC_EnableIRQ(USB_IRQn);
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       NVIC_EnableIRQ
;;;188    #endif /* USB_INT_HANDLE_REQUIRED */
;;;189    
;;;190      USB_DEVICE_HANDLE_RESET;
00007c  f7fffffe          BL       USB_CDC_Reset
;;;191    }
000080  bd10              POP      {r4,pc}
;;;192    
                          ENDP

                  SenderFunc PROC
;;;439    *******************************************************************************/
;;;440    static void SenderFunc(void)
000082  b510              PUSH     {r4,lr}
;;;441    {
;;;442      for (; (send_data_pos < send_data_length && (UART_GetFlagStatus (UART, UART_FLAG_TXFF) == RESET)); send_data_pos++)
000084  e00b              B        |L1.158|
                  |L1.134|
;;;443      {
;;;444        UART_SendData(UART, SendBuffer[send_data_pos]);
000086  48b6              LDR      r0,|L1.864|
000088  4ab6              LDR      r2,|L1.868|
00008a  6812              LDR      r2,[r2,#0]  ; send_data_pos
00008c  5c81              LDRB     r1,[r0,r2]
00008e  48b6              LDR      r0,|L1.872|
000090  f7fffffe          BL       UART_SendData
000094  48b3              LDR      r0,|L1.868|
000096  6800              LDR      r0,[r0,#0]            ;442  ; send_data_pos
000098  1c40              ADDS     r0,r0,#1              ;442
00009a  49b2              LDR      r1,|L1.868|
00009c  6008              STR      r0,[r1,#0]            ;442  ; send_data_pos
                  |L1.158|
00009e  48b1              LDR      r0,|L1.868|
0000a0  6800              LDR      r0,[r0,#0]            ;442  ; send_data_pos
0000a2  49b2              LDR      r1,|L1.876|
0000a4  6809              LDR      r1,[r1,#0]            ;442  ; send_data_length
0000a6  4288              CMP      r0,r1                 ;442
0000a8  d205              BCS      |L1.182|
0000aa  2120              MOVS     r1,#0x20              ;442
0000ac  48ae              LDR      r0,|L1.872|
0000ae  f7fffffe          BL       UART_GetFlagStatus
0000b2  2800              CMP      r0,#0                 ;442
0000b4  d0e7              BEQ      |L1.134|
                  |L1.182|
;;;445      }
;;;446    }
0000b6  bd10              POP      {r4,pc}
;;;447    
                          ENDP

                  USB_CDC_RecieveData PROC
;;;200    *******************************************************************************/
;;;201    USB_Result USB_CDC_RecieveData(uint8_t* Buffer, uint32_t Length)
0000b8  b570              PUSH     {r4-r6,lr}
;;;202    {
0000ba  4605              MOV      r5,r0
0000bc  460c              MOV      r4,r1
;;;203      /* Initiate UART transmission */
;;;204      send_data_length = Length;
0000be  48ab              LDR      r0,|L1.876|
0000c0  6004              STR      r4,[r0,#0]  ; send_data_length
;;;205      send_data_pos = 0;
0000c2  2000              MOVS     r0,#0
0000c4  49a7              LDR      r1,|L1.868|
0000c6  6008              STR      r0,[r1,#0]  ; send_data_pos
;;;206    
;;;207      SenderFunc();
0000c8  f7fffffe          BL       SenderFunc
;;;208    
;;;209      return USB_SUCCESS;
0000cc  2000              MOVS     r0,#0
;;;210    }
0000ce  bd70              POP      {r4-r6,pc}
;;;211    
                          ENDP

                  USB_CDC_GetLineCoding PROC
;;;221    *******************************************************************************/
;;;222    USB_Result USB_CDC_GetLineCoding(uint16_t wINDEX, USB_CDC_LineCoding_TypeDef* DATA)
0000d0  4602              MOV      r2,r0
;;;223    {
;;;224      assert_param(DATA);
;;;225      if (wINDEX != 0)
0000d2  b10a              CBZ      r2,|L1.216|
;;;226      {
;;;227        /* Invalid interface */
;;;228        return USB_ERR_INV_REQ;
0000d4  2002              MOVS     r0,#2
                  |L1.214|
;;;229      }
;;;230    
;;;231      /* Just send back settings stored earlier */
;;;232      *DATA = LineCoding;
;;;233    
;;;234      return USB_SUCCESS;
;;;235    }
0000d6  4770              BX       lr
                  |L1.216|
0000d8  4ba5              LDR      r3,|L1.880|
0000da  cb09              LDM      r3,{r0,r3}            ;232
0000dc  e9c10300          STRD     r0,r3,[r1,#0]         ;232
0000e0  2000              MOVS     r0,#0                 ;234
0000e2  e7f8              B        |L1.214|
;;;236    
                          ENDP

                  USB_CDC_SetLineCoding PROC
;;;244    *******************************************************************************/
;;;245    USB_Result USB_CDC_SetLineCoding(uint16_t wINDEX, const USB_CDC_LineCoding_TypeDef* DATA)
0000e4  b570              PUSH     {r4-r6,lr}
;;;246    {
0000e6  4605              MOV      r5,r0
0000e8  460c              MOV      r4,r1
;;;247      assert_param(DATA);
;;;248      if (wINDEX != 0)
0000ea  b10d              CBZ      r5,|L1.240|
;;;249      {
;;;250        /* Invalid interface */
;;;251        return USB_ERR_INV_REQ;
0000ec  2002              MOVS     r0,#2
                  |L1.238|
;;;252      }
;;;253    
;;;254      /* Adjust UART settings */
;;;255    
;;;256      /* Baud rate */
;;;257      UARTInitStructure.UART_BaudRate = DATA->dwDTERate;
;;;258    
;;;259      /* Stop bits */
;;;260      switch (DATA->bCharFormat)
;;;261      {
;;;262        case USB_CDC_STOP_BITS1:
;;;263          UARTInitStructure.UART_StopBits = UART_StopBits1;
;;;264          break;
;;;265        case USB_CDC_STOP_BITS2:
;;;266          UARTInitStructure.UART_StopBits = UART_StopBits2;
;;;267          break;
;;;268        default :
;;;269          return USB_ERR_INV_REQ;
;;;270      }
;;;271    
;;;272      /* Parity */
;;;273      switch (DATA->bParityType)
;;;274      {
;;;275        case USB_CDC_PARITY_NONE:
;;;276          UARTInitStructure.UART_Parity = UART_Parity_No;
;;;277          break;
;;;278        case USB_CDC_PARITY_ODD:
;;;279          UARTInitStructure.UART_Parity = UART_Parity_Odd;
;;;280          break;
;;;281        case USB_CDC_PARITY_EVEN:
;;;282          UARTInitStructure.UART_Parity = UART_Parity_Even;
;;;283          break;
;;;284        case USB_CDC_PARITY_MARK:
;;;285          UARTInitStructure.UART_Parity = UART_Parity_0;
;;;286          break;
;;;287        case USB_CDC_PARITY_SPACE:
;;;288          UARTInitStructure.UART_Parity = UART_Parity_1;
;;;289          break;
;;;290        default :
;;;291          return USB_ERR_INV_REQ;
;;;292      }
;;;293    
;;;294      /* Data bits */
;;;295      switch (DATA->bDataBits)
;;;296      {
;;;297        case USB_CDC_DATA_BITS5:
;;;298          UARTInitStructure.UART_WordLength = UART_WordLength5b;
;;;299          break;
;;;300        case USB_CDC_DATA_BITS6:
;;;301          UARTInitStructure.UART_WordLength = UART_WordLength6b;
;;;302          break;
;;;303        case USB_CDC_DATA_BITS7:
;;;304          UARTInitStructure.UART_WordLength = UART_WordLength7b;
;;;305          break;
;;;306        case USB_CDC_DATA_BITS8:
;;;307          UARTInitStructure.UART_WordLength = UART_WordLength8b;
;;;308          break;
;;;309        default :
;;;310          return USB_ERR_INV_REQ;
;;;311      }
;;;312    
;;;313      /* Re-initialize UART */
;;;314      UART_Cmd(UART, DISABLE);
;;;315      UART_DeInit(UART);
;;;316      UART_Init(UART, &UARTInitStructure);
;;;317      /* Enable sender, receiver and line state interrupts */
;;;318      UART_ITConfig (UART, UART_IT_TX | UART_IT_RX
;;;319    #ifdef USB_CDC_STATE_REPORTING_SUPPORTED
;;;320                  | UART_LINE_STATE_EVENTS
;;;321    #endif /* USB_CDC_STATE_REPORTING_SUPPORTED */
;;;322                  , ENABLE);
;;;323      UART_Cmd(UART, ENABLE);
;;;324    
;;;325      /* On success, store new values for GetLineCoding request fastening */
;;;326      LineCoding = *DATA;
;;;327    
;;;328      return USB_SUCCESS;
;;;329    }
0000ee  bd70              POP      {r4-r6,pc}
                  |L1.240|
0000f0  49a0              LDR      r1,|L1.884|
0000f2  6820              LDR      r0,[r4,#0]            ;257
0000f4  6008              STR      r0,[r1,#0]            ;257  ; UARTInitStructure
0000f6  7920              LDRB     r0,[r4,#4]            ;260
0000f8  b110              CBZ      r0,|L1.256|
0000fa  2802              CMP      r0,#2                 ;260
0000fc  d108              BNE      |L1.272|
0000fe  e003              B        |L1.264|
                  |L1.256|
000100  2000              MOVS     r0,#0                 ;263
000102  499c              LDR      r1,|L1.884|
000104  80c8              STRH     r0,[r1,#6]            ;263
000106  e005              B        |L1.276|
                  |L1.264|
000108  2008              MOVS     r0,#8                 ;266
00010a  499a              LDR      r1,|L1.884|
00010c  80c8              STRH     r0,[r1,#6]            ;266
00010e  e001              B        |L1.276|
                  |L1.272|
000110  2002              MOVS     r0,#2                 ;269
000112  e7ec              B        |L1.238|
                  |L1.276|
000114  bf00              NOP                            ;264
000116  7960              LDRB     r0,[r4,#5]            ;273
000118  2805              CMP      r0,#5                 ;273
00011a  d218              BCS      |L1.334|
00011c  e8dff000          TBB      [pc,r0]               ;273
000120  03070b0f          DCB      0x03,0x07,0x0b,0x0f
000124  1300              DCB      0x13,0x00
000126  2000              MOVS     r0,#0                 ;276
000128  4992              LDR      r1,|L1.884|
00012a  8108              STRH     r0,[r1,#8]            ;276
00012c  e011              B        |L1.338|
00012e  2002              MOVS     r0,#2                 ;279
000130  4990              LDR      r1,|L1.884|
000132  8108              STRH     r0,[r1,#8]            ;279
000134  e00d              B        |L1.338|
000136  2006              MOVS     r0,#6                 ;282
000138  498e              LDR      r1,|L1.884|
00013a  8108              STRH     r0,[r1,#8]            ;282
00013c  e009              B        |L1.338|
00013e  2086              MOVS     r0,#0x86              ;285
000140  498c              LDR      r1,|L1.884|
000142  8108              STRH     r0,[r1,#8]            ;285
000144  e005              B        |L1.338|
000146  2082              MOVS     r0,#0x82              ;288
000148  498a              LDR      r1,|L1.884|
00014a  8108              STRH     r0,[r1,#8]            ;288
00014c  e001              B        |L1.338|
                  |L1.334|
00014e  2002              MOVS     r0,#2                 ;291
000150  e7cd              B        |L1.238|
                  |L1.338|
000152  bf00              NOP                            ;277
000154  79a0              LDRB     r0,[r4,#6]            ;295
000156  2805              CMP      r0,#5                 ;295
000158  d006              BEQ      |L1.360|
00015a  2806              CMP      r0,#6                 ;295
00015c  d008              BEQ      |L1.368|
00015e  2807              CMP      r0,#7                 ;295
000160  d00a              BEQ      |L1.376|
000162  2808              CMP      r0,#8                 ;295
000164  d110              BNE      |L1.392|
000166  e00b              B        |L1.384|
                  |L1.360|
000168  2000              MOVS     r0,#0                 ;298
00016a  4982              LDR      r1,|L1.884|
00016c  8088              STRH     r0,[r1,#4]            ;298
00016e  e00d              B        |L1.396|
                  |L1.368|
000170  2020              MOVS     r0,#0x20              ;301
000172  4980              LDR      r1,|L1.884|
000174  8088              STRH     r0,[r1,#4]            ;301
000176  e009              B        |L1.396|
                  |L1.376|
000178  2040              MOVS     r0,#0x40              ;304
00017a  497e              LDR      r1,|L1.884|
00017c  8088              STRH     r0,[r1,#4]            ;304
00017e  e005              B        |L1.396|
                  |L1.384|
000180  2060              MOVS     r0,#0x60              ;307
000182  497c              LDR      r1,|L1.884|
000184  8088              STRH     r0,[r1,#4]            ;307
000186  e001              B        |L1.396|
                  |L1.392|
000188  2002              MOVS     r0,#2                 ;310
00018a  e7b0              B        |L1.238|
                  |L1.396|
00018c  bf00              NOP                            ;299
00018e  2100              MOVS     r1,#0                 ;314
000190  4875              LDR      r0,|L1.872|
000192  f7fffffe          BL       UART_Cmd
000196  4874              LDR      r0,|L1.872|
000198  f7fffffe          BL       UART_DeInit
00019c  4975              LDR      r1,|L1.884|
00019e  4872              LDR      r0,|L1.872|
0001a0  f7fffffe          BL       UART_Init
0001a4  2201              MOVS     r2,#1                 ;318
0001a6  2130              MOVS     r1,#0x30              ;318
0001a8  486f              LDR      r0,|L1.872|
0001aa  f7fffffe          BL       UART_ITConfig
0001ae  2101              MOVS     r1,#1                 ;323
0001b0  486d              LDR      r0,|L1.872|
0001b2  f7fffffe          BL       UART_Cmd
0001b6  486e              LDR      r0,|L1.880|
0001b8  e9d41200          LDRD     r1,r2,[r4,#0]         ;326
0001bc  c006              STM      r0!,{r1,r2}           ;326
0001be  2000              MOVS     r0,#0                 ;328
0001c0  e795              B        |L1.238|
;;;330    
                          ENDP

                  UARTConfiguration PROC
;;;376    *******************************************************************************/
;;;377    static void UARTConfiguration(void)
0001c2  b510              PUSH     {r4,lr}
;;;378    {
;;;379      /* Enable the RTCHSE clock on UART */
;;;380      RST_CLK_PCLKcmd(RST_CLK_PCLK_UART, ENABLE);
0001c4  2101              MOVS     r1,#1
0001c6  2080              MOVS     r0,#0x80
0001c8  f7fffffe          BL       RST_CLK_PCLKcmd
;;;381    
;;;382      /* Set the UART HCLK division factor */
;;;383      UART_BRGInit(UART, UART_HCLKdiv16);
0001cc  2104              MOVS     r1,#4
0001ce  4866              LDR      r0,|L1.872|
0001d0  f7fffffe          BL       UART_BRGInit
;;;384    
;;;385      UART_DeInit(UART);
0001d4  4864              LDR      r0,|L1.872|
0001d6  f7fffffe          BL       UART_DeInit
;;;386    
;;;387    #if defined (USE_MDR32F9Q1_Rev0) || defined (USE_MDR32F9Q1_Rev1)
;;;388      /* Configure PORTF pins for data transfer to/from UART */
;;;389      PortInitStructure.PORT_Pin   = PORT_Pin_0 | PORT_Pin_1;
0001da  2003              MOVS     r0,#3
0001dc  4966              LDR      r1,|L1.888|
0001de  8008              STRH     r0,[r1,#0]
;;;390      PortInitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
0001e0  2001              MOVS     r0,#1
0001e2  7288              STRB     r0,[r1,#0xa]
;;;391      PortInitStructure.PORT_FUNC  = PORT_FUNC_OVERRID;
0001e4  2003              MOVS     r0,#3
0001e6  7208              STRB     r0,[r1,#8]
;;;392      PortInitStructure.PORT_SPEED = PORT_SPEED_MAXFAST;
0001e8  7248              STRB     r0,[r1,#9]
;;;393      PORT_Init(MDR_PORTF, &PortInitStructure);
0001ea  4864              LDR      r0,|L1.892|
0001ec  f7fffffe          BL       PORT_Init
;;;394    #else
;;;395    #if defined (USE_MDR32F9Q2_Rev0) && !defined (USE_MDR32F9Q2_Rev1)
;;;396      PORTBSaveConfig();
;;;397    #endif /* defined (USE_MDR32F9Q2_Rev0) && !defined (USE_MDR32F9Q2_Rev1) */
;;;398      /* Configure PORTB pins for data transfer to/from UART */
;;;399      PortInitStructure.PORT_Pin   = PORT_Pin_5 | PORT_Pin_6;
;;;400      PortInitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
;;;401      PortInitStructure.PORT_FUNC  = PORT_FUNC_ALTER;
;;;402      PortInitStructure.PORT_SPEED = PORT_SPEED_MAXFAST;
;;;403      PORT_Init(MDR_PORTB, &PortInitStructure);
;;;404    #endif /* defined (USE_MDR32F9Q1_Rev0) || defined (USE_MDR32F9Q1_Rev1) */
;;;405    
;;;406      /* Enable interrupt on UART */
;;;407      NVIC_EnableIRQ(UART_IRQn);
0001f0  2007              MOVS     r0,#7
0001f2  f7fffffe          BL       NVIC_EnableIRQ
;;;408    }
0001f6  bd10              POP      {r4,pc}
;;;409    
                          ENDP

                  VCOMHelp PROC
;;;416    *******************************************************************************/
;;;417    void VCOMHelp(void)
0001f8  b570              PUSH     {r4-r6,lr}
;;;418    {
;;;419      sFONT *OldFont = CurrentFont;
0001fa  4861              LDR      r0,|L1.896|
0001fc  6804              LDR      r4,[r0,#0]  ; CurrentFont
;;;420      LCD_Method OldMethod = CurrentMethod;
0001fe  4861              LDR      r0,|L1.900|
000200  7805              LDRB     r5,[r0,#0]  ; CurrentMethod
;;;421    
;;;422      LCD_CLS();
000202  f7fffffe          BL       LCD_CLS
;;;423      CurrentMethod = MET_AND;
000206  2004              MOVS     r0,#4
000208  495e              LDR      r1,|L1.900|
00020a  7008              STRB     r0,[r1,#0]
;;;424      CurrentFont = &Font_6x8;
00020c  485e              LDR      r0,|L1.904|
00020e  495c              LDR      r1,|L1.896|
000210  6008              STR      r0,[r1,#0]  ; CurrentFont
;;;425      DisplayMenuTitle("MDR_USB. Virtual COM");
000212  a05e              ADR      r0,|L1.908|
000214  f7fffffe          BL       DisplayMenuTitle
;;;426      WAIT_UNTIL_KEY_RELEASED(SEL);
000218  bf00              NOP      
                  |L1.538|
00021a  f7fffffe          BL       GetKey
00021e  2800              CMP      r0,#0
000220  d0fb              BEQ      |L1.538|
;;;427      LCD_PUTS(0, CurrentFont->Height * 2 + 2,     "  To stop Press SEL");
000222  4857              LDR      r0,|L1.896|
000224  6800              LDR      r0,[r0,#0]  ; CurrentFont
000226  7800              LDRB     r0,[r0,#0]
000228  2202              MOVS     r2,#2
00022a  eb020040          ADD      r0,r2,r0,LSL #1
00022e  b2c1              UXTB     r1,r0
000230  a25c              ADR      r2,|L1.932|
000232  2000              MOVS     r0,#0
000234  f7fffffe          BL       LCD_PUTS
;;;428    
;;;429      CurrentMethod = OldMethod;
000238  4852              LDR      r0,|L1.900|
00023a  7005              STRB     r5,[r0,#0]
;;;430      CurrentFont = OldFont;
00023c  4850              LDR      r0,|L1.896|
00023e  6004              STR      r4,[r0,#0]  ; CurrentFont
;;;431    }
000240  bd70              POP      {r4-r6,pc}
;;;432    
                          ENDP

                  ReceiverFunc PROC
;;;454    *******************************************************************************/
;;;455    static void ReceiverFunc(void)
000242  b510              PUSH     {r4,lr}
;;;456    {
;;;457      uint16_t receive_data;
;;;458    
;;;459      /* Read data from UART */
;;;460      for (receive_data_length = 0; ((UART_GetFlagStatus(UART, UART_FLAG_RXFE) == RESET) && (receive_data_length < BUFFER_LENGTH)); )
000244  2000              MOVS     r0,#0
000246  495c              LDR      r1,|L1.952|
000248  6008              STR      r0,[r1,#0]  ; receive_data_length
00024a  e00c              B        |L1.614|
                  |L1.588|
;;;461      {
;;;462        receive_data = UART_ReceiveData(UART);
00024c  4846              LDR      r0,|L1.872|
00024e  f7fffffe          BL       UART_ReceiveData
000252  4604              MOV      r4,r0
;;;463    
;;;464        if (UART_Flags(receive_data) == 0)
000254  1220              ASRS     r0,r4,#8
000256  d106              BNE      |L1.614|
;;;465        {
;;;466          ReceiveBuffer[receive_data_length++] = UART_Data(receive_data);
000258  4957              LDR      r1,|L1.952|
00025a  6808              LDR      r0,[r1,#0]  ; receive_data_length
00025c  1c41              ADDS     r1,r0,#1
00025e  4b56              LDR      r3,|L1.952|
000260  6019              STR      r1,[r3,#0]  ; receive_data_length
000262  4956              LDR      r1,|L1.956|
000264  540c              STRB     r4,[r1,r0]
                  |L1.614|
000266  2110              MOVS     r1,#0x10              ;460
000268  483f              LDR      r0,|L1.872|
00026a  f7fffffe          BL       UART_GetFlagStatus
00026e  b918              CBNZ     r0,|L1.632|
000270  4851              LDR      r0,|L1.952|
000272  6800              LDR      r0,[r0,#0]            ;460  ; receive_data_length
000274  2864              CMP      r0,#0x64              ;460
000276  d3e9              BCC      |L1.588|
                  |L1.632|
;;;467        }
;;;468      }
;;;469      /* Initiate data portion sending via USB */
;;;470      USB_CDC_SendData(ReceiveBuffer, receive_data_length);
000278  484f              LDR      r0,|L1.952|
00027a  6801              LDR      r1,[r0,#0]  ; receive_data_length
00027c  484f              LDR      r0,|L1.956|
00027e  f7fffffe          BL       USB_CDC_SendData
;;;471    }
000282  bd10              POP      {r4,pc}
;;;472    
                          ENDP

                  VCOMFunc PROC
;;;529    *******************************************************************************/
;;;530    void VCOMFunc(void) {
000284  b510              PUSH     {r4,lr}
;;;531      uint32_t key;
;;;532    
;;;533      /* Display prompt */
;;;534      VCOMHelp();
000286  f7fffffe          BL       VCOMHelp
;;;535    
;;;536      /* Save current CPU CLOCK configuration */
;;;537      temp_CPU_CLOCK   = MDR_RST_CLK->CPU_CLOCK;
00028a  484d              LDR      r0,|L1.960|
00028c  68c0              LDR      r0,[r0,#0xc]
00028e  494d              LDR      r1,|L1.964|
000290  6008              STR      r0,[r1,#0]  ; temp_CPU_CLOCK
;;;538      temp_PLL_CONTROL = MDR_RST_CLK->PLL_CONTROL;
000292  484b              LDR      r0,|L1.960|
000294  6840              LDR      r0,[r0,#4]
000296  494c              LDR      r1,|L1.968|
000298  6008              STR      r0,[r1,#0]  ; temp_PLL_CONTROL
;;;539    
;;;540      Setup_CPU_Clock();
00029a  f7fffffe          BL       Setup_CPU_Clock
;;;541    
;;;542      UARTConfiguration();
00029e  f7fffffe          BL       UARTConfiguration
;;;543    
;;;544      /* CDC layer initialization */
;;;545      USB_CDC_Init(SendBuffer, 1, SET);
0002a2  2201              MOVS     r2,#1
0002a4  4611              MOV      r1,r2
0002a6  482e              LDR      r0,|L1.864|
0002a8  f7fffffe          BL       USB_CDC_Init
;;;546    
;;;547      /* UART configuration */
;;;548      UARTInitStructure.UART_BaudRate                = 14400;
0002ac  f44f5061          MOV      r0,#0x3840
0002b0  4930              LDR      r1,|L1.884|
0002b2  6008              STR      r0,[r1,#0]  ; UARTInitStructure
;;;549      UARTInitStructure.UART_WordLength              = UART_WordLength8b;
0002b4  2060              MOVS     r0,#0x60
0002b6  8088              STRH     r0,[r1,#4]
;;;550      UARTInitStructure.UART_StopBits                = UART_StopBits1;
0002b8  2000              MOVS     r0,#0
0002ba  80c8              STRH     r0,[r1,#6]
;;;551      UARTInitStructure.UART_Parity                  = UART_Parity_No;
0002bc  8108              STRH     r0,[r1,#8]
;;;552      UARTInitStructure.UART_FIFOMode                = UART_FIFO_OFF;
0002be  8148              STRH     r0,[r1,#0xa]
;;;553      UARTInitStructure.UART_HardwareFlowControl     = UART_HardwareFlowControl_RXE | \
0002c0  f44f7040          MOV      r0,#0x300
0002c4  8188              STRH     r0,[r1,#0xc]
;;;554                                                       UART_HardwareFlowControl_TXE;
;;;555      /* With LBE bit set, output line of UARTTXD transmitter becomes to be bound to
;;;556       * UARTRXD receiver input. In order to run this example with UART physically
;;;557       * connected to PC, just comment this line */
;;;558    /*  UARTInitStructure.UART_HardwareFlowControl     |= UART_HardwareFlowControl_LBE; */
;;;559    
;;;560      UART_Init (UART,&UARTInitStructure);
0002c6  4828              LDR      r0,|L1.872|
0002c8  f7fffffe          BL       UART_Init
;;;561    
;;;562    #ifdef USB_CDC_LINE_CODING_SUPPORTED
;;;563      /* Set line coding initial settings accordingly to UART ones above */
;;;564      LineCoding.dwDTERate = UARTInitStructure.UART_BaudRate;
0002cc  4829              LDR      r0,|L1.884|
0002ce  6800              LDR      r0,[r0,#0]  ; UARTInitStructure
0002d0  4927              LDR      r1,|L1.880|
0002d2  6008              STR      r0,[r1,#0]  ; LineCoding
;;;565      LineCoding.bCharFormat = USB_CDC_STOP_BITS1;
0002d4  2000              MOVS     r0,#0
0002d6  7108              STRB     r0,[r1,#4]
;;;566      LineCoding.bParityType = USB_CDC_PARITY_NONE;
0002d8  7148              STRB     r0,[r1,#5]
;;;567      LineCoding.bDataBits = USB_CDC_DATA_BITS8;
0002da  2008              MOVS     r0,#8
0002dc  7188              STRB     r0,[r1,#6]
;;;568    #endif /* USB_CDC_LINE_CODING_SUPPORTED */
;;;569    
;;;570      /* Set interrupt handlers */
;;;571      pfUARTReceiverFunc = ReceiverFunc;
0002de  483b              LDR      r0,|L1.972|
0002e0  493b              LDR      r1,|L1.976|
0002e2  6008              STR      r0,[r1,#0]  ; pfUARTReceiverFunc
;;;572      pfUARTSenderFunc = SenderFunc;
0002e4  483b              LDR      r0,|L1.980|
0002e6  493c              LDR      r1,|L1.984|
0002e8  6008              STR      r0,[r1,#0]  ; pfUARTSenderFunc
;;;573    #ifdef USB_CDC_STATE_REPORTING_SUPPORTED
;;;574      pfUARTLineStateFunc = LineStateFunc;
;;;575    #endif /* USB_CDC_STATE_REPORTING_SUPPORTED */
;;;576    
;;;577      /* Enable sender, receiver and line state interrupts */
;;;578      UART_ITConfig (UART, UART_IT_TX | UART_IT_RX
0002ea  2201              MOVS     r2,#1
0002ec  2130              MOVS     r1,#0x30
0002ee  481e              LDR      r0,|L1.872|
0002f0  f7fffffe          BL       UART_ITConfig
;;;579    #ifdef USB_CDC_STATE_REPORTING_SUPPORTED
;;;580                  | UART_LINE_STATE_EVENTS
;;;581    #endif /* USB_CDC_STATE_REPORTING_SUPPORTED */
;;;582                  , ENABLE);
;;;583    
;;;584      /* Enable bridge */
;;;585      UART_Cmd(UART, ENABLE);
0002f4  2101              MOVS     r1,#1
0002f6  481c              LDR      r0,|L1.872|
0002f8  f7fffffe          BL       UART_Cmd
;;;586      Setup_USB();
0002fc  f7fffffe          BL       Setup_USB
;;;587    
;;;588      /* Wait for SEL to quit */
;;;589      key = GetKey();
000300  f7fffffe          BL       GetKey
000304  4604              MOV      r4,r0
;;;590      for (; key != SEL; key = GetKey())
000306  e002              B        |L1.782|
                  |L1.776|
000308  f7fffffe          BL       GetKey
00030c  4604              MOV      r4,r0
                  |L1.782|
00030e  2c00              CMP      r4,#0
000310  d1fa              BNE      |L1.776|
;;;591      {
;;;592      }
;;;593      WAIT_UNTIL_KEY_RELEASED(SEL);
000312  bf00              NOP      
                  |L1.788|
000314  f7fffffe          BL       GetKey
000318  2800              CMP      r0,#0
00031a  d0fb              BEQ      |L1.788|
;;;594    
;;;595      /* Disable bridge */
;;;596      UART_Cmd(UART, DISABLE);
00031c  2100              MOVS     r1,#0
00031e  4812              LDR      r0,|L1.872|
000320  f7fffffe          BL       UART_Cmd
;;;597    #if defined (USE_MDR32F9Q2_Rev0) || defined (USE_MDR32F9Q2_Rev1)
;;;598      PORTBRestoreConfig();
;;;599    #endif /* defined (USE_MDR32F9Q2_Rev0) || defined (USE_MDR32F9Q2_Rev1) */
;;;600      USB_CDC_ReceiveStop();
000324  f7fffffe          BL       USB_CDC_ReceiveStop
;;;601      USB_DevicePowerOff();
000328  f7fffffe          BL       USB_DevicePowerOff
;;;602    
;;;603      /* Restore original CPU CLOCK configuration */
;;;604      MDR_RST_CLK->CPU_CLOCK   = temp_CPU_CLOCK;
00032c  4825              LDR      r0,|L1.964|
00032e  6800              LDR      r0,[r0,#0]  ; temp_CPU_CLOCK
000330  4923              LDR      r1,|L1.960|
000332  60c8              STR      r0,[r1,#0xc]
;;;605      MDR_RST_CLK->PLL_CONTROL = temp_PLL_CONTROL;
000334  4824              LDR      r0,|L1.968|
000336  6800              LDR      r0,[r0,#0]  ; temp_PLL_CONTROL
000338  6048              STR      r0,[r1,#4]
;;;606    
;;;607      DisplayMenu();
00033a  f7fffffe          BL       DisplayMenu
;;;608    }
00033e  bd10              POP      {r4,pc}
;;;609    
                          ENDP

                  NVIC_EnableIRQ PROC
;;;1327    */
;;;1328   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000340  f000021f          AND      r2,r0,#0x1f
;;;1329   {
;;;1330     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000344  2101              MOVS     r1,#1
000346  4091              LSLS     r1,r1,r2
000348  0942              LSRS     r2,r0,#5
00034a  f04f23e0          MOV      r3,#0xe000e000
00034e  eb030282          ADD      r2,r3,r2,LSL #2
000352  f8c21100          STR      r1,[r2,#0x100]
;;;1331   }
000356  4770              BX       lr
;;;1332   
                          ENDP

                  |L1.856|
                          DCD      USB_Clock_InitStruct
                  |L1.860|
                          DCD      USB_DeviceBUSParam
                  |L1.864|
                          DCD      SendBuffer
                  |L1.868|
                          DCD      send_data_pos
                  |L1.872|
                          DCD      0x40038000
                  |L1.876|
                          DCD      send_data_length
                  |L1.880|
                          DCD      LineCoding
                  |L1.884|
                          DCD      UARTInitStructure
                  |L1.888|
                          DCD      PortInitStructure
                  |L1.892|
                          DCD      0x400e8000
                  |L1.896|
                          DCD      CurrentFont
                  |L1.900|
                          DCD      CurrentMethod
                  |L1.904|
                          DCD      Font_6x8
                  |L1.908|
00038c  4d44525f          DCB      "MDR_USB. Virtual COM",0
000390  5553422e
000394  20566972
000398  7475616c
00039c  20434f4d
0003a0  00      
0003a1  00                DCB      0
0003a2  00                DCB      0
0003a3  00                DCB      0
                  |L1.932|
0003a4  2020546f          DCB      "  To stop Press SEL",0
0003a8  2073746f
0003ac  70205072
0003b0  65737320
0003b4  53454c00
                  |L1.952|
                          DCD      receive_data_length
                  |L1.956|
                          DCD      ReceiveBuffer
                  |L1.960|
                          DCD      0x40020000
                  |L1.964|
                          DCD      temp_CPU_CLOCK
                  |L1.968|
                          DCD      temp_PLL_CONTROL
                  |L1.972|
                          DCD      ReceiverFunc
                  |L1.976|
                          DCD      pfUARTReceiverFunc
                  |L1.980|
                          DCD      SenderFunc
                  |L1.984|
                          DCD      pfUARTSenderFunc

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  PortInitStructure
                          %        12
                  SendBuffer
                          %        100
                  ReceiveBuffer
                          %        100
                  USB_DeviceBUSParam
                          %        12
                  UARTInitStructure
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  send_data_length
                          DCD      0x00000000
                  send_data_pos
                          DCD      0x00000000
                  receive_data_length
                          DCD      0x00000000
                  USB_Clock_InitStruct
                          %        8
                  temp_CPU_CLOCK
                          DCD      0x00000000
                  temp_PLL_CONTROL
                          DCD      0x00000000
                  LineCoding
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\src\\Menu_VCOM.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_Menu_VCOM_c_026632b4____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___11_Menu_VCOM_c_026632b4____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_Menu_VCOM_c_026632b4____REVSH|
#line 144
|__asm___11_Menu_VCOM_c_026632b4____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
