; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\menu_gl.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\menu_gl.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\menu_gl.crf ..\..\src\Menu_gl.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DisplayTriangle PROC
;;;67     *******************************************************************************/
;;;68     static void DisplayTriangle (int32_t x, int32_t y, int32_t side)
000000  b570              PUSH     {r4-r6,lr}
;;;69     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;70       LCD_Line(x, y, x + side, y);
000008  192a              ADDS     r2,r5,r4
00000a  4633              MOV      r3,r6
00000c  4631              MOV      r1,r6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       LCD_Line
;;;71       LCD_Line(x + side, y, x + side, y + side);
000014  1933              ADDS     r3,r6,r4
000016  192a              ADDS     r2,r5,r4
000018  1928              ADDS     r0,r5,r4
00001a  4631              MOV      r1,r6
00001c  f7fffffe          BL       LCD_Line
;;;72       LCD_Line(x, y, x + side, y + side);
000020  1933              ADDS     r3,r6,r4
000022  192a              ADDS     r2,r5,r4
000024  4631              MOV      r1,r6
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       LCD_Line
;;;73     }
00002c  bd70              POP      {r4-r6,pc}
;;;74     
                          ENDP

                  DisplayFillingTriangle PROC
;;;83     *******************************************************************************/
;;;84     static void DisplayFillingTriangle (int32_t x, int32_t y, int32_t side)
00002e  e92d41f0          PUSH     {r4-r8,lr}
;;;85     {
000032  4605              MOV      r5,r0
000034  460e              MOV      r6,r1
000036  4617              MOV      r7,r2
;;;86       int32_t i;
;;;87     
;;;88       for (i = 0; i < side + 1; i++)
000038  2400              MOVS     r4,#0
00003a  e006              B        |L1.74|
                  |L1.60|
;;;89       {
;;;90         LCD_Line(x + i, y + i, x + side, y + i);
00003c  1933              ADDS     r3,r6,r4
00003e  19ea              ADDS     r2,r5,r7
000040  1931              ADDS     r1,r6,r4
000042  1928              ADDS     r0,r5,r4
000044  f7fffffe          BL       LCD_Line
000048  1c64              ADDS     r4,r4,#1              ;88
                  |L1.74|
00004a  1c78              ADDS     r0,r7,#1              ;88
00004c  4284              CMP      r4,r0                 ;88
00004e  dbf5              BLT      |L1.60|
;;;91       }
;;;92     }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP

                  DisplayFillingCircle PROC
;;;102    *******************************************************************************/
;;;103    void DisplayFillingCircle (int32_t x, int32_t y, int32_t radius)
000054  e92d41f0          PUSH     {r4-r8,lr}
;;;104    {
000058  4606              MOV      r6,r0
00005a  460f              MOV      r7,r1
00005c  4615              MOV      r5,r2
;;;105      int32_t i;
;;;106    
;;;107      for (i = 0; i < radius + 1; i++)
00005e  2400              MOVS     r4,#0
000060  e005              B        |L1.110|
                  |L1.98|
;;;108      {
;;;109        LCD_Circle(x, y, i);
000062  4622              MOV      r2,r4
000064  4639              MOV      r1,r7
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       LCD_Circle
00006c  1c64              ADDS     r4,r4,#1              ;107
                  |L1.110|
00006e  1c68              ADDS     r0,r5,#1              ;107
000070  4284              CMP      r4,r0                 ;107
000072  dbf6              BLT      |L1.98|
;;;110      }
;;;111    }
000074  e8bd81f0          POP      {r4-r8,pc}
;;;112    
                          ENDP

                  DisplayRectangle PROC
;;;122    *******************************************************************************/
;;;123    void DisplayRectangle (int32_t x, int32_t y, int32_t side_x, int32_t side_y)
000078  e92d41f0          PUSH     {r4-r8,lr}
;;;124    {
00007c  4604              MOV      r4,r0
00007e  460d              MOV      r5,r1
000080  4616              MOV      r6,r2
000082  461f              MOV      r7,r3
;;;125      LCD_Line(x, y, x + side_x, y);
000084  19a2              ADDS     r2,r4,r6
000086  462b              MOV      r3,r5
000088  4629              MOV      r1,r5
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       LCD_Line
;;;126      LCD_Line(x, y, x, y + side_y);
000090  19eb              ADDS     r3,r5,r7
000092  4622              MOV      r2,r4
000094  4629              MOV      r1,r5
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       LCD_Line
;;;127      LCD_Line(x + side_x, y, x + side_x, y + side_y);
00009c  19eb              ADDS     r3,r5,r7
00009e  19a2              ADDS     r2,r4,r6
0000a0  19a0              ADDS     r0,r4,r6
0000a2  4629              MOV      r1,r5
0000a4  f7fffffe          BL       LCD_Line
;;;128      LCD_Line(x, y + side_y, x + side_x, y + side_y);
0000a8  19eb              ADDS     r3,r5,r7
0000aa  19a2              ADDS     r2,r4,r6
0000ac  19e9              ADDS     r1,r5,r7
0000ae  4620              MOV      r0,r4
0000b0  f7fffffe          BL       LCD_Line
;;;129    }
0000b4  e8bd81f0          POP      {r4-r8,pc}
;;;130    
                          ENDP

                  DisplayFillingRectangle PROC
;;;140    *******************************************************************************/
;;;141    void DisplayFillingRectangle (int32_t x, int32_t y, int32_t side_x, int32_t side_y)
0000b8  e92d41f0          PUSH     {r4-r8,lr}
;;;142    {
0000bc  4606              MOV      r6,r0
0000be  460d              MOV      r5,r1
0000c0  4617              MOV      r7,r2
0000c2  4698              MOV      r8,r3
;;;143      int32_t i;
;;;144      for (i = 0; i < side_y; i++)
0000c4  2400              MOVS     r4,#0
0000c6  e006              B        |L1.214|
                  |L1.200|
;;;145      {
;;;146        LCD_Line(x, y + i, x + side_x, y + i);
0000c8  192b              ADDS     r3,r5,r4
0000ca  19f2              ADDS     r2,r6,r7
0000cc  1929              ADDS     r1,r5,r4
0000ce  4630              MOV      r0,r6
0000d0  f7fffffe          BL       LCD_Line
0000d4  1c64              ADDS     r4,r4,#1              ;144
                  |L1.214|
0000d6  4544              CMP      r4,r8                 ;144
0000d8  dbf6              BLT      |L1.200|
;;;147      }
;;;148    }
0000da  e8bd81f0          POP      {r4-r8,pc}
;;;149    
                          ENDP

                  ElementsFunc PROC
;;;162    *******************************************************************************/
;;;163    void ElementsFunc(void)
0000de  b510              PUSH     {r4,lr}
;;;164    {
;;;165    #define base_x 25
;;;166    #define base_y 14
;;;167    #define side   16
;;;168    
;;;169    #define offs_x 8
;;;170    #define offs_y 5
;;;171    
;;;172    #define circle_radius side / 2
;;;173    #define circle_x base_x + side + offs_x + circle_radius
;;;174    #define circle_y base_y + circle_radius
;;;175    #define circle_filling_y circle_y + circle_radius * 2 + offs_y
;;;176    
;;;177    #define rectangle_x base_x + side * 2 + offs_x * 2
;;;178    #define block_y  base_y + side + offs_y
;;;179    
;;;180      /* Header output */
;;;181      LCD_CLS();
0000e0  f7fffffe          BL       LCD_CLS
;;;182      CurrentMethod = MET_OR;
0000e4  2000              MOVS     r0,#0
0000e6  497b              LDR      r1,|L1.724|
0000e8  7008              STRB     r0,[r1,#0]
;;;183      DisplayMenuTitle("Elements");
0000ea  a07b              ADR      r0,|L1.728|
0000ec  f7fffffe          BL       DisplayMenuTitle
;;;184    
;;;185      /* Build primitives and wait for key up */
;;;186      DisplayTriangle (base_x, base_y, side);
0000f0  2210              MOVS     r2,#0x10
0000f2  210e              MOVS     r1,#0xe
0000f4  2019              MOVS     r0,#0x19
0000f6  f7fffffe          BL       DisplayTriangle
;;;187      DisplayFillingTriangle (base_x, base_y + side + offs_y, side);
0000fa  2210              MOVS     r2,#0x10
0000fc  2123              MOVS     r1,#0x23
0000fe  2019              MOVS     r0,#0x19
000100  f7fffffe          BL       DisplayFillingTriangle
;;;188    
;;;189      LCD_Circle(circle_x, circle_y, circle_radius);
000104  2208              MOVS     r2,#8
000106  2116              MOVS     r1,#0x16
000108  2039              MOVS     r0,#0x39
00010a  f7fffffe          BL       LCD_Circle
;;;190      DisplayFillingCircle (circle_x, circle_filling_y, circle_radius);
00010e  2208              MOVS     r2,#8
000110  212b              MOVS     r1,#0x2b
000112  2039              MOVS     r0,#0x39
000114  f7fffffe          BL       DisplayFillingCircle
;;;191    
;;;192      DisplayRectangle (rectangle_x, base_y, side * 2, side);
000118  2310              MOVS     r3,#0x10
00011a  2220              MOVS     r2,#0x20
00011c  210e              MOVS     r1,#0xe
00011e  2049              MOVS     r0,#0x49
000120  f7fffffe          BL       DisplayRectangle
;;;193      DisplayFillingRectangle (rectangle_x, block_y, side * 2, side);
000124  2310              MOVS     r3,#0x10
000126  2220              MOVS     r2,#0x20
000128  2123              MOVS     r1,#0x23
00012a  2049              MOVS     r0,#0x49
00012c  f7fffffe          BL       DisplayFillingRectangle
;;;194    
;;;195      WAIT_UNTIL_KEY_RELEASED(SEL);
000130  bf00              NOP      
                  |L1.306|
000132  f7fffffe          BL       GetKey
000136  2800              CMP      r0,#0
000138  d0fb              BEQ      |L1.306|
;;;196    
;;;197      /* Wait for SEL pressed and return to main menu */
;;;198      BackToMenuOnSel();
00013a  f7fffffe          BL       BackToMenuOnSel
;;;199    }
00013e  bd10              POP      {r4,pc}
;;;200    
                          ENDP

                  IndicatorsFunc PROC
;;;207    *******************************************************************************/
;;;208    void IndicatorsFunc(void)
000140  e92d47f0          PUSH     {r4-r10,lr}
;;;209    {
;;;210    #define side_x 4
;;;211    
;;;212      int32_t i, sign, DelayCount;
;;;213    
;;;214      sFONT *OldFont = CurrentFont;
000144  4867              LDR      r0,|L1.740|
000146  f8d08000          LDR      r8,[r0,#0]  ; CurrentFont
;;;215    
;;;216      LCD_Method OldMethod = CurrentMethod;
00014a  4862              LDR      r0,|L1.724|
00014c  f8909000          LDRB     r9,[r0,#0]  ; CurrentMethod
;;;217    
;;;218      LCD_CLS();
000150  f7fffffe          BL       LCD_CLS
;;;219      CurrentMethod = MET_AND;
000154  2004              MOVS     r0,#4
000156  495f              LDR      r1,|L1.724|
000158  7008              STRB     r0,[r1,#0]
;;;220      CurrentFont = &Font_6x8;
00015a  4863              LDR      r0,|L1.744|
00015c  4961              LDR      r1,|L1.740|
00015e  6008              STR      r0,[r1,#0]  ; CurrentFont
;;;221    
;;;222      /* Print prompt and wait for key SEL pressed */
;;;223      LCD_PUTS(0, 12, "Turn the Trimmer TRIM");
000160  a262              ADR      r2,|L1.748|
000162  210c              MOVS     r1,#0xc
000164  2000              MOVS     r0,#0
000166  f7fffffe          BL       LCD_PUTS
;;;224      LCD_PUTS(0, 22, "to control the delay");
00016a  a266              ADR      r2,|L1.772|
00016c  2116              MOVS     r1,#0x16
00016e  2000              MOVS     r0,#0
000170  f7fffffe          BL       LCD_PUTS
;;;225      LCD_PUTS(0, 32, "between style frames.");
000174  a269              ADR      r2,|L1.796|
000176  2120              MOVS     r1,#0x20
000178  2000              MOVS     r0,#0
00017a  f7fffffe          BL       LCD_PUTS
;;;226      LCD_PUTS(0, 42, "Push JoyStick SEL to");
00017e  a26d              ADR      r2,|L1.820|
000180  212a              MOVS     r1,#0x2a
000182  2000              MOVS     r0,#0
000184  f7fffffe          BL       LCD_PUTS
;;;227      LCD_PUTS(0, 52, "start or stop.");
000188  a270              ADR      r2,|L1.844|
00018a  2134              MOVS     r1,#0x34
00018c  2000              MOVS     r0,#0
00018e  f7fffffe          BL       LCD_PUTS
;;;228    
;;;229      while (!KEY_PRESSED(SEL))
000192  bf00              NOP      
                  |L1.404|
000194  f7fffffe          BL       GetKey
000198  2800              CMP      r0,#0
00019a  d1fb              BNE      |L1.404|
;;;230      {
;;;231    
;;;232      }
;;;233    
;;;234      /* Configure ADC channel 7 */
;;;235      ADC_Config();
00019c  f7fffffe          BL       ADC_Config
;;;236      /* ADC1 enable */
;;;237      ADC1_Cmd(ENABLE);
0001a0  2001              MOVS     r0,#1
0001a2  f7fffffe          BL       ADC1_Cmd
;;;238    
;;;239      /* Print header and wait for key up */
;;;240      LCD_CLS();
0001a6  f7fffffe          BL       LCD_CLS
;;;241      CurrentMethod = MET_OR;
0001aa  2000              MOVS     r0,#0
0001ac  4949              LDR      r1,|L1.724|
0001ae  7008              STRB     r0,[r1,#0]
;;;242      DisplayMenuTitle("Indicators");
0001b0  a06a              ADR      r0,|L1.860|
0001b2  f7fffffe          BL       DisplayMenuTitle
;;;243      WAIT_UNTIL_KEY_RELEASED(SEL);
0001b6  bf00              NOP      
                  |L1.440|
0001b8  f7fffffe          BL       GetKey
0001bc  2800              CMP      r0,#0
0001be  d0fb              BEQ      |L1.440|
;;;244    
;;;245      /* Draw the progress bar */
;;;246      LCD_PUTS(24,18,"0");
0001c0  a269              ADR      r2,|L1.872|
0001c2  2112              MOVS     r1,#0x12
0001c4  2018              MOVS     r0,#0x18
0001c6  f7fffffe          BL       LCD_PUTS
;;;247      DisplayRectangle (32, 14, 64, 14);
0001ca  230e              MOVS     r3,#0xe
0001cc  2240              MOVS     r2,#0x40
0001ce  4619              MOV      r1,r3
0001d0  2020              MOVS     r0,#0x20
0001d2  f7fffffe          BL       DisplayRectangle
;;;248      LCD_PUTS(97,18,"100");
0001d6  a265              ADR      r2,|L1.876|
0001d8  2112              MOVS     r1,#0x12
0001da  2061              MOVS     r0,#0x61
0001dc  f7fffffe          BL       LCD_PUTS
;;;249      /* Draw the scale */
;;;250      LCD_Circle(63, 63, 30);
0001e0  221e              MOVS     r2,#0x1e
0001e2  213f              MOVS     r1,#0x3f
0001e4  4608              MOV      r0,r1
0001e6  f7fffffe          BL       LCD_Circle
;;;251      LCD_Line(63, 34, 63, 41);
0001ea  2329              MOVS     r3,#0x29
0001ec  223f              MOVS     r2,#0x3f
0001ee  2122              MOVS     r1,#0x22
0001f0  4610              MOV      r0,r2
0001f2  f7fffffe          BL       LCD_Line
;;;252      LCD_Line(35, 53, 42, 56);
0001f6  2338              MOVS     r3,#0x38
0001f8  222a              MOVS     r2,#0x2a
0001fa  2135              MOVS     r1,#0x35
0001fc  2023              MOVS     r0,#0x23
0001fe  f7fffffe          BL       LCD_Line
;;;253      LCD_Line(91, 53, 84, 56);
000202  2338              MOVS     r3,#0x38
000204  2254              MOVS     r2,#0x54
000206  2135              MOVS     r1,#0x35
000208  205b              MOVS     r0,#0x5b
00020a  f7fffffe          BL       LCD_Line
;;;254      LCD_Line(45, 39, 51, 45);
00020e  232d              MOVS     r3,#0x2d
000210  2233              MOVS     r2,#0x33
000212  2127              MOVS     r1,#0x27
000214  4618              MOV      r0,r3
000216  f7fffffe          BL       LCD_Line
;;;255      LCD_Line(81, 39, 75, 45);
00021a  232d              MOVS     r3,#0x2d
00021c  224b              MOVS     r2,#0x4b
00021e  2127              MOVS     r1,#0x27
000220  2051              MOVS     r0,#0x51
000222  f7fffffe          BL       LCD_Line
;;;256    
;;;257      /* Emulate progress - from 0 to 100% and back */
;;;258      /* Emulate scale bar trembling */
;;;259      CurrentMethod = MET_XOR;
000226  2001              MOVS     r0,#1
000228  492a              LDR      r1,|L1.724|
00022a  7008              STRB     r0,[r1,#0]
;;;260      for (i = 0, sign = 1; !KEY_PRESSED(SEL); )
00022c  2400              MOVS     r4,#0
00022e  2501              MOVS     r5,#1
000230  e03e              B        |L1.688|
                  |L1.562|
;;;261      {
;;;262        int32_t ni = i + side_x * sign;
000232  2004              MOVS     r0,#4
000234  fb004605          MLA      r6,r0,r5,r4
;;;263    
;;;264        /* Trimming results in animation speed changes */
;;;265        DelayCount = (ADC1_GetResult() & ADC_RESULT_Msk) + 51;
000238  f7fffffe          BL       ADC1_GetResult
00023c  f3c0000b          UBFX     r0,r0,#0,#12
000240  f1000733          ADD      r7,r0,#0x33
;;;266    
;;;267        /* Draw the bar */
;;;268        DisplayFillingRectangle (i + 34, 16, side_x - 1, 11);
000244  230b              MOVS     r3,#0xb
000246  2203              MOVS     r2,#3
000248  2110              MOVS     r1,#0x10
00024a  f1040022          ADD      r0,r4,#0x22
00024e  f7fffffe          BL       DisplayFillingRectangle
;;;269        if (ni > 60 || ni < 0)
000252  2e3c              CMP      r6,#0x3c
000254  dc01              BGT      |L1.602|
000256  2e00              CMP      r6,#0
000258  da01              BGE      |L1.606|
                  |L1.602|
;;;270        {
;;;271          sign = -sign;
00025a  426d              RSBS     r5,r5,#0
00025c  e000              B        |L1.608|
                  |L1.606|
;;;272        }
;;;273        else
;;;274        {
;;;275          i = ni;
00025e  4634              MOV      r4,r6
                  |L1.608|
;;;276        }
;;;277        SysTickDelay(DelayCount);
000260  4638              MOV      r0,r7
000262  f7fffffe          BL       SysTickDelay
;;;278    
;;;279        /* Draw the arrow */
;;;280        LCD_Line(86, 46, 63, 63);
000266  233f              MOVS     r3,#0x3f
000268  461a              MOV      r2,r3
00026a  212e              MOVS     r1,#0x2e
00026c  2056              MOVS     r0,#0x56
00026e  f7fffffe          BL       LCD_Line
;;;281        SysTickDelay(DelayCount);
000272  4638              MOV      r0,r7
000274  f7fffffe          BL       SysTickDelay
;;;282        LCD_Line(86, 46, 63, 63);
000278  233f              MOVS     r3,#0x3f
00027a  461a              MOV      r2,r3
00027c  212e              MOVS     r1,#0x2e
00027e  2056              MOVS     r0,#0x56
000280  f7fffffe          BL       LCD_Line
;;;283        SysTickDelay(DelayCount);
000284  4638              MOV      r0,r7
000286  f7fffffe          BL       SysTickDelay
;;;284        LCD_Line(84, 44, 63, 63);
00028a  233f              MOVS     r3,#0x3f
00028c  461a              MOV      r2,r3
00028e  212c              MOVS     r1,#0x2c
000290  2054              MOVS     r0,#0x54
000292  f7fffffe          BL       LCD_Line
;;;285        SysTickDelay(DelayCount);
000296  4638              MOV      r0,r7
000298  f7fffffe          BL       SysTickDelay
;;;286        LCD_Line(84, 44, 63, 63);
00029c  233f              MOVS     r3,#0x3f
00029e  461a              MOV      r2,r3
0002a0  212c              MOVS     r1,#0x2c
0002a2  2054              MOVS     r0,#0x54
0002a4  f7fffffe          BL       LCD_Line
;;;287        SysTickDelay(DelayCount);
0002a8  4638              MOV      r0,r7
0002aa  f7fffffe          BL       SysTickDelay
;;;288      }
0002ae  bf00              NOP      
                  |L1.688|
0002b0  f7fffffe          BL       GetKey
0002b4  2800              CMP      r0,#0                 ;260
0002b6  d1bc              BNE      |L1.562|
;;;289    
;;;290      /* SEL is pressed - return to the main menu */
;;;291      CurrentFont = OldFont;
0002b8  480a              LDR      r0,|L1.740|
0002ba  f8c08000          STR      r8,[r0,#0]  ; CurrentFont
;;;292      CurrentMethod = OldMethod;
0002be  4805              LDR      r0,|L1.724|
0002c0  f8809000          STRB     r9,[r0,#0]
;;;293      /* ADC1 disable */
;;;294      ADC1_Cmd(DISABLE);
0002c4  2000              MOVS     r0,#0
0002c6  f7fffffe          BL       ADC1_Cmd
;;;295      DisplayMenu();
0002ca  f7fffffe          BL       DisplayMenu
;;;296    }
0002ce  e8bd87f0          POP      {r4-r10,pc}
;;;297    
                          ENDP

0002d2  0000              DCW      0x0000
                  |L1.724|
                          DCD      CurrentMethod
                  |L1.728|
0002d8  456c656d          DCB      "Elements",0
0002dc  656e7473
0002e0  00      
0002e1  00                DCB      0
0002e2  00                DCB      0
0002e3  00                DCB      0
                  |L1.740|
                          DCD      CurrentFont
                  |L1.744|
                          DCD      Font_6x8
                  |L1.748|
0002ec  5475726e          DCB      "Turn the Trimmer TRIM",0
0002f0  20746865
0002f4  20547269
0002f8  6d6d6572
0002fc  20545249
000300  4d00    
000302  00                DCB      0
000303  00                DCB      0
                  |L1.772|
000304  746f2063          DCB      "to control the delay",0
000308  6f6e7472
00030c  6f6c2074
000310  68652064
000314  656c6179
000318  00      
000319  00                DCB      0
00031a  00                DCB      0
00031b  00                DCB      0
                  |L1.796|
00031c  62657477          DCB      "between style frames.",0
000320  65656e20
000324  7374796c
000328  65206672
00032c  616d6573
000330  2e00    
000332  00                DCB      0
000333  00                DCB      0
                  |L1.820|
000334  50757368          DCB      "Push JoyStick SEL to",0
000338  204a6f79
00033c  53746963
000340  6b205345
000344  4c20746f
000348  00      
000349  00                DCB      0
00034a  00                DCB      0
00034b  00                DCB      0
                  |L1.844|
00034c  73746172          DCB      "start or stop.",0
000350  74206f72
000354  2073746f
000358  702e00  
00035b  00                DCB      0
                  |L1.860|
00035c  496e6469          DCB      "Indicators",0
000360  6361746f
000364  727300  
000367  00                DCB      0
                  |L1.872|
000368  3000              DCB      "0",0
00036a  00                DCB      0
00036b  00                DCB      0
                  |L1.876|
00036c  31303000          DCB      "100",0

;*** Start embedded assembler ***

#line 1 "..\\..\\src\\Menu_gl.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_Menu_gl_c_87251224____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___9_Menu_gl_c_87251224____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_Menu_gl_c_87251224____REVSH|
#line 144
|__asm___9_Menu_gl_c_87251224____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
