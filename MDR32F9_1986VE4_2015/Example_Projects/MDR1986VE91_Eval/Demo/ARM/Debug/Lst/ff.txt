; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\ff.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\ff.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\ff.crf ..\..\src_fatfs\ff.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mem_cpy PROC
;;;528    static
;;;529    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;530      BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;531      const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;532    
;;;533    #if _WORD_ACCESS == 1
;;;534      while (cnt >= sizeof(int)) {
;;;535        *(int*)d = *(int*)s;
;;;536        d += sizeof(int); s += sizeof(int);
;;;537        cnt -= sizeof(int);
;;;538      }
;;;539    #endif
;;;540      while (cnt--)
000006  e003              B        |L1.16|
                  |L1.8|
;;;541        *d++ = *s++;
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L1.16|
000010  0015              MOVS     r5,r2                 ;540
000012  f1a20201          SUB      r2,r2,#1              ;540
000016  d1f7              BNE      |L1.8|
;;;542    }
000018  bd70              POP      {r4-r6,pc}
;;;543    
                          ENDP

                  mem_set PROC
;;;545    static
;;;546    void mem_set (void* dst, int val, UINT cnt) {
00001a  b530              PUSH     {r4,r5,lr}
;;;547      BYTE *d = (BYTE*)dst;
00001c  4603              MOV      r3,r0
;;;548    
;;;549      while (cnt--)
00001e  e001              B        |L1.36|
                  |L1.32|
;;;550        *d++ = (BYTE)val;
000020  f8031b01          STRB     r1,[r3],#1
                  |L1.36|
000024  0014              MOVS     r4,r2                 ;549
000026  f1a20201          SUB      r2,r2,#1              ;549
00002a  d1f9              BNE      |L1.32|
;;;551    }
00002c  bd30              POP      {r4,r5,pc}
;;;552    
                          ENDP

                  mem_cmp PROC
;;;554    static
;;;555    int mem_cmp (const void* dst, const void* src, UINT cnt) {
00002e  b5f0              PUSH     {r4-r7,lr}
000030  4603              MOV      r3,r0
;;;556      const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000032  461c              MOV      r4,r3
000034  460d              MOV      r5,r1
;;;557      int r = 0;
000036  2000              MOVS     r0,#0
;;;558    
;;;559      while (cnt-- && (r = *d++ - *s++) == 0) ;
000038  bf00              NOP      
                  |L1.58|
00003a  0016              MOVS     r6,r2
00003c  f1a20201          SUB      r2,r2,#1
000040  d007              BEQ      |L1.82|
000042  f8147b01          LDRB     r7,[r4],#1
000046  f815cb01          LDRB     r12,[r5],#1
00004a  eba7060c          SUB      r6,r7,r12
00004e  0030              MOVS     r0,r6
000050  d0f3              BEQ      |L1.58|
                  |L1.82|
;;;560      return r;
;;;561    }
000052  bdf0              POP      {r4-r7,pc}
;;;562    
                          ENDP

                  chk_chr PROC
;;;564    static
;;;565    int chk_chr (const char* str, int chr) {
000054  4602              MOV      r2,r0
;;;566      while (*str && *str != chr) str++;
000056  e000              B        |L1.90|
                  |L1.88|
000058  1c52              ADDS     r2,r2,#1
                  |L1.90|
00005a  7810              LDRB     r0,[r2,#0]
00005c  b110              CBZ      r0,|L1.100|
00005e  7810              LDRB     r0,[r2,#0]
000060  4288              CMP      r0,r1
000062  d1f9              BNE      |L1.88|
                  |L1.100|
;;;567      return *str;
000064  7810              LDRB     r0,[r2,#0]
;;;568    }
000066  4770              BX       lr
;;;569    
                          ENDP

                  move_window PROC
;;;718    static
;;;719    FRESULT move_window (
000068  e92d41f0          PUSH     {r4-r8,lr}
;;;720      FATFS *fs,    /* File system object */
;;;721      DWORD sector  /* Sector number to make appearance in the fs->win[] */
;;;722    )         /* Move to zero only writes back dirty window */
;;;723    {
00006c  4604              MOV      r4,r0
00006e  460d              MOV      r5,r1
;;;724      DWORD wsect;
;;;725    
;;;726    
;;;727      wsect = fs->winsect;
000070  6b26              LDR      r6,[r4,#0x30]
;;;728      if (wsect != sector) {  /* Changed current window */
000072  42ae              CMP      r6,r5
000074  d02f              BEQ      |L1.214|
;;;729    #if !_FS_READONLY
;;;730        if (fs->wflag) {  /* Write back dirty window if needed */
000076  7920              LDRB     r0,[r4,#4]
000078  b308              CBZ      r0,|L1.190|
;;;731          if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
00007a  7860              LDRB     r0,[r4,#1]
00007c  2301              MOVS     r3,#1
00007e  4632              MOV      r2,r6
000080  f1040134          ADD      r1,r4,#0x34
000084  f7fffffe          BL       disk_write
000088  b110              CBZ      r0,|L1.144|
;;;732            return FR_DISK_ERR;
00008a  2001              MOVS     r0,#1
                  |L1.140|
;;;733          fs->wflag = 0;
;;;734          if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
;;;735            BYTE nf;
;;;736            for (nf = fs->n_fats; nf > 1; nf--) { /* Reflect the change to all FAT copies */
;;;737              wsect += fs->fsize;
;;;738              disk_write(fs->drv, fs->win, wsect, 1);
;;;739            }
;;;740          }
;;;741        }
;;;742    #endif
;;;743        if (sector) {
;;;744          if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
;;;745            return FR_DISK_ERR;
;;;746          fs->winsect = sector;
;;;747        }
;;;748      }
;;;749    
;;;750      return FR_OK;
;;;751    }
00008c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.144|
000090  2000              MOVS     r0,#0                 ;733
000092  7120              STRB     r0,[r4,#4]            ;733
000094  e9d41008          LDRD     r1,r0,[r4,#0x20]      ;734
000098  4408              ADD      r0,r0,r1              ;734
00009a  42b0              CMP      r0,r6                 ;734
00009c  d90f              BLS      |L1.190|
00009e  78e7              LDRB     r7,[r4,#3]            ;736
0000a0  e00a              B        |L1.184|
                  |L1.162|
0000a2  6a20              LDR      r0,[r4,#0x20]         ;737
0000a4  4406              ADD      r6,r6,r0              ;737
0000a6  7860              LDRB     r0,[r4,#1]            ;738
0000a8  2301              MOVS     r3,#1                 ;738
0000aa  4632              MOV      r2,r6                 ;738
0000ac  f1040134          ADD      r1,r4,#0x34           ;738
0000b0  f7fffffe          BL       disk_write
0000b4  1e78              SUBS     r0,r7,#1              ;736
0000b6  b2c7              UXTB     r7,r0                 ;736
                  |L1.184|
0000b8  2f01              CMP      r7,#1                 ;736
0000ba  dcf2              BGT      |L1.162|
0000bc  bf00              NOP                            ;740
                  |L1.190|
0000be  b155              CBZ      r5,|L1.214|
0000c0  7860              LDRB     r0,[r4,#1]            ;744
0000c2  2301              MOVS     r3,#1                 ;744
0000c4  462a              MOV      r2,r5                 ;744
0000c6  f1040134          ADD      r1,r4,#0x34           ;744
0000ca  f7fffffe          BL       disk_read
0000ce  b108              CBZ      r0,|L1.212|
0000d0  2001              MOVS     r0,#1                 ;745
0000d2  e7db              B        |L1.140|
                  |L1.212|
0000d4  6325              STR      r5,[r4,#0x30]         ;746
                  |L1.214|
0000d6  2000              MOVS     r0,#0                 ;750
0000d8  e7d8              B        |L1.140|
;;;752    
                          ENDP

                  sync PROC
;;;760    static
;;;761    FRESULT sync (  /* FR_OK: successful, FR_DISK_ERR: failed */
0000da  b570              PUSH     {r4-r6,lr}
;;;762      FATFS *fs /* File system object */
;;;763    )
;;;764    {
0000dc  4604              MOV      r4,r0
;;;765      FRESULT res;
;;;766    
;;;767    
;;;768      res = move_window(fs, 0);
0000de  2100              MOVS     r1,#0
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       move_window
0000e6  4605              MOV      r5,r0
;;;769      if (res == FR_OK) {
0000e8  2d00              CMP      r5,#0
0000ea  d159              BNE      |L1.416|
;;;770        /* Update FSInfo sector if needed */
;;;771        if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
0000ec  7820              LDRB     r0,[r4,#0]
0000ee  2803              CMP      r0,#3
0000f0  d14f              BNE      |L1.402|
0000f2  7960              LDRB     r0,[r4,#5]
0000f4  2800              CMP      r0,#0
0000f6  d04c              BEQ      |L1.402|
;;;772          fs->winsect = 0;
0000f8  2000              MOVS     r0,#0
0000fa  6320              STR      r0,[r4,#0x30]
;;;773          /* Create FSInfo structure */
;;;774          mem_set(fs->win, 0, 512);
0000fc  f44f7200          MOV      r2,#0x200
000100  2100              MOVS     r1,#0
000102  f1040034          ADD      r0,r4,#0x34
000106  f7fffffe          BL       mem_set
;;;775          ST_WORD(fs->win+BS_55AA, 0xAA55);
00010a  2155              MOVS     r1,#0x55
00010c  f8841232          STRB     r1,[r4,#0x232]
000110  21aa              MOVS     r1,#0xaa
000112  f8841233          STRB     r1,[r4,#0x233]
;;;776          ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
000116  2052              MOVS     r0,#0x52
000118  f8840034          STRB     r0,[r4,#0x34]
00011c  2152              MOVS     r1,#0x52
00011e  2035              MOVS     r0,#0x35
000120  5501              STRB     r1,[r0,r4]
000122  2161              MOVS     r1,#0x61
000124  2036              MOVS     r0,#0x36
000126  5501              STRB     r1,[r0,r4]
000128  2141              MOVS     r1,#0x41
00012a  2037              MOVS     r0,#0x37
00012c  5501              STRB     r1,[r0,r4]
;;;777          ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
00012e  2172              MOVS     r1,#0x72
000130  f8841218          STRB     r1,[r4,#0x218]
000134  f8841219          STRB     r1,[r4,#0x219]
000138  2141              MOVS     r1,#0x41
00013a  f884121a          STRB     r1,[r4,#0x21a]
00013e  2161              MOVS     r1,#0x61
000140  f884121b          STRB     r1,[r4,#0x21b]
;;;778          ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
000144  7c20              LDRB     r0,[r4,#0x10]
000146  f884021c          STRB     r0,[r4,#0x21c]
00014a  8a20              LDRH     r0,[r4,#0x10]
00014c  0a01              LSRS     r1,r0,#8
00014e  f884121d          STRB     r1,[r4,#0x21d]
000152  6920              LDR      r0,[r4,#0x10]
000154  0c01              LSRS     r1,r0,#16
000156  f884121e          STRB     r1,[r4,#0x21e]
00015a  6920              LDR      r0,[r4,#0x10]
00015c  0e01              LSRS     r1,r0,#24
00015e  f884121f          STRB     r1,[r4,#0x21f]
;;;779          ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
000162  7b20              LDRB     r0,[r4,#0xc]
000164  f8840220          STRB     r0,[r4,#0x220]
000168  89a0              LDRH     r0,[r4,#0xc]
00016a  0a01              LSRS     r1,r0,#8
00016c  f8841221          STRB     r1,[r4,#0x221]
000170  68e0              LDR      r0,[r4,#0xc]
000172  0c01              LSRS     r1,r0,#16
000174  f8841222          STRB     r1,[r4,#0x222]
000178  68e0              LDR      r0,[r4,#0xc]
00017a  0e01              LSRS     r1,r0,#24
00017c  f8841223          STRB     r1,[r4,#0x223]
;;;780          /* Write it into the FSInfo sector */
;;;781          disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
000180  7860              LDRB     r0,[r4,#1]
000182  2301              MOVS     r3,#1
000184  f1040134          ADD      r1,r4,#0x34
000188  6962              LDR      r2,[r4,#0x14]
00018a  f7fffffe          BL       disk_write
;;;782          fs->fsi_flag = 0;
00018e  2000              MOVS     r0,#0
000190  7160              STRB     r0,[r4,#5]
                  |L1.402|
;;;783        }
;;;784        /* Make sure that no pending write process in the physical drive */
;;;785        if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
000192  7860              LDRB     r0,[r4,#1]
000194  2200              MOVS     r2,#0
000196  4611              MOV      r1,r2
000198  f7fffffe          BL       disk_ioctl
00019c  b100              CBZ      r0,|L1.416|
;;;786          res = FR_DISK_ERR;
00019e  2501              MOVS     r5,#1
                  |L1.416|
;;;787      }
;;;788    
;;;789      return res;
0001a0  4628              MOV      r0,r5
;;;790    }
0001a2  bd70              POP      {r4-r6,pc}
;;;791    #endif
                          ENDP

                  clust2sect PROC
;;;800    
;;;801    DWORD clust2sect (  /* !=0: Sector number, 0: Failed - invalid cluster# */
0001a4  4602              MOV      r2,r0
;;;802      FATFS *fs,    /* File system object */
;;;803      DWORD clst    /* Cluster# to be converted */
;;;804    )
;;;805    {
;;;806      clst -= 2;
0001a6  1e89              SUBS     r1,r1,#2
;;;807      if (clst >= (fs->n_fatent - 2)) return 0;   /* Invalid cluster# */
0001a8  69d0              LDR      r0,[r2,#0x1c]
0001aa  1e80              SUBS     r0,r0,#2
0001ac  4288              CMP      r0,r1
0001ae  d801              BHI      |L1.436|
0001b0  2000              MOVS     r0,#0
                  |L1.434|
;;;808      return clst * fs->csize + fs->database;
;;;809    }
0001b2  4770              BX       lr
                  |L1.436|
0001b4  7893              LDRB     r3,[r2,#2]            ;808
0001b6  6ad0              LDR      r0,[r2,#0x2c]         ;808
0001b8  fb010003          MLA      r0,r1,r3,r0           ;808
0001bc  e7f9              B        |L1.434|
;;;810    
                          ENDP

                  get_fat PROC
;;;818    
;;;819    DWORD get_fat ( /* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
0001be  e92d41f0          PUSH     {r4-r8,lr}
;;;820      FATFS *fs,  /* File system object */
;;;821      DWORD clst  /* Cluster# to get the link information */
;;;822    )
;;;823    {
0001c2  4605              MOV      r5,r0
0001c4  460c              MOV      r4,r1
;;;824      UINT wc, bc;
;;;825      BYTE *p;
;;;826    
;;;827    
;;;828      if (clst < 2 || clst >= fs->n_fatent) /* Chack range */
0001c6  2c02              CMP      r4,#2
0001c8  d302              BCC      |L1.464|
0001ca  69e8              LDR      r0,[r5,#0x1c]
0001cc  42a0              CMP      r0,r4
0001ce  d802              BHI      |L1.470|
                  |L1.464|
;;;829        return 1;
0001d0  2001              MOVS     r0,#1
                  |L1.466|
;;;830    
;;;831      switch (fs->fs_type) {
;;;832      case FS_FAT12 :
;;;833        bc = (UINT)clst; bc += bc / 2;
;;;834        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;835        wc = fs->win[bc % SS(fs)]; bc++;
;;;836        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;837        wc |= fs->win[bc % SS(fs)] << 8;
;;;838        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
;;;839    
;;;840      case FS_FAT16 :
;;;841        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
;;;842        p = &fs->win[clst * 2 % SS(fs)];
;;;843        return LD_WORD(p);
;;;844    
;;;845      case FS_FAT32 :
;;;846        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
;;;847        p = &fs->win[clst * 4 % SS(fs)];
;;;848        return LD_DWORD(p) & 0x0FFFFFFF;
;;;849      }
;;;850    
;;;851      return 0xFFFFFFFF;  /* An error occurred at the disk I/O layer */
;;;852    }
0001d2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.470|
0001d6  7828              LDRB     r0,[r5,#0]            ;831
0001d8  2801              CMP      r0,#1                 ;831
0001da  d004              BEQ      |L1.486|
0001dc  2802              CMP      r0,#2                 ;831
0001de  d02c              BEQ      |L1.570|
0001e0  2803              CMP      r0,#3                 ;831
0001e2  d15a              BNE      |L1.666|
0001e4  e03d              B        |L1.610|
                  |L1.486|
0001e6  4627              MOV      r7,r4                 ;833
0001e8  eb070757          ADD      r7,r7,r7,LSR #1       ;833
0001ec  6a68              LDR      r0,[r5,#0x24]         ;834
0001ee  eb002157          ADD      r1,r0,r7,LSR #9       ;834
0001f2  4628              MOV      r0,r5                 ;834
0001f4  f7fffffe          BL       move_window
0001f8  b100              CBZ      r0,|L1.508|
0001fa  e04e              B        |L1.666|
                  |L1.508|
0001fc  f3c70108          UBFX     r1,r7,#0,#9           ;835
000200  f1050034          ADD      r0,r5,#0x34           ;835
000204  f8108001          LDRB     r8,[r0,r1]            ;835
000208  1c7f              ADDS     r7,r7,#1              ;835
00020a  6a68              LDR      r0,[r5,#0x24]         ;836
00020c  eb002157          ADD      r1,r0,r7,LSR #9       ;836
000210  4628              MOV      r0,r5                 ;836
000212  f7fffffe          BL       move_window
000216  b100              CBZ      r0,|L1.538|
000218  e03f              B        |L1.666|
                  |L1.538|
00021a  f3c70108          UBFX     r1,r7,#0,#9           ;837
00021e  f1050034          ADD      r0,r5,#0x34           ;837
000222  5c40              LDRB     r0,[r0,r1]            ;837
000224  ea482800          ORR      r8,r8,r0,LSL #8       ;837
000228  f0140f01          TST      r4,#1                 ;838
00022c  d002              BEQ      |L1.564|
00022e  ea4f1018          LSR      r0,r8,#4              ;838
000232  e7ce              B        |L1.466|
                  |L1.564|
000234  f3c8000b          UBFX     r0,r8,#0,#12          ;838
000238  e7cb              B        |L1.466|
                  |L1.570|
00023a  6a68              LDR      r0,[r5,#0x24]         ;841
00023c  eb002114          ADD      r1,r0,r4,LSR #8       ;841
000240  4628              MOV      r0,r5                 ;841
000242  f7fffffe          BL       move_window
000246  b100              CBZ      r0,|L1.586|
000248  e027              B        |L1.666|
                  |L1.586|
00024a  f24010ff          MOV      r0,#0x1ff             ;842
00024e  ea000144          AND      r1,r0,r4,LSL #1       ;842
000252  f1050034          ADD      r0,r5,#0x34           ;842
000256  180e              ADDS     r6,r1,r0              ;842
000258  7830              LDRB     r0,[r6,#0]            ;843
00025a  7871              LDRB     r1,[r6,#1]            ;843
00025c  ea402001          ORR      r0,r0,r1,LSL #8       ;843
000260  e7b7              B        |L1.466|
                  |L1.610|
000262  6a68              LDR      r0,[r5,#0x24]         ;846
000264  eb0011d4          ADD      r1,r0,r4,LSR #7       ;846
000268  4628              MOV      r0,r5                 ;846
00026a  f7fffffe          BL       move_window
00026e  b100              CBZ      r0,|L1.626|
000270  e013              B        |L1.666|
                  |L1.626|
000272  f24010ff          MOV      r0,#0x1ff             ;847
000276  ea000184          AND      r1,r0,r4,LSL #2       ;847
00027a  f1050034          ADD      r0,r5,#0x34           ;847
00027e  180e              ADDS     r6,r1,r0              ;847
000280  78f0              LDRB     r0,[r6,#3]            ;848
000282  0600              LSLS     r0,r0,#24             ;848
000284  78b1              LDRB     r1,[r6,#2]            ;848
000286  ea404001          ORR      r0,r0,r1,LSL #16      ;848
00028a  7871              LDRB     r1,[r6,#1]            ;848
00028c  ea402001          ORR      r0,r0,r1,LSL #8       ;848
000290  7831              LDRB     r1,[r6,#0]            ;848
000292  4308              ORRS     r0,r0,r1              ;848
000294  f0204070          BIC      r0,r0,#0xf0000000     ;848
000298  e79b              B        |L1.466|
                  |L1.666|
00029a  bf00              NOP                            ;834
00029c  f04f30ff          MOV      r0,#0xffffffff        ;851
0002a0  e797              B        |L1.466|
;;;853    
                          ENDP

                  put_fat PROC
;;;861    
;;;862    FRESULT put_fat (
0002a2  e92d47f0          PUSH     {r4-r10,lr}
;;;863      FATFS *fs,  /* File system object */
;;;864      DWORD clst, /* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
;;;865      DWORD val /* New value to mark the cluster */
;;;866    )
;;;867    {
0002a6  4605              MOV      r5,r0
0002a8  460e              MOV      r6,r1
0002aa  4617              MOV      r7,r2
;;;868      UINT bc;
;;;869      BYTE *p;
;;;870      FRESULT res;
;;;871    
;;;872    
;;;873      if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
0002ac  2e02              CMP      r6,#2
0002ae  d302              BCC      |L1.694|
0002b0  69e8              LDR      r0,[r5,#0x1c]
0002b2  42b0              CMP      r0,r6
0002b4  d802              BHI      |L1.700|
                  |L1.694|
;;;874        res = FR_INT_ERR;
0002b6  f04f0802          MOV      r8,#2
0002ba  e08c              B        |L1.982|
                  |L1.700|
;;;875    
;;;876      } else {
;;;877        switch (fs->fs_type) {
0002bc  7828              LDRB     r0,[r5,#0]
0002be  2801              CMP      r0,#1
0002c0  d004              BEQ      |L1.716|
0002c2  2802              CMP      r0,#2
0002c4  d043              BEQ      |L1.846|
0002c6  2803              CMP      r0,#3
0002c8  d17f              BNE      |L1.970|
0002ca  e056              B        |L1.890|
                  |L1.716|
;;;878        case FS_FAT12 :
;;;879          bc = clst; bc += bc / 2;
0002cc  46b1              MOV      r9,r6
0002ce  eb090959          ADD      r9,r9,r9,LSR #1
;;;880          res = move_window(fs, fs->fatbase + (bc / SS(fs)));
0002d2  6a68              LDR      r0,[r5,#0x24]
0002d4  eb002159          ADD      r1,r0,r9,LSR #9
0002d8  4628              MOV      r0,r5
0002da  f7fffffe          BL       move_window
0002de  4680              MOV      r8,r0
;;;881          if (res != FR_OK) break;
0002e0  f1b80f00          CMP      r8,#0
0002e4  d000              BEQ      |L1.744|
0002e6  e073              B        |L1.976|
                  |L1.744|
;;;882          p = &fs->win[bc % SS(fs)];
0002e8  f3c90108          UBFX     r1,r9,#0,#9
0002ec  f1050034          ADD      r0,r5,#0x34
0002f0  180c              ADDS     r4,r1,r0
;;;883          *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
0002f2  f0160f01          TST      r6,#1
0002f6  d004              BEQ      |L1.770|
0002f8  b2f9              UXTB     r1,r7
0002fa  7820              LDRB     r0,[r4,#0]
0002fc  f361101f          BFI      r0,r1,#4,#28
000300  e000              B        |L1.772|
                  |L1.770|
000302  4638              MOV      r0,r7
                  |L1.772|
000304  7020              STRB     r0,[r4,#0]
;;;884          bc++;
000306  f1090901          ADD      r9,r9,#1
;;;885          fs->wflag = 1;
00030a  2001              MOVS     r0,#1
00030c  7128              STRB     r0,[r5,#4]
;;;886          res = move_window(fs, fs->fatbase + (bc / SS(fs)));
00030e  6a68              LDR      r0,[r5,#0x24]
000310  eb002159          ADD      r1,r0,r9,LSR #9
000314  4628              MOV      r0,r5
000316  f7fffffe          BL       move_window
00031a  4680              MOV      r8,r0
;;;887          if (res != FR_OK) break;
00031c  f1b80f00          CMP      r8,#0
000320  d000              BEQ      |L1.804|
000322  e055              B        |L1.976|
                  |L1.804|
;;;888          p = &fs->win[bc % SS(fs)];
000324  f3c90108          UBFX     r1,r9,#0,#9
000328  f1050034          ADD      r0,r5,#0x34
00032c  180c              ADDS     r4,r1,r0
;;;889          *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
00032e  f0160f01          TST      r6,#1
000332  d002              BEQ      |L1.826|
000334  f3c71007          UBFX     r0,r7,#4,#8
000338  e007              B        |L1.842|
                  |L1.826|
00033a  7820              LDRB     r0,[r4,#0]
00033c  f00000f0          AND      r0,r0,#0xf0
000340  f3c72107          UBFX     r1,r7,#8,#8
000344  f001010f          AND      r1,r1,#0xf
000348  4308              ORRS     r0,r0,r1
                  |L1.842|
00034a  7020              STRB     r0,[r4,#0]
;;;890          break;
00034c  e040              B        |L1.976|
                  |L1.846|
;;;891    
;;;892        case FS_FAT16 :
;;;893          res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
00034e  6a68              LDR      r0,[r5,#0x24]
000350  eb002116          ADD      r1,r0,r6,LSR #8
000354  4628              MOV      r0,r5
000356  f7fffffe          BL       move_window
00035a  4680              MOV      r8,r0
;;;894          if (res != FR_OK) break;
00035c  f1b80f00          CMP      r8,#0
000360  d000              BEQ      |L1.868|
000362  e035              B        |L1.976|
                  |L1.868|
;;;895          p = &fs->win[clst * 2 % SS(fs)];
000364  f24010ff          MOV      r0,#0x1ff
000368  ea000146          AND      r1,r0,r6,LSL #1
00036c  f1050034          ADD      r0,r5,#0x34
000370  180c              ADDS     r4,r1,r0
;;;896          ST_WORD(p, (WORD)val);
000372  7027              STRB     r7,[r4,#0]
000374  0a38              LSRS     r0,r7,#8
000376  7060              STRB     r0,[r4,#1]
;;;897          break;
000378  e02a              B        |L1.976|
                  |L1.890|
;;;898    
;;;899        case FS_FAT32 :
;;;900          res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
00037a  6a68              LDR      r0,[r5,#0x24]
00037c  eb0011d6          ADD      r1,r0,r6,LSR #7
000380  4628              MOV      r0,r5
000382  f7fffffe          BL       move_window
000386  4680              MOV      r8,r0
;;;901          if (res != FR_OK) break;
000388  f1b80f00          CMP      r8,#0
00038c  d000              BEQ      |L1.912|
00038e  e01f              B        |L1.976|
                  |L1.912|
;;;902          p = &fs->win[clst * 4 % SS(fs)];
000390  f24010ff          MOV      r0,#0x1ff
000394  ea000186          AND      r1,r0,r6,LSL #2
000398  f1050034          ADD      r0,r5,#0x34
00039c  180c              ADDS     r4,r1,r0
;;;903          val |= LD_DWORD(p) & 0xF0000000;
00039e  78e0              LDRB     r0,[r4,#3]
0003a0  0600              LSLS     r0,r0,#24
0003a2  78a1              LDRB     r1,[r4,#2]
0003a4  ea404001          ORR      r0,r0,r1,LSL #16
0003a8  7861              LDRB     r1,[r4,#1]
0003aa  ea402001          ORR      r0,r0,r1,LSL #8
0003ae  7821              LDRB     r1,[r4,#0]
0003b0  4308              ORRS     r0,r0,r1
0003b2  f0004070          AND      r0,r0,#0xf0000000
0003b6  4307              ORRS     r7,r7,r0
;;;904          ST_DWORD(p, val);
0003b8  7027              STRB     r7,[r4,#0]
0003ba  0a38              LSRS     r0,r7,#8
0003bc  7060              STRB     r0,[r4,#1]
0003be  0c38              LSRS     r0,r7,#16
0003c0  70a0              STRB     r0,[r4,#2]
0003c2  0e38              LSRS     r0,r7,#24
0003c4  70e0              STRB     r0,[r4,#3]
;;;905          break;
0003c6  e003              B        |L1.976|
0003c8  e7ff              B        |L1.970|
                  |L1.970|
;;;906    
;;;907        default :
;;;908          res = FR_INT_ERR;
0003ca  f04f0802          MOV      r8,#2
0003ce  bf00              NOP                            ;877
                  |L1.976|
0003d0  bf00              NOP                            ;881
;;;909        }
;;;910        fs->wflag = 1;
0003d2  2001              MOVS     r0,#1
0003d4  7128              STRB     r0,[r5,#4]
                  |L1.982|
;;;911      }
;;;912    
;;;913      return res;
0003d6  4640              MOV      r0,r8
;;;914    }
0003d8  e8bd87f0          POP      {r4-r10,pc}
;;;915    #endif /* !_FS_READONLY */
                          ENDP

                  remove_chain PROC
;;;924    static
;;;925    FRESULT remove_chain (
0003dc  e92d41f0          PUSH     {r4-r8,lr}
;;;926      FATFS *fs,      /* File system object */
;;;927      DWORD clst      /* Cluster# to remove a chain from */
;;;928    )
;;;929    {
0003e0  4604              MOV      r4,r0
0003e2  460e              MOV      r6,r1
;;;930      FRESULT res;
;;;931      DWORD nxt;
;;;932    #if _USE_ERASE
;;;933      DWORD scl = clst, ecl = clst, resion[2];
;;;934    #endif
;;;935    
;;;936      if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
0003e4  2e02              CMP      r6,#2
0003e6  d302              BCC      |L1.1006|
0003e8  69e0              LDR      r0,[r4,#0x1c]
0003ea  42b0              CMP      r0,r6
0003ec  d801              BHI      |L1.1010|
                  |L1.1006|
;;;937        res = FR_INT_ERR;
0003ee  2702              MOVS     r7,#2
0003f0  e025              B        |L1.1086|
                  |L1.1010|
;;;938    
;;;939      } else {
;;;940        res = FR_OK;
0003f2  2700              MOVS     r7,#0
;;;941        while (clst < fs->n_fatent) {     /* Not a last link? */
0003f4  e01f              B        |L1.1078|
                  |L1.1014|
;;;942          nxt = get_fat(fs, clst);      /* Get cluster status */
0003f6  4631              MOV      r1,r6
0003f8  4620              MOV      r0,r4
0003fa  f7fffffe          BL       get_fat
0003fe  4605              MOV      r5,r0
;;;943          if (nxt == 0) break;        /* Empty cluster? */
000400  b905              CBNZ     r5,|L1.1028|
000402  e01b              B        |L1.1084|
                  |L1.1028|
;;;944          if (nxt == 1) { res = FR_INT_ERR; break; }  /* Internal error? */
000404  2d01              CMP      r5,#1
000406  d101              BNE      |L1.1036|
000408  2702              MOVS     r7,#2
00040a  e017              B        |L1.1084|
                  |L1.1036|
;;;945          if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }  /* Disk error? */
00040c  1c68              ADDS     r0,r5,#1
00040e  d101              BNE      |L1.1044|
000410  2701              MOVS     r7,#1
000412  e013              B        |L1.1084|
                  |L1.1044|
;;;946          res = put_fat(fs, clst, 0);     /* Mark the cluster "empty" */
000414  2200              MOVS     r2,#0
000416  4631              MOV      r1,r6
000418  4620              MOV      r0,r4
00041a  f7fffffe          BL       put_fat
00041e  4607              MOV      r7,r0
;;;947          if (res != FR_OK) break;
000420  b107              CBZ      r7,|L1.1060|
000422  e00b              B        |L1.1084|
                  |L1.1060|
;;;948          if (fs->free_clust != 0xFFFFFFFF) { /* Update FSInfo */
000424  6920              LDR      r0,[r4,#0x10]
000426  1c40              ADDS     r0,r0,#1
000428  d004              BEQ      |L1.1076|
;;;949            fs->free_clust++;
00042a  6920              LDR      r0,[r4,#0x10]
00042c  1c40              ADDS     r0,r0,#1
00042e  6120              STR      r0,[r4,#0x10]
;;;950            fs->fsi_flag = 1;
000430  2001              MOVS     r0,#1
000432  7160              STRB     r0,[r4,#5]
                  |L1.1076|
;;;951          }
;;;952    #if _USE_ERASE
;;;953          if (ecl + 1 == nxt) { /* Next cluster is contiguous */
;;;954            ecl = nxt;
;;;955          } else {        /* End of contiguous clusters */
;;;956            resion[0] = clust2sect(fs, scl);          /* Start sector */
;;;957            resion[1] = clust2sect(fs, ecl) + fs->csize - 1;  /* End sector */
;;;958            disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);   /* Erase the block */
;;;959            scl = ecl = nxt;
;;;960          }
;;;961    #endif
;;;962          clst = nxt; /* Next cluster */
000434  462e              MOV      r6,r5
                  |L1.1078|
000436  69e0              LDR      r0,[r4,#0x1c]         ;941
000438  42b0              CMP      r0,r6                 ;941
00043a  d8dc              BHI      |L1.1014|
                  |L1.1084|
00043c  bf00              NOP                            ;943
                  |L1.1086|
;;;963        }
;;;964      }
;;;965    
;;;966      return res;
00043e  4638              MOV      r0,r7
;;;967    }
000440  e8bd81f0          POP      {r4-r8,pc}
;;;968    #endif
                          ENDP

                  create_chain PROC
;;;977    static
;;;978    DWORD create_chain (  /* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000444  e92d47f0          PUSH     {r4-r10,lr}
;;;979      FATFS *fs,      /* File system object */
;;;980      DWORD clst      /* Cluster# to stretch. 0 means create a new chain. */
;;;981    )
;;;982    {
000448  4604              MOV      r4,r0
00044a  4689              MOV      r9,r1
;;;983      DWORD cs, ncl, scl;
;;;984      FRESULT res;
;;;985    
;;;986    
;;;987      if (clst == 0) {    /* Create a new chain */
00044c  f1b90f00          CMP      r9,#0
000450  d106              BNE      |L1.1120|
;;;988        scl = fs->last_clust;     /* Get suggested start point */
000452  68e7              LDR      r7,[r4,#0xc]
;;;989        if (!scl || scl >= fs->n_fatent) scl = 1;
000454  b117              CBZ      r7,|L1.1116|
000456  69e0              LDR      r0,[r4,#0x1c]
000458  42b8              CMP      r0,r7
00045a  d811              BHI      |L1.1152|
                  |L1.1116|
00045c  2701              MOVS     r7,#1
00045e  e00f              B        |L1.1152|
                  |L1.1120|
;;;990      }
;;;991      else {          /* Stretch the current chain */
;;;992        cs = get_fat(fs, clst);     /* Check the cluster status */
000460  4649              MOV      r1,r9
000462  4620              MOV      r0,r4
000464  f7fffffe          BL       get_fat
000468  4606              MOV      r6,r0
;;;993        if (cs < 2) return 1;     /* It is an invalid cluster */
00046a  2e02              CMP      r6,#2
00046c  d202              BCS      |L1.1140|
00046e  2001              MOVS     r0,#1
                  |L1.1136|
;;;994        if (cs < fs->n_fatent) return cs; /* It is already followed by next cluster */
;;;995        scl = clst;
;;;996      }
;;;997    
;;;998      ncl = scl;        /* Start cluster */
;;;999      for (;;) {
;;;1000       ncl++;              /* Next cluster */
;;;1001       if (ncl >= fs->n_fatent) {    /* Wrap around */
;;;1002         ncl = 2;
;;;1003         if (ncl > scl) return 0;  /* No free cluster */
;;;1004       }
;;;1005       cs = get_fat(fs, ncl);      /* Get the cluster status */
;;;1006       if (cs == 0) break;       /* Found a free cluster */
;;;1007       if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;1008         return cs;
;;;1009       if (ncl == scl) return 0;   /* No free cluster */
;;;1010     }
;;;1011   
;;;1012     res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
;;;1013     if (res == FR_OK && clst != 0) {
;;;1014       res = put_fat(fs, clst, ncl); /* Link it to the previous one if needed */
;;;1015     }
;;;1016     if (res == FR_OK) {
;;;1017       fs->last_clust = ncl;     /* Update FSINFO */
;;;1018       if (fs->free_clust != 0xFFFFFFFF) {
;;;1019         fs->free_clust--;
;;;1020         fs->fsi_flag = 1;
;;;1021       }
;;;1022     } else {
;;;1023       ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;1024     }
;;;1025   
;;;1026     return ncl;   /* Return new cluster number or error code */
;;;1027   }
000470  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1140|
000474  69e0              LDR      r0,[r4,#0x1c]         ;994
000476  42b0              CMP      r0,r6                 ;994
000478  d901              BLS      |L1.1150|
00047a  4630              MOV      r0,r6                 ;994
00047c  e7f8              B        |L1.1136|
                  |L1.1150|
00047e  464f              MOV      r7,r9                 ;995
                  |L1.1152|
000480  463d              MOV      r5,r7                 ;998
000482  bf00              NOP                            ;999
                  |L1.1156|
000484  1c6d              ADDS     r5,r5,#1              ;1000
000486  69e0              LDR      r0,[r4,#0x1c]         ;1001
000488  42a8              CMP      r0,r5                 ;1001
00048a  d804              BHI      |L1.1174|
00048c  2502              MOVS     r5,#2                 ;1002
00048e  42bd              CMP      r5,r7                 ;1003
000490  d901              BLS      |L1.1174|
000492  2000              MOVS     r0,#0                 ;1003
000494  e7ec              B        |L1.1136|
                  |L1.1174|
000496  4629              MOV      r1,r5                 ;1005
000498  4620              MOV      r0,r4                 ;1005
00049a  f7fffffe          BL       get_fat
00049e  4606              MOV      r6,r0                 ;1005
0004a0  b906              CBNZ     r6,|L1.1188|
0004a2  e009              B        |L1.1208|
                  |L1.1188|
0004a4  1c70              ADDS     r0,r6,#1              ;1007
0004a6  d001              BEQ      |L1.1196|
0004a8  2e01              CMP      r6,#1                 ;1007
0004aa  d101              BNE      |L1.1200|
                  |L1.1196|
0004ac  4630              MOV      r0,r6                 ;1008
0004ae  e7df              B        |L1.1136|
                  |L1.1200|
0004b0  42bd              CMP      r5,r7                 ;1009
0004b2  d1e7              BNE      |L1.1156|
0004b4  2000              MOVS     r0,#0                 ;1009
0004b6  e7db              B        |L1.1136|
                  |L1.1208|
0004b8  bf00              NOP                            ;1006
0004ba  f06f4270          MVN      r2,#0xf0000000        ;1012
0004be  4629              MOV      r1,r5                 ;1012
0004c0  4620              MOV      r0,r4                 ;1012
0004c2  f7fffffe          BL       put_fat
0004c6  4680              MOV      r8,r0                 ;1012
0004c8  f1b80f00          CMP      r8,#0                 ;1013
0004cc  d108              BNE      |L1.1248|
0004ce  f1b90f00          CMP      r9,#0                 ;1013
0004d2  d005              BEQ      |L1.1248|
0004d4  462a              MOV      r2,r5                 ;1014
0004d6  4649              MOV      r1,r9                 ;1014
0004d8  4620              MOV      r0,r4                 ;1014
0004da  f7fffffe          BL       put_fat
0004de  4680              MOV      r8,r0                 ;1014
                  |L1.1248|
0004e0  f1b80f00          CMP      r8,#0                 ;1016
0004e4  d109              BNE      |L1.1274|
0004e6  60e5              STR      r5,[r4,#0xc]          ;1017
0004e8  6920              LDR      r0,[r4,#0x10]         ;1018
0004ea  1c40              ADDS     r0,r0,#1              ;1018
0004ec  d00d              BEQ      |L1.1290|
0004ee  6920              LDR      r0,[r4,#0x10]         ;1019
0004f0  1e40              SUBS     r0,r0,#1              ;1019
0004f2  6120              STR      r0,[r4,#0x10]         ;1019
0004f4  2001              MOVS     r0,#1                 ;1020
0004f6  7160              STRB     r0,[r4,#5]            ;1020
0004f8  e007              B        |L1.1290|
                  |L1.1274|
0004fa  f1b80f01          CMP      r8,#1                 ;1023
0004fe  d102              BNE      |L1.1286|
000500  f04f30ff          MOV      r0,#0xffffffff        ;1023
000504  e000              B        |L1.1288|
                  |L1.1286|
000506  2001              MOVS     r0,#1                 ;1023
                  |L1.1288|
000508  4605              MOV      r5,r0                 ;1023
                  |L1.1290|
00050a  4628              MOV      r0,r5                 ;1026
00050c  e7b0              B        |L1.1136|
;;;1028   #endif /* !_FS_READONLY */
                          ENDP

                  dir_sdi PROC
;;;1064   static
;;;1065   FRESULT dir_sdi (
00050e  e92d41f0          PUSH     {r4-r8,lr}
;;;1066     DIR *dj,    /* Pointer to directory object */
;;;1067     WORD idx    /* Directory index number */
;;;1068   )
;;;1069   {
000512  4604              MOV      r4,r0
000514  460e              MOV      r6,r1
;;;1070     DWORD clst;
;;;1071     WORD ic;
;;;1072   
;;;1073   
;;;1074     dj->index = idx;
000516  80e6              STRH     r6,[r4,#6]
;;;1075     clst = dj->sclust;
000518  68a5              LDR      r5,[r4,#8]
;;;1076     if (clst == 1 || clst >= dj->fs->n_fatent)  /* Check start cluster range */
00051a  2d01              CMP      r5,#1
00051c  d003              BEQ      |L1.1318|
00051e  6820              LDR      r0,[r4,#0]
000520  69c0              LDR      r0,[r0,#0x1c]
000522  42a8              CMP      r0,r5
000524  d802              BHI      |L1.1324|
                  |L1.1318|
;;;1077       return FR_INT_ERR;
000526  2002              MOVS     r0,#2
                  |L1.1320|
;;;1078     if (!clst && dj->fs->fs_type == FS_FAT32) /* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1079       clst = dj->fs->dirbase;
;;;1080   
;;;1081     if (clst == 0) {  /* Static table (root-dir in FAT12/16) */
;;;1082       dj->clust = clst;
;;;1083       if (idx >= dj->fs->n_rootdir)   /* Index is out of range */
;;;1084         return FR_INT_ERR;
;;;1085       dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR); /* Sector# */
;;;1086     }
;;;1087     else {        /* Dynamic table (sub-dirs or root-dir in FAT32) */
;;;1088       ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
;;;1089       while (idx >= ic) { /* Follow cluster chain */
;;;1090         clst = get_fat(dj->fs, clst);       /* Get next cluster */
;;;1091         if (clst == 0xFFFFFFFF) return FR_DISK_ERR; /* Disk error */
;;;1092         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
;;;1093           return FR_INT_ERR;
;;;1094         idx -= ic;
;;;1095       }
;;;1096       dj->clust = clst;
;;;1097       dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);  /* Sector# */
;;;1098     }
;;;1099   
;;;1100     dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR; /* Ptr to the entry in the sector */
;;;1101   
;;;1102     return FR_OK; /* Seek succeeded */
;;;1103   }
000528  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1324|
00052c  b92d              CBNZ     r5,|L1.1338|
00052e  6820              LDR      r0,[r4,#0]            ;1078
000530  7800              LDRB     r0,[r0,#0]            ;1078
000532  2803              CMP      r0,#3                 ;1078
000534  d101              BNE      |L1.1338|
000536  6820              LDR      r0,[r4,#0]            ;1079
000538  6a85              LDR      r5,[r0,#0x28]         ;1079
                  |L1.1338|
00053a  b965              CBNZ     r5,|L1.1366|
00053c  60e5              STR      r5,[r4,#0xc]          ;1082
00053e  6820              LDR      r0,[r4,#0]            ;1083
000540  8900              LDRH     r0,[r0,#8]            ;1083
000542  42b0              CMP      r0,r6                 ;1083
000544  dc01              BGT      |L1.1354|
000546  2002              MOVS     r0,#2                 ;1084
000548  e7ee              B        |L1.1320|
                  |L1.1354|
00054a  6820              LDR      r0,[r4,#0]            ;1085
00054c  6a80              LDR      r0,[r0,#0x28]         ;1085
00054e  eb001016          ADD      r0,r0,r6,LSR #4       ;1085
000552  6120              STR      r0,[r4,#0x10]         ;1085
000554  e020              B        |L1.1432|
                  |L1.1366|
000556  6820              LDR      r0,[r4,#0]            ;1088
000558  7880              LDRB     r0,[r0,#2]            ;1088
00055a  0107              LSLS     r7,r0,#4              ;1088
00055c  e012              B        |L1.1412|
                  |L1.1374|
00055e  4629              MOV      r1,r5                 ;1090
000560  6820              LDR      r0,[r4,#0]            ;1090
000562  f7fffffe          BL       get_fat
000566  4605              MOV      r5,r0                 ;1090
000568  1c68              ADDS     r0,r5,#1              ;1091
00056a  d101              BNE      |L1.1392|
00056c  2001              MOVS     r0,#1                 ;1091
00056e  e7db              B        |L1.1320|
                  |L1.1392|
000570  2d02              CMP      r5,#2                 ;1092
000572  d303              BCC      |L1.1404|
000574  6820              LDR      r0,[r4,#0]            ;1092
000576  69c0              LDR      r0,[r0,#0x1c]         ;1092
000578  42a8              CMP      r0,r5                 ;1092
00057a  d801              BHI      |L1.1408|
                  |L1.1404|
00057c  2002              MOVS     r0,#2                 ;1093
00057e  e7d3              B        |L1.1320|
                  |L1.1408|
000580  1bf0              SUBS     r0,r6,r7              ;1094
000582  b286              UXTH     r6,r0                 ;1094
                  |L1.1412|
000584  42be              CMP      r6,r7                 ;1089
000586  daea              BGE      |L1.1374|
000588  60e5              STR      r5,[r4,#0xc]          ;1096
00058a  4629              MOV      r1,r5                 ;1097
00058c  6820              LDR      r0,[r4,#0]            ;1097
00058e  f7fffffe          BL       clust2sect
000592  eb001016          ADD      r0,r0,r6,LSR #4       ;1097
000596  6120              STR      r0,[r4,#0x10]         ;1097
                  |L1.1432|
000598  6820              LDR      r0,[r4,#0]            ;1100
00059a  3034              ADDS     r0,r0,#0x34           ;1100
00059c  f006010f          AND      r1,r6,#0xf            ;1100
0005a0  eb001041          ADD      r0,r0,r1,LSL #5       ;1100
0005a4  6160              STR      r0,[r4,#0x14]         ;1100
0005a6  2000              MOVS     r0,#0                 ;1102
0005a8  e7be              B        |L1.1320|
;;;1104   
                          ENDP

                  dir_next PROC
;;;1112   static
;;;1113   FRESULT dir_next (  /* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
0005aa  e92d41f0          PUSH     {r4-r8,lr}
;;;1114     DIR *dj,    /* Pointer to directory object */
;;;1115     int stretch   /* 0: Do not stretch table, 1: Stretch table if needed */
;;;1116   )
;;;1117   {
0005ae  4604              MOV      r4,r0
0005b0  4688              MOV      r8,r1
;;;1118     DWORD clst;
;;;1119     WORD i;
;;;1120   
;;;1121   
;;;1122     stretch = stretch;    /* To suppress warning on read-only cfg. */
0005b2  bf00              NOP      
;;;1123     i = dj->index + 1;
0005b4  88e0              LDRH     r0,[r4,#6]
0005b6  1c40              ADDS     r0,r0,#1
0005b8  b286              UXTH     r6,r0
;;;1124     if (!i || !dj->sect)  /* Report EOT when index has reached 65535 */
0005ba  b10e              CBZ      r6,|L1.1472|
0005bc  6920              LDR      r0,[r4,#0x10]
0005be  b910              CBNZ     r0,|L1.1478|
                  |L1.1472|
;;;1125       return FR_NO_FILE;
0005c0  2004              MOVS     r0,#4
                  |L1.1474|
;;;1126   
;;;1127     if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
;;;1128       dj->sect++;         /* Next sector */
;;;1129   
;;;1130       if (dj->clust == 0) { /* Static table */
;;;1131         if (i >= dj->fs->n_rootdir) /* Report EOT when end of table */
;;;1132           return FR_NO_FILE;
;;;1133       }
;;;1134       else {          /* Dynamic table */
;;;1135         if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
;;;1136           clst = get_fat(dj->fs, dj->clust);        /* Get next cluster */
;;;1137           if (clst <= 1) return FR_INT_ERR;
;;;1138           if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1139           if (clst >= dj->fs->n_fatent) {         /* When it reached end of dynamic table */
;;;1140   #if !_FS_READONLY
;;;1141             BYTE c;
;;;1142             if (!stretch) return FR_NO_FILE;      /* When do not stretch, report EOT */
;;;1143             clst = create_chain(dj->fs, dj->clust);   /* Stretch cluster chain */
;;;1144             if (clst == 0) return FR_DENIED;      /* No free cluster */
;;;1145             if (clst == 1) return FR_INT_ERR;
;;;1146             if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1147             /* Clean-up stretched table */
;;;1148             if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
;;;1149             mem_set(dj->fs->win, 0, SS(dj->fs));      /* Clear window buffer */
;;;1150             dj->fs->winsect = clust2sect(dj->fs, clst); /* Cluster start sector */
;;;1151             for (c = 0; c < dj->fs->csize; c++) {   /* Fill the new cluster with 0 */
;;;1152               dj->fs->wflag = 1;
;;;1153               if (move_window(dj->fs, 0)) return FR_DISK_ERR;
;;;1154               dj->fs->winsect++;
;;;1155             }
;;;1156             dj->fs->winsect -= c;           /* Rewind window address */
;;;1157   #else
;;;1158             return FR_NO_FILE;      /* Report EOT */
;;;1159   #endif
;;;1160           }
;;;1161           dj->clust = clst;       /* Initialize data for new cluster */
;;;1162           dj->sect = clust2sect(dj->fs, clst);
;;;1163         }
;;;1164       }
;;;1165     }
;;;1166   
;;;1167     dj->index = i;
;;;1168     dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
;;;1169   
;;;1170     return FR_OK;
;;;1171   }
0005c2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1478|
0005c6  f0160f0f          TST      r6,#0xf               ;1127
0005ca  d16e              BNE      |L1.1706|
0005cc  6920              LDR      r0,[r4,#0x10]         ;1128
0005ce  1c40              ADDS     r0,r0,#1              ;1128
0005d0  6120              STR      r0,[r4,#0x10]         ;1128
0005d2  68e0              LDR      r0,[r4,#0xc]          ;1130
0005d4  b928              CBNZ     r0,|L1.1506|
0005d6  6820              LDR      r0,[r4,#0]            ;1131
0005d8  8900              LDRH     r0,[r0,#8]            ;1131
0005da  42b0              CMP      r0,r6                 ;1131
0005dc  dc65              BGT      |L1.1706|
0005de  2004              MOVS     r0,#4                 ;1132
0005e0  e7ef              B        |L1.1474|
                  |L1.1506|
0005e2  6820              LDR      r0,[r4,#0]            ;1135
0005e4  7880              LDRB     r0,[r0,#2]            ;1135
0005e6  1e40              SUBS     r0,r0,#1              ;1135
0005e8  ea101f16          TST      r0,r6,LSR #4          ;1135
0005ec  d15d              BNE      |L1.1706|
0005ee  68e1              LDR      r1,[r4,#0xc]          ;1136
0005f0  6820              LDR      r0,[r4,#0]            ;1136
0005f2  f7fffffe          BL       get_fat
0005f6  4605              MOV      r5,r0                 ;1136
0005f8  2d01              CMP      r5,#1                 ;1137
0005fa  d801              BHI      |L1.1536|
0005fc  2002              MOVS     r0,#2                 ;1137
0005fe  e7e0              B        |L1.1474|
                  |L1.1536|
000600  1c68              ADDS     r0,r5,#1              ;1138
000602  d101              BNE      |L1.1544|
000604  2001              MOVS     r0,#1                 ;1138
000606  e7dc              B        |L1.1474|
                  |L1.1544|
000608  6820              LDR      r0,[r4,#0]            ;1139
00060a  69c0              LDR      r0,[r0,#0x1c]         ;1139
00060c  42a8              CMP      r0,r5                 ;1139
00060e  d846              BHI      |L1.1694|
000610  f1b80f00          CMP      r8,#0                 ;1142
000614  d101              BNE      |L1.1562|
000616  2004              MOVS     r0,#4                 ;1142
000618  e7d3              B        |L1.1474|
                  |L1.1562|
00061a  68e1              LDR      r1,[r4,#0xc]          ;1143
00061c  6820              LDR      r0,[r4,#0]            ;1143
00061e  f7fffffe          BL       create_chain
000622  4605              MOV      r5,r0                 ;1143
000624  b90d              CBNZ     r5,|L1.1578|
000626  2007              MOVS     r0,#7                 ;1144
000628  e7cb              B        |L1.1474|
                  |L1.1578|
00062a  2d01              CMP      r5,#1                 ;1145
00062c  d101              BNE      |L1.1586|
00062e  2002              MOVS     r0,#2                 ;1145
000630  e7c7              B        |L1.1474|
                  |L1.1586|
000632  1c68              ADDS     r0,r5,#1              ;1146
000634  d101              BNE      |L1.1594|
000636  2001              MOVS     r0,#1                 ;1146
000638  e7c3              B        |L1.1474|
                  |L1.1594|
00063a  2100              MOVS     r1,#0                 ;1148
00063c  6820              LDR      r0,[r4,#0]            ;1148
00063e  f7fffffe          BL       move_window
000642  b108              CBZ      r0,|L1.1608|
000644  2001              MOVS     r0,#1                 ;1148
000646  e7bc              B        |L1.1474|
                  |L1.1608|
000648  6821              LDR      r1,[r4,#0]            ;1149
00064a  f1010034          ADD      r0,r1,#0x34           ;1149
00064e  f44f7200          MOV      r2,#0x200             ;1149
000652  2100              MOVS     r1,#0                 ;1149
000654  f7fffffe          BL       mem_set
000658  4629              MOV      r1,r5                 ;1150
00065a  6820              LDR      r0,[r4,#0]            ;1150
00065c  f7fffffe          BL       clust2sect
000660  6821              LDR      r1,[r4,#0]            ;1150
000662  6308              STR      r0,[r1,#0x30]         ;1150
000664  2700              MOVS     r7,#0                 ;1151
000666  e010              B        |L1.1674|
                  |L1.1640|
000668  2001              MOVS     r0,#1                 ;1152
00066a  6821              LDR      r1,[r4,#0]            ;1152
00066c  7108              STRB     r0,[r1,#4]            ;1152
00066e  2100              MOVS     r1,#0                 ;1153
000670  6820              LDR      r0,[r4,#0]            ;1153
000672  f7fffffe          BL       move_window
000676  b108              CBZ      r0,|L1.1660|
000678  2001              MOVS     r0,#1                 ;1153
00067a  e7a2              B        |L1.1474|
                  |L1.1660|
00067c  6820              LDR      r0,[r4,#0]            ;1154
00067e  6b00              LDR      r0,[r0,#0x30]         ;1154
000680  1c40              ADDS     r0,r0,#1              ;1154
000682  6821              LDR      r1,[r4,#0]            ;1154
000684  6308              STR      r0,[r1,#0x30]         ;1154
000686  1c78              ADDS     r0,r7,#1              ;1151
000688  b2c7              UXTB     r7,r0                 ;1151
                  |L1.1674|
00068a  6820              LDR      r0,[r4,#0]            ;1151
00068c  7880              LDRB     r0,[r0,#2]            ;1151
00068e  42b8              CMP      r0,r7                 ;1151
000690  dcea              BGT      |L1.1640|
000692  6820              LDR      r0,[r4,#0]            ;1156
000694  6b00              LDR      r0,[r0,#0x30]         ;1156
000696  1bc0              SUBS     r0,r0,r7              ;1156
000698  6821              LDR      r1,[r4,#0]            ;1156
00069a  6308              STR      r0,[r1,#0x30]         ;1156
00069c  bf00              NOP                            ;1160
                  |L1.1694|
00069e  60e5              STR      r5,[r4,#0xc]          ;1161
0006a0  4629              MOV      r1,r5                 ;1162
0006a2  6820              LDR      r0,[r4,#0]            ;1162
0006a4  f7fffffe          BL       clust2sect
0006a8  6120              STR      r0,[r4,#0x10]         ;1162
                  |L1.1706|
0006aa  80e6              STRH     r6,[r4,#6]            ;1167
0006ac  6820              LDR      r0,[r4,#0]            ;1168
0006ae  3034              ADDS     r0,r0,#0x34           ;1168
0006b0  f006010f          AND      r1,r6,#0xf            ;1168
0006b4  eb001041          ADD      r0,r0,r1,LSL #5       ;1168
0006b8  6160              STR      r0,[r4,#0x14]         ;1168
0006ba  2000              MOVS     r0,#0                 ;1170
0006bc  e781              B        |L1.1474|
;;;1172   
                          ENDP

                  dir_find PROC
;;;1352   static
;;;1353   FRESULT dir_find (
0006be  e92d41f0          PUSH     {r4-r8,lr}
;;;1354     DIR *dj     /* Pointer to the directory object linked to the file name */
;;;1355   )
;;;1356   {
0006c2  4604              MOV      r4,r0
;;;1357     FRESULT res;
;;;1358     BYTE c, *dir;
;;;1359   #if _USE_LFN
;;;1360     BYTE a, ord, sum;
;;;1361   #endif
;;;1362   
;;;1363     res = dir_sdi(dj, 0);     /* Rewind directory object */
0006c4  2100              MOVS     r1,#0
0006c6  4620              MOV      r0,r4
0006c8  f7fffffe          BL       dir_sdi
0006cc  4605              MOV      r5,r0
;;;1364     if (res != FR_OK) return res;
0006ce  b115              CBZ      r5,|L1.1750|
0006d0  4628              MOV      r0,r5
                  |L1.1746|
;;;1365   
;;;1366   #if _USE_LFN
;;;1367     ord = sum = 0xFF;
;;;1368   #endif
;;;1369     do {
;;;1370       res = move_window(dj->fs, dj->sect);
;;;1371       if (res != FR_OK) break;
;;;1372       dir = dj->dir;          /* Ptr to the directory entry of current index */
;;;1373       c = dir[DIR_Name];
;;;1374       if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
;;;1375   #if _USE_LFN  /* LFN configuration */
;;;1376       a = dir[DIR_Attr] & AM_MASK;
;;;1377       if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {  /* An entry without valid data */
;;;1378         ord = 0xFF;
;;;1379       } else {
;;;1380         if (a == AM_LFN) {      /* An LFN entry is found */
;;;1381           if (dj->lfn) {
;;;1382             if (c & LLE) {    /* Is it start of LFN sequence? */
;;;1383               sum = dir[LDIR_Chksum];
;;;1384               c &= ~LLE; ord = c; /* LFN start order */
;;;1385               dj->lfn_idx = dj->index;
;;;1386             }
;;;1387             /* Check validity of the LFN entry and compare it with given name */
;;;1388             ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;1389           }
;;;1390         } else {          /* An SFN entry is found */
;;;1391           if (!ord && sum == sum_sfn(dir)) break; /* LFN matched? */
;;;1392           ord = 0xFF; dj->lfn_idx = 0xFFFF; /* Reset LFN sequence */
;;;1393           if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;  /* SFN matched? */
;;;1394         }
;;;1395       }
;;;1396   #else   /* Non LFN configuration */
;;;1397       if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
;;;1398         break;
;;;1399   #endif
;;;1400       res = dir_next(dj, 0);    /* Next entry */
;;;1401     } while (res == FR_OK);
;;;1402   
;;;1403     return res;
;;;1404   }
0006d2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1750|
0006d6  bf00              NOP                            ;1369
                  |L1.1752|
0006d8  6921              LDR      r1,[r4,#0x10]         ;1370
0006da  6820              LDR      r0,[r4,#0]            ;1370
0006dc  f7fffffe          BL       move_window
0006e0  4605              MOV      r5,r0                 ;1370
0006e2  b105              CBZ      r5,|L1.1766|
0006e4  e016              B        |L1.1812|
                  |L1.1766|
0006e6  6966              LDR      r6,[r4,#0x14]         ;1372
0006e8  7837              LDRB     r7,[r6,#0]            ;1373
0006ea  b90f              CBNZ     r7,|L1.1776|
0006ec  2504              MOVS     r5,#4                 ;1374
0006ee  e011              B        |L1.1812|
                  |L1.1776|
0006f0  7af0              LDRB     r0,[r6,#0xb]          ;1397
0006f2  f0100f08          TST      r0,#8                 ;1397
0006f6  d106              BNE      |L1.1798|
0006f8  220b              MOVS     r2,#0xb               ;1397
0006fa  4630              MOV      r0,r6                 ;1397
0006fc  69a1              LDR      r1,[r4,#0x18]         ;1397
0006fe  f7fffffe          BL       mem_cmp
000702  b900              CBNZ     r0,|L1.1798|
000704  e006              B        |L1.1812|
                  |L1.1798|
000706  2100              MOVS     r1,#0                 ;1400
000708  4620              MOV      r0,r4                 ;1400
00070a  f7fffffe          BL       dir_next
00070e  4605              MOV      r5,r0                 ;1400
000710  2d00              CMP      r5,#0                 ;1401
000712  d0e1              BEQ      |L1.1752|
                  |L1.1812|
000714  bf00              NOP                            ;1371
000716  4628              MOV      r0,r5                 ;1403
000718  e7db              B        |L1.1746|
;;;1405   
                          ENDP

                  dir_read PROC
;;;1413   static
;;;1414   FRESULT dir_read (
00071a  e92d41f0          PUSH     {r4-r8,lr}
;;;1415     DIR *dj     /* Pointer to the directory object that pointing the entry to be read */
;;;1416   )
;;;1417   {
00071e  4604              MOV      r4,r0
;;;1418     FRESULT res;
;;;1419     BYTE c, *dir;
;;;1420   #if _USE_LFN
;;;1421     BYTE a, ord = 0xFF, sum = 0xFF;
;;;1422   #endif
;;;1423   
;;;1424     res = FR_NO_FILE;
000720  2504              MOVS     r5,#4
;;;1425     while (dj->sect) {
000722  e01a              B        |L1.1882|
                  |L1.1828|
;;;1426       res = move_window(dj->fs, dj->sect);
000724  6921              LDR      r1,[r4,#0x10]
000726  6820              LDR      r0,[r4,#0]
000728  f7fffffe          BL       move_window
00072c  4605              MOV      r5,r0
;;;1427       if (res != FR_OK) break;
00072e  b105              CBZ      r5,|L1.1842|
000730  e016              B        |L1.1888|
                  |L1.1842|
;;;1428       dir = dj->dir;          /* Ptr to the directory entry of current index */
000732  6967              LDR      r7,[r4,#0x14]
;;;1429       c = dir[DIR_Name];
000734  783e              LDRB     r6,[r7,#0]
;;;1430       if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
000736  b90e              CBNZ     r6,|L1.1852|
000738  2504              MOVS     r5,#4
00073a  e011              B        |L1.1888|
                  |L1.1852|
;;;1431   #if _USE_LFN  /* LFN configuration */
;;;1432       a = dir[DIR_Attr] & AM_MASK;
;;;1433       if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {  /* An entry without valid data */
;;;1434         ord = 0xFF;
;;;1435       } else {
;;;1436         if (a == AM_LFN) {      /* An LFN entry is found */
;;;1437           if (c & LLE) {      /* Is it start of LFN sequence? */
;;;1438             sum = dir[LDIR_Chksum];
;;;1439             c &= ~LLE; ord = c;
;;;1440             dj->lfn_idx = dj->index;
;;;1441           }
;;;1442           /* Check LFN validity and capture it */
;;;1443           ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;1444         } else {          /* An SFN entry is found */
;;;1445           if (ord || sum != sum_sfn(dir)) /* Is there a valid LFN? */
;;;1446             dj->lfn_idx = 0xFFFF;   /* It has no LFN. */
;;;1447           break;
;;;1448         }
;;;1449       }
;;;1450   #else   /* Non LFN configuration */
;;;1451       if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL)) /* Is it a valid entry? */
00073c  2ee5              CMP      r6,#0xe5
00073e  d005              BEQ      |L1.1868|
000740  bf00              NOP      
000742  7af8              LDRB     r0,[r7,#0xb]
000744  f0100f08          TST      r0,#8
000748  d100              BNE      |L1.1868|
;;;1452         break;
00074a  e009              B        |L1.1888|
                  |L1.1868|
;;;1453   #endif
;;;1454       res = dir_next(dj, 0);        /* Next entry */
00074c  2100              MOVS     r1,#0
00074e  4620              MOV      r0,r4
000750  f7fffffe          BL       dir_next
000754  4605              MOV      r5,r0
;;;1455       if (res != FR_OK) break;
000756  b105              CBZ      r5,|L1.1882|
000758  e002              B        |L1.1888|
                  |L1.1882|
00075a  6920              LDR      r0,[r4,#0x10]         ;1425
00075c  2800              CMP      r0,#0                 ;1425
00075e  d1e1              BNE      |L1.1828|
                  |L1.1888|
000760  bf00              NOP                            ;1427
;;;1456     }
;;;1457   
;;;1458     if (res != FR_OK) dj->sect = 0;
000762  b10d              CBZ      r5,|L1.1896|
000764  2000              MOVS     r0,#0
000766  6120              STR      r0,[r4,#0x10]
                  |L1.1896|
;;;1459   
;;;1460     return res;
000768  4628              MOV      r0,r5
;;;1461   }
00076a  e8bd81f0          POP      {r4-r8,pc}
;;;1462   #endif
                          ENDP

                  dir_register PROC
;;;1470   static
;;;1471   FRESULT dir_register (  /* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
00076e  e92d41f0          PUSH     {r4-r8,lr}
;;;1472     DIR *dj       /* Target directory with object name to be created */
;;;1473   )
;;;1474   {
000772  4604              MOV      r4,r0
;;;1475     FRESULT res;
;;;1476     BYTE c, *dir;
;;;1477   #if _USE_LFN  /* LFN configuration */
;;;1478     WORD n, ne, is;
;;;1479     BYTE sn[12], *fn, sum;
;;;1480     WCHAR *lfn;
;;;1481   
;;;1482   
;;;1483     fn = dj->fn; lfn = dj->lfn;
;;;1484     mem_cpy(sn, fn, 12);
;;;1485   
;;;1486     if (_FS_RPATH && (sn[NS] & NS_DOT))   /* Cannot create dot entry */
;;;1487       return FR_INVALID_NAME;
;;;1488   
;;;1489     if (sn[NS] & NS_LOSS) {     /* When LFN is out of 8.3 format, generate a numbered name */
;;;1490       fn[NS] = 0; dj->lfn = 0;      /* Find only SFN */
;;;1491       for (n = 1; n < 100; n++) {
;;;1492         gen_numname(fn, sn, lfn, n);  /* Generate a numbered name */
;;;1493         res = dir_find(dj);       /* Check if the name collides with existing SFN */
;;;1494         if (res != FR_OK) break;
;;;1495       }
;;;1496       if (n == 100) return FR_DENIED;   /* Abort if too many collisions */
;;;1497       if (res != FR_NO_FILE) return res;  /* Abort if the result is other than 'not collided' */
;;;1498       fn[NS] = sn[NS]; dj->lfn = lfn;
;;;1499     }
;;;1500   
;;;1501     if (sn[NS] & NS_LFN) {      /* When LFN is to be created, reserve an SFN + LFN entries. */
;;;1502       for (ne = 0; lfn[ne]; ne++) ;
;;;1503       ne = (ne + 25) / 13;
;;;1504     } else {            /* Otherwise reserve only an SFN entry. */
;;;1505       ne = 1;
;;;1506     }
;;;1507   
;;;1508     /* Reserve contiguous entries */
;;;1509     res = dir_sdi(dj, 0);
;;;1510     if (res != FR_OK) return res;
;;;1511     n = is = 0;
;;;1512     do {
;;;1513       res = move_window(dj->fs, dj->sect);
;;;1514       if (res != FR_OK) break;
;;;1515       c = *dj->dir;       /* Check the entry status */
;;;1516       if (c == DDE || c == 0) { /* Is it a blank entry? */
;;;1517         if (n == 0) is = dj->index; /* First index of the contiguous entry */
;;;1518         if (++n == ne) break; /* A contiguous entry that required count is found */
;;;1519       } else {
;;;1520         n = 0;          /* Not a blank entry. Restart to search */
;;;1521       }
;;;1522       res = dir_next(dj, 1);    /* Next entry with table stretch */
;;;1523     } while (res == FR_OK);
;;;1524   
;;;1525     if (res == FR_OK && ne > 1) { /* Initialize LFN entry if needed */
;;;1526       res = dir_sdi(dj, is);
;;;1527       if (res == FR_OK) {
;;;1528         sum = sum_sfn(dj->fn);  /* Sum of the SFN tied to the LFN */
;;;1529         ne--;
;;;1530         do {          /* Store LFN entries in bottom first */
;;;1531           res = move_window(dj->fs, dj->sect);
;;;1532           if (res != FR_OK) break;
;;;1533           fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
;;;1534           dj->fs->wflag = 1;
;;;1535           res = dir_next(dj, 0);  /* Next entry */
;;;1536         } while (res == FR_OK && --ne);
;;;1537       }
;;;1538     }
;;;1539   
;;;1540   #else /* Non LFN configuration */
;;;1541     res = dir_sdi(dj, 0);
000774  2100              MOVS     r1,#0
000776  4620              MOV      r0,r4
000778  f7fffffe          BL       dir_sdi
00077c  4605              MOV      r5,r0
;;;1542     if (res == FR_OK) {
00077e  b9ad              CBNZ     r5,|L1.1964|
;;;1543       do {  /* Find a blank entry for the SFN */
000780  bf00              NOP      
                  |L1.1922|
;;;1544         res = move_window(dj->fs, dj->sect);
000782  6921              LDR      r1,[r4,#0x10]
000784  6820              LDR      r0,[r4,#0]
000786  f7fffffe          BL       move_window
00078a  4605              MOV      r5,r0
;;;1545         if (res != FR_OK) break;
00078c  b105              CBZ      r5,|L1.1936|
00078e  e00c              B        |L1.1962|
                  |L1.1936|
;;;1546         c = *dj->dir;
000790  6960              LDR      r0,[r4,#0x14]
000792  7806              LDRB     r6,[r0,#0]
;;;1547         if (c == DDE || c == 0) break;  /* Is it a blank entry? */
000794  2ee5              CMP      r6,#0xe5
000796  d000              BEQ      |L1.1946|
000798  b906              CBNZ     r6,|L1.1948|
                  |L1.1946|
00079a  e006              B        |L1.1962|
                  |L1.1948|
;;;1548         res = dir_next(dj, 1);      /* Next entry with table stretch */
00079c  2101              MOVS     r1,#1
00079e  4620              MOV      r0,r4
0007a0  f7fffffe          BL       dir_next
0007a4  4605              MOV      r5,r0
;;;1549       } while (res == FR_OK);
0007a6  2d00              CMP      r5,#0
0007a8  d0eb              BEQ      |L1.1922|
                  |L1.1962|
0007aa  bf00              NOP                            ;1545
                  |L1.1964|
;;;1550     }
;;;1551   #endif
;;;1552   
;;;1553     if (res == FR_OK) {   /* Initialize the SFN entry */
0007ac  b99d              CBNZ     r5,|L1.2006|
;;;1554       res = move_window(dj->fs, dj->sect);
0007ae  6921              LDR      r1,[r4,#0x10]
0007b0  6820              LDR      r0,[r4,#0]
0007b2  f7fffffe          BL       move_window
0007b6  4605              MOV      r5,r0
;;;1555       if (res == FR_OK) {
0007b8  b96d              CBNZ     r5,|L1.2006|
;;;1556         dir = dj->dir;
0007ba  6967              LDR      r7,[r4,#0x14]
;;;1557         mem_set(dir, 0, SZ_DIR);  /* Clean the entry */
0007bc  2220              MOVS     r2,#0x20
0007be  2100              MOVS     r1,#0
0007c0  4638              MOV      r0,r7
0007c2  f7fffffe          BL       mem_set
;;;1558         mem_cpy(dir, dj->fn, 11); /* Put SFN */
0007c6  220b              MOVS     r2,#0xb
0007c8  4638              MOV      r0,r7
0007ca  69a1              LDR      r1,[r4,#0x18]
0007cc  f7fffffe          BL       mem_cpy
;;;1559   #if _USE_LFN
;;;1560         dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT); /* Put NT flag */
;;;1561   #endif
;;;1562         dj->fs->wflag = 1;
0007d0  2001              MOVS     r0,#1
0007d2  6821              LDR      r1,[r4,#0]
0007d4  7108              STRB     r0,[r1,#4]
                  |L1.2006|
;;;1563       }
;;;1564     }
;;;1565   
;;;1566     return res;
0007d6  4628              MOV      r0,r5
;;;1567   }
0007d8  e8bd81f0          POP      {r4-r8,pc}
;;;1568   #endif /* !_FS_READONLY */
                          ENDP

                  dir_remove PROC
;;;1577   static
;;;1578   FRESULT dir_remove (  /* FR_OK: Successful, FR_DISK_ERR: A disk error */
0007dc  b570              PUSH     {r4-r6,lr}
;;;1579     DIR *dj       /* Directory object pointing the entry to be removed */
;;;1580   )
;;;1581   {
0007de  4604              MOV      r4,r0
;;;1582     FRESULT res;
;;;1583   #if _USE_LFN  /* LFN configuration */
;;;1584     WORD i;
;;;1585   
;;;1586     i = dj->index;  /* SFN index */
;;;1587     res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx)); /* Goto the SFN or top of the LFN entries */
;;;1588     if (res == FR_OK) {
;;;1589       do {
;;;1590         res = move_window(dj->fs, dj->sect);
;;;1591         if (res != FR_OK) break;
;;;1592         *dj->dir = DDE;     /* Mark the entry "deleted" */
;;;1593         dj->fs->wflag = 1;
;;;1594         if (dj->index >= i) break;  /* When reached SFN, all entries of the object has been deleted. */
;;;1595         res = dir_next(dj, 0);    /* Next entry */
;;;1596       } while (res == FR_OK);
;;;1597       if (res == FR_NO_FILE) res = FR_INT_ERR;
;;;1598     }
;;;1599   
;;;1600   #else     /* Non LFN configuration */
;;;1601     res = dir_sdi(dj, dj->index);
0007e0  88e1              LDRH     r1,[r4,#6]
0007e2  4620              MOV      r0,r4
0007e4  f7fffffe          BL       dir_sdi
0007e8  4605              MOV      r5,r0
;;;1602     if (res == FR_OK) {
0007ea  b95d              CBNZ     r5,|L1.2052|
;;;1603       res = move_window(dj->fs, dj->sect);
0007ec  6921              LDR      r1,[r4,#0x10]
0007ee  6820              LDR      r0,[r4,#0]
0007f0  f7fffffe          BL       move_window
0007f4  4605              MOV      r5,r0
;;;1604       if (res == FR_OK) {
0007f6  b92d              CBNZ     r5,|L1.2052|
;;;1605         *dj->dir = DDE;     /* Mark the entry "deleted" */
0007f8  20e5              MOVS     r0,#0xe5
0007fa  6961              LDR      r1,[r4,#0x14]
0007fc  7008              STRB     r0,[r1,#0]
;;;1606         dj->fs->wflag = 1;
0007fe  2001              MOVS     r0,#1
000800  6821              LDR      r1,[r4,#0]
000802  7108              STRB     r0,[r1,#4]
                  |L1.2052|
;;;1607       }
;;;1608     }
;;;1609   #endif
;;;1610   
;;;1611     return res;
000804  4628              MOV      r0,r5
;;;1612   }
000806  bd70              POP      {r4-r6,pc}
;;;1613   #endif /* !_FS_READONLY */
                          ENDP

                  create_name PROC
;;;1622   static
;;;1623   FRESULT create_name (
000808  e92d5ff3          PUSH     {r0,r1,r4-r12,lr}
;;;1624     DIR *dj,      /* Pointer to the directory object */
;;;1625     const TCHAR **path  /* Pointer to pointer to the segment in the path string */
;;;1626   )
;;;1627   {
;;;1628   #ifdef _EXCVT
;;;1629     static const BYTE excvt[] = _EXCVT; /* Upper conversion table for extended chars */
;;;1630   #endif
;;;1631   
;;;1632   #if _USE_LFN  /* LFN configuration */
;;;1633     BYTE b, cf;
;;;1634     WCHAR w, *lfn;
;;;1635     UINT i, ni, si, di;
;;;1636     const TCHAR *p;
;;;1637   
;;;1638     /* Create LFN in Unicode */
;;;1639     for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
;;;1640     lfn = dj->lfn;
;;;1641     si = di = 0;
;;;1642     for (;;) {
;;;1643       w = p[si++];          /* Get a character */
;;;1644       if (w < ' ' || w == '/' || w == '\\') break;  /* Break on end of segment */
;;;1645       if (di >= _MAX_LFN)       /* Reject too long name */
;;;1646         return FR_INVALID_NAME;
;;;1647   #if !_LFN_UNICODE
;;;1648       w &= 0xFF;
;;;1649       if (IsDBCS1(w)) {       /* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1650         b = (BYTE)p[si++];      /* Get 2nd byte */
;;;1651         if (!IsDBCS2(b))
;;;1652           return FR_INVALID_NAME; /* Reject invalid sequence */
;;;1653         w = (w << 8) + b;     /* Create a DBC */
;;;1654       }
;;;1655       w = ff_convert(w, 1);     /* Convert ANSI/OEM to Unicode */
;;;1656       if (!w) return FR_INVALID_NAME; /* Reject invalid code */
;;;1657   #endif
;;;1658       if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
;;;1659         return FR_INVALID_NAME;
;;;1660       lfn[di++] = w;          /* Store the Unicode char */
;;;1661     }
;;;1662     *path = &p[si];           /* Return pointer to the next segment */
;;;1663     cf = (w < ' ') ? NS_LAST : 0;   /* Set last segment flag if end of path */
;;;1664   #if _FS_RPATH
;;;1665     if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
;;;1666       (di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
;;;1667       lfn[di] = 0;
;;;1668       for (i = 0; i < 11; i++)
;;;1669         dj->fn[i] = (i < di) ? '.' : ' ';
;;;1670       dj->fn[i] = cf | NS_DOT;    /* This is a dot entry */
;;;1671       return FR_OK;
;;;1672     }
;;;1673   #endif
;;;1674     while (di) {            /* Strip trailing spaces and dots */
;;;1675       w = lfn[di-1];
;;;1676       if (w != ' ' && w != '.') break;
;;;1677       di--;
;;;1678     }
;;;1679     if (!di) return FR_INVALID_NAME;  /* Reject nul string */
;;;1680   
;;;1681     lfn[di] = 0;            /* LFN is created */
;;;1682   
;;;1683     /* Create SFN in directory form */
;;;1684     mem_set(dj->fn, ' ', 11);
;;;1685     for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;  /* Strip leading spaces and dots */
;;;1686     if (si) cf |= NS_LOSS | NS_LFN;
;;;1687     while (di && lfn[di - 1] != '.') di--;  /* Find extension (di<=si: no extension) */
;;;1688   
;;;1689     b = i = 0; ni = 8;
;;;1690     for (;;) {
;;;1691       w = lfn[si++];          /* Get an LFN char */
;;;1692       if (!w) break;          /* Break on end of the LFN */
;;;1693       if (w == ' ' || (w == '.' && si != di)) { /* Remove spaces and dots */
;;;1694         cf |= NS_LOSS | NS_LFN; continue;
;;;1695       }
;;;1696   
;;;1697       if (i >= ni || si == di) {    /* Extension or end of SFN */
;;;1698         if (ni == 11) {       /* Long extension */
;;;1699           cf |= NS_LOSS | NS_LFN; break;
;;;1700         }
;;;1701         if (si != di) cf |= NS_LOSS | NS_LFN; /* Out of 8.3 format */
;;;1702         if (si > di) break;     /* No extension */
;;;1703         si = di; i = 8; ni = 11;  /* Enter extension section */
;;;1704         b <<= 2; continue;
;;;1705       }
;;;1706   
;;;1707       if (w >= 0x80) {        /* Non ASCII char */
;;;1708   #ifdef _EXCVT
;;;1709         w = ff_convert(w, 0);   /* Unicode -> OEM code */
;;;1710         if (w) w = excvt[w - 0x80]; /* Convert extended char to upper (SBCS) */
;;;1711   #else
;;;1712         w = ff_convert(ff_wtoupper(w), 0);  /* Upper converted Unicode -> OEM code */
;;;1713   #endif
;;;1714         cf |= NS_LFN;       /* Force create LFN entry */
;;;1715       }
;;;1716   
;;;1717       if (_DF1S && w >= 0x100) {    /* Double byte char (always false on SBCS cfg) */
;;;1718         if (i >= ni - 1) {
;;;1719           cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1720         }
;;;1721         dj->fn[i++] = (BYTE)(w >> 8);
;;;1722       } else {            /* Single byte char */
;;;1723         if (!w || chk_chr("+,;=[]", w)) { /* Replace illegal chars for SFN */
;;;1724           w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;1725         } else {
;;;1726           if (IsUpper(w)) {   /* ASCII large capital */
;;;1727             b |= 2;
;;;1728           } else {
;;;1729             if (IsLower(w)) { /* ASCII small capital */
;;;1730               b |= 1; w -= 0x20;
;;;1731             }
;;;1732           }
;;;1733         }
;;;1734       }
;;;1735       dj->fn[i++] = (BYTE)w;
;;;1736     }
;;;1737   
;;;1738     if (dj->fn[0] == DDE) dj->fn[0] = NDDE; /* If the first char collides with deleted mark, replace it with 0x05 */
;;;1739   
;;;1740     if (ni == 8) b <<= 2;
;;;1741     if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) /* Create LFN entry when there are composite capitals */
;;;1742       cf |= NS_LFN;
;;;1743     if (!(cf & NS_LFN)) {           /* When LFN is in 8.3 format without extended char, NT flags are created */
;;;1744       if ((b & 0x03) == 0x01) cf |= NS_EXT; /* NT flag (Extension has only small capital) */
;;;1745       if ((b & 0x0C) == 0x04) cf |= NS_BODY;  /* NT flag (Filename has only small capital) */
;;;1746     }
;;;1747   
;;;1748     dj->fn[NS] = cf;  /* SFN is created */
;;;1749   
;;;1750     return FR_OK;
;;;1751   
;;;1752   
;;;1753   #else /* Non-LFN configuration */
;;;1754     BYTE b, c, d, *sfn;
;;;1755     UINT ni, si, i;
;;;1756     const signed char *p;
;;;1757   
;;;1758     /* Create file name in directory form */
;;;1759     for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
00080c  9801              LDR      r0,[sp,#4]
00080e  f8d08000          LDR      r8,[r0,#0]
000812  e001              B        |L1.2072|
                  |L1.2068|
000814  f1080801          ADD      r8,r8,#1
                  |L1.2072|
000818  f8980000          LDRB     r0,[r8,#0]
00081c  282f              CMP      r0,#0x2f
00081e  d0f9              BEQ      |L1.2068|
000820  f8980000          LDRB     r0,[r8,#0]
000824  285c              CMP      r0,#0x5c
000826  d0f5              BEQ      |L1.2068|
;;;1760     sfn = dj->fn;
000828  9800              LDR      r0,[sp,#0]
00082a  6985              LDR      r5,[r0,#0x18]
;;;1761     mem_set(sfn, ' ', 11);
00082c  220b              MOVS     r2,#0xb
00082e  2120              MOVS     r1,#0x20
000830  4628              MOV      r0,r5
000832  f7fffffe          BL       mem_set
;;;1762     si = i = b = 0; ni = 8;
000836  2600              MOVS     r6,#0
000838  4637              MOV      r7,r6
00083a  46b1              MOV      r9,r6
00083c  f04f0b08          MOV      r11,#8
;;;1763   #if _FS_RPATH
;;;1764     if (p[si] == '.') { /* Is this a dot entry? */
000840  f8180009          LDRB     r0,[r8,r9]
000844  282e              CMP      r0,#0x2e
000846  d126              BNE      |L1.2198|
;;;1765       for (;;) {
000848  bf00              NOP      
                  |L1.2122|
;;;1766         c = (BYTE)p[si++];
00084a  4648              MOV      r0,r9
00084c  f1090901          ADD      r9,r9,#1
000850  f8180000          LDRB     r0,[r8,r0]
000854  b2c4              UXTB     r4,r0
;;;1767         if (c != '.' || si >= 3) break;
000856  2c2e              CMP      r4,#0x2e
000858  d102              BNE      |L1.2144|
00085a  f1b90f03          CMP      r9,#3
00085e  d300              BCC      |L1.2146|
                  |L1.2144|
000860  e003              B        |L1.2154|
                  |L1.2146|
;;;1768         sfn[i++] = c;
000862  4638              MOV      r0,r7
000864  1c7f              ADDS     r7,r7,#1
000866  542c              STRB     r4,[r5,r0]
000868  e7ef              B        |L1.2122|
                  |L1.2154|
00086a  bf00              NOP                            ;1767
;;;1769       }
;;;1770       if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
00086c  2c2f              CMP      r4,#0x2f
00086e  d006              BEQ      |L1.2174|
000870  2c5c              CMP      r4,#0x5c
000872  d004              BEQ      |L1.2174|
000874  2c20              CMP      r4,#0x20
000876  dd02              BLE      |L1.2174|
000878  2006              MOVS     r0,#6
                  |L1.2170|
;;;1771       *path = &p[si];                 /* Return pointer to the next segment */
;;;1772       sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT; /* Set last segment flag if end of path */
;;;1773       return FR_OK;
;;;1774     }
;;;1775   #endif
;;;1776     for (;;) {
;;;1777       c = (BYTE)p[si++];
;;;1778       if (c <= ' ' || c == '/' || c == '\\') break; /* Break on end of segment */
;;;1779       if (c == '.' || i >= ni) {
;;;1780         if (ni != 8 || c != '.') return FR_INVALID_NAME;
;;;1781         i = 8; ni = 11;
;;;1782         b <<= 2; continue;
;;;1783       }
;;;1784       if (c >= 0x80) {        /* Extended char? */
;;;1785         b |= 3;           /* Eliminate NT flag */
;;;1786   #ifdef _EXCVT
;;;1787         c = excvt[c-0x80];      /* Upper conversion (SBCS) */
;;;1788   #else
;;;1789   #if !_DF1S  /* ASCII only cfg */
;;;1790         return FR_INVALID_NAME;
;;;1791   #endif
;;;1792   #endif
;;;1793       }
;;;1794       if (IsDBCS1(c)) {       /* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1795         d = (BYTE)p[si++];      /* Get 2nd byte */
;;;1796         if (!IsDBCS2(d) || i >= ni - 1) /* Reject invalid DBC */
;;;1797           return FR_INVALID_NAME;
;;;1798         sfn[i++] = c;
;;;1799         sfn[i++] = d;
;;;1800       } else {            /* Single byte code */
;;;1801         if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))  /* Reject illegal chrs for SFN */
;;;1802           return FR_INVALID_NAME;
;;;1803         if (IsUpper(c)) {     /* ASCII large capital? */
;;;1804           b |= 2;
;;;1805         } else {
;;;1806           if (IsLower(c)) {   /* ASCII small capital? */
;;;1807             b |= 1; c -= 0x20;
;;;1808           }
;;;1809         }
;;;1810         sfn[i++] = c;
;;;1811       }
;;;1812     }
;;;1813     *path = &p[si];           /* Return pointer to the next segment */
;;;1814     c = (c <= ' ') ? NS_LAST : 0;   /* Set last segment flag if end of path */
;;;1815   
;;;1816     if (!i) return FR_INVALID_NAME;   /* Reject nul string */
;;;1817     if (sfn[0] == DDE) sfn[0] = NDDE; /* When first char collides with DDE, replace it with 0x05 */
;;;1818   
;;;1819     if (ni == 8) b <<= 2;
;;;1820     if ((b & 0x03) == 0x01) c |= NS_EXT;  /* NT flag (Name extension has only small capital) */
;;;1821     if ((b & 0x0C) == 0x04) c |= NS_BODY; /* NT flag (Name body has only small capital) */
;;;1822   
;;;1823     sfn[NS] = c;    /* Store NT flag, File name is created */
;;;1824   
;;;1825     return FR_OK;
;;;1826   #endif
;;;1827   }
00087a  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.2174|
00087e  eb080109          ADD      r1,r8,r9              ;1771
000882  9801              LDR      r0,[sp,#4]            ;1771
000884  6001              STR      r1,[r0,#0]            ;1771
000886  2c20              CMP      r4,#0x20              ;1772
000888  dc01              BGT      |L1.2190|
00088a  2024              MOVS     r0,#0x24              ;1772
00088c  e000              B        |L1.2192|
                  |L1.2190|
00088e  2020              MOVS     r0,#0x20              ;1772
                  |L1.2192|
000890  72e8              STRB     r0,[r5,#0xb]          ;1772
000892  2000              MOVS     r0,#0                 ;1773
000894  e7f1              B        |L1.2170|
                  |L1.2198|
000896  bf00              NOP                            ;1776
                  |L1.2200|
000898  4648              MOV      r0,r9                 ;1777
00089a  f1090901          ADD      r9,r9,#1              ;1777
00089e  f8184000          LDRB     r4,[r8,r0]            ;1777
0008a2  2c20              CMP      r4,#0x20              ;1778
0008a4  dd03              BLE      |L1.2222|
0008a6  2c2f              CMP      r4,#0x2f              ;1778
0008a8  d001              BEQ      |L1.2222|
0008aa  2c5c              CMP      r4,#0x5c              ;1778
0008ac  d100              BNE      |L1.2224|
                  |L1.2222|
0008ae  e058              B        |L1.2402|
                  |L1.2224|
0008b0  2c2e              CMP      r4,#0x2e              ;1779
0008b2  d001              BEQ      |L1.2232|
0008b4  455f              CMP      r7,r11                ;1779
0008b6  d30c              BCC      |L1.2258|
                  |L1.2232|
0008b8  f1bb0f08          CMP      r11,#8                ;1780
0008bc  d101              BNE      |L1.2242|
0008be  2c2e              CMP      r4,#0x2e              ;1780
0008c0  d001              BEQ      |L1.2246|
                  |L1.2242|
0008c2  2006              MOVS     r0,#6                 ;1780
0008c4  e7d9              B        |L1.2170|
                  |L1.2246|
0008c6  2708              MOVS     r7,#8                 ;1781
0008c8  f04f0b0b          MOV      r11,#0xb              ;1781
0008cc  06b0              LSLS     r0,r6,#26             ;1782
0008ce  0e06              LSRS     r6,r0,#24             ;1782
0008d0  e7e2              B        |L1.2200|
                  |L1.2258|
0008d2  2c80              CMP      r4,#0x80              ;1784
0008d4  db01              BLT      |L1.2266|
0008d6  f0460603          ORR      r6,r6,#3              ;1785
                  |L1.2266|
0008da  2c81              CMP      r4,#0x81              ;1794
0008dc  db01              BLT      |L1.2274|
0008de  2c9f              CMP      r4,#0x9f              ;1794
0008e0  dd03              BLE      |L1.2282|
                  |L1.2274|
0008e2  2ce0              CMP      r4,#0xe0              ;1794
0008e4  db22              BLT      |L1.2348|
0008e6  2cfc              CMP      r4,#0xfc              ;1794
0008e8  dc20              BGT      |L1.2348|
                  |L1.2282|
0008ea  4648              MOV      r0,r9                 ;1795
0008ec  f1090901          ADD      r9,r9,#1              ;1795
0008f0  f8180000          LDRB     r0,[r8,r0]            ;1795
0008f4  f0000aff          AND      r10,r0,#0xff          ;1795
0008f8  f1ba0f40          CMP      r10,#0x40             ;1796
0008fc  db02              BLT      |L1.2308|
0008fe  f1ba0f7e          CMP      r10,#0x7e             ;1796
000902  dd05              BLE      |L1.2320|
                  |L1.2308|
000904  f1ba0f80          CMP      r10,#0x80             ;1796
000908  db06              BLT      |L1.2328|
00090a  f1ba0ffc          CMP      r10,#0xfc             ;1796
00090e  dc03              BGT      |L1.2328|
                  |L1.2320|
000910  f1ab0001          SUB      r0,r11,#1             ;1796
000914  42b8              CMP      r0,r7                 ;1796
000916  d801              BHI      |L1.2332|
                  |L1.2328|
000918  2006              MOVS     r0,#6                 ;1797
00091a  e7ae              B        |L1.2170|
                  |L1.2332|
00091c  4638              MOV      r0,r7                 ;1798
00091e  1c7f              ADDS     r7,r7,#1              ;1798
000920  542c              STRB     r4,[r5,r0]            ;1798
000922  4638              MOV      r0,r7                 ;1799
000924  1c7f              ADDS     r7,r7,#1              ;1799
000926  f805a000          STRB     r10,[r5,r0]           ;1799
00092a  e019              B        |L1.2400|
                  |L1.2348|
00092c  4621              MOV      r1,r4                 ;1801
00092e  a0f8              ADR      r0,|L1.3344|
000930  f7fffffe          BL       chk_chr
000934  b108              CBZ      r0,|L1.2362|
000936  2006              MOVS     r0,#6                 ;1802
000938  e79f              B        |L1.2170|
                  |L1.2362|
00093a  2c41              CMP      r4,#0x41              ;1803
00093c  db04              BLT      |L1.2376|
00093e  2c5a              CMP      r4,#0x5a              ;1803
000940  dc02              BGT      |L1.2376|
000942  f0460602          ORR      r6,r6,#2              ;1804
000946  e008              B        |L1.2394|
                  |L1.2376|
000948  2c61              CMP      r4,#0x61              ;1806
00094a  db06              BLT      |L1.2394|
00094c  2c7a              CMP      r4,#0x7a              ;1806
00094e  dc04              BGT      |L1.2394|
000950  f0460601          ORR      r6,r6,#1              ;1807
000954  f1a40020          SUB      r0,r4,#0x20           ;1807
000958  b2c4              UXTB     r4,r0                 ;1807
                  |L1.2394|
00095a  4638              MOV      r0,r7                 ;1810
00095c  1c7f              ADDS     r7,r7,#1              ;1810
00095e  542c              STRB     r4,[r5,r0]            ;1810
                  |L1.2400|
000960  e79a              B        |L1.2200|
                  |L1.2402|
000962  bf00              NOP                            ;1778
000964  eb080109          ADD      r1,r8,r9              ;1813
000968  9801              LDR      r0,[sp,#4]            ;1813
00096a  6001              STR      r1,[r0,#0]            ;1813
00096c  2c20              CMP      r4,#0x20              ;1814
00096e  dc01              BGT      |L1.2420|
000970  2004              MOVS     r0,#4                 ;1814
000972  e000              B        |L1.2422|
                  |L1.2420|
000974  2000              MOVS     r0,#0                 ;1814
                  |L1.2422|
000976  4604              MOV      r4,r0                 ;1814
000978  b90f              CBNZ     r7,|L1.2430|
00097a  2006              MOVS     r0,#6                 ;1816
00097c  e77d              B        |L1.2170|
                  |L1.2430|
00097e  7828              LDRB     r0,[r5,#0]            ;1817
000980  28e5              CMP      r0,#0xe5              ;1817
000982  d101              BNE      |L1.2440|
000984  2005              MOVS     r0,#5                 ;1817
000986  7028              STRB     r0,[r5,#0]            ;1817
                  |L1.2440|
000988  f1bb0f08          CMP      r11,#8                ;1819
00098c  d101              BNE      |L1.2450|
00098e  06b0              LSLS     r0,r6,#26             ;1819
000990  0e06              LSRS     r6,r0,#24             ;1819
                  |L1.2450|
000992  f0060003          AND      r0,r6,#3              ;1820
000996  2801              CMP      r0,#1                 ;1820
000998  d101              BNE      |L1.2462|
00099a  f0440410          ORR      r4,r4,#0x10           ;1820
                  |L1.2462|
00099e  f006000c          AND      r0,r6,#0xc            ;1821
0009a2  2804              CMP      r0,#4                 ;1821
0009a4  d101              BNE      |L1.2474|
0009a6  f0440408          ORR      r4,r4,#8              ;1821
                  |L1.2474|
0009aa  72ec              STRB     r4,[r5,#0xb]          ;1823
0009ac  2000              MOVS     r0,#0                 ;1825
0009ae  e764              B        |L1.2170|
;;;1828   
                          ENDP

                  get_fileinfo PROC
;;;1836   static
;;;1837   void get_fileinfo (   /* No return code */
0009b0  b5f0              PUSH     {r4-r7,lr}
;;;1838     DIR *dj,      /* Pointer to the directory object */
;;;1839     FILINFO *fno    /* Pointer to the file information to be filled */
;;;1840   )
;;;1841   {
0009b2  4605              MOV      r5,r0
0009b4  460b              MOV      r3,r1
;;;1842     UINT i;
;;;1843     BYTE nt, *dir;
;;;1844     TCHAR *p, c;
;;;1845   
;;;1846   
;;;1847     p = fno->fname;
0009b6  f1030209          ADD      r2,r3,#9
;;;1848     if (dj->sect) {
0009ba  692f              LDR      r7,[r5,#0x10]
0009bc  2f00              CMP      r7,#0
0009be  d043              BEQ      |L1.2632|
;;;1849       dir = dj->dir;
0009c0  6968              LDR      r0,[r5,#0x14]
;;;1850       nt = dir[DIR_NTres];    /* NT flag */
0009c2  7b06              LDRB     r6,[r0,#0xc]
;;;1851       for (i = 0; i < 8; i++) { /* Copy name body */
0009c4  2100              MOVS     r1,#0
0009c6  e00c              B        |L1.2530|
                  |L1.2504|
;;;1852         c = dir[i];
0009c8  5c47              LDRB     r7,[r0,r1]
0009ca  b27c              SXTB     r4,r7
;;;1853         if (c == ' ') break;
0009cc  2c20              CMP      r4,#0x20
0009ce  d100              BNE      |L1.2514|
0009d0  e009              B        |L1.2534|
                  |L1.2514|
;;;1854         if (c == NDDE) c = (TCHAR)DDE;
0009d2  2c05              CMP      r4,#5
0009d4  d101              BNE      |L1.2522|
0009d6  f06f041a          MVN      r4,#0x1a
                  |L1.2522|
;;;1855         if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
0009da  bf00              NOP      
;;;1856   #if _LFN_UNICODE
;;;1857         if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
;;;1858           c = (c << 8) | dir[++i];
;;;1859         c = ff_convert(c, 1);
;;;1860         if (!c) c = '?';
;;;1861   #endif
;;;1862         *p++ = c;
0009dc  f8024b01          STRB     r4,[r2],#1
0009e0  1c49              ADDS     r1,r1,#1              ;1851
                  |L1.2530|
0009e2  2908              CMP      r1,#8                 ;1851
0009e4  d3f0              BCC      |L1.2504|
                  |L1.2534|
0009e6  bf00              NOP                            ;1853
;;;1863       }
;;;1864       if (dir[8] != ' ') {    /* Copy name extension */
0009e8  7a07              LDRB     r7,[r0,#8]
0009ea  2f20              CMP      r7,#0x20
0009ec  d010              BEQ      |L1.2576|
;;;1865         *p++ = '.';
0009ee  272e              MOVS     r7,#0x2e
0009f0  f8027b01          STRB     r7,[r2],#1
;;;1866         for (i = 8; i < 11; i++) {
0009f4  2108              MOVS     r1,#8
0009f6  e008              B        |L1.2570|
                  |L1.2552|
;;;1867           c = dir[i];
0009f8  5c47              LDRB     r7,[r0,r1]
0009fa  b27c              SXTB     r4,r7
;;;1868           if (c == ' ') break;
0009fc  2c20              CMP      r4,#0x20
0009fe  d100              BNE      |L1.2562|
000a00  e005              B        |L1.2574|
                  |L1.2562|
;;;1869           if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
000a02  bf00              NOP      
;;;1870   #if _LFN_UNICODE
;;;1871           if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
;;;1872             c = (c << 8) | dir[++i];
;;;1873           c = ff_convert(c, 1);
;;;1874           if (!c) c = '?';
;;;1875   #endif
;;;1876           *p++ = c;
000a04  f8024b01          STRB     r4,[r2],#1
000a08  1c49              ADDS     r1,r1,#1              ;1866
                  |L1.2570|
000a0a  290b              CMP      r1,#0xb               ;1866
000a0c  d3f4              BCC      |L1.2552|
                  |L1.2574|
000a0e  bf00              NOP                            ;1868
                  |L1.2576|
;;;1877         }
;;;1878       }
;;;1879       fno->fattrib = dir[DIR_Attr];       /* Attribute */
000a10  7ac7              LDRB     r7,[r0,#0xb]
000a12  721f              STRB     r7,[r3,#8]
;;;1880       fno->fsize = LD_DWORD(dir+DIR_FileSize);  /* Size */
000a14  7fc7              LDRB     r7,[r0,#0x1f]
000a16  ea4f6c07          LSL      r12,r7,#24
000a1a  7f87              LDRB     r7,[r0,#0x1e]
000a1c  ea4c4c07          ORR      r12,r12,r7,LSL #16
000a20  7f47              LDRB     r7,[r0,#0x1d]
000a22  ea4c2707          ORR      r7,r12,r7,LSL #8
000a26  f890c01c          LDRB     r12,[r0,#0x1c]
000a2a  ea47070c          ORR      r7,r7,r12
000a2e  601f              STR      r7,[r3,#0]
;;;1881       fno->fdate = LD_WORD(dir+DIR_WrtDate);    /* Date */
000a30  f890c018          LDRB     r12,[r0,#0x18]
000a34  7e47              LDRB     r7,[r0,#0x19]
000a36  ea4c2707          ORR      r7,r12,r7,LSL #8
000a3a  809f              STRH     r7,[r3,#4]
;;;1882       fno->ftime = LD_WORD(dir+DIR_WrtTime);    /* Time */
000a3c  f890c016          LDRB     r12,[r0,#0x16]
000a40  7dc7              LDRB     r7,[r0,#0x17]
000a42  ea4c2707          ORR      r7,r12,r7,LSL #8
000a46  80df              STRH     r7,[r3,#6]
                  |L1.2632|
;;;1883     }
;;;1884     *p = 0;   /* Terminate SFN str by a \0 */
000a48  2700              MOVS     r7,#0
000a4a  7017              STRB     r7,[r2,#0]
;;;1885   
;;;1886   #if _USE_LFN
;;;1887     if (fno->lfname && fno->lfsize) {
;;;1888       TCHAR *tp = fno->lfname;
;;;1889       WCHAR w, *lfn;
;;;1890   
;;;1891       i = 0;
;;;1892       if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
;;;1893         lfn = dj->lfn;
;;;1894         while ((w = *lfn++) != 0) {     /* Get an LFN char */
;;;1895   #if !_LFN_UNICODE
;;;1896           w = ff_convert(w, 0);     /* Unicode -> OEM conversion */
;;;1897           if (!w) { i = 0; break; }   /* Could not convert, no LFN */
;;;1898           if (_DF1S && w >= 0x100)    /* Put 1st byte if it is a DBC (always false on SBCS cfg) */
;;;1899             tp[i++] = (TCHAR)(w >> 8);
;;;1900   #endif
;;;1901           if (i >= fno->lfsize - 1) { i = 0; break; } /* Buffer overflow, no LFN */
;;;1902           tp[i++] = (TCHAR)w;
;;;1903         }
;;;1904       }
;;;1905       tp[i] = 0;  /* Terminate the LFN str by a \0 */
;;;1906     }
;;;1907   #endif
;;;1908   }
000a4c  bdf0              POP      {r4-r7,pc}
;;;1909   #endif /* _FS_MINIMIZE <= 1 */
                          ENDP

                  follow_path PROC
;;;1918   static
;;;1919   FRESULT follow_path ( /* FR_OK(0): successful, !=0: error code */
000a4e  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;1920     DIR *dj,      /* Directory object to return last directory and found object */
;;;1921     const TCHAR *path /* Full-path string to find a file or directory */
;;;1922   )
;;;1923   {
000a52  4604              MOV      r4,r0
;;;1924     FRESULT res;
;;;1925     BYTE *dir, ns;
;;;1926   
;;;1927   
;;;1928   #if _FS_RPATH
;;;1929     if (*path == '/' || *path == '\\') { /* There is a heading separator */
000a54  9801              LDR      r0,[sp,#4]
000a56  7800              LDRB     r0,[r0,#0]
000a58  282f              CMP      r0,#0x2f
000a5a  d003              BEQ      |L1.2660|
000a5c  9801              LDR      r0,[sp,#4]
000a5e  7800              LDRB     r0,[r0,#0]
000a60  285c              CMP      r0,#0x5c
000a62  d105              BNE      |L1.2672|
                  |L1.2660|
;;;1930       path++; dj->sclust = 0;   /* Strip it and start from the root dir */
000a64  9801              LDR      r0,[sp,#4]
000a66  1c40              ADDS     r0,r0,#1
000a68  9001              STR      r0,[sp,#4]
000a6a  2000              MOVS     r0,#0
000a6c  60a0              STR      r0,[r4,#8]
000a6e  e002              B        |L1.2678|
                  |L1.2672|
;;;1931     } else {              /* No heading separator */
;;;1932       dj->sclust = dj->fs->cdir;  /* Start from the current dir */
000a70  6820              LDR      r0,[r4,#0]
000a72  6980              LDR      r0,[r0,#0x18]
000a74  60a0              STR      r0,[r4,#8]
                  |L1.2678|
;;;1933     }
;;;1934   #else
;;;1935     if (*path == '/' || *path == '\\')  /* Strip heading separator if exist */
;;;1936       path++;
;;;1937     dj->sclust = 0;           /* Start from the root dir */
;;;1938   #endif
;;;1939   
;;;1940     if ((UINT)*path < ' ') {      /* Nul path means the start directory itself */
000a76  9801              LDR      r0,[sp,#4]
000a78  f9900000          LDRSB    r0,[r0,#0]
000a7c  2820              CMP      r0,#0x20
000a7e  d207              BCS      |L1.2704|
;;;1941       res = dir_sdi(dj, 0);
000a80  2100              MOVS     r1,#0
000a82  4620              MOV      r0,r4
000a84  f7fffffe          BL       dir_sdi
000a88  4607              MOV      r7,r0
;;;1942       dj->dir = 0;
000a8a  2000              MOVS     r0,#0
000a8c  6160              STR      r0,[r4,#0x14]
000a8e  e039              B        |L1.2820|
                  |L1.2704|
;;;1943   
;;;1944     } else {              /* Follow path */
;;;1945       for (;;) {
000a90  bf00              NOP      
                  |L1.2706|
;;;1946         res = create_name(dj, &path); /* Get a segment */
000a92  a901              ADD      r1,sp,#4
000a94  4620              MOV      r0,r4
000a96  f7fffffe          BL       create_name
000a9a  4607              MOV      r7,r0
;;;1947         if (res != FR_OK) break;
000a9c  b107              CBZ      r7,|L1.2720|
000a9e  e030              B        |L1.2818|
                  |L1.2720|
;;;1948         res = dir_find(dj);       /* Find it */
000aa0  4620              MOV      r0,r4
000aa2  f7fffffe          BL       dir_find
000aa6  4607              MOV      r7,r0
;;;1949         ns = *(dj->fn+NS);
000aa8  69a0              LDR      r0,[r4,#0x18]
000aaa  7ac6              LDRB     r6,[r0,#0xb]
;;;1950         if (res != FR_OK) {       /* Failed to find the object */
000aac  b197              CBZ      r7,|L1.2772|
;;;1951           if (res != FR_NO_FILE) break; /* Abort if any hard error occured */
000aae  2f04              CMP      r7,#4
000ab0  d000              BEQ      |L1.2740|
000ab2  e026              B        |L1.2818|
                  |L1.2740|
;;;1952           /* Object not found */
;;;1953           if (_FS_RPATH && (ns & NS_DOT)) { /* If dot entry is not exit */
000ab4  f0160f20          TST      r6,#0x20
000ab8  d007              BEQ      |L1.2762|
;;;1954             dj->sclust = 0; dj->dir = 0;  /* It is the root dir */
000aba  2000              MOVS     r0,#0
000abc  60a0              STR      r0,[r4,#8]
000abe  6160              STR      r0,[r4,#0x14]
;;;1955             res = FR_OK;
000ac0  2700              MOVS     r7,#0
;;;1956             if (!(ns & NS_LAST)) continue;
000ac2  f0160f04          TST      r6,#4
000ac6  d104              BNE      |L1.2770|
000ac8  e7e3              B        |L1.2706|
                  |L1.2762|
;;;1957           } else {              /* Could not find the object */
;;;1958             if (!(ns & NS_LAST)) res = FR_NO_PATH;
000aca  f0160f04          TST      r6,#4
000ace  d100              BNE      |L1.2770|
000ad0  2705              MOVS     r7,#5
                  |L1.2770|
;;;1959           }
;;;1960           break;
000ad2  e016              B        |L1.2818|
                  |L1.2772|
;;;1961         }
;;;1962         if (ns & NS_LAST) break;      /* Last segment match. Function completed. */
000ad4  f0160f04          TST      r6,#4
000ad8  d000              BEQ      |L1.2780|
000ada  e012              B        |L1.2818|
                  |L1.2780|
;;;1963         dir = dj->dir;            /* There is next segment. Follow the sub directory */
000adc  6965              LDR      r5,[r4,#0x14]
;;;1964         if (!(dir[DIR_Attr] & AM_DIR)) {  /* Cannot follow because it is a file */
000ade  7ae8              LDRB     r0,[r5,#0xb]
000ae0  f0100f10          TST      r0,#0x10
000ae4  d101              BNE      |L1.2794|
;;;1965           res = FR_NO_PATH; break;
000ae6  2705              MOVS     r7,#5
000ae8  e00b              B        |L1.2818|
                  |L1.2794|
;;;1966         }
;;;1967         dj->sclust = LD_CLUST(dir);
000aea  7ea9              LDRB     r1,[r5,#0x1a]
000aec  7ee8              LDRB     r0,[r5,#0x1b]
000aee  ea412100          ORR      r1,r1,r0,LSL #8
000af2  7d2a              LDRB     r2,[r5,#0x14]
000af4  7d68              LDRB     r0,[r5,#0x15]
000af6  ea422000          ORR      r0,r2,r0,LSL #8
000afa  ea414000          ORR      r0,r1,r0,LSL #16
000afe  60a0              STR      r0,[r4,#8]
000b00  e7c7              B        |L1.2706|
                  |L1.2818|
000b02  bf00              NOP                            ;1947
                  |L1.2820|
;;;1968       }
;;;1969     }
;;;1970   
;;;1971     return res;
000b04  4638              MOV      r0,r7
;;;1972   }
000b06  e8bd81fc          POP      {r2-r8,pc}
;;;1973   
                          ENDP

                  check_fs PROC
;;;1981   static
;;;1982   BYTE check_fs ( /* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
000b0a  b570              PUSH     {r4-r6,lr}
;;;1983     FATFS *fs,  /* File system object */
;;;1984     DWORD sect  /* Sector# (lba) to check if it is an FAT boot record or not */
;;;1985   )
;;;1986   {
000b0c  4604              MOV      r4,r0
000b0e  460d              MOV      r5,r1
;;;1987     if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK) /* Load boot record */
000b10  7860              LDRB     r0,[r4,#1]
000b12  2301              MOVS     r3,#1
000b14  462a              MOV      r2,r5
000b16  f1040134          ADD      r1,r4,#0x34
000b1a  f7fffffe          BL       disk_read
000b1e  b108              CBZ      r0,|L1.2852|
;;;1988       return 3;
000b20  2003              MOVS     r0,#3
                  |L1.2850|
;;;1989     if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)   /* Check record signature (always placed at offset 510 even if the sector size is >512) */
;;;1990       return 2;
;;;1991   
;;;1992     if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) /* Check "FAT" string */
;;;1993       return 0;
;;;1994     if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
;;;1995       return 0;
;;;1996   
;;;1997     return 1;
;;;1998   }
000b22  bd70              POP      {r4-r6,pc}
                  |L1.2852|
000b24  f8941232          LDRB     r1,[r4,#0x232]        ;1989
000b28  f8940233          LDRB     r0,[r4,#0x233]        ;1989
000b2c  ea412000          ORR      r0,r1,r0,LSL #8       ;1989
000b30  f5a0412a          SUB      r1,r0,#0xaa00         ;1989
000b34  3955              SUBS     r1,r1,#0x55           ;1989
000b36  d001              BEQ      |L1.2876|
000b38  2002              MOVS     r0,#2                 ;1990
000b3a  e7f2              B        |L1.2850|
                  |L1.2876|
000b3c  f894006d          LDRB     r0,[r4,#0x6d]         ;1992
000b40  0601              LSLS     r1,r0,#24             ;1992
000b42  f894006c          LDRB     r0,[r4,#0x6c]         ;1992
000b46  ea414100          ORR      r1,r1,r0,LSL #16      ;1992
000b4a  f894006b          LDRB     r0,[r4,#0x6b]         ;1992
000b4e  ea412000          ORR      r0,r1,r0,LSL #8       ;1992
000b52  f894106a          LDRB     r1,[r4,#0x6a]         ;1992
000b56  4308              ORRS     r0,r0,r1              ;1992
000b58  f020407f          BIC      r0,r0,#0xff000000     ;1992
000b5c  4970              LDR      r1,|L1.3360|
000b5e  4288              CMP      r0,r1                 ;1992
000b60  d101              BNE      |L1.2918|
000b62  2000              MOVS     r0,#0                 ;1993
000b64  e7dd              B        |L1.2850|
                  |L1.2918|
000b66  f8940089          LDRB     r0,[r4,#0x89]         ;1994
000b6a  0601              LSLS     r1,r0,#24             ;1994
000b6c  f8940088          LDRB     r0,[r4,#0x88]         ;1994
000b70  ea414100          ORR      r1,r1,r0,LSL #16      ;1994
000b74  f8940087          LDRB     r0,[r4,#0x87]         ;1994
000b78  ea412000          ORR      r0,r1,r0,LSL #8       ;1994
000b7c  f8941086          LDRB     r1,[r4,#0x86]         ;1994
000b80  4308              ORRS     r0,r0,r1              ;1994
000b82  f020407f          BIC      r0,r0,#0xff000000     ;1994
000b86  4966              LDR      r1,|L1.3360|
000b88  4288              CMP      r0,r1                 ;1994
000b8a  d101              BNE      |L1.2960|
000b8c  2000              MOVS     r0,#0                 ;1995
000b8e  e7c8              B        |L1.2850|
                  |L1.2960|
000b90  2001              MOVS     r0,#1                 ;1997
000b92  e7c6              B        |L1.2850|
;;;1999   
                          ENDP

                  chk_mounted PROC
;;;2007   static
;;;2008   FRESULT chk_mounted ( /* FR_OK(0): successful, !=0: any error occurred */
000b94  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2009     const TCHAR **path, /* Pointer to pointer to the path name (drive number) */
;;;2010     FATFS **rfs,    /* Pointer to pointer to the found file system object */
;;;2011     BYTE chk_wp     /* !=0: Check media write protection for write access */
;;;2012   )
;;;2013   {
000b98  b088              SUB      sp,sp,#0x20
;;;2014     BYTE fmt, b, pi, *tbl;
;;;2015     UINT vol;
;;;2016     DSTATUS stat;
;;;2017     DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
;;;2018     WORD nrsv;
;;;2019     const TCHAR *p = *path;
000b9a  9808              LDR      r0,[sp,#0x20]
000b9c  6800              LDR      r0,[r0,#0]
000b9e  9001              STR      r0,[sp,#4]
;;;2020     FATFS *fs;
;;;2021   
;;;2022     /* Get logical drive number from the path name */
;;;2023     vol = p[0] - '0';         /* Is there a drive number? */
000ba0  9801              LDR      r0,[sp,#4]
000ba2  f9900000          LDRSB    r0,[r0,#0]
000ba6  3830              SUBS     r0,r0,#0x30
000ba8  9007              STR      r0,[sp,#0x1c]
;;;2024     if (vol <= 9 && p[1] == ':') {    /* Found a drive number, get and strip it */
000baa  9807              LDR      r0,[sp,#0x1c]
000bac  2809              CMP      r0,#9
000bae  d80a              BHI      |L1.3014|
000bb0  9801              LDR      r0,[sp,#4]
000bb2  7840              LDRB     r0,[r0,#1]
000bb4  283a              CMP      r0,#0x3a
000bb6  d106              BNE      |L1.3014|
;;;2025       p += 2; *path = p;        /* Return pointer to the path name */
000bb8  9801              LDR      r0,[sp,#4]
000bba  1c80              ADDS     r0,r0,#2
000bbc  9001              STR      r0,[sp,#4]
000bbe  9908              LDR      r1,[sp,#0x20]
000bc0  9801              LDR      r0,[sp,#4]
000bc2  6008              STR      r0,[r1,#0]
000bc4  e002              B        |L1.3020|
                  |L1.3014|
;;;2026     } else {              /* No drive number is given */
;;;2027   #if _FS_RPATH
;;;2028       vol = CurrVol;          /* Use current drive */
000bc6  4857              LDR      r0,|L1.3364|
000bc8  7800              LDRB     r0,[r0,#0]  ; CurrVol
000bca  9007              STR      r0,[sp,#0x1c]
                  |L1.3020|
;;;2029   #else
;;;2030       vol = 0;            /* Use drive 0 */
;;;2031   #endif
;;;2032     }
;;;2033   
;;;2034     /* Check if the file system object is valid or not */
;;;2035     if (vol >= _VOLUMES)        /* Is the drive number valid? */
000bcc  9807              LDR      r0,[sp,#0x1c]
000bce  b118              CBZ      r0,|L1.3032|
;;;2036       return FR_INVALID_DRIVE;
000bd0  200b              MOVS     r0,#0xb
                  |L1.3026|
;;;2037     *rfs = fs = FatFs[vol];       /* Return pointer to the corresponding file system object */
;;;2038     if (!fs) return FR_NOT_ENABLED;   /* Is the file system object available? */
;;;2039   
;;;2040     ENTER_FF(fs);           /* Lock file system */
;;;2041   
;;;2042     if (fs->fs_type) {          /* If the logical drive has been mounted */
;;;2043       stat = disk_status(fs->drv);
;;;2044       if (!(stat & STA_NOINIT)) {   /* and the physical drive is kept initialized (has not been changed), */
;;;2045         if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check write protection if needed */
;;;2046           return FR_WRITE_PROTECTED;
;;;2047         return FR_OK;       /* The file system object is valid */
;;;2048       }
;;;2049     }
;;;2050   
;;;2051     /* The file system object is not valid. */
;;;2052     /* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
;;;2053   
;;;2054     fs->fs_type = 0;          /* Clear the file system object */
;;;2055     fs->drv = LD2PD(vol);       /* Bind the logical drive and a physical drive */
;;;2056     stat = disk_initialize(fs->drv);  /* Initialize low level disk I/O layer */
;;;2057     if (stat & STA_NOINIT)        /* Check if the initialization succeeded */
;;;2058       return FR_NOT_READY;      /* Failed to initialize due to no media or hard error */
;;;2059     if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check disk write protection if needed */
;;;2060       return FR_WRITE_PROTECTED;
;;;2061   #if _MAX_SS != 512            /* Get disk sector size (variable sector size cfg only) */
;;;2062     if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
;;;2063       return FR_DISK_ERR;
;;;2064   #endif
;;;2065     /* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
;;;2066     fmt = check_fs(fs, bsect = 0);    /* Load sector 0 and check if it is an FAT-VBR (in SFD) */
;;;2067     if (LD2PT(vol) && !fmt) fmt = 1;  /* Force non-SFD if the volume is forced partition */
;;;2068     if (fmt == 1) {           /* Not an FAT-VBR, the physical drive can be partitioned */
;;;2069       /* Check the partition listed in the partition table */
;;;2070       pi = LD2PT(vol);
;;;2071       if (pi) pi--;
;;;2072       tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
;;;2073       if (tbl[4]) {           /* Is the partition existing? */
;;;2074         bsect = LD_DWORD(&tbl[8]);    /* Partition offset in LBA */
;;;2075         fmt = check_fs(fs, bsect);    /* Check the partition */
;;;2076       }
;;;2077     }
;;;2078     if (fmt == 3) return FR_DISK_ERR;
;;;2079     if (fmt) return FR_NO_FILESYSTEM;   /* No FAT volume is found */
;;;2080   
;;;2081     /* An FAT volume is found. Following code initializes the file system object */
;;;2082   
;;;2083     if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))    /* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2084       return FR_NO_FILESYSTEM;
;;;2085   
;;;2086     fasize = LD_WORD(fs->win+BPB_FATSz16);        /* Number of sectors per FAT */
;;;2087     if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
;;;2088     fs->fsize = fasize;
;;;2089   
;;;2090     fs->n_fats = b = fs->win[BPB_NumFATs];        /* Number of FAT copies */
;;;2091     if (b != 1 && b != 2) return FR_NO_FILESYSTEM;    /* (Must be 1 or 2) */
;;;2092     fasize *= b;                    /* Number of sectors for FAT area */
;;;2093   
;;;2094     fs->csize = b = fs->win[BPB_SecPerClus];      /* Number of sectors per cluster */
;;;2095     if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM; /* (Must be power of 2) */
;;;2096   
;;;2097     fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);  /* Number of root directory entries */
;;;2098     if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM; /* (BPB_RootEntCnt must be sector aligned) */
;;;2099   
;;;2100     tsect = LD_WORD(fs->win+BPB_TotSec16);        /* Number of sectors on the volume */
;;;2101     if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;2102   
;;;2103     nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);       /* Number of reserved sectors */
;;;2104     if (!nrsv) return FR_NO_FILESYSTEM;         /* (BPB_RsvdSecCnt must not be 0) */
;;;2105   
;;;2106     /* Determine the FAT sub type */
;;;2107     sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR); /* RSV+FAT+DIR */
;;;2108     if (tsect < sysect) return FR_NO_FILESYSTEM;    /* (Invalid volume size) */
;;;2109     nclst = (tsect - sysect) / fs->csize;       /* Number of clusters */
;;;2110     if (!nclst) return FR_NO_FILESYSTEM;        /* (Invalid volume size) */
;;;2111     fmt = FS_FAT12;
;;;2112     if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2113     if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2114   
;;;2115     /* Boundaries and Limits */
;;;2116     fs->n_fatent = nclst + 2;             /* Number of FAT entries */
;;;2117     fs->database = bsect + sysect;            /* Data start sector */
;;;2118     fs->fatbase = bsect + nrsv;             /* FAT start sector */
;;;2119     if (fmt == FS_FAT32) {
;;;2120       if (fs->n_rootdir) return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must be 0) */
;;;2121       fs->dirbase = LD_DWORD(fs->win+BPB_RootClus); /* Root directory start cluster */
;;;2122       szbfat = fs->n_fatent * 4;            /* (Required FAT size) */
;;;2123     } else {
;;;2124       if (!fs->n_rootdir) return FR_NO_FILESYSTEM;  /* (BPB_RootEntCnt must not be 0) */
;;;2125       fs->dirbase = fs->fatbase + fasize;       /* Root directory start sector */
;;;2126       szbfat = (fmt == FS_FAT16) ?          /* (Required FAT size) */
;;;2127         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2128     }
;;;2129     if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) /* (BPB_FATSz must not be less than required) */
;;;2130       return FR_NO_FILESYSTEM;
;;;2131   
;;;2132   #if !_FS_READONLY
;;;2133     /* Initialize cluster allocation information */
;;;2134     fs->free_clust = 0xFFFFFFFF;
;;;2135     fs->last_clust = 0;
;;;2136   
;;;2137     /* Get fsinfo if available */
;;;2138     if (fmt == FS_FAT32) {
;;;2139       fs->fsi_flag = 0;
;;;2140       fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
;;;2141       if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
;;;2142         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
;;;2143         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
;;;2144         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
;;;2145           fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;2146           fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;2147       }
;;;2148     }
;;;2149   #endif
;;;2150     fs->fs_type = fmt;    /* FAT sub-type */
;;;2151     fs->id = ++Fsid;    /* File system mount ID */
;;;2152     fs->winsect = 0;    /* Invalidate sector cache */
;;;2153     fs->wflag = 0;
;;;2154   #if _FS_RPATH
;;;2155     fs->cdir = 0;     /* Current directory (root dir) */
;;;2156   #endif
;;;2157   #if _FS_SHARE       /* Clear file lock semaphores */
;;;2158     clear_lock(fs);
;;;2159   #endif
;;;2160   
;;;2161     return FR_OK;
;;;2162   }
000bd2  b00b              ADD      sp,sp,#0x2c
000bd4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3032|
000bd8  4953              LDR      r1,|L1.3368|
000bda  9807              LDR      r0,[sp,#0x1c]         ;2037
000bdc  f8514020          LDR      r4,[r1,r0,LSL #2]     ;2037
000be0  9809              LDR      r0,[sp,#0x24]         ;2037
000be2  6004              STR      r4,[r0,#0]            ;2037
000be4  b90c              CBNZ     r4,|L1.3050|
000be6  200c              MOVS     r0,#0xc               ;2038
000be8  e7f3              B        |L1.3026|
                  |L1.3050|
000bea  7820              LDRB     r0,[r4,#0]            ;2042
000bec  b178              CBZ      r0,|L1.3086|
000bee  7860              LDRB     r0,[r4,#1]            ;2043
000bf0  f7fffffe          BL       disk_status
000bf4  4680              MOV      r8,r0                 ;2043
000bf6  f0180f01          TST      r8,#1                 ;2044
000bfa  d108              BNE      |L1.3086|
000bfc  980a              LDR      r0,[sp,#0x28]         ;2045
000bfe  b120              CBZ      r0,|L1.3082|
000c00  f0180f04          TST      r8,#4                 ;2045
000c04  d001              BEQ      |L1.3082|
000c06  200a              MOVS     r0,#0xa               ;2046
000c08  e7e3              B        |L1.3026|
                  |L1.3082|
000c0a  2000              MOVS     r0,#0                 ;2047
000c0c  e7e1              B        |L1.3026|
                  |L1.3086|
000c0e  2000              MOVS     r0,#0                 ;2054
000c10  7020              STRB     r0,[r4,#0]            ;2054
000c12  9807              LDR      r0,[sp,#0x1c]         ;2055
000c14  7060              STRB     r0,[r4,#1]            ;2055
000c16  7860              LDRB     r0,[r4,#1]            ;2056
000c18  f7fffffe          BL       disk_initialize
000c1c  4680              MOV      r8,r0                 ;2056
000c1e  f0180f01          TST      r8,#1                 ;2057
000c22  d001              BEQ      |L1.3112|
000c24  2003              MOVS     r0,#3                 ;2058
000c26  e7d4              B        |L1.3026|
                  |L1.3112|
000c28  980a              LDR      r0,[sp,#0x28]         ;2059
000c2a  b120              CBZ      r0,|L1.3126|
000c2c  f0180f04          TST      r8,#4                 ;2059
000c30  d001              BEQ      |L1.3126|
000c32  200a              MOVS     r0,#0xa               ;2060
000c34  e7cd              B        |L1.3026|
                  |L1.3126|
000c36  f04f0b00          MOV      r11,#0                ;2066
000c3a  4659              MOV      r1,r11                ;2066
000c3c  4620              MOV      r0,r4                 ;2066
000c3e  f7fffffe          BL       check_fs
000c42  4605              MOV      r5,r0                 ;2066
000c44  bf00              NOP                            ;2067
000c46  2d01              CMP      r5,#1                 ;2068
000c48  d121              BNE      |L1.3214|
000c4a  f04f0a00          MOV      r10,#0                ;2070
000c4e  f1ba0f00          CMP      r10,#0                ;2071
000c52  d003              BEQ      |L1.3164|
000c54  f1aa0001          SUB      r0,r10,#1             ;2071
000c58  f0000aff          AND      r10,r0,#0xff          ;2071
                  |L1.3164|
000c5c  f44f70df          MOV      r0,#0x1be             ;2072
000c60  eb00110a          ADD      r1,r0,r10,LSL #4      ;2072
000c64  f1040034          ADD      r0,r4,#0x34           ;2072
000c68  180f              ADDS     r7,r1,r0              ;2072
000c6a  7938              LDRB     r0,[r7,#4]            ;2073
000c6c  b178              CBZ      r0,|L1.3214|
000c6e  7af8              LDRB     r0,[r7,#0xb]          ;2074
000c70  0601              LSLS     r1,r0,#24             ;2074
000c72  7ab8              LDRB     r0,[r7,#0xa]          ;2074
000c74  ea414100          ORR      r1,r1,r0,LSL #16      ;2074
000c78  7a78              LDRB     r0,[r7,#9]            ;2074
000c7a  ea412000          ORR      r0,r1,r0,LSL #8       ;2074
000c7e  7a39              LDRB     r1,[r7,#8]            ;2074
000c80  ea400b01          ORR      r11,r0,r1             ;2074
000c84  4659              MOV      r1,r11                ;2075
000c86  4620              MOV      r0,r4                 ;2075
000c88  f7fffffe          BL       check_fs
000c8c  4605              MOV      r5,r0                 ;2075
                  |L1.3214|
000c8e  2d03              CMP      r5,#3                 ;2078
000c90  d101              BNE      |L1.3222|
000c92  2001              MOVS     r0,#1                 ;2078
000c94  e79d              B        |L1.3026|
                  |L1.3222|
000c96  b10d              CBZ      r5,|L1.3228|
000c98  200d              MOVS     r0,#0xd               ;2079
000c9a  e79a              B        |L1.3026|
                  |L1.3228|
000c9c  203f              MOVS     r0,#0x3f              ;2083
000c9e  5d01              LDRB     r1,[r0,r4]            ;2083
000ca0  f8940040          LDRB     r0,[r4,#0x40]         ;2083
000ca4  ea412000          ORR      r0,r1,r0,LSL #8       ;2083
000ca8  f5b07f00          CMP      r0,#0x200             ;2083
000cac  d001              BEQ      |L1.3250|
000cae  200d              MOVS     r0,#0xd               ;2084
000cb0  e78f              B        |L1.3026|
                  |L1.3250|
000cb2  204a              MOVS     r0,#0x4a              ;2086
000cb4  5d01              LDRB     r1,[r0,r4]            ;2086
000cb6  f894004b          LDRB     r0,[r4,#0x4b]         ;2086
000cba  ea412900          ORR      r9,r1,r0,LSL #8       ;2086
000cbe  f1b90f00          CMP      r9,#0                 ;2087
000cc2  d10e              BNE      |L1.3298|
000cc4  f894005b          LDRB     r0,[r4,#0x5b]         ;2087
000cc8  0601              LSLS     r1,r0,#24             ;2087
000cca  f894005a          LDRB     r0,[r4,#0x5a]         ;2087
000cce  ea414100          ORR      r1,r1,r0,LSL #16      ;2087
000cd2  f8940059          LDRB     r0,[r4,#0x59]         ;2087
000cd6  ea412000          ORR      r0,r1,r0,LSL #8       ;2087
000cda  f8941058          LDRB     r1,[r4,#0x58]         ;2087
000cde  ea400901          ORR      r9,r0,r1              ;2087
                  |L1.3298|
000ce2  f8c49020          STR      r9,[r4,#0x20]         ;2088
000ce6  2044              MOVS     r0,#0x44              ;2090
000ce8  5d06              LDRB     r6,[r0,r4]            ;2090
000cea  70e6              STRB     r6,[r4,#3]            ;2090
000cec  2e01              CMP      r6,#1                 ;2091
000cee  d003              BEQ      |L1.3320|
000cf0  2e02              CMP      r6,#2                 ;2091
000cf2  d001              BEQ      |L1.3320|
000cf4  200d              MOVS     r0,#0xd               ;2091
000cf6  e76c              B        |L1.3026|
                  |L1.3320|
000cf8  fb09f906          MUL      r9,r9,r6              ;2092
000cfc  2041              MOVS     r0,#0x41              ;2094
000cfe  5d00              LDRB     r0,[r0,r4]            ;2094
000d00  4606              MOV      r6,r0                 ;2094
000d02  70a0              STRB     r0,[r4,#2]            ;2094
000d04  b116              CBZ      r6,|L1.3340|
000d06  1e70              SUBS     r0,r6,#1              ;2095
000d08  4230              TST      r0,r6                 ;2095
000d0a  d00f              BEQ      |L1.3372|
                  |L1.3340|
000d0c  200d              MOVS     r0,#0xd               ;2095
000d0e  e760              B        |L1.3026|
                  |L1.3344|
000d10  222a2b2c          DCB      """*+,:;<=>?[]|",127,0
000d14  3a3b3c3d
000d18  3e3f5b5d
000d1c  7c7f00  
000d1f  00                DCB      0
                  |L1.3360|
                          DCD      0x00544146
                  |L1.3364|
                          DCD      CurrVol
                  |L1.3368|
                          DCD      FatFs
                  |L1.3372|
000d2c  2045              MOVS     r0,#0x45              ;2097
000d2e  5d01              LDRB     r1,[r0,r4]            ;2097
000d30  f8940046          LDRB     r0,[r4,#0x46]         ;2097
000d34  ea412000          ORR      r0,r1,r0,LSL #8       ;2097
000d38  8120              STRH     r0,[r4,#8]            ;2097
000d3a  7a20              LDRB     r0,[r4,#8]            ;2098
000d3c  f0100f0f          TST      r0,#0xf               ;2098
000d40  d001              BEQ      |L1.3398|
000d42  200d              MOVS     r0,#0xd               ;2098
000d44  e745              B        |L1.3026|
                  |L1.3398|
000d46  2047              MOVS     r0,#0x47              ;2100
000d48  5d01              LDRB     r1,[r0,r4]            ;2100
000d4a  f8940048          LDRB     r0,[r4,#0x48]         ;2100
000d4e  ea412000          ORR      r0,r1,r0,LSL #8       ;2100
000d52  9006              STR      r0,[sp,#0x18]         ;2100
000d54  9806              LDR      r0,[sp,#0x18]         ;2101
000d56  b970              CBNZ     r0,|L1.3446|
000d58  f8940057          LDRB     r0,[r4,#0x57]         ;2101
000d5c  0601              LSLS     r1,r0,#24             ;2101
000d5e  f8940056          LDRB     r0,[r4,#0x56]         ;2101
000d62  ea414100          ORR      r1,r1,r0,LSL #16      ;2101
000d66  f8940055          LDRB     r0,[r4,#0x55]         ;2101
000d6a  ea412000          ORR      r0,r1,r0,LSL #8       ;2101
000d6e  f8941054          LDRB     r1,[r4,#0x54]         ;2101
000d72  4308              ORRS     r0,r0,r1              ;2101
000d74  9006              STR      r0,[sp,#0x18]         ;2101
                  |L1.3446|
000d76  2042              MOVS     r0,#0x42              ;2103
000d78  5d01              LDRB     r1,[r0,r4]            ;2103
000d7a  f8940043          LDRB     r0,[r4,#0x43]         ;2103
000d7e  ea412000          ORR      r0,r1,r0,LSL #8       ;2103
000d82  9002              STR      r0,[sp,#8]            ;2103
000d84  9802              LDR      r0,[sp,#8]            ;2104
000d86  b908              CBNZ     r0,|L1.3468|
000d88  200d              MOVS     r0,#0xd               ;2104
000d8a  e722              B        |L1.3026|
                  |L1.3468|
000d8c  9802              LDR      r0,[sp,#8]            ;2107
000d8e  4448              ADD      r0,r0,r9              ;2107
000d90  8921              LDRH     r1,[r4,#8]            ;2107
000d92  eb001011          ADD      r0,r0,r1,LSR #4       ;2107
000d96  9005              STR      r0,[sp,#0x14]         ;2107
000d98  e9dd0105          LDRD     r0,r1,[sp,#0x14]      ;2108
000d9c  4281              CMP      r1,r0                 ;2108
000d9e  d201              BCS      |L1.3492|
000da0  200d              MOVS     r0,#0xd               ;2108
000da2  e716              B        |L1.3026|
                  |L1.3492|
000da4  e9dd1005          LDRD     r1,r0,[sp,#0x14]      ;2109
000da8  1a40              SUBS     r0,r0,r1              ;2109
000daa  78a1              LDRB     r1,[r4,#2]            ;2109
000dac  fbb0f0f1          UDIV     r0,r0,r1              ;2109
000db0  9004              STR      r0,[sp,#0x10]         ;2109
000db2  9804              LDR      r0,[sp,#0x10]         ;2110
000db4  b908              CBNZ     r0,|L1.3514|
000db6  200d              MOVS     r0,#0xd               ;2110
000db8  e70b              B        |L1.3026|
                  |L1.3514|
000dba  2501              MOVS     r5,#1                 ;2111
000dbc  f64071f6          MOV      r1,#0xff6             ;2112
000dc0  9804              LDR      r0,[sp,#0x10]         ;2112
000dc2  4288              CMP      r0,r1                 ;2112
000dc4  d300              BCC      |L1.3528|
000dc6  2502              MOVS     r5,#2                 ;2112
                  |L1.3528|
000dc8  f64f71f6          MOV      r1,#0xfff6            ;2113
000dcc  9804              LDR      r0,[sp,#0x10]         ;2113
000dce  4288              CMP      r0,r1                 ;2113
000dd0  d300              BCC      |L1.3540|
000dd2  2503              MOVS     r5,#3                 ;2113
                  |L1.3540|
000dd4  9804              LDR      r0,[sp,#0x10]         ;2116
000dd6  1c80              ADDS     r0,r0,#2              ;2116
000dd8  61e0              STR      r0,[r4,#0x1c]         ;2116
000dda  9805              LDR      r0,[sp,#0x14]         ;2117
000ddc  4458              ADD      r0,r0,r11             ;2117
000dde  62e0              STR      r0,[r4,#0x2c]         ;2117
000de0  9802              LDR      r0,[sp,#8]            ;2118
000de2  4458              ADD      r0,r0,r11             ;2118
000de4  6260              STR      r0,[r4,#0x24]         ;2118
000de6  2d03              CMP      r5,#3                 ;2119
000de8  d116              BNE      |L1.3608|
000dea  8920              LDRH     r0,[r4,#8]            ;2120
000dec  b108              CBZ      r0,|L1.3570|
000dee  200d              MOVS     r0,#0xd               ;2120
000df0  e6ef              B        |L1.3026|
                  |L1.3570|
000df2  f8940063          LDRB     r0,[r4,#0x63]         ;2121
000df6  0601              LSLS     r1,r0,#24             ;2121
000df8  f8940062          LDRB     r0,[r4,#0x62]         ;2121
000dfc  ea414100          ORR      r1,r1,r0,LSL #16      ;2121
000e00  f8940061          LDRB     r0,[r4,#0x61]         ;2121
000e04  ea412000          ORR      r0,r1,r0,LSL #8       ;2121
000e08  f8941060          LDRB     r1,[r4,#0x60]         ;2121
000e0c  4308              ORRS     r0,r0,r1              ;2121
000e0e  62a0              STR      r0,[r4,#0x28]         ;2121
000e10  69e0              LDR      r0,[r4,#0x1c]         ;2122
000e12  0080              LSLS     r0,r0,#2              ;2122
000e14  9003              STR      r0,[sp,#0xc]          ;2122
000e16  e014              B        |L1.3650|
                  |L1.3608|
000e18  8920              LDRH     r0,[r4,#8]            ;2124
000e1a  b908              CBNZ     r0,|L1.3616|
000e1c  200d              MOVS     r0,#0xd               ;2124
000e1e  e6d8              B        |L1.3026|
                  |L1.3616|
000e20  6a60              LDR      r0,[r4,#0x24]         ;2125
000e22  4448              ADD      r0,r0,r9              ;2125
000e24  62a0              STR      r0,[r4,#0x28]         ;2125
000e26  2d02              CMP      r5,#2                 ;2126
000e28  d102              BNE      |L1.3632|
000e2a  69e0              LDR      r0,[r4,#0x1c]         ;2127
000e2c  0040              LSLS     r0,r0,#1              ;2127
000e2e  e007              B        |L1.3648|
                  |L1.3632|
000e30  7f20              LDRB     r0,[r4,#0x1c]         ;2127
000e32  f0000001          AND      r0,r0,#1              ;2127
000e36  69e1              LDR      r1,[r4,#0x1c]         ;2127
000e38  eb010141          ADD      r1,r1,r1,LSL #1       ;2127
000e3c  eb000051          ADD      r0,r0,r1,LSR #1       ;2127
                  |L1.3648|
000e40  9003              STR      r0,[sp,#0xc]          ;2127
                  |L1.3650|
000e42  6a21              LDR      r1,[r4,#0x20]         ;2129
000e44  9803              LDR      r0,[sp,#0xc]          ;2129
000e46  f20010ff          ADD      r0,r0,#0x1ff          ;2129
000e4a  ebb12f50          CMP      r1,r0,LSR #9          ;2129
000e4e  d201              BCS      |L1.3668|
000e50  200d              MOVS     r0,#0xd               ;2130
000e52  e6be              B        |L1.3026|
                  |L1.3668|
000e54  f04f30ff          MOV      r0,#0xffffffff        ;2134
000e58  6120              STR      r0,[r4,#0x10]         ;2134
000e5a  2000              MOVS     r0,#0                 ;2135
000e5c  60e0              STR      r0,[r4,#0xc]          ;2135
000e5e  2d03              CMP      r5,#3                 ;2138
000e60  d15c              BNE      |L1.3868|
000e62  7160              STRB     r0,[r4,#5]            ;2139
000e64  f8941064          LDRB     r1,[r4,#0x64]         ;2140
000e68  f8940065          LDRB     r0,[r4,#0x65]         ;2140
000e6c  ea412000          ORR      r0,r1,r0,LSL #8       ;2140
000e70  4458              ADD      r0,r0,r11             ;2140
000e72  6160              STR      r0,[r4,#0x14]         ;2140
000e74  7860              LDRB     r0,[r4,#1]            ;2141
000e76  2301              MOVS     r3,#1                 ;2141
000e78  f1040134          ADD      r1,r4,#0x34           ;2141
000e7c  6962              LDR      r2,[r4,#0x14]         ;2141
000e7e  f7fffffe          BL       disk_read
000e82  bbe8              CBNZ     r0,|L1.3840|
000e84  f8941232          LDRB     r1,[r4,#0x232]        ;2142
000e88  f8940233          LDRB     r0,[r4,#0x233]        ;2142
000e8c  ea412000          ORR      r0,r1,r0,LSL #8       ;2142
000e90  f5a0412a          SUB      r1,r0,#0xaa00         ;2142
000e94  3955              SUBS     r1,r1,#0x55           ;2142
000e96  d141              BNE      |L1.3868|
000e98  2037              MOVS     r0,#0x37              ;2143
000e9a  5d00              LDRB     r0,[r0,r4]            ;2143
000e9c  0601              LSLS     r1,r0,#24             ;2143
000e9e  2036              MOVS     r0,#0x36              ;2143
000ea0  5d00              LDRB     r0,[r0,r4]            ;2143
000ea2  ea414100          ORR      r1,r1,r0,LSL #16      ;2143
000ea6  2035              MOVS     r0,#0x35              ;2143
000ea8  5d00              LDRB     r0,[r0,r4]            ;2143
000eaa  ea412000          ORR      r0,r1,r0,LSL #8       ;2143
000eae  f8941034          LDRB     r1,[r4,#0x34]         ;2143
000eb2  4308              ORRS     r0,r0,r1              ;2143
000eb4  49fe              LDR      r1,|L1.4784|
000eb6  4288              CMP      r0,r1                 ;2143
000eb8  d130              BNE      |L1.3868|
000eba  f894021b          LDRB     r0,[r4,#0x21b]        ;2144
000ebe  0601              LSLS     r1,r0,#24             ;2144
000ec0  f894021a          LDRB     r0,[r4,#0x21a]        ;2144
000ec4  ea414100          ORR      r1,r1,r0,LSL #16      ;2144
000ec8  f8940219          LDRB     r0,[r4,#0x219]        ;2144
000ecc  ea412000          ORR      r0,r1,r0,LSL #8       ;2144
000ed0  f8941218          LDRB     r1,[r4,#0x218]        ;2144
000ed4  4308              ORRS     r0,r0,r1              ;2144
000ed6  49f7              LDR      r1,|L1.4788|
000ed8  4288              CMP      r0,r1                 ;2144
000eda  d11f              BNE      |L1.3868|
000edc  f8940223          LDRB     r0,[r4,#0x223]        ;2145
000ee0  0601              LSLS     r1,r0,#24             ;2145
000ee2  f8940222          LDRB     r0,[r4,#0x222]        ;2145
000ee6  ea414100          ORR      r1,r1,r0,LSL #16      ;2145
000eea  f8940221          LDRB     r0,[r4,#0x221]        ;2145
000eee  ea412000          ORR      r0,r1,r0,LSL #8       ;2145
000ef2  f8941220          LDRB     r1,[r4,#0x220]        ;2145
000ef6  4308              ORRS     r0,r0,r1              ;2145
000ef8  60e0              STR      r0,[r4,#0xc]          ;2145
000efa  f894021f          LDRB     r0,[r4,#0x21f]        ;2146
000efe  e000              B        |L1.3842|
                  |L1.3840|
000f00  e00c              B        |L1.3868|
                  |L1.3842|
000f02  0601              LSLS     r1,r0,#24             ;2146
000f04  f894021e          LDRB     r0,[r4,#0x21e]        ;2146
000f08  ea414100          ORR      r1,r1,r0,LSL #16      ;2146
000f0c  f894021d          LDRB     r0,[r4,#0x21d]        ;2146
000f10  ea412000          ORR      r0,r1,r0,LSL #8       ;2146
000f14  f894121c          LDRB     r1,[r4,#0x21c]        ;2146
000f18  4308              ORRS     r0,r0,r1              ;2146
000f1a  6120              STR      r0,[r4,#0x10]         ;2146
                  |L1.3868|
000f1c  7025              STRB     r5,[r4,#0]            ;2150
000f1e  48e6              LDR      r0,|L1.4792|
000f20  8800              LDRH     r0,[r0,#0]            ;2151  ; Fsid
000f22  1c40              ADDS     r0,r0,#1              ;2151
000f24  b280              UXTH     r0,r0                 ;2151
000f26  49e4              LDR      r1,|L1.4792|
000f28  8008              STRH     r0,[r1,#0]            ;2151
000f2a  80e0              STRH     r0,[r4,#6]            ;2151
000f2c  2000              MOVS     r0,#0                 ;2152
000f2e  6320              STR      r0,[r4,#0x30]         ;2152
000f30  7120              STRB     r0,[r4,#4]            ;2153
000f32  61a0              STR      r0,[r4,#0x18]         ;2155
000f34  bf00              NOP                            ;2161
000f36  e64c              B        |L1.3026|
;;;2163   
                          ENDP

                  validate PROC
;;;2171   static
;;;2172   FRESULT validate (  /* FR_OK(0): The object is valid, !=0: Invalid */
000f38  b570              PUSH     {r4-r6,lr}
;;;2173     FATFS *fs,    /* Pointer to the file system object */
;;;2174     WORD id     /* Member id of the target object to be checked */
;;;2175   )
;;;2176   {
000f3a  4604              MOV      r4,r0
000f3c  460d              MOV      r5,r1
;;;2177     if (!fs || !fs->fs_type || fs->id != id)
000f3e  b124              CBZ      r4,|L1.3914|
000f40  7820              LDRB     r0,[r4,#0]
000f42  b110              CBZ      r0,|L1.3914|
000f44  88e0              LDRH     r0,[r4,#6]
000f46  42a8              CMP      r0,r5
000f48  d001              BEQ      |L1.3918|
                  |L1.3914|
;;;2178       return FR_INVALID_OBJECT;
000f4a  2009              MOVS     r0,#9
                  |L1.3916|
;;;2179   
;;;2180     ENTER_FF(fs);   /* Lock file system */
;;;2181   
;;;2182     if (disk_status(fs->drv) & STA_NOINIT)
;;;2183       return FR_NOT_READY;
;;;2184   
;;;2185     return FR_OK;
;;;2186   }
000f4c  bd70              POP      {r4-r6,pc}
                  |L1.3918|
000f4e  7860              LDRB     r0,[r4,#1]            ;2182
000f50  f7fffffe          BL       disk_status
000f54  f0100f01          TST      r0,#1                 ;2182
000f58  d001              BEQ      |L1.3934|
000f5a  2003              MOVS     r0,#3                 ;2183
000f5c  e7f6              B        |L1.3916|
                  |L1.3934|
000f5e  2000              MOVS     r0,#0                 ;2185
000f60  e7f4              B        |L1.3916|
;;;2187   
                          ENDP

                  f_mount PROC
;;;2202   
;;;2203   FRESULT f_mount (
000f62  4602              MOV      r2,r0
;;;2204     BYTE vol,   /* Logical drive number to be mounted/unmounted */
;;;2205     FATFS *fs   /* Pointer to new file system object (NULL for unmount)*/
;;;2206   )
;;;2207   {
;;;2208     FATFS *rfs;
;;;2209   
;;;2210   
;;;2211     if (vol >= _VOLUMES)    /* Check if the drive number is valid */
000f64  2a01              CMP      r2,#1
000f66  db01              BLT      |L1.3948|
;;;2212       return FR_INVALID_DRIVE;
000f68  200b              MOVS     r0,#0xb
                  |L1.3946|
;;;2213     rfs = FatFs[vol];     /* Get current fs object */
;;;2214   
;;;2215     if (rfs) {
;;;2216   #if _FS_SHARE
;;;2217       clear_lock(rfs);
;;;2218   #endif
;;;2219   #if _FS_REENTRANT       /* Discard sync object of the current volume */
;;;2220       if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
;;;2221   #endif
;;;2222       rfs->fs_type = 0;   /* Clear old fs object */
;;;2223     }
;;;2224   
;;;2225     if (fs) {
;;;2226       fs->fs_type = 0;    /* Clear new fs object */
;;;2227   #if _FS_REENTRANT       /* Create sync object for the new volume */
;;;2228       if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
;;;2229   #endif
;;;2230     }
;;;2231     FatFs[vol] = fs;      /* Register new fs object */
;;;2232   
;;;2233     return FR_OK;
;;;2234   }
000f6a  4770              BX       lr
                  |L1.3948|
000f6c  48d3              LDR      r0,|L1.4796|
000f6e  f8503022          LDR      r3,[r0,r2,LSL #2]     ;2213
000f72  b10b              CBZ      r3,|L1.3960|
000f74  2000              MOVS     r0,#0                 ;2222
000f76  7018              STRB     r0,[r3,#0]            ;2222
                  |L1.3960|
000f78  b109              CBZ      r1,|L1.3966|
000f7a  2000              MOVS     r0,#0                 ;2226
000f7c  7008              STRB     r0,[r1,#0]            ;2226
                  |L1.3966|
000f7e  48cf              LDR      r0,|L1.4796|
000f80  f8401022          STR      r1,[r0,r2,LSL #2]     ;2231
000f84  2000              MOVS     r0,#0                 ;2233
000f86  e7f0              B        |L1.3946|
;;;2235   
                          ENDP

                  f_open PROC
;;;2242   
;;;2243   FRESULT f_open (
000f88  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2244     FIL *fp,      /* Pointer to the blank file object */
;;;2245     const TCHAR *path,  /* Pointer to the file name */
;;;2246     BYTE mode     /* Access mode and file open mode flags */
;;;2247   )
;;;2248   {
000f8c  b08a              SUB      sp,sp,#0x28
000f8e  4605              MOV      r5,r0
000f90  4616              MOV      r6,r2
;;;2249     FRESULT res;
;;;2250     DIR dj;
;;;2251     BYTE *dir;
;;;2252     DEF_NAMEBUF;
;;;2253   
;;;2254   
;;;2255     fp->fs = 0;     /* Clear file object */
000f92  2000              MOVS     r0,#0
000f94  6028              STR      r0,[r5,#0]
;;;2256   
;;;2257   #if !_FS_READONLY
;;;2258     mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
000f96  f006061f          AND      r6,r6,#0x1f
;;;2259     res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
000f9a  f0260201          BIC      r2,r6,#1
000f9e  a903              ADD      r1,sp,#0xc
000fa0  a80b              ADD      r0,sp,#0x2c
000fa2  f7fffffe          BL       chk_mounted
000fa6  4607              MOV      r7,r0
;;;2260   #else
;;;2261     mode &= FA_READ;
;;;2262     res = chk_mounted(&path, &dj.fs, 0);
;;;2263   #endif
;;;2264     INIT_BUF(dj);
000fa8  f8cdd024          STR      sp,[sp,#0x24]
;;;2265     if (res == FR_OK)
000fac  b927              CBNZ     r7,|L1.4024|
;;;2266       res = follow_path(&dj, path); /* Follow the file path */
000fae  a803              ADD      r0,sp,#0xc
000fb0  990b              LDR      r1,[sp,#0x2c]
000fb2  f7fffffe          BL       follow_path
000fb6  4607              MOV      r7,r0
                  |L1.4024|
;;;2267     dir = dj.dir;
000fb8  9c08              LDR      r4,[sp,#0x20]
;;;2268   
;;;2269   #if !_FS_READONLY /* R/W configuration */
;;;2270     if (res == FR_OK) {
000fba  b90f              CBNZ     r7,|L1.4032|
;;;2271       if (!dir) /* Current dir itself */
000fbc  b904              CBNZ     r4,|L1.4032|
;;;2272         res = FR_INVALID_NAME;
000fbe  2706              MOVS     r7,#6
                  |L1.4032|
;;;2273   #if _FS_SHARE
;;;2274       else
;;;2275         res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2276   #endif
;;;2277     }
;;;2278     /* Create or Open a file */
;;;2279     if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
000fc0  f0160f1c          TST      r6,#0x1c
000fc4  d057              BEQ      |L1.4214|
;;;2280       DWORD dw, cl;
;;;2281   
;;;2282       if (res != FR_OK) {         /* No file, create new */
000fc6  b14f              CBZ      r7,|L1.4060|
;;;2283         if (res == FR_NO_FILE)      /* There is no file to open, create a new entry */
000fc8  2f04              CMP      r7,#4
000fca  d103              BNE      |L1.4052|
;;;2284   #if _FS_SHARE
;;;2285           res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2286   #else
;;;2287           res = dir_register(&dj);
000fcc  a803              ADD      r0,sp,#0xc
000fce  f7fffffe          BL       dir_register
000fd2  4607              MOV      r7,r0
                  |L1.4052|
;;;2288   #endif
;;;2289         mode |= FA_CREATE_ALWAYS;   /* File is created */
000fd4  f0460608          ORR      r6,r6,#8
;;;2290         dir = dj.dir;         /* New entry */
000fd8  9c08              LDR      r4,[sp,#0x20]
000fda  e009              B        |L1.4080|
                  |L1.4060|
;;;2291       }
;;;2292       else {                /* Any object is already existing */
;;;2293         if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {  /* Cannot overwrite it (R/O or DIR) */
000fdc  7ae0              LDRB     r0,[r4,#0xb]
000fde  f0100f11          TST      r0,#0x11
000fe2  d001              BEQ      |L1.4072|
;;;2294           res = FR_DENIED;
000fe4  2707              MOVS     r7,#7
000fe6  e003              B        |L1.4080|
                  |L1.4072|
;;;2295         } else {
;;;2296           if (mode & FA_CREATE_NEW) /* Cannot create as new file */
000fe8  f0160f04          TST      r6,#4
000fec  d000              BEQ      |L1.4080|
;;;2297             res = FR_EXIST;
000fee  2708              MOVS     r7,#8
                  |L1.4080|
;;;2298         }
;;;2299       }
;;;2300       if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {  /* Truncate it if overwrite mode */
000ff0  2f00              CMP      r7,#0
000ff2  d13f              BNE      |L1.4212|
000ff4  f0160f08          TST      r6,#8
000ff8  d03c              BEQ      |L1.4212|
;;;2301         dw = get_fattime();         /* Created time */
000ffa  f7fffffe          BL       get_fattime
000ffe  4680              MOV      r8,r0
;;;2302         ST_DWORD(dir+DIR_CrtTime, dw);
001000  f884800e          STRB     r8,[r4,#0xe]
001004  ea4f2118          LSR      r1,r8,#8
001008  73e1              STRB     r1,[r4,#0xf]
00100a  ea4f4118          LSR      r1,r8,#16
00100e  7421              STRB     r1,[r4,#0x10]
001010  ea4f6118          LSR      r1,r8,#24
001014  7461              STRB     r1,[r4,#0x11]
;;;2303         dir[DIR_Attr] = 0;          /* Reset attribute */
001016  2000              MOVS     r0,#0
001018  72e0              STRB     r0,[r4,#0xb]
;;;2304         ST_DWORD(dir+DIR_FileSize, 0);    /* size = 0 */
00101a  7720              STRB     r0,[r4,#0x1c]
00101c  2100              MOVS     r1,#0
00101e  7761              STRB     r1,[r4,#0x1d]
001020  77a1              STRB     r1,[r4,#0x1e]
001022  77e1              STRB     r1,[r4,#0x1f]
;;;2305         cl = LD_CLUST(dir);         /* Get start cluster */
001024  7ea1              LDRB     r1,[r4,#0x1a]
001026  7ee0              LDRB     r0,[r4,#0x1b]
001028  ea412100          ORR      r1,r1,r0,LSL #8
00102c  7d22              LDRB     r2,[r4,#0x14]
00102e  7d60              LDRB     r0,[r4,#0x15]
001030  ea422000          ORR      r0,r2,r0,LSL #8
001034  ea414900          ORR      r9,r1,r0,LSL #16
;;;2306         ST_CLUST(dir, 0);         /* cluster = 0 */
001038  2000              MOVS     r0,#0
00103a  76a0              STRB     r0,[r4,#0x1a]
00103c  2100              MOVS     r1,#0
00103e  76e1              STRB     r1,[r4,#0x1b]
001040  7520              STRB     r0,[r4,#0x14]
001042  7561              STRB     r1,[r4,#0x15]
;;;2307         dj.fs->wflag = 1;
001044  2001              MOVS     r0,#1
001046  9903              LDR      r1,[sp,#0xc]
001048  7108              STRB     r0,[r1,#4]
;;;2308         if (cl) {             /* Remove the cluster chain if exist */
00104a  f1b90f00          CMP      r9,#0
00104e  d011              BEQ      |L1.4212|
;;;2309           dw = dj.fs->winsect;
001050  9803              LDR      r0,[sp,#0xc]
001052  f8d08030          LDR      r8,[r0,#0x30]
;;;2310           res = remove_chain(dj.fs, cl);
001056  4649              MOV      r1,r9
001058  9803              LDR      r0,[sp,#0xc]
00105a  f7fffffe          BL       remove_chain
00105e  4607              MOV      r7,r0
;;;2311           if (res == FR_OK) {
001060  b947              CBNZ     r7,|L1.4212|
;;;2312             dj.fs->last_clust = cl - 1; /* Reuse the cluster hole */
001062  f1a90001          SUB      r0,r9,#1
001066  9903              LDR      r1,[sp,#0xc]
001068  60c8              STR      r0,[r1,#0xc]
;;;2313             res = move_window(dj.fs, dw);
00106a  4641              MOV      r1,r8
00106c  9803              LDR      r0,[sp,#0xc]
00106e  f7fffffe          BL       move_window
001072  4607              MOV      r7,r0
                  |L1.4212|
;;;2314           }
;;;2315         }
;;;2316       }
;;;2317     }
001074  e00e              B        |L1.4244|
                  |L1.4214|
;;;2318     else {  /* Open an existing file */
;;;2319       if (res == FR_OK) {           /* Follow succeeded */
001076  b96f              CBNZ     r7,|L1.4244|
;;;2320         if (dir[DIR_Attr] & AM_DIR) {   /* It is a directory */
001078  7ae0              LDRB     r0,[r4,#0xb]
00107a  f0100f10          TST      r0,#0x10
00107e  d001              BEQ      |L1.4228|
;;;2321           res = FR_NO_FILE;
001080  2704              MOVS     r7,#4
001082  e007              B        |L1.4244|
                  |L1.4228|
;;;2322         } else {
;;;2323           if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
001084  f0160f02          TST      r6,#2
001088  d004              BEQ      |L1.4244|
00108a  7ae0              LDRB     r0,[r4,#0xb]
00108c  f0100f01          TST      r0,#1
001090  d000              BEQ      |L1.4244|
;;;2324             res = FR_DENIED;
001092  2707              MOVS     r7,#7
                  |L1.4244|
;;;2325         }
;;;2326       }
;;;2327     }
;;;2328     if (res == FR_OK) {
001094  b947              CBNZ     r7,|L1.4264|
;;;2329       if (mode & FA_CREATE_ALWAYS)      /* Set file change flag if created or overwritten */
001096  f0160f08          TST      r6,#8
00109a  d001              BEQ      |L1.4256|
;;;2330         mode |= FA__WRITTEN;
00109c  f0460620          ORR      r6,r6,#0x20
                  |L1.4256|
;;;2331       fp->dir_sect = dj.fs->winsect;      /* Pointer to the directory entry */
0010a0  9803              LDR      r0,[sp,#0xc]
0010a2  6b00              LDR      r0,[r0,#0x30]
0010a4  61e8              STR      r0,[r5,#0x1c]
;;;2332       fp->dir_ptr = dir;
0010a6  622c              STR      r4,[r5,#0x20]
                  |L1.4264|
;;;2333   #if _FS_SHARE
;;;2334       fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2335       if (!fp->lockid) res = FR_INT_ERR;
;;;2336   #endif
;;;2337     }
;;;2338   
;;;2339   #else       /* R/O configuration */
;;;2340     if (res == FR_OK) {         /* Follow succeeded */
;;;2341       if (!dir) {           /* Current dir itself */
;;;2342         res = FR_INVALID_NAME;
;;;2343       } else {
;;;2344         if (dir[DIR_Attr] & AM_DIR) /* It is a directory */
;;;2345           res = FR_NO_FILE;
;;;2346       }
;;;2347     }
;;;2348   #endif
;;;2349     FREE_BUF();
;;;2350   
;;;2351     if (res == FR_OK) {
0010a8  b9f7              CBNZ     r7,|L1.4328|
;;;2352       fp->flag = mode;          /* File access mode */
0010aa  71ae              STRB     r6,[r5,#6]
;;;2353       fp->sclust = LD_CLUST(dir);     /* File start cluster */
0010ac  7ea1              LDRB     r1,[r4,#0x1a]
0010ae  7ee0              LDRB     r0,[r4,#0x1b]
0010b0  ea412100          ORR      r1,r1,r0,LSL #8
0010b4  7d22              LDRB     r2,[r4,#0x14]
0010b6  7d60              LDRB     r0,[r4,#0x15]
0010b8  ea422000          ORR      r0,r2,r0,LSL #8
0010bc  ea414000          ORR      r0,r1,r0,LSL #16
0010c0  6128              STR      r0,[r5,#0x10]
;;;2354       fp->fsize = LD_DWORD(dir+DIR_FileSize); /* File size */
0010c2  7fe0              LDRB     r0,[r4,#0x1f]
0010c4  0601              LSLS     r1,r0,#24
0010c6  7fa0              LDRB     r0,[r4,#0x1e]
0010c8  ea414100          ORR      r1,r1,r0,LSL #16
0010cc  7f60              LDRB     r0,[r4,#0x1d]
0010ce  ea412000          ORR      r0,r1,r0,LSL #8
0010d2  7f21              LDRB     r1,[r4,#0x1c]
0010d4  4308              ORRS     r0,r0,r1
0010d6  60e8              STR      r0,[r5,#0xc]
;;;2355       fp->fptr = 0;           /* File pointer */
0010d8  2000              MOVS     r0,#0
0010da  60a8              STR      r0,[r5,#8]
;;;2356       fp->dsect = 0;
0010dc  61a8              STR      r0,[r5,#0x18]
;;;2357   #if _USE_FASTSEEK
;;;2358       fp->cltbl = 0;            /* Normal seek mode */
;;;2359   #endif
;;;2360       fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
0010de  9803              LDR      r0,[sp,#0xc]
0010e0  6028              STR      r0,[r5,#0]
0010e2  9803              LDR      r0,[sp,#0xc]
0010e4  88c0              LDRH     r0,[r0,#6]
0010e6  80a8              STRH     r0,[r5,#4]
                  |L1.4328|
;;;2361     }
;;;2362   
;;;2363     LEAVE_FF(dj.fs, res);
0010e8  4638              MOV      r0,r7
;;;2364   }
0010ea  b00d              ADD      sp,sp,#0x34
0010ec  e8bd83f0          POP      {r4-r9,pc}
;;;2365   
                          ENDP

                  f_read PROC
;;;2372   
;;;2373   FRESULT f_read (
0010f0  e92d4fff          PUSH     {r0-r11,lr}
;;;2374     FIL *fp,    /* Pointer to the file object */
;;;2375     void *buff,   /* Pointer to data buffer */
;;;2376     UINT btr,   /* Number of bytes to read */
;;;2377     UINT *br    /* Pointer to number of bytes read */
;;;2378   )
;;;2379   {
0010f4  b083              SUB      sp,sp,#0xc
0010f6  4604              MOV      r4,r0
0010f8  4615              MOV      r5,r2
0010fa  469a              MOV      r10,r3
;;;2380     FRESULT res;
;;;2381     DWORD clst, sect, remain;
;;;2382     UINT rcnt, cc;
;;;2383     BYTE csect, *rbuff = buff;
0010fc  f8ddb010          LDR      r11,[sp,#0x10]
;;;2384   
;;;2385   
;;;2386     *br = 0;  /* Initialize byte counter */
001100  2000              MOVS     r0,#0
001102  f8ca0000          STR      r0,[r10,#0]
;;;2387   
;;;2388     res = validate(fp->fs, fp->id);       /* Check validity */
001106  88a1              LDRH     r1,[r4,#4]
001108  6820              LDR      r0,[r4,#0]
00110a  f7fffffe          BL       validate
00110e  9002              STR      r0,[sp,#8]
;;;2389     if (res != FR_OK) LEAVE_FF(fp->fs, res);
001110  9802              LDR      r0,[sp,#8]
001112  b118              CBZ      r0,|L1.4380|
001114  9802              LDR      r0,[sp,#8]
                  |L1.4374|
;;;2390     if (fp->flag & FA__ERROR)         /* Aborted file? */
;;;2391       LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2392     if (!(fp->flag & FA_READ))          /* Check access mode */
;;;2393       LEAVE_FF(fp->fs, FR_DENIED);
;;;2394     remain = fp->fsize - fp->fptr;
;;;2395     if (btr > remain) btr = (UINT)remain;   /* Truncate btr by remaining bytes */
;;;2396   
;;;2397     for ( ;  btr;               /* Repeat until all data read */
;;;2398       rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2399       if ((fp->fptr % SS(fp->fs)) == 0) {   /* On the sector boundary? */
;;;2400         csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));  /* Sector offset in the cluster */
;;;2401         if (!csect) {           /* On the cluster boundary? */
;;;2402           if (fp->fptr == 0) {      /* On the top of the file? */
;;;2403             clst = fp->sclust;      /* Follow from the origin */
;;;2404           } else {            /* Middle or end of the file */
;;;2405   #if _USE_FASTSEEK
;;;2406             if (fp->cltbl)
;;;2407               clst = clmt_clust(fp, fp->fptr);  /* Get cluster# from the CLMT */
;;;2408             else
;;;2409   #endif
;;;2410               clst = get_fat(fp->fs, fp->clust);  /* Follow cluster chain on the FAT */
;;;2411           }
;;;2412           if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2413           if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2414           fp->clust = clst;       /* Update current cluster */
;;;2415         }
;;;2416         sect = clust2sect(fp->fs, fp->clust); /* Get current sector */
;;;2417         if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2418         sect += csect;
;;;2419         cc = btr / SS(fp->fs);        /* When remaining bytes >= sector size, */
;;;2420         if (cc) {             /* Read maximum contiguous sectors directly */
;;;2421           if (csect + cc > fp->fs->csize) /* Clip at cluster boundary */
;;;2422             cc = fp->fs->csize - csect;
;;;2423           if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
;;;2424             ABORT(fp->fs, FR_DISK_ERR);
;;;2425   #if !_FS_READONLY && _FS_MINIMIZE <= 2      /* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2426   #if _FS_TINY
;;;2427           if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2428             mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2429   #else
;;;2430           if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2431             mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2432   #endif
;;;2433   #endif
;;;2434           rcnt = SS(fp->fs) * cc;     /* Number of bytes transferred */
;;;2435           continue;
;;;2436         }
;;;2437   #if !_FS_TINY
;;;2438         if (fp->dsect != sect) {      /* Load data sector if not in cache */
;;;2439   #if !_FS_READONLY
;;;2440           if (fp->flag & FA__DIRTY) {   /* Write-back dirty sector cache */
;;;2441             if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2442               ABORT(fp->fs, FR_DISK_ERR);
;;;2443             fp->flag &= ~FA__DIRTY;
;;;2444           }
;;;2445   #endif
;;;2446           if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK) /* Fill sector cache */
;;;2447             ABORT(fp->fs, FR_DISK_ERR);
;;;2448         }
;;;2449   #endif
;;;2450         fp->dsect = sect;
;;;2451       }
;;;2452       rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));  /* Get partial sector data from sector buffer */
;;;2453       if (rcnt > btr) rcnt = btr;
;;;2454   #if _FS_TINY
;;;2455       if (move_window(fp->fs, fp->dsect))   /* Move sector window */
;;;2456         ABORT(fp->fs, FR_DISK_ERR);
;;;2457       mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);  /* Pick partial sector */
;;;2458   #else
;;;2459       mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);  /* Pick partial sector */
;;;2460   #endif
;;;2461     }
;;;2462   
;;;2463     LEAVE_FF(fp->fs, FR_OK);
;;;2464   }
001116  b007              ADD      sp,sp,#0x1c
001118  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4380|
00111c  79a0              LDRB     r0,[r4,#6]            ;2390
00111e  f0100f80          TST      r0,#0x80              ;2390
001122  d001              BEQ      |L1.4392|
001124  2002              MOVS     r0,#2                 ;2391
001126  e7f6              B        |L1.4374|
                  |L1.4392|
001128  79a0              LDRB     r0,[r4,#6]            ;2392
00112a  f0100f01          TST      r0,#1                 ;2392
00112e  d101              BNE      |L1.4404|
001130  2007              MOVS     r0,#7                 ;2393
001132  e7f0              B        |L1.4374|
                  |L1.4404|
001134  e9d41002          LDRD     r1,r0,[r4,#8]         ;2394
001138  1a40              SUBS     r0,r0,r1              ;2394
00113a  9000              STR      r0,[sp,#0]            ;2394
00113c  9800              LDR      r0,[sp,#0]            ;2395
00113e  4285              CMP      r5,r0                 ;2395
001140  d900              BLS      |L1.4420|
001142  9d00              LDR      r5,[sp,#0]            ;2395
                  |L1.4420|
001144  e0bd              B        |L1.4802|
                  |L1.4422|
001146  8920              LDRH     r0,[r4,#8]            ;2399
001148  05c0              LSLS     r0,r0,#23             ;2399
00114a  0dc0              LSRS     r0,r0,#23             ;2399
00114c  d17e              BNE      |L1.4684|
00114e  6820              LDR      r0,[r4,#0]            ;2400
001150  7880              LDRB     r0,[r0,#2]            ;2400
001152  1e40              SUBS     r0,r0,#1              ;2400
001154  68a1              LDR      r1,[r4,#8]            ;2400
001156  ea002051          AND      r0,r0,r1,LSR #9       ;2400
00115a  f00009ff          AND      r9,r0,#0xff           ;2400
00115e  f1b90f00          CMP      r9,#0                 ;2401
001162  d11d              BNE      |L1.4512|
001164  68a0              LDR      r0,[r4,#8]            ;2402
001166  b910              CBNZ     r0,|L1.4462|
001168  6920              LDR      r0,[r4,#0x10]         ;2403
00116a  9001              STR      r0,[sp,#4]            ;2403
00116c  e004              B        |L1.4472|
                  |L1.4462|
00116e  6961              LDR      r1,[r4,#0x14]         ;2410
001170  6820              LDR      r0,[r4,#0]            ;2410
001172  f7fffffe          BL       get_fat
001176  9001              STR      r0,[sp,#4]            ;2410
                  |L1.4472|
001178  9801              LDR      r0,[sp,#4]            ;2412
00117a  2802              CMP      r0,#2                 ;2412
00117c  d205              BCS      |L1.4490|
00117e  79a0              LDRB     r0,[r4,#6]            ;2412
001180  f0400080          ORR      r0,r0,#0x80           ;2412
001184  71a0              STRB     r0,[r4,#6]            ;2412
001186  2002              MOVS     r0,#2                 ;2412
001188  e7c5              B        |L1.4374|
                  |L1.4490|
00118a  9801              LDR      r0,[sp,#4]            ;2413
00118c  1c40              ADDS     r0,r0,#1              ;2413
00118e  d105              BNE      |L1.4508|
001190  79a0              LDRB     r0,[r4,#6]            ;2413
001192  f0400080          ORR      r0,r0,#0x80           ;2413
001196  71a0              STRB     r0,[r4,#6]            ;2413
001198  2001              MOVS     r0,#1                 ;2413
00119a  e7bc              B        |L1.4374|
                  |L1.4508|
00119c  9801              LDR      r0,[sp,#4]            ;2414
00119e  6160              STR      r0,[r4,#0x14]         ;2414
                  |L1.4512|
0011a0  6961              LDR      r1,[r4,#0x14]         ;2416
0011a2  6820              LDR      r0,[r4,#0]            ;2416
0011a4  f7fffffe          BL       clust2sect
0011a8  4606              MOV      r6,r0                 ;2416
0011aa  b92e              CBNZ     r6,|L1.4536|
0011ac  79a0              LDRB     r0,[r4,#6]            ;2417
0011ae  f0400080          ORR      r0,r0,#0x80           ;2417
0011b2  71a0              STRB     r0,[r4,#6]            ;2417
0011b4  2002              MOVS     r0,#2                 ;2417
0011b6  e7ae              B        |L1.4374|
                  |L1.4536|
0011b8  444e              ADD      r6,r6,r9              ;2418
0011ba  ea4f2855          LSR      r8,r5,#9              ;2419
0011be  f1b80f00          CMP      r8,#0                 ;2420
0011c2  d02d              BEQ      |L1.4640|
0011c4  eb090008          ADD      r0,r9,r8              ;2421
0011c8  6821              LDR      r1,[r4,#0]            ;2421
0011ca  7889              LDRB     r1,[r1,#2]            ;2421
0011cc  4288              CMP      r0,r1                 ;2421
0011ce  d903              BLS      |L1.4568|
0011d0  6820              LDR      r0,[r4,#0]            ;2422
0011d2  7880              LDRB     r0,[r0,#2]            ;2422
0011d4  eba00809          SUB      r8,r0,r9              ;2422
                  |L1.4568|
0011d8  f00803ff          AND      r3,r8,#0xff           ;2423
0011dc  6821              LDR      r1,[r4,#0]            ;2423
0011de  7848              LDRB     r0,[r1,#1]            ;2423
0011e0  4632              MOV      r2,r6                 ;2423
0011e2  4659              MOV      r1,r11                ;2423
0011e4  f7fffffe          BL       disk_read
0011e8  b128              CBZ      r0,|L1.4598|
0011ea  79a0              LDRB     r0,[r4,#6]            ;2424
0011ec  f0400080          ORR      r0,r0,#0x80           ;2424
0011f0  71a0              STRB     r0,[r4,#6]            ;2424
0011f2  2001              MOVS     r0,#1                 ;2424
0011f4  e78f              B        |L1.4374|
                  |L1.4598|
0011f6  79a0              LDRB     r0,[r4,#6]            ;2430
0011f8  f0100f40          TST      r0,#0x40              ;2430
0011fc  d00d              BEQ      |L1.4634|
0011fe  69a0              LDR      r0,[r4,#0x18]         ;2430
001200  1b80              SUBS     r0,r0,r6              ;2430
001202  4540              CMP      r0,r8                 ;2430
001204  d209              BCS      |L1.4634|
001206  69a1              LDR      r1,[r4,#0x18]         ;2431
001208  1b89              SUBS     r1,r1,r6              ;2431
00120a  eb0b2041          ADD      r0,r11,r1,LSL #9      ;2431
00120e  f44f7200          MOV      r2,#0x200             ;2431
001212  f1040124          ADD      r1,r4,#0x24           ;2431
001216  f7fffffe          BL       mem_cpy
                  |L1.4634|
00121a  ea4f2748          LSL      r7,r8,#9              ;2434
00121e  e03d              B        |L1.4764|
                  |L1.4640|
001220  69a0              LDR      r0,[r4,#0x18]         ;2438
001222  42b0              CMP      r0,r6                 ;2438
001224  d026              BEQ      |L1.4724|
001226  79a0              LDRB     r0,[r4,#6]            ;2440
001228  f0100f40          TST      r0,#0x40              ;2440
00122c  d013              BEQ      |L1.4694|
00122e  6821              LDR      r1,[r4,#0]            ;2441
001230  7848              LDRB     r0,[r1,#1]            ;2441
001232  2301              MOVS     r3,#1                 ;2441
001234  f1040124          ADD      r1,r4,#0x24           ;2441
001238  69a2              LDR      r2,[r4,#0x18]         ;2441
00123a  f7fffffe          BL       disk_write
00123e  b130              CBZ      r0,|L1.4686|
001240  79a0              LDRB     r0,[r4,#6]            ;2442
001242  f0400080          ORR      r0,r0,#0x80           ;2442
001246  71a0              STRB     r0,[r4,#6]            ;2442
001248  2001              MOVS     r0,#1                 ;2442
00124a  e764              B        |L1.4374|
                  |L1.4684|
00124c  e013              B        |L1.4726|
                  |L1.4686|
00124e  79a0              LDRB     r0,[r4,#6]            ;2443
001250  f0200040          BIC      r0,r0,#0x40           ;2443
001254  71a0              STRB     r0,[r4,#6]            ;2443
                  |L1.4694|
001256  6821              LDR      r1,[r4,#0]            ;2446
001258  7848              LDRB     r0,[r1,#1]            ;2446
00125a  2301              MOVS     r3,#1                 ;2446
00125c  4632              MOV      r2,r6                 ;2446
00125e  f1040124          ADD      r1,r4,#0x24           ;2446
001262  f7fffffe          BL       disk_read
001266  b128              CBZ      r0,|L1.4724|
001268  79a0              LDRB     r0,[r4,#6]            ;2447
00126a  f0400080          ORR      r0,r0,#0x80           ;2447
00126e  71a0              STRB     r0,[r4,#6]            ;2447
001270  2001              MOVS     r0,#1                 ;2447
001272  e750              B        |L1.4374|
                  |L1.4724|
001274  61a6              STR      r6,[r4,#0x18]         ;2450
                  |L1.4726|
001276  8920              LDRH     r0,[r4,#8]            ;2452
001278  f3c00008          UBFX     r0,r0,#0,#9           ;2452
00127c  f5c07700          RSB      r7,r0,#0x200          ;2452
001280  42af              CMP      r7,r5                 ;2453
001282  d900              BLS      |L1.4742|
001284  462f              MOV      r7,r5                 ;2453
                  |L1.4742|
001286  8920              LDRH     r0,[r4,#8]            ;2459
001288  f3c00208          UBFX     r2,r0,#0,#9           ;2459
00128c  f1040024          ADD      r0,r4,#0x24           ;2459
001290  1811              ADDS     r1,r2,r0              ;2459
001292  463a              MOV      r2,r7                 ;2459
001294  4658              MOV      r0,r11                ;2459
001296  f7fffffe          BL       mem_cpy
00129a  bf00              NOP                            ;2435
                  |L1.4764|
00129c  44bb              ADD      r11,r11,r7            ;2398
00129e  68a0              LDR      r0,[r4,#8]            ;2398
0012a0  4438              ADD      r0,r0,r7              ;2398
0012a2  60a0              STR      r0,[r4,#8]            ;2398
0012a4  f8da0000          LDR      r0,[r10,#0]           ;2398
0012a8  4438              ADD      r0,r0,r7              ;2398
0012aa  f8ca0000          STR      r0,[r10,#0]           ;2398
0012ae  e007              B        |L1.4800|
                  |L1.4784|
                          DCD      0x41615252
                  |L1.4788|
                          DCD      0x61417272
                  |L1.4792|
                          DCD      Fsid
                  |L1.4796|
                          DCD      FatFs
                  |L1.4800|
0012c0  1bed              SUBS     r5,r5,r7              ;2398
                  |L1.4802|
0012c2  2d00              CMP      r5,#0                 ;2397
0012c4  f47faf3f          BNE      |L1.4422|
0012c8  2000              MOVS     r0,#0                 ;2463
0012ca  e724              B        |L1.4374|
;;;2465   
                          ENDP

                  f_write PROC
;;;2473   
;;;2474   FRESULT f_write (
0012cc  e92d4fff          PUSH     {r0-r11,lr}
;;;2475     FIL *fp,      /* Pointer to the file object */
;;;2476     const void *buff, /* Pointer to the data to be written */
;;;2477     UINT btw,     /* Number of bytes to write */
;;;2478     UINT *bw      /* Pointer to number of bytes written */
;;;2479   )
;;;2480   {
0012d0  b083              SUB      sp,sp,#0xc
0012d2  4604              MOV      r4,r0
0012d4  4615              MOV      r5,r2
0012d6  469b              MOV      r11,r3
;;;2481     FRESULT res;
;;;2482     DWORD clst, sect;
;;;2483     UINT wcnt, cc;
;;;2484     const BYTE *wbuff = buff;
0012d8  9804              LDR      r0,[sp,#0x10]
0012da  9001              STR      r0,[sp,#4]
;;;2485     BYTE csect;
;;;2486   
;;;2487   
;;;2488     *bw = 0;  /* Initialize byte counter */
0012dc  2000              MOVS     r0,#0
0012de  f8cb0000          STR      r0,[r11,#0]
;;;2489   
;;;2490     res = validate(fp->fs, fp->id);     /* Check validity */
0012e2  88a1              LDRH     r1,[r4,#4]
0012e4  6820              LDR      r0,[r4,#0]
0012e6  f7fffffe          BL       validate
0012ea  9002              STR      r0,[sp,#8]
;;;2491     if (res != FR_OK) LEAVE_FF(fp->fs, res);
0012ec  9802              LDR      r0,[sp,#8]
0012ee  b118              CBZ      r0,|L1.4856|
0012f0  9802              LDR      r0,[sp,#8]
                  |L1.4850|
;;;2492     if (fp->flag & FA__ERROR)       /* Aborted file? */
;;;2493       LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2494     if (!(fp->flag & FA_WRITE))       /* Check access mode */
;;;2495       LEAVE_FF(fp->fs, FR_DENIED);
;;;2496     if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;  /* File size cannot reach 4GB */
;;;2497   
;;;2498     for ( ;  btw;             /* Repeat until all data written */
;;;2499       wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2500       if ((fp->fptr % SS(fp->fs)) == 0) { /* On the sector boundary? */
;;;2501         csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));  /* Sector offset in the cluster */
;;;2502         if (!csect) {         /* On the cluster boundary? */
;;;2503           if (fp->fptr == 0) {    /* On the top of the file? */
;;;2504             clst = fp->sclust;    /* Follow from the origin */
;;;2505             if (clst == 0)      /* When no cluster is allocated, */
;;;2506               fp->sclust = clst = create_chain(fp->fs, 0);  /* Create a new cluster chain */
;;;2507           } else {          /* Middle or end of the file */
;;;2508   #if _USE_FASTSEEK
;;;2509             if (fp->cltbl)
;;;2510               clst = clmt_clust(fp, fp->fptr);  /* Get cluster# from the CLMT */
;;;2511             else
;;;2512   #endif
;;;2513               clst = create_chain(fp->fs, fp->clust); /* Follow or stretch cluster chain on the FAT */
;;;2514           }
;;;2515           if (clst == 0) break;   /* Could not allocate a new cluster (disk full) */
;;;2516           if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2517           if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2518           fp->clust = clst;     /* Update current cluster */
;;;2519         }
;;;2520   #if _FS_TINY
;;;2521         if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0)) /* Write-back sector cache */
;;;2522           ABORT(fp->fs, FR_DISK_ERR);
;;;2523   #else
;;;2524         if (fp->flag & FA__DIRTY) {   /* Write-back sector cache */
;;;2525           if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2526             ABORT(fp->fs, FR_DISK_ERR);
;;;2527           fp->flag &= ~FA__DIRTY;
;;;2528         }
;;;2529   #endif
;;;2530         sect = clust2sect(fp->fs, fp->clust); /* Get current sector */
;;;2531         if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2532         sect += csect;
;;;2533         cc = btw / SS(fp->fs);      /* When remaining bytes >= sector size, */
;;;2534         if (cc) {           /* Write maximum contiguous sectors directly */
;;;2535           if (csect + cc > fp->fs->csize) /* Clip at cluster boundary */
;;;2536             cc = fp->fs->csize - csect;
;;;2537           if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
;;;2538             ABORT(fp->fs, FR_DISK_ERR);
;;;2539   #if _FS_TINY
;;;2540           if (fp->fs->winsect - sect < cc) {  /* Refill sector cache if it gets invalidated by the direct write */
;;;2541             mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2542             fp->fs->wflag = 0;
;;;2543           }
;;;2544   #else
;;;2545           if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2546             mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2547             fp->flag &= ~FA__DIRTY;
;;;2548           }
;;;2549   #endif
;;;2550           wcnt = SS(fp->fs) * cc;   /* Number of bytes transferred */
;;;2551           continue;
;;;2552         }
;;;2553   #if _FS_TINY
;;;2554         if (fp->fptr >= fp->fsize) {  /* Avoid silly cache filling at growing edge */
;;;2555           if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
;;;2556           fp->fs->winsect = sect;
;;;2557         }
;;;2558   #else
;;;2559         if (fp->dsect != sect) {    /* Fill sector cache with file data */
;;;2560           if (fp->fptr < fp->fsize &&
;;;2561             disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
;;;2562               ABORT(fp->fs, FR_DISK_ERR);
;;;2563         }
;;;2564   #endif
;;;2565         fp->dsect = sect;
;;;2566       }
;;;2567       wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2568       if (wcnt > btw) wcnt = btw;
;;;2569   #if _FS_TINY
;;;2570       if (move_window(fp->fs, fp->dsect)) /* Move sector window */
;;;2571         ABORT(fp->fs, FR_DISK_ERR);
;;;2572       mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
;;;2573       fp->fs->wflag = 1;
;;;2574   #else
;;;2575       mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
;;;2576       fp->flag |= FA__DIRTY;
;;;2577   #endif
;;;2578     }
;;;2579   
;;;2580     if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
;;;2581     fp->flag |= FA__WRITTEN;            /* Set file change flag */
;;;2582   
;;;2583     LEAVE_FF(fp->fs, FR_OK);
;;;2584   }
0012f2  b007              ADD      sp,sp,#0x1c
0012f4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4856|
0012f8  79a0              LDRB     r0,[r4,#6]            ;2492
0012fa  f0100f80          TST      r0,#0x80              ;2492
0012fe  d001              BEQ      |L1.4868|
001300  2002              MOVS     r0,#2                 ;2493
001302  e7f6              B        |L1.4850|
                  |L1.4868|
001304  79a0              LDRB     r0,[r4,#6]            ;2494
001306  f0100f02          TST      r0,#2                 ;2494
00130a  d101              BNE      |L1.4880|
00130c  2007              MOVS     r0,#7                 ;2495
00130e  e7f0              B        |L1.4850|
                  |L1.4880|
001310  68e0              LDR      r0,[r4,#0xc]          ;2496
001312  4428              ADD      r0,r0,r5              ;2496
001314  68e1              LDR      r1,[r4,#0xc]          ;2496
001316  4288              CMP      r0,r1                 ;2496
001318  d200              BCS      |L1.4892|
00131a  2500              MOVS     r5,#0                 ;2496
                  |L1.4892|
00131c  e0cc              B        |L1.5304|
                  |L1.4894|
00131e  8920              LDRH     r0,[r4,#8]            ;2500
001320  05c0              LSLS     r0,r0,#23             ;2500
001322  0dc0              LSRS     r0,r0,#23             ;2500
001324  d177              BNE      |L1.5142|
001326  6820              LDR      r0,[r4,#0]            ;2501
001328  7880              LDRB     r0,[r0,#2]            ;2501
00132a  1e40              SUBS     r0,r0,#1              ;2501
00132c  68a1              LDR      r1,[r4,#8]            ;2501
00132e  ea002051          AND      r0,r0,r1,LSR #9       ;2501
001332  f0000aff          AND      r10,r0,#0xff          ;2501
001336  f1ba0f00          CMP      r10,#0                ;2502
00133a  d12a              BNE      |L1.5010|
00133c  68a0              LDR      r0,[r4,#8]            ;2503
00133e  b958              CBNZ     r0,|L1.4952|
001340  f8d48010          LDR      r8,[r4,#0x10]         ;2504
001344  f1b80f00          CMP      r8,#0                 ;2505
001348  d10b              BNE      |L1.4962|
00134a  2100              MOVS     r1,#0                 ;2506
00134c  6820              LDR      r0,[r4,#0]            ;2506
00134e  f7fffffe          BL       create_chain
001352  4680              MOV      r8,r0                 ;2506
001354  6120              STR      r0,[r4,#0x10]         ;2506
001356  e004              B        |L1.4962|
                  |L1.4952|
001358  6961              LDR      r1,[r4,#0x14]         ;2513
00135a  6820              LDR      r0,[r4,#0]            ;2513
00135c  f7fffffe          BL       create_chain
001360  4680              MOV      r8,r0                 ;2513
                  |L1.4962|
001362  f1b80f00          CMP      r8,#0                 ;2515
001366  d100              BNE      |L1.4970|
001368  e0a9              B        |L1.5310|
                  |L1.4970|
00136a  f1b80f01          CMP      r8,#1                 ;2516
00136e  d105              BNE      |L1.4988|
001370  79a0              LDRB     r0,[r4,#6]            ;2516
001372  f0400080          ORR      r0,r0,#0x80           ;2516
001376  71a0              STRB     r0,[r4,#6]            ;2516
001378  2002              MOVS     r0,#2                 ;2516
00137a  e7ba              B        |L1.4850|
                  |L1.4988|
00137c  f1180001          ADDS     r0,r8,#1              ;2517
001380  d105              BNE      |L1.5006|
001382  79a0              LDRB     r0,[r4,#6]            ;2517
001384  f0400080          ORR      r0,r0,#0x80           ;2517
001388  71a0              STRB     r0,[r4,#6]            ;2517
00138a  2001              MOVS     r0,#1                 ;2517
00138c  e7b1              B        |L1.4850|
                  |L1.5006|
00138e  f8c48014          STR      r8,[r4,#0x14]         ;2518
                  |L1.5010|
001392  79a0              LDRB     r0,[r4,#6]            ;2524
001394  f0100f40          TST      r0,#0x40              ;2524
001398  d012              BEQ      |L1.5056|
00139a  6821              LDR      r1,[r4,#0]            ;2525
00139c  7848              LDRB     r0,[r1,#1]            ;2525
00139e  2301              MOVS     r3,#1                 ;2525
0013a0  f1040124          ADD      r1,r4,#0x24           ;2525
0013a4  69a2              LDR      r2,[r4,#0x18]         ;2525
0013a6  f7fffffe          BL       disk_write
0013aa  b128              CBZ      r0,|L1.5048|
0013ac  79a0              LDRB     r0,[r4,#6]            ;2526
0013ae  f0400080          ORR      r0,r0,#0x80           ;2526
0013b2  71a0              STRB     r0,[r4,#6]            ;2526
0013b4  2001              MOVS     r0,#1                 ;2526
0013b6  e79c              B        |L1.4850|
                  |L1.5048|
0013b8  79a0              LDRB     r0,[r4,#6]            ;2527
0013ba  f0200040          BIC      r0,r0,#0x40           ;2527
0013be  71a0              STRB     r0,[r4,#6]            ;2527
                  |L1.5056|
0013c0  6961              LDR      r1,[r4,#0x14]         ;2530
0013c2  6820              LDR      r0,[r4,#0]            ;2530
0013c4  f7fffffe          BL       clust2sect
0013c8  4606              MOV      r6,r0                 ;2530
0013ca  b92e              CBNZ     r6,|L1.5080|
0013cc  79a0              LDRB     r0,[r4,#6]            ;2531
0013ce  f0400080          ORR      r0,r0,#0x80           ;2531
0013d2  71a0              STRB     r0,[r4,#6]            ;2531
0013d4  2002              MOVS     r0,#2                 ;2531
0013d6  e78c              B        |L1.4850|
                  |L1.5080|
0013d8  4456              ADD      r6,r6,r10             ;2532
0013da  ea4f2955          LSR      r9,r5,#9              ;2533
0013de  f1b90f00          CMP      r9,#0                 ;2534
0013e2  d02f              BEQ      |L1.5188|
0013e4  eb0a0009          ADD      r0,r10,r9             ;2535
0013e8  6821              LDR      r1,[r4,#0]            ;2535
0013ea  7889              LDRB     r1,[r1,#2]            ;2535
0013ec  4288              CMP      r0,r1                 ;2535
0013ee  d903              BLS      |L1.5112|
0013f0  6820              LDR      r0,[r4,#0]            ;2536
0013f2  7880              LDRB     r0,[r0,#2]            ;2536
0013f4  eba0090a          SUB      r9,r0,r10             ;2536
                  |L1.5112|
0013f8  f00903ff          AND      r3,r9,#0xff           ;2537
0013fc  6821              LDR      r1,[r4,#0]            ;2537
0013fe  7848              LDRB     r0,[r1,#1]            ;2537
001400  4632              MOV      r2,r6                 ;2537
001402  9901              LDR      r1,[sp,#4]            ;2537
001404  f7fffffe          BL       disk_write
001408  b130              CBZ      r0,|L1.5144|
00140a  79a0              LDRB     r0,[r4,#6]            ;2538
00140c  f0400080          ORR      r0,r0,#0x80           ;2538
001410  71a0              STRB     r0,[r4,#6]            ;2538
001412  2001              MOVS     r0,#1                 ;2538
001414  e76d              B        |L1.4850|
                  |L1.5142|
001416  e02c              B        |L1.5234|
                  |L1.5144|
001418  69a0              LDR      r0,[r4,#0x18]         ;2545
00141a  1b80              SUBS     r0,r0,r6              ;2545
00141c  4548              CMP      r0,r9                 ;2545
00141e  d20e              BCS      |L1.5182|
001420  69a0              LDR      r0,[r4,#0x18]         ;2546
001422  1b80              SUBS     r0,r0,r6              ;2546
001424  9a01              LDR      r2,[sp,#4]            ;2546
001426  eb022140          ADD      r1,r2,r0,LSL #9       ;2546
00142a  f44f7200          MOV      r2,#0x200             ;2546
00142e  f1040024          ADD      r0,r4,#0x24           ;2546
001432  f7fffffe          BL       mem_cpy
001436  79a0              LDRB     r0,[r4,#6]            ;2547
001438  f0200040          BIC      r0,r0,#0x40           ;2547
00143c  71a0              STRB     r0,[r4,#6]            ;2547
                  |L1.5182|
00143e  ea4f2749          LSL      r7,r9,#9              ;2550
001442  e02d              B        |L1.5280|
                  |L1.5188|
001444  69a0              LDR      r0,[r4,#0x18]         ;2559
001446  42b0              CMP      r0,r6                 ;2559
001448  d012              BEQ      |L1.5232|
00144a  e9d40102          LDRD     r0,r1,[r4,#8]         ;2560
00144e  4288              CMP      r0,r1                 ;2560
001450  d20e              BCS      |L1.5232|
001452  6821              LDR      r1,[r4,#0]            ;2561
001454  7848              LDRB     r0,[r1,#1]            ;2561
001456  2301              MOVS     r3,#1                 ;2561
001458  4632              MOV      r2,r6                 ;2561
00145a  f1040124          ADD      r1,r4,#0x24           ;2561
00145e  f7fffffe          BL       disk_read
001462  b128              CBZ      r0,|L1.5232|
001464  79a0              LDRB     r0,[r4,#6]            ;2562
001466  f0400080          ORR      r0,r0,#0x80           ;2562
00146a  71a0              STRB     r0,[r4,#6]            ;2562
00146c  2001              MOVS     r0,#1                 ;2562
00146e  e740              B        |L1.4850|
                  |L1.5232|
001470  61a6              STR      r6,[r4,#0x18]         ;2565
                  |L1.5234|
001472  8920              LDRH     r0,[r4,#8]            ;2567
001474  f3c00008          UBFX     r0,r0,#0,#9           ;2567
001478  f5c07700          RSB      r7,r0,#0x200          ;2567
00147c  42af              CMP      r7,r5                 ;2568
00147e  d900              BLS      |L1.5250|
001480  462f              MOV      r7,r5                 ;2568
                  |L1.5250|
001482  8921              LDRH     r1,[r4,#8]            ;2575
001484  f3c10208          UBFX     r2,r1,#0,#9           ;2575
001488  f1040124          ADD      r1,r4,#0x24           ;2575
00148c  1850              ADDS     r0,r2,r1              ;2575
00148e  463a              MOV      r2,r7                 ;2575
001490  9901              LDR      r1,[sp,#4]            ;2575
001492  f7fffffe          BL       mem_cpy
001496  79a0              LDRB     r0,[r4,#6]            ;2576
001498  f0400040          ORR      r0,r0,#0x40           ;2576
00149c  71a0              STRB     r0,[r4,#6]            ;2576
00149e  bf00              NOP                            ;2551
                  |L1.5280|
0014a0  9801              LDR      r0,[sp,#4]            ;2499
0014a2  4438              ADD      r0,r0,r7              ;2499
0014a4  9001              STR      r0,[sp,#4]            ;2499
0014a6  68a0              LDR      r0,[r4,#8]            ;2499
0014a8  4438              ADD      r0,r0,r7              ;2499
0014aa  60a0              STR      r0,[r4,#8]            ;2499
0014ac  f8db0000          LDR      r0,[r11,#0]           ;2499
0014b0  4438              ADD      r0,r0,r7              ;2499
0014b2  f8cb0000          STR      r0,[r11,#0]           ;2499
0014b6  1bed              SUBS     r5,r5,r7              ;2499
                  |L1.5304|
0014b8  2d00              CMP      r5,#0                 ;2498
0014ba  f47faf30          BNE      |L1.4894|
                  |L1.5310|
0014be  bf00              NOP                            ;2515
0014c0  e9d40102          LDRD     r0,r1,[r4,#8]         ;2580
0014c4  4288              CMP      r0,r1                 ;2580
0014c6  d901              BLS      |L1.5324|
0014c8  68a0              LDR      r0,[r4,#8]            ;2580
0014ca  60e0              STR      r0,[r4,#0xc]          ;2580
                  |L1.5324|
0014cc  79a0              LDRB     r0,[r4,#6]            ;2581
0014ce  f0400020          ORR      r0,r0,#0x20           ;2581
0014d2  71a0              STRB     r0,[r4,#6]            ;2581
0014d4  2000              MOVS     r0,#0                 ;2583
0014d6  e70c              B        |L1.4850|
;;;2585   
                          ENDP

                  f_sync PROC
;;;2592   
;;;2593   FRESULT f_sync (
0014d8  e92d41f0          PUSH     {r4-r8,lr}
;;;2594     FIL *fp   /* Pointer to the file object */
;;;2595   )
;;;2596   {
0014dc  4604              MOV      r4,r0
;;;2597     FRESULT res;
;;;2598     DWORD tim;
;;;2599     BYTE *dir;
;;;2600   
;;;2601   
;;;2602     res = validate(fp->fs, fp->id);   /* Check validity of the object */
0014de  88a1              LDRH     r1,[r4,#4]
0014e0  6820              LDR      r0,[r4,#0]
0014e2  f7fffffe          BL       validate
0014e6  4607              MOV      r7,r0
;;;2603     if (res == FR_OK) {
0014e8  2f00              CMP      r7,#0
0014ea  d14e              BNE      |L1.5514|
;;;2604       if (fp->flag & FA__WRITTEN) { /* Has the file been written? */
0014ec  79a0              LDRB     r0,[r4,#6]
0014ee  f0100f20          TST      r0,#0x20
0014f2  d04a              BEQ      |L1.5514|
;;;2605   #if !_FS_TINY /* Write-back dirty buffer */
;;;2606         if (fp->flag & FA__DIRTY) {
0014f4  79a0              LDRB     r0,[r4,#6]
0014f6  f0100f40          TST      r0,#0x40
0014fa  d00f              BEQ      |L1.5404|
;;;2607           if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
0014fc  6821              LDR      r1,[r4,#0]
0014fe  7848              LDRB     r0,[r1,#1]
001500  2301              MOVS     r3,#1
001502  f1040124          ADD      r1,r4,#0x24
001506  69a2              LDR      r2,[r4,#0x18]
001508  f7fffffe          BL       disk_write
00150c  b110              CBZ      r0,|L1.5396|
;;;2608             LEAVE_FF(fp->fs, FR_DISK_ERR);
00150e  2001              MOVS     r0,#1
                  |L1.5392|
;;;2609           fp->flag &= ~FA__DIRTY;
;;;2610         }
;;;2611   #endif
;;;2612         /* Update the directory entry */
;;;2613         res = move_window(fp->fs, fp->dir_sect);
;;;2614         if (res == FR_OK) {
;;;2615           dir = fp->dir_ptr;
;;;2616           dir[DIR_Attr] |= AM_ARC;          /* Set archive bit */
;;;2617           ST_DWORD(dir+DIR_FileSize, fp->fsize);    /* Update file size */
;;;2618           ST_CLUST(dir, fp->sclust);          /* Update start cluster */
;;;2619           tim = get_fattime();            /* Update updated time */
;;;2620           ST_DWORD(dir+DIR_WrtTime, tim);
;;;2621           fp->flag &= ~FA__WRITTEN;
;;;2622           fp->fs->wflag = 1;
;;;2623           res = sync(fp->fs);
;;;2624         }
;;;2625       }
;;;2626     }
;;;2627   
;;;2628     LEAVE_FF(fp->fs, res);
;;;2629   }
001510  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5396|
001514  79a0              LDRB     r0,[r4,#6]            ;2609
001516  f0200040          BIC      r0,r0,#0x40           ;2609
00151a  71a0              STRB     r0,[r4,#6]            ;2609
                  |L1.5404|
00151c  69e1              LDR      r1,[r4,#0x1c]         ;2613
00151e  6820              LDR      r0,[r4,#0]            ;2613
001520  f7fffffe          BL       move_window
001524  4607              MOV      r7,r0                 ;2613
001526  2f00              CMP      r7,#0                 ;2614
001528  d12f              BNE      |L1.5514|
00152a  6a25              LDR      r5,[r4,#0x20]         ;2615
00152c  7ae8              LDRB     r0,[r5,#0xb]          ;2616
00152e  f0400020          ORR      r0,r0,#0x20           ;2616
001532  72e8              STRB     r0,[r5,#0xb]          ;2616
001534  7b20              LDRB     r0,[r4,#0xc]          ;2617
001536  7728              STRB     r0,[r5,#0x1c]         ;2617
001538  89a0              LDRH     r0,[r4,#0xc]          ;2617
00153a  0a01              LSRS     r1,r0,#8              ;2617
00153c  7769              STRB     r1,[r5,#0x1d]         ;2617
00153e  68e0              LDR      r0,[r4,#0xc]          ;2617
001540  0c01              LSRS     r1,r0,#16             ;2617
001542  77a9              STRB     r1,[r5,#0x1e]         ;2617
001544  68e0              LDR      r0,[r4,#0xc]          ;2617
001546  0e01              LSRS     r1,r0,#24             ;2617
001548  77e9              STRB     r1,[r5,#0x1f]         ;2617
00154a  7c20              LDRB     r0,[r4,#0x10]         ;2618
00154c  76a8              STRB     r0,[r5,#0x1a]         ;2618
00154e  8a20              LDRH     r0,[r4,#0x10]         ;2618
001550  0a01              LSRS     r1,r0,#8              ;2618
001552  76e9              STRB     r1,[r5,#0x1b]         ;2618
001554  6920              LDR      r0,[r4,#0x10]         ;2618
001556  0c00              LSRS     r0,r0,#16             ;2618
001558  7528              STRB     r0,[r5,#0x14]         ;2618
00155a  6920              LDR      r0,[r4,#0x10]         ;2618
00155c  0e01              LSRS     r1,r0,#24             ;2618
00155e  7569              STRB     r1,[r5,#0x15]         ;2618
001560  f7fffffe          BL       get_fattime
001564  4606              MOV      r6,r0                 ;2619
001566  75ae              STRB     r6,[r5,#0x16]         ;2620
001568  0a31              LSRS     r1,r6,#8              ;2620
00156a  75e9              STRB     r1,[r5,#0x17]         ;2620
00156c  0c31              LSRS     r1,r6,#16             ;2620
00156e  7629              STRB     r1,[r5,#0x18]         ;2620
001570  0e31              LSRS     r1,r6,#24             ;2620
001572  7669              STRB     r1,[r5,#0x19]         ;2620
001574  79a0              LDRB     r0,[r4,#6]            ;2621
001576  f0200020          BIC      r0,r0,#0x20           ;2621
00157a  71a0              STRB     r0,[r4,#6]            ;2621
00157c  2001              MOVS     r0,#1                 ;2622
00157e  6821              LDR      r1,[r4,#0]            ;2622
001580  7108              STRB     r0,[r1,#4]            ;2622
001582  6820              LDR      r0,[r4,#0]            ;2623
001584  f7fffffe          BL       sync
001588  4607              MOV      r7,r0                 ;2623
                  |L1.5514|
00158a  4638              MOV      r0,r7                 ;2628
00158c  e7c0              B        |L1.5392|
;;;2630   
                          ENDP

                  f_close PROC
;;;2639   
;;;2640   FRESULT f_close (
00158e  b570              PUSH     {r4-r6,lr}
;;;2641     FIL *fp   /* Pointer to the file object to be closed */
;;;2642   )
;;;2643   {
001590  4604              MOV      r4,r0
;;;2644     FRESULT res;
;;;2645   
;;;2646   #if _FS_READONLY
;;;2647     FATFS *fs = fp->fs;
;;;2648     res = validate(fs, fp->id);
;;;2649     if (res == FR_OK) fp->fs = 0; /* Discard file object */
;;;2650     LEAVE_FF(fs, res);
;;;2651   
;;;2652   #else
;;;2653     res = f_sync(fp);   /* Flush cached data */
001592  4620              MOV      r0,r4
001594  f7fffffe          BL       f_sync
001598  4605              MOV      r5,r0
;;;2654   #if _FS_SHARE
;;;2655     if (res == FR_OK) {   /* Decrement open counter */
;;;2656   #if _FS_REENTRANT
;;;2657       res = validate(fp->fs, fp->id);
;;;2658       if (res == FR_OK) {
;;;2659         res = dec_lock(fp->lockid);
;;;2660         unlock_fs(fp->fs, FR_OK);
;;;2661       }
;;;2662   #else
;;;2663       res = dec_lock(fp->lockid);
;;;2664   #endif
;;;2665     }
;;;2666   #endif
;;;2667     if (res == FR_OK) fp->fs = 0; /* Discard file object */
00159a  b90d              CBNZ     r5,|L1.5536|
00159c  2000              MOVS     r0,#0
00159e  6020              STR      r0,[r4,#0]
                  |L1.5536|
;;;2668     return res;
0015a0  4628              MOV      r0,r5
;;;2669   #endif
;;;2670   }
0015a2  bd70              POP      {r4-r6,pc}
;;;2671   
                          ENDP

                  f_chdrive PROC
;;;2680   
;;;2681   FRESULT f_chdrive (
0015a4  4601              MOV      r1,r0
;;;2682     BYTE drv    /* Drive number */
;;;2683   )
;;;2684   {
;;;2685     if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
0015a6  2901              CMP      r1,#1
0015a8  db01              BLT      |L1.5550|
0015aa  200b              MOVS     r0,#0xb
                  |L1.5548|
;;;2686   
;;;2687     CurrVol = drv;
;;;2688   
;;;2689     return FR_OK;
;;;2690   }
0015ac  4770              BX       lr
                  |L1.5550|
0015ae  48fc              LDR      r0,|L1.6560|
0015b0  7001              STRB     r1,[r0,#0]            ;2687
0015b2  2000              MOVS     r0,#0                 ;2689
0015b4  e7fa              B        |L1.5548|
;;;2691   
                          ENDP

                  f_chdir PROC
;;;2693   
;;;2694   FRESULT f_chdir (
0015b6  b511              PUSH     {r0,r4,lr}
;;;2695     const TCHAR *path /* Pointer to the directory path */
;;;2696   )
;;;2697   {
0015b8  b08b              SUB      sp,sp,#0x2c
;;;2698     FRESULT res;
;;;2699     DIR dj;
;;;2700     DEF_NAMEBUF;
;;;2701   
;;;2702   
;;;2703     res = chk_mounted(&path, &dj.fs, 0);
0015ba  2200              MOVS     r2,#0
0015bc  a904              ADD      r1,sp,#0x10
0015be  a80b              ADD      r0,sp,#0x2c
0015c0  f7fffffe          BL       chk_mounted
0015c4  4604              MOV      r4,r0
;;;2704     if (res == FR_OK) {
0015c6  bb2c              CBNZ     r4,|L1.5652|
;;;2705       INIT_BUF(dj);
0015c8  a801              ADD      r0,sp,#4
0015ca  900a              STR      r0,[sp,#0x28]
;;;2706       res = follow_path(&dj, path);   /* Follow the path */
0015cc  a804              ADD      r0,sp,#0x10
0015ce  990b              LDR      r1,[sp,#0x2c]
0015d0  f7fffffe          BL       follow_path
0015d4  4604              MOV      r4,r0
;;;2707       FREE_BUF();
;;;2708       if (res == FR_OK) {         /* Follow completed */
0015d6  b9d4              CBNZ     r4,|L1.5646|
;;;2709         if (!dj.dir) {
0015d8  9809              LDR      r0,[sp,#0x24]
0015da  b918              CBNZ     r0,|L1.5604|
;;;2710           dj.fs->cdir = dj.sclust;  /* Start directory itself */
0015dc  9904              LDR      r1,[sp,#0x10]
0015de  9806              LDR      r0,[sp,#0x18]
0015e0  6188              STR      r0,[r1,#0x18]
0015e2  e014              B        |L1.5646|
                  |L1.5604|
;;;2711         } else {
;;;2712           if (dj.dir[DIR_Attr] & AM_DIR)  /* Reached to the directory */
0015e4  9809              LDR      r0,[sp,#0x24]
0015e6  7ac0              LDRB     r0,[r0,#0xb]
0015e8  f0100f10          TST      r0,#0x10
0015ec  d00e              BEQ      |L1.5644|
;;;2713             dj.fs->cdir = LD_CLUST(dj.dir);
0015ee  9809              LDR      r0,[sp,#0x24]
0015f0  7e81              LDRB     r1,[r0,#0x1a]
0015f2  7ec0              LDRB     r0,[r0,#0x1b]
0015f4  ea412100          ORR      r1,r1,r0,LSL #8
0015f8  9809              LDR      r0,[sp,#0x24]
0015fa  7d02              LDRB     r2,[r0,#0x14]
0015fc  7d40              LDRB     r0,[r0,#0x15]
0015fe  ea422000          ORR      r0,r2,r0,LSL #8
001602  ea414000          ORR      r0,r1,r0,LSL #16
001606  9904              LDR      r1,[sp,#0x10]
001608  6188              STR      r0,[r1,#0x18]
00160a  e000              B        |L1.5646|
                  |L1.5644|
;;;2714           else
;;;2715             res = FR_NO_PATH;   /* Reached but a file */
00160c  2405              MOVS     r4,#5
                  |L1.5646|
;;;2716         }
;;;2717       }
;;;2718       if (res == FR_NO_FILE) res = FR_NO_PATH;
00160e  2c04              CMP      r4,#4
001610  d100              BNE      |L1.5652|
001612  2405              MOVS     r4,#5
                  |L1.5652|
;;;2719     }
;;;2720   
;;;2721     LEAVE_FF(dj.fs, res);
001614  4620              MOV      r0,r4
;;;2722   }
001616  b00c              ADD      sp,sp,#0x30
001618  bd10              POP      {r4,pc}
;;;2723   
                          ENDP

                  f_getcwd PROC
;;;2725   #if _FS_RPATH >= 2
;;;2726   FRESULT f_getcwd (
00161a  e92d43f3          PUSH     {r0,r1,r4-r9,lr}
;;;2727     TCHAR *path,  /* Pointer to the directory path */
;;;2728     UINT sz_path  /* Size of path */
;;;2729   )
;;;2730   {
00161e  b091              SUB      sp,sp,#0x44
001620  4688              MOV      r8,r1
;;;2731     FRESULT res;
;;;2732     DIR dj;
;;;2733     UINT i, n;
;;;2734     DWORD ccl;
;;;2735     TCHAR *tp;
;;;2736     FILINFO fno;
;;;2737     DEF_NAMEBUF;
;;;2738   
;;;2739   
;;;2740     *path = 0;
001622  2000              MOVS     r0,#0
001624  9911              LDR      r1,[sp,#0x44]
001626  7008              STRB     r0,[r1,#0]
;;;2741     res = chk_mounted((const TCHAR**)&path, &dj.fs, 0); /* Get current volume */
001628  2200              MOVS     r2,#0
00162a  a90a              ADD      r1,sp,#0x28
00162c  a811              ADD      r0,sp,#0x44
00162e  f7fffffe          BL       chk_mounted
001632  4605              MOV      r5,r0
;;;2742     if (res == FR_OK) {
001634  2d00              CMP      r5,#0
001636  d17d              BNE      |L1.5940|
;;;2743       INIT_BUF(dj);
001638  a801              ADD      r0,sp,#4
00163a  9010              STR      r0,[sp,#0x40]
;;;2744       i = sz_path;    /* Bottom of buffer (dir stack base) */
00163c  4646              MOV      r6,r8
;;;2745       dj.sclust = dj.fs->cdir;      /* Start to follow upper dir from current dir */
00163e  980a              LDR      r0,[sp,#0x28]
001640  6980              LDR      r0,[r0,#0x18]
001642  900c              STR      r0,[sp,#0x30]
;;;2746       while ((ccl = dj.sclust) != 0) {  /* Repeat while current dir is a sub-dir */
001644  e064              B        |L1.5904|
                  |L1.5702|
;;;2747         res = dir_sdi(&dj, 1);      /* Get parent dir */
001646  2101              MOVS     r1,#1
001648  a80a              ADD      r0,sp,#0x28
00164a  f7fffffe          BL       dir_sdi
00164e  4605              MOV      r5,r0
;;;2748         if (res != FR_OK) break;
001650  b105              CBZ      r5,|L1.5716|
001652  e062              B        |L1.5914|
                  |L1.5716|
;;;2749         res = dir_read(&dj);
001654  a80a              ADD      r0,sp,#0x28
001656  f7fffffe          BL       dir_read
00165a  4605              MOV      r5,r0
;;;2750         if (res != FR_OK) break;
00165c  b105              CBZ      r5,|L1.5728|
00165e  e05c              B        |L1.5914|
                  |L1.5728|
;;;2751         dj.sclust = LD_CLUST(dj.dir); /* Goto parent dir */
001660  980f              LDR      r0,[sp,#0x3c]
001662  7e81              LDRB     r1,[r0,#0x1a]
001664  7ec0              LDRB     r0,[r0,#0x1b]
001666  ea412100          ORR      r1,r1,r0,LSL #8
00166a  980f              LDR      r0,[sp,#0x3c]
00166c  7d02              LDRB     r2,[r0,#0x14]
00166e  7d40              LDRB     r0,[r0,#0x15]
001670  ea422000          ORR      r0,r2,r0,LSL #8
001674  ea414000          ORR      r0,r1,r0,LSL #16
001678  900c              STR      r0,[sp,#0x30]
;;;2752         res = dir_sdi(&dj, 0);
00167a  2100              MOVS     r1,#0
00167c  a80a              ADD      r0,sp,#0x28
00167e  f7fffffe          BL       dir_sdi
001682  4605              MOV      r5,r0
;;;2753         if (res != FR_OK) break;
001684  b105              CBZ      r5,|L1.5768|
001686  e048              B        |L1.5914|
                  |L1.5768|
;;;2754         do {              /* Find the entry links to the child dir */
001688  bf00              NOP      
                  |L1.5770|
;;;2755           res = dir_read(&dj);
00168a  a80a              ADD      r0,sp,#0x28
00168c  f7fffffe          BL       dir_read
001690  4605              MOV      r5,r0
;;;2756           if (res != FR_OK) break;
001692  b105              CBZ      r5,|L1.5782|
001694  e015              B        |L1.5826|
                  |L1.5782|
;;;2757           if (ccl == LD_CLUST(dj.dir)) break; /* Found the entry */
001696  980f              LDR      r0,[sp,#0x3c]
001698  7e81              LDRB     r1,[r0,#0x1a]
00169a  7ec0              LDRB     r0,[r0,#0x1b]
00169c  ea412100          ORR      r1,r1,r0,LSL #8
0016a0  980f              LDR      r0,[sp,#0x3c]
0016a2  7d02              LDRB     r2,[r0,#0x14]
0016a4  7d40              LDRB     r0,[r0,#0x15]
0016a6  ea422000          ORR      r0,r2,r0,LSL #8
0016aa  ea414000          ORR      r0,r1,r0,LSL #16
0016ae  4548              CMP      r0,r9
0016b0  d100              BNE      |L1.5812|
0016b2  e006              B        |L1.5826|
                  |L1.5812|
;;;2758           res = dir_next(&dj, 0);
0016b4  2100              MOVS     r1,#0
0016b6  a80a              ADD      r0,sp,#0x28
0016b8  f7fffffe          BL       dir_next
0016bc  4605              MOV      r5,r0
;;;2759         } while (res == FR_OK);
0016be  2d00              CMP      r5,#0
0016c0  d0e3              BEQ      |L1.5770|
                  |L1.5826|
0016c2  bf00              NOP                            ;2756
;;;2760         if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
0016c4  2d04              CMP      r5,#4
0016c6  d100              BNE      |L1.5834|
0016c8  2502              MOVS     r5,#2
                  |L1.5834|
;;;2761         if (res != FR_OK) break;
0016ca  b105              CBZ      r5,|L1.5838|
0016cc  e025              B        |L1.5914|
                  |L1.5838|
;;;2762   #if _USE_LFN
;;;2763         fno.lfname = path;
;;;2764         fno.lfsize = i;
;;;2765   #endif
;;;2766         get_fileinfo(&dj, &fno);    /* Get the dir name and push it to the buffer */
0016ce  a904              ADD      r1,sp,#0x10
0016d0  a80a              ADD      r0,sp,#0x28
0016d2  f7fffffe          BL       get_fileinfo
;;;2767         tp = fno.fname;
0016d6  f10d0419          ADD      r4,sp,#0x19
;;;2768         if (_USE_LFN && *path) tp = path;
0016da  bf00              NOP      
;;;2769         for (n = 0; tp[n]; n++) ;
0016dc  2700              MOVS     r7,#0
0016de  e000              B        |L1.5858|
                  |L1.5856|
0016e0  1c7f              ADDS     r7,r7,#1
                  |L1.5858|
0016e2  5de0              LDRB     r0,[r4,r7]
0016e4  2800              CMP      r0,#0
0016e6  d1fb              BNE      |L1.5856|
;;;2770         if (i < n + 3) {
0016e8  1cf8              ADDS     r0,r7,#3
0016ea  4286              CMP      r6,r0
0016ec  d201              BCS      |L1.5874|
;;;2771           res = FR_NOT_ENOUGH_CORE; break;
0016ee  2511              MOVS     r5,#0x11
0016f0  e013              B        |L1.5914|
                  |L1.5874|
;;;2772         }
;;;2773         while (n) path[--i] = tp[--n];
0016f2  e006              B        |L1.5890|
                  |L1.5876|
0016f4  1e78              SUBS     r0,r7,#1
0016f6  4607              MOV      r7,r0
0016f8  5c21              LDRB     r1,[r4,r0]
0016fa  1e70              SUBS     r0,r6,#1
0016fc  4606              MOV      r6,r0
0016fe  9a11              LDR      r2,[sp,#0x44]
001700  5411              STRB     r1,[r2,r0]
                  |L1.5890|
001702  2f00              CMP      r7,#0
001704  d1f6              BNE      |L1.5876|
;;;2774         path[--i] = '/';
001706  212f              MOVS     r1,#0x2f
001708  1e70              SUBS     r0,r6,#1
00170a  4606              MOV      r6,r0
00170c  9a11              LDR      r2,[sp,#0x44]
00170e  5411              STRB     r1,[r2,r0]
                  |L1.5904|
001710  f8dd9030          LDR      r9,[sp,#0x30]         ;2746
001714  f1b90f00          CMP      r9,#0                 ;2746
001718  d195              BNE      |L1.5702|
                  |L1.5914|
00171a  bf00              NOP                            ;2748
;;;2775       }
;;;2776       tp = path;
00171c  9c11              LDR      r4,[sp,#0x44]
;;;2777       if (res == FR_OK) {
00171e  b9cd              CBNZ     r5,|L1.5972|
;;;2778         *tp++ = '0' + CurrVol;      /* Put drive number */
001720  489f              LDR      r0,|L1.6560|
001722  7800              LDRB     r0,[r0,#0]  ; CurrVol
001724  3030              ADDS     r0,r0,#0x30
001726  b240              SXTB     r0,r0
001728  f8040b01          STRB     r0,[r4],#1
;;;2779         *tp++ = ':';
00172c  203a              MOVS     r0,#0x3a
00172e  f8040b01          STRB     r0,[r4],#1
;;;2780         if (i == sz_path) {       /* Root-dir */
001732  e000              B        |L1.5942|
                  |L1.5940|
001734  e010              B        |L1.5976|
                  |L1.5942|
001736  4546              CMP      r6,r8
001738  d103              BNE      |L1.5954|
;;;2781           *tp++ = '/';
00173a  202f              MOVS     r0,#0x2f
00173c  f8040b01          STRB     r0,[r4],#1
001740  e008              B        |L1.5972|
                  |L1.5954|
;;;2782         } else {            /* Sub-dir */
;;;2783           do    /* Add stacked path str */
001742  bf00              NOP      
                  |L1.5956|
;;;2784             *tp++ = path[i++];
001744  4630              MOV      r0,r6
001746  1c76              ADDS     r6,r6,#1
001748  9911              LDR      r1,[sp,#0x44]
00174a  5c08              LDRB     r0,[r1,r0]
00174c  f8040b01          STRB     r0,[r4],#1
;;;2785           while (i < sz_path);
001750  4546              CMP      r6,r8
001752  d3f7              BCC      |L1.5956|
                  |L1.5972|
;;;2786         }
;;;2787       }
;;;2788       *tp = 0;
001754  2000              MOVS     r0,#0
001756  7020              STRB     r0,[r4,#0]
                  |L1.5976|
;;;2789       FREE_BUF();
;;;2790     }
;;;2791   
;;;2792     LEAVE_FF(dj.fs, res);
001758  4628              MOV      r0,r5
;;;2793   }
00175a  b013              ADD      sp,sp,#0x4c
00175c  e8bd83f0          POP      {r4-r9,pc}
;;;2794   #endif /* _FS_RPATH >= 2 */
                          ENDP

                  f_lseek PROC
;;;2803   
;;;2804   FRESULT f_lseek (
001760  e92d47f0          PUSH     {r4-r10,lr}
;;;2805     FIL *fp,    /* Pointer to the file object */
;;;2806     DWORD ofs   /* File pointer from top of file */
;;;2807   )
;;;2808   {
001764  4604              MOV      r4,r0
001766  460e              MOV      r6,r1
;;;2809     FRESULT res;
;;;2810   
;;;2811   
;;;2812     res = validate(fp->fs, fp->id);   /* Check validity of the object */
001768  88a1              LDRH     r1,[r4,#4]
00176a  6820              LDR      r0,[r4,#0]
00176c  f7fffffe          BL       validate
001770  4682              MOV      r10,r0
;;;2813     if (res != FR_OK) LEAVE_FF(fp->fs, res);
001772  f1ba0f00          CMP      r10,#0
001776  d002              BEQ      |L1.6014|
001778  4650              MOV      r0,r10
                  |L1.6010|
;;;2814     if (fp->flag & FA__ERROR)     /* Check abort flag */
;;;2815       LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2816   
;;;2817   #if _USE_FASTSEEK
;;;2818     if (fp->cltbl) {  /* Fast seek */
;;;2819       DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;2820   
;;;2821       if (ofs == CREATE_LINKMAP) {  /* Create CLMT */
;;;2822         tbl = fp->cltbl;
;;;2823         tlen = *tbl++; ulen = 2;  /* Given table size and required table size */
;;;2824         cl = fp->sclust;      /* Top of the chain */
;;;2825         if (cl) {
;;;2826           do {
;;;2827             /* Get a fragment */
;;;2828             tcl = cl; ncl = 0; ulen += 2; /* Top, length and used items */
;;;2829             do {
;;;2830               pcl = cl; ncl++;
;;;2831               cl = get_fat(fp->fs, cl);
;;;2832               if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;2833               if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2834             } while (cl == pcl + 1);
;;;2835             if (ulen <= tlen) {   /* Store the length and top of the fragment */
;;;2836               *tbl++ = ncl; *tbl++ = tcl;
;;;2837             }
;;;2838           } while (cl < fp->fs->n_fatent);  /* Repeat until end of chain */
;;;2839         }
;;;2840         *fp->cltbl = ulen;  /* Number of items used */
;;;2841         if (ulen <= tlen)
;;;2842           *tbl = 0;   /* Terminate table */
;;;2843         else
;;;2844           res = FR_NOT_ENOUGH_CORE; /* Given table size is smaller than required */
;;;2845   
;;;2846       } else {            /* Fast seek */
;;;2847         if (ofs > fp->fsize)    /* Clip offset at the file size */
;;;2848           ofs = fp->fsize;
;;;2849         fp->fptr = ofs;       /* Set file pointer */
;;;2850         if (ofs) {
;;;2851           fp->clust = clmt_clust(fp, ofs - 1);
;;;2852           dsc = clust2sect(fp->fs, fp->clust);
;;;2853           if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;2854           dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;2855           if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {  /* Refill sector cache if needed */
;;;2856   #if !_FS_TINY
;;;2857   #if !_FS_READONLY
;;;2858             if (fp->flag & FA__DIRTY) {   /* Write-back dirty sector cache */
;;;2859               if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2860                 ABORT(fp->fs, FR_DISK_ERR);
;;;2861               fp->flag &= ~FA__DIRTY;
;;;2862             }
;;;2863   #endif
;;;2864             if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)  /* Load current sector */
;;;2865               ABORT(fp->fs, FR_DISK_ERR);
;;;2866   #endif
;;;2867             fp->dsect = dsc;
;;;2868           }
;;;2869         }
;;;2870       }
;;;2871     } else
;;;2872   #endif
;;;2873   
;;;2874     /* Normal Seek */
;;;2875     {
;;;2876       DWORD clst, bcs, nsect, ifptr;
;;;2877   
;;;2878       if (ofs > fp->fsize         /* In read-only mode, clip offset with the file size */
;;;2879   #if !_FS_READONLY
;;;2880          && !(fp->flag & FA_WRITE)
;;;2881   #endif
;;;2882         ) ofs = fp->fsize;
;;;2883   
;;;2884       ifptr = fp->fptr;
;;;2885       fp->fptr = nsect = 0;
;;;2886       if (ofs) {
;;;2887         bcs = (DWORD)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
;;;2888         if (ifptr > 0 &&
;;;2889           (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following cluster, */
;;;2890           fp->fptr = (ifptr - 1) & ~(bcs - 1);  /* start from the current cluster */
;;;2891           ofs -= fp->fptr;
;;;2892           clst = fp->clust;
;;;2893         } else {                  /* When seek to back cluster, */
;;;2894           clst = fp->sclust;            /* start from the first cluster */
;;;2895   #if !_FS_READONLY
;;;2896           if (clst == 0) {            /* If no cluster chain, create a new chain */
;;;2897             clst = create_chain(fp->fs, 0);
;;;2898             if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2899             if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2900             fp->sclust = clst;
;;;2901           }
;;;2902   #endif
;;;2903           fp->clust = clst;
;;;2904         }
;;;2905         if (clst != 0) {
;;;2906           while (ofs > bcs) {           /* Cluster following loop */
;;;2907   #if !_FS_READONLY
;;;2908             if (fp->flag & FA_WRITE) {      /* Check if in write mode or not */
;;;2909               clst = create_chain(fp->fs, clst);  /* Force stretch if in write mode */
;;;2910               if (clst == 0) {        /* When disk gets full, clip file size */
;;;2911                 ofs = bcs; break;
;;;2912               }
;;;2913             } else
;;;2914   #endif
;;;2915               clst = get_fat(fp->fs, clst); /* Follow cluster chain if not in write mode */
;;;2916             if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2917             if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;2918             fp->clust = clst;
;;;2919             fp->fptr += bcs;
;;;2920             ofs -= bcs;
;;;2921           }
;;;2922           fp->fptr += ofs;
;;;2923           if (ofs % SS(fp->fs)) {
;;;2924             nsect = clust2sect(fp->fs, clst); /* Current sector */
;;;2925             if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;2926             nsect += ofs / SS(fp->fs);
;;;2927           }
;;;2928         }
;;;2929       }
;;;2930       if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {  /* Fill sector cache if needed */
;;;2931   #if !_FS_TINY
;;;2932   #if !_FS_READONLY
;;;2933         if (fp->flag & FA__DIRTY) {     /* Write-back dirty sector cache */
;;;2934           if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2935             ABORT(fp->fs, FR_DISK_ERR);
;;;2936           fp->flag &= ~FA__DIRTY;
;;;2937         }
;;;2938   #endif
;;;2939         if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)  /* Fill sector cache */
;;;2940           ABORT(fp->fs, FR_DISK_ERR);
;;;2941   #endif
;;;2942         fp->dsect = nsect;
;;;2943       }
;;;2944   #if !_FS_READONLY
;;;2945       if (fp->fptr > fp->fsize) {     /* Set file change flag if the file size is extended */
;;;2946         fp->fsize = fp->fptr;
;;;2947         fp->flag |= FA__WRITTEN;
;;;2948       }
;;;2949   #endif
;;;2950     }
;;;2951   
;;;2952     LEAVE_FF(fp->fs, res);
;;;2953   }
00177a  e8bd87f0          POP      {r4-r10,pc}
                  |L1.6014|
00177e  79a0              LDRB     r0,[r4,#6]            ;2814
001780  f0100f80          TST      r0,#0x80              ;2814
001784  d001              BEQ      |L1.6026|
001786  2002              MOVS     r0,#2                 ;2815
001788  e7f7              B        |L1.6010|
                  |L1.6026|
00178a  68e0              LDR      r0,[r4,#0xc]          ;2878
00178c  42b0              CMP      r0,r6                 ;2878
00178e  d204              BCS      |L1.6042|
001790  79a0              LDRB     r0,[r4,#6]            ;2880
001792  f0100f02          TST      r0,#2                 ;2880
001796  d100              BNE      |L1.6042|
001798  68e6              LDR      r6,[r4,#0xc]          ;2882
                  |L1.6042|
00179a  f8d49008          LDR      r9,[r4,#8]            ;2884
00179e  f04f0800          MOV      r8,#0                 ;2885
0017a2  f8c48008          STR      r8,[r4,#8]            ;2885
0017a6  2e00              CMP      r6,#0                 ;2886
0017a8  d077              BEQ      |L1.6298|
0017aa  6820              LDR      r0,[r4,#0]            ;2887
0017ac  7880              LDRB     r0,[r0,#2]            ;2887
0017ae  0247              LSLS     r7,r0,#9              ;2887
0017b0  f1b90f00          CMP      r9,#0                 ;2888
0017b4  d011              BEQ      |L1.6106|
0017b6  1e70              SUBS     r0,r6,#1              ;2889
0017b8  fbb0f1f7          UDIV     r1,r0,r7              ;2889
0017bc  f1a90001          SUB      r0,r9,#1              ;2889
0017c0  fbb0f0f7          UDIV     r0,r0,r7              ;2889
0017c4  4281              CMP      r1,r0                 ;2889
0017c6  d308              BCC      |L1.6106|
0017c8  f1a90001          SUB      r0,r9,#1              ;2890
0017cc  1e79              SUBS     r1,r7,#1              ;2890
0017ce  4388              BICS     r0,r0,r1              ;2890
0017d0  60a0              STR      r0,[r4,#8]            ;2890
0017d2  68a0              LDR      r0,[r4,#8]            ;2891
0017d4  1a36              SUBS     r6,r6,r0              ;2891
0017d6  6965              LDR      r5,[r4,#0x14]         ;2892
0017d8  e018              B        |L1.6156|
                  |L1.6106|
0017da  6925              LDR      r5,[r4,#0x10]         ;2894
0017dc  b9ad              CBNZ     r5,|L1.6154|
0017de  2100              MOVS     r1,#0                 ;2897
0017e0  6820              LDR      r0,[r4,#0]            ;2897
0017e2  f7fffffe          BL       create_chain
0017e6  4605              MOV      r5,r0                 ;2897
0017e8  2d01              CMP      r5,#1                 ;2898
0017ea  d105              BNE      |L1.6136|
0017ec  79a0              LDRB     r0,[r4,#6]            ;2898
0017ee  f0400080          ORR      r0,r0,#0x80           ;2898
0017f2  71a0              STRB     r0,[r4,#6]            ;2898
0017f4  2002              MOVS     r0,#2                 ;2898
0017f6  e7c0              B        |L1.6010|
                  |L1.6136|
0017f8  1c68              ADDS     r0,r5,#1              ;2899
0017fa  d105              BNE      |L1.6152|
0017fc  79a0              LDRB     r0,[r4,#6]            ;2899
0017fe  f0400080          ORR      r0,r0,#0x80           ;2899
001802  71a0              STRB     r0,[r4,#6]            ;2899
001804  2001              MOVS     r0,#1                 ;2899
001806  e7b8              B        |L1.6010|
                  |L1.6152|
001808  6125              STR      r5,[r4,#0x10]         ;2900
                  |L1.6154|
00180a  6165              STR      r5,[r4,#0x14]         ;2903
                  |L1.6156|
00180c  2d00              CMP      r5,#0                 ;2905
00180e  d044              BEQ      |L1.6298|
001810  e029              B        |L1.6246|
                  |L1.6162|
001812  79a0              LDRB     r0,[r4,#6]            ;2908
001814  f0100f02          TST      r0,#2                 ;2908
001818  d007              BEQ      |L1.6186|
00181a  4629              MOV      r1,r5                 ;2909
00181c  6820              LDR      r0,[r4,#0]            ;2909
00181e  f7fffffe          BL       create_chain
001822  4605              MOV      r5,r0                 ;2909
001824  b935              CBNZ     r5,|L1.6196|
001826  463e              MOV      r6,r7                 ;2911
001828  e01f              B        |L1.6250|
                  |L1.6186|
00182a  4629              MOV      r1,r5                 ;2915
00182c  6820              LDR      r0,[r4,#0]            ;2915
00182e  f7fffffe          BL       get_fat
001832  4605              MOV      r5,r0                 ;2915
                  |L1.6196|
001834  1c68              ADDS     r0,r5,#1              ;2916
001836  d105              BNE      |L1.6212|
001838  79a0              LDRB     r0,[r4,#6]            ;2916
00183a  f0400080          ORR      r0,r0,#0x80           ;2916
00183e  71a0              STRB     r0,[r4,#6]            ;2916
001840  2001              MOVS     r0,#1                 ;2916
001842  e79a              B        |L1.6010|
                  |L1.6212|
001844  2d01              CMP      r5,#1                 ;2917
001846  d903              BLS      |L1.6224|
001848  6820              LDR      r0,[r4,#0]            ;2917
00184a  69c0              LDR      r0,[r0,#0x1c]         ;2917
00184c  42a8              CMP      r0,r5                 ;2917
00184e  d805              BHI      |L1.6236|
                  |L1.6224|
001850  79a0              LDRB     r0,[r4,#6]            ;2917
001852  f0400080          ORR      r0,r0,#0x80           ;2917
001856  71a0              STRB     r0,[r4,#6]            ;2917
001858  2002              MOVS     r0,#2                 ;2917
00185a  e78e              B        |L1.6010|
                  |L1.6236|
00185c  6165              STR      r5,[r4,#0x14]         ;2918
00185e  68a0              LDR      r0,[r4,#8]            ;2919
001860  4438              ADD      r0,r0,r7              ;2919
001862  60a0              STR      r0,[r4,#8]            ;2919
001864  1bf6              SUBS     r6,r6,r7              ;2920
                  |L1.6246|
001866  42be              CMP      r6,r7                 ;2906
001868  d8d3              BHI      |L1.6162|
                  |L1.6250|
00186a  bf00              NOP                            ;2911
00186c  68a0              LDR      r0,[r4,#8]            ;2922
00186e  4430              ADD      r0,r0,r6              ;2922
001870  60a0              STR      r0,[r4,#8]            ;2922
001872  05f0              LSLS     r0,r6,#23             ;2923
001874  0dc0              LSRS     r0,r0,#23             ;2923
001876  d010              BEQ      |L1.6298|
001878  4629              MOV      r1,r5                 ;2924
00187a  6820              LDR      r0,[r4,#0]            ;2924
00187c  f7fffffe          BL       clust2sect
001880  4680              MOV      r8,r0                 ;2924
001882  f1b80f00          CMP      r8,#0                 ;2925
001886  d106              BNE      |L1.6294|
001888  79a0              LDRB     r0,[r4,#6]            ;2925
00188a  f0400080          ORR      r0,r0,#0x80           ;2925
00188e  71a0              STRB     r0,[r4,#6]            ;2925
001890  2002              MOVS     r0,#2                 ;2925
001892  e772              B        |L1.6010|
001894  e001              B        |L1.6298|
                  |L1.6294|
001896  eb082856          ADD      r8,r8,r6,LSR #9       ;2926
                  |L1.6298|
00189a  8920              LDRH     r0,[r4,#8]            ;2930
00189c  05c0              LSLS     r0,r0,#23             ;2930
00189e  0dc0              LSRS     r0,r0,#23             ;2930
0018a0  d02a              BEQ      |L1.6392|
0018a2  69a0              LDR      r0,[r4,#0x18]         ;2930
0018a4  4540              CMP      r0,r8                 ;2930
0018a6  d027              BEQ      |L1.6392|
0018a8  79a0              LDRB     r0,[r4,#6]            ;2933
0018aa  f0100f40          TST      r0,#0x40              ;2933
0018ae  d012              BEQ      |L1.6358|
0018b0  6821              LDR      r1,[r4,#0]            ;2934
0018b2  7848              LDRB     r0,[r1,#1]            ;2934
0018b4  2301              MOVS     r3,#1                 ;2934
0018b6  f1040124          ADD      r1,r4,#0x24           ;2934
0018ba  69a2              LDR      r2,[r4,#0x18]         ;2934
0018bc  f7fffffe          BL       disk_write
0018c0  b128              CBZ      r0,|L1.6350|
0018c2  79a0              LDRB     r0,[r4,#6]            ;2935
0018c4  f0400080          ORR      r0,r0,#0x80           ;2935
0018c8  71a0              STRB     r0,[r4,#6]            ;2935
0018ca  2001              MOVS     r0,#1                 ;2935
0018cc  e755              B        |L1.6010|
                  |L1.6350|
0018ce  79a0              LDRB     r0,[r4,#6]            ;2936
0018d0  f0200040          BIC      r0,r0,#0x40           ;2936
0018d4  71a0              STRB     r0,[r4,#6]            ;2936
                  |L1.6358|
0018d6  6821              LDR      r1,[r4,#0]            ;2939
0018d8  7848              LDRB     r0,[r1,#1]            ;2939
0018da  2301              MOVS     r3,#1                 ;2939
0018dc  4642              MOV      r2,r8                 ;2939
0018de  f1040124          ADD      r1,r4,#0x24           ;2939
0018e2  f7fffffe          BL       disk_read
0018e6  b128              CBZ      r0,|L1.6388|
0018e8  79a0              LDRB     r0,[r4,#6]            ;2940
0018ea  f0400080          ORR      r0,r0,#0x80           ;2940
0018ee  71a0              STRB     r0,[r4,#6]            ;2940
0018f0  2001              MOVS     r0,#1                 ;2940
0018f2  e742              B        |L1.6010|
                  |L1.6388|
0018f4  f8c48018          STR      r8,[r4,#0x18]         ;2942
                  |L1.6392|
0018f8  e9d40102          LDRD     r0,r1,[r4,#8]         ;2945
0018fc  4288              CMP      r0,r1                 ;2945
0018fe  d905              BLS      |L1.6412|
001900  68a0              LDR      r0,[r4,#8]            ;2946
001902  60e0              STR      r0,[r4,#0xc]          ;2946
001904  79a0              LDRB     r0,[r4,#6]            ;2947
001906  f0400020          ORR      r0,r0,#0x20           ;2947
00190a  71a0              STRB     r0,[r4,#6]            ;2947
                  |L1.6412|
00190c  4650              MOV      r0,r10                ;2952
00190e  e734              B        |L1.6010|
;;;2954   
                          ENDP

                  f_opendir PROC
;;;2961   
;;;2962   FRESULT f_opendir (
001910  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2963     DIR *dj,      /* Pointer to directory object to create */
;;;2964     const TCHAR *path /* Pointer to the directory path */
;;;2965   )
;;;2966   {
001912  b083              SUB      sp,sp,#0xc
001914  4604              MOV      r4,r0
;;;2967     FRESULT res;
;;;2968     DEF_NAMEBUF;
;;;2969   
;;;2970   
;;;2971     res = chk_mounted(&path, &dj->fs, 0);
001916  2200              MOVS     r2,#0
001918  4621              MOV      r1,r4
00191a  a804              ADD      r0,sp,#0x10
00191c  f7fffffe          BL       chk_mounted
001920  4605              MOV      r5,r0
;;;2972     if (res == FR_OK) {
001922  bb4d              CBNZ     r5,|L1.6520|
;;;2973       INIT_BUF(*dj);
001924  f8c4d018          STR      sp,[r4,#0x18]
;;;2974       res = follow_path(dj, path);      /* Follow the path to the directory */
001928  4620              MOV      r0,r4
00192a  9904              LDR      r1,[sp,#0x10]
00192c  f7fffffe          BL       follow_path
001930  4605              MOV      r5,r0
;;;2975       FREE_BUF();
;;;2976       if (res == FR_OK) {           /* Follow completed */
001932  b9f5              CBNZ     r5,|L1.6514|
;;;2977         if (dj->dir) {            /* It is not the root dir */
001934  6960              LDR      r0,[r4,#0x14]
001936  b198              CBZ      r0,|L1.6496|
;;;2978           if (dj->dir[DIR_Attr] & AM_DIR) { /* The object is a directory */
001938  6960              LDR      r0,[r4,#0x14]
00193a  7ac0              LDRB     r0,[r0,#0xb]
00193c  f0100f10          TST      r0,#0x10
001940  d00d              BEQ      |L1.6494|
;;;2979             dj->sclust = LD_CLUST(dj->dir);
001942  6960              LDR      r0,[r4,#0x14]
001944  7e81              LDRB     r1,[r0,#0x1a]
001946  7ec0              LDRB     r0,[r0,#0x1b]
001948  ea412100          ORR      r1,r1,r0,LSL #8
00194c  6960              LDR      r0,[r4,#0x14]
00194e  7d02              LDRB     r2,[r0,#0x14]
001950  7d40              LDRB     r0,[r0,#0x15]
001952  ea422000          ORR      r0,r2,r0,LSL #8
001956  ea414000          ORR      r0,r1,r0,LSL #16
00195a  60a0              STR      r0,[r4,#8]
00195c  e000              B        |L1.6496|
                  |L1.6494|
;;;2980           } else {            /* The object is not a directory */
;;;2981             res = FR_NO_PATH;
00195e  2505              MOVS     r5,#5
                  |L1.6496|
;;;2982           }
;;;2983         }
;;;2984         if (res == FR_OK) {
001960  b93d              CBNZ     r5,|L1.6514|
;;;2985           dj->id = dj->fs->id;
001962  6820              LDR      r0,[r4,#0]
001964  88c0              LDRH     r0,[r0,#6]
001966  80a0              STRH     r0,[r4,#4]
;;;2986           res = dir_sdi(dj, 0);     /* Rewind dir */
001968  2100              MOVS     r1,#0
00196a  4620              MOV      r0,r4
00196c  f7fffffe          BL       dir_sdi
001970  4605              MOV      r5,r0
                  |L1.6514|
;;;2987         }
;;;2988       }
;;;2989       if (res == FR_NO_FILE) res = FR_NO_PATH;
001972  2d04              CMP      r5,#4
001974  d100              BNE      |L1.6520|
001976  2505              MOVS     r5,#5
                  |L1.6520|
;;;2990     }
;;;2991   
;;;2992     LEAVE_FF(dj->fs, res);
001978  4628              MOV      r0,r5
;;;2993   }
00197a  b005              ADD      sp,sp,#0x14
00197c  bd30              POP      {r4,r5,pc}
;;;2994   
                          ENDP

                  f_readdir PROC
;;;3001   
;;;3002   FRESULT f_readdir (
00197e  b5fe              PUSH     {r1-r7,lr}
;;;3003     DIR *dj,      /* Pointer to the open directory object */
;;;3004     FILINFO *fno    /* Pointer to file information to return */
;;;3005   )
;;;3006   {
001980  4604              MOV      r4,r0
001982  460e              MOV      r6,r1
;;;3007     FRESULT res;
;;;3008     DEF_NAMEBUF;
;;;3009   
;;;3010   
;;;3011     res = validate(dj->fs, dj->id);     /* Check validity of the object */
001984  88a1              LDRH     r1,[r4,#4]
001986  6820              LDR      r0,[r4,#0]
001988  f7fffffe          BL       validate
00198c  4605              MOV      r5,r0
;;;3012     if (res == FR_OK) {
00198e  bb1d              CBNZ     r5,|L1.6616|
;;;3013       if (!fno) {
001990  b946              CBNZ     r6,|L1.6564|
;;;3014         res = dir_sdi(dj, 0);     /* Rewind the directory object */
001992  2100              MOVS     r1,#0
001994  4620              MOV      r0,r4
001996  f7fffffe          BL       dir_sdi
00199a  4605              MOV      r5,r0
00199c  e01c              B        |L1.6616|
00199e  0000              DCW      0x0000
                  |L1.6560|
                          DCD      CurrVol
                  |L1.6564|
;;;3015       } else {
;;;3016         INIT_BUF(*dj);
0019a4  f8c4d018          STR      sp,[r4,#0x18]
;;;3017         res = dir_read(dj);       /* Read an directory item */
0019a8  4620              MOV      r0,r4
0019aa  f7fffffe          BL       dir_read
0019ae  4605              MOV      r5,r0
;;;3018         if (res == FR_NO_FILE) {    /* Reached end of dir */
0019b0  2d04              CMP      r5,#4
0019b2  d102              BNE      |L1.6586|
;;;3019           dj->sect = 0;
0019b4  2000              MOVS     r0,#0
0019b6  6120              STR      r0,[r4,#0x10]
;;;3020           res = FR_OK;
0019b8  2500              MOVS     r5,#0
                  |L1.6586|
;;;3021         }
;;;3022         if (res == FR_OK) {       /* A valid entry is found */
0019ba  b96d              CBNZ     r5,|L1.6616|
;;;3023           get_fileinfo(dj, fno);    /* Get the object information */
0019bc  4631              MOV      r1,r6
0019be  4620              MOV      r0,r4
0019c0  f7fffffe          BL       get_fileinfo
;;;3024           res = dir_next(dj, 0);    /* Increment index for next */
0019c4  2100              MOVS     r1,#0
0019c6  4620              MOV      r0,r4
0019c8  f7fffffe          BL       dir_next
0019cc  4605              MOV      r5,r0
;;;3025           if (res == FR_NO_FILE) {
0019ce  2d04              CMP      r5,#4
0019d0  d102              BNE      |L1.6616|
;;;3026             dj->sect = 0;
0019d2  2000              MOVS     r0,#0
0019d4  6120              STR      r0,[r4,#0x10]
;;;3027             res = FR_OK;
0019d6  2500              MOVS     r5,#0
                  |L1.6616|
;;;3028           }
;;;3029         }
;;;3030         FREE_BUF();
;;;3031       }
;;;3032     }
;;;3033   
;;;3034     LEAVE_FF(dj->fs, res);
0019d8  4628              MOV      r0,r5
;;;3035   }
0019da  bdfe              POP      {r1-r7,pc}
;;;3036   
                          ENDP

                  f_stat PROC
;;;3043   
;;;3044   FRESULT f_stat (
0019dc  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3045     const TCHAR *path,  /* Pointer to the file path */
;;;3046     FILINFO *fno    /* Pointer to file information to return */
;;;3047   )
;;;3048   {
0019de  b08b              SUB      sp,sp,#0x2c
0019e0  460d              MOV      r5,r1
;;;3049     FRESULT res;
;;;3050     DIR dj;
;;;3051     DEF_NAMEBUF;
;;;3052   
;;;3053   
;;;3054     res = chk_mounted(&path, &dj.fs, 0);
0019e2  2200              MOVS     r2,#0
0019e4  a904              ADD      r1,sp,#0x10
0019e6  a80b              ADD      r0,sp,#0x2c
0019e8  f7fffffe          BL       chk_mounted
0019ec  4604              MOV      r4,r0
;;;3055     if (res == FR_OK) {
0019ee  b97c              CBNZ     r4,|L1.6672|
;;;3056       INIT_BUF(dj);
0019f0  a801              ADD      r0,sp,#4
0019f2  900a              STR      r0,[sp,#0x28]
;;;3057       res = follow_path(&dj, path); /* Follow the file path */
0019f4  a804              ADD      r0,sp,#0x10
0019f6  990b              LDR      r1,[sp,#0x2c]
0019f8  f7fffffe          BL       follow_path
0019fc  4604              MOV      r4,r0
;;;3058       if (res == FR_OK) {       /* Follow completed */
0019fe  b93c              CBNZ     r4,|L1.6672|
;;;3059         if (dj.dir)   /* Found an object */
001a00  9809              LDR      r0,[sp,#0x24]
001a02  b120              CBZ      r0,|L1.6670|
;;;3060           get_fileinfo(&dj, fno);
001a04  4629              MOV      r1,r5
001a06  a804              ADD      r0,sp,#0x10
001a08  f7fffffe          BL       get_fileinfo
001a0c  e000              B        |L1.6672|
                  |L1.6670|
;;;3061         else      /* It is root dir */
;;;3062           res = FR_INVALID_NAME;
001a0e  2406              MOVS     r4,#6
                  |L1.6672|
;;;3063       }
;;;3064       FREE_BUF();
;;;3065     }
;;;3066   
;;;3067     LEAVE_FF(dj.fs, res);
001a10  4620              MOV      r0,r4
;;;3068   }
001a12  b00d              ADD      sp,sp,#0x34
001a14  bd30              POP      {r4,r5,pc}
;;;3069   
                          ENDP

                  f_getfree PROC
;;;3076   
;;;3077   FRESULT f_getfree (
001a16  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3078     const TCHAR *path,  /* Pointer to the logical drive number (root dir) */
;;;3079     DWORD *nclst,   /* Pointer to the variable to return number of free clusters */
;;;3080     FATFS **fatfs   /* Pointer to pointer to corresponding file system object to return */
;;;3081   )
;;;3082   {
001a1a  b082              SUB      sp,sp,#8
001a1c  468b              MOV      r11,r1
001a1e  4614              MOV      r4,r2
;;;3083     FRESULT res;
;;;3084     DWORD n, clst, sect, stat;
;;;3085     UINT i;
;;;3086     BYTE fat, *p;
;;;3087   
;;;3088   
;;;3089     /* Get drive number */
;;;3090     res = chk_mounted(&path, fatfs, 0);
001a20  2200              MOVS     r2,#0
001a22  4621              MOV      r1,r4
001a24  a802              ADD      r0,sp,#8
001a26  f7fffffe          BL       chk_mounted
001a2a  9001              STR      r0,[sp,#4]
;;;3091     if (res == FR_OK) {
001a2c  9801              LDR      r0,[sp,#4]
001a2e  2800              CMP      r0,#0
001a30  d177              BNE      |L1.6946|
;;;3092       /* If free_clust is valid, return it without full cluster scan */
;;;3093       if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
001a32  6820              LDR      r0,[r4,#0]
001a34  6901              LDR      r1,[r0,#0x10]
001a36  69c0              LDR      r0,[r0,#0x1c]
001a38  1e80              SUBS     r0,r0,#2
001a3a  4281              CMP      r1,r0
001a3c  d804              BHI      |L1.6728|
;;;3094         *nclst = (*fatfs)->free_clust;
001a3e  6820              LDR      r0,[r4,#0]
001a40  6900              LDR      r0,[r0,#0x10]
001a42  f8cb0000          STR      r0,[r11,#0]
001a46  e06c              B        |L1.6946|
                  |L1.6728|
;;;3095       } else {
;;;3096         /* Get number of free clusters */
;;;3097         fat = (*fatfs)->fs_type;
001a48  6820              LDR      r0,[r4,#0]
001a4a  f890a000          LDRB     r10,[r0,#0]
;;;3098         n = 0;
001a4e  2600              MOVS     r6,#0
;;;3099         if (fat == FS_FAT12) {
001a50  f1ba0f01          CMP      r10,#1
001a54  d11d              BNE      |L1.6802|
;;;3100           clst = 2;
001a56  2702              MOVS     r7,#2
;;;3101           do {
001a58  bf00              NOP      
                  |L1.6746|
;;;3102             stat = get_fat(*fatfs, clst);
001a5a  4639              MOV      r1,r7
001a5c  6820              LDR      r0,[r4,#0]
001a5e  f7fffffe          BL       get_fat
001a62  4680              MOV      r8,r0
;;;3103             if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
001a64  f1180001          ADDS     r0,r8,#1
001a68  d102              BNE      |L1.6768|
001a6a  2001              MOVS     r0,#1
001a6c  9001              STR      r0,[sp,#4]
001a6e  e00f              B        |L1.6800|
                  |L1.6768|
;;;3104             if (stat == 1) { res = FR_INT_ERR; break; }
001a70  f1b80f01          CMP      r8,#1
001a74  d102              BNE      |L1.6780|
001a76  2002              MOVS     r0,#2
001a78  9001              STR      r0,[sp,#4]
001a7a  e009              B        |L1.6800|
                  |L1.6780|
;;;3105             if (stat == 0) n++;
001a7c  f1b80f00          CMP      r8,#0
001a80  d100              BNE      |L1.6788|
001a82  1c76              ADDS     r6,r6,#1
                  |L1.6788|
;;;3106           } while (++clst < (*fatfs)->n_fatent);
001a84  1c78              ADDS     r0,r7,#1
001a86  4607              MOV      r7,r0
001a88  6821              LDR      r1,[r4,#0]
001a8a  69c9              LDR      r1,[r1,#0x1c]
001a8c  4288              CMP      r0,r1
001a8e  d3e4              BCC      |L1.6746|
                  |L1.6800|
001a90  e03d              B        |L1.6926|
                  |L1.6802|
;;;3107         } else {
;;;3108           clst = (*fatfs)->n_fatent;
001a92  6820              LDR      r0,[r4,#0]
001a94  69c7              LDR      r7,[r0,#0x1c]
;;;3109           sect = (*fatfs)->fatbase;
001a96  6820              LDR      r0,[r4,#0]
001a98  6a40              LDR      r0,[r0,#0x24]
001a9a  9000              STR      r0,[sp,#0]
;;;3110           i = 0; p = 0;
001a9c  f04f0900          MOV      r9,#0
001aa0  2500              MOVS     r5,#0
;;;3111           do {
001aa2  bf00              NOP      
                  |L1.6820|
;;;3112             if (!i) {
001aa4  f1b90f00          CMP      r9,#0
001aa8  d10f              BNE      |L1.6858|
;;;3113               res = move_window(*fatfs, sect++);
001aaa  9a00              LDR      r2,[sp,#0]
001aac  1c53              ADDS     r3,r2,#1
001aae  4611              MOV      r1,r2
001ab0  9300              STR      r3,[sp,#0]
001ab2  6820              LDR      r0,[r4,#0]
001ab4  f7fffffe          BL       move_window
001ab8  9001              STR      r0,[sp,#4]
;;;3114               if (res != FR_OK) break;
001aba  9801              LDR      r0,[sp,#4]
001abc  b100              CBZ      r0,|L1.6848|
001abe  e025              B        |L1.6924|
                  |L1.6848|
;;;3115               p = (*fatfs)->win;
001ac0  6820              LDR      r0,[r4,#0]
001ac2  f1000534          ADD      r5,r0,#0x34
;;;3116               i = SS(*fatfs);
001ac6  f44f7900          MOV      r9,#0x200
                  |L1.6858|
;;;3117             }
;;;3118             if (fat == FS_FAT16) {
001aca  f1ba0f02          CMP      r10,#2
001ace  d109              BNE      |L1.6884|
;;;3119               if (LD_WORD(p) == 0) n++;
001ad0  7828              LDRB     r0,[r5,#0]
001ad2  7869              LDRB     r1,[r5,#1]
001ad4  ea502001          ORRS     r0,r0,r1,LSL #8
001ad8  d100              BNE      |L1.6876|
001ada  1c76              ADDS     r6,r6,#1
                  |L1.6876|
;;;3120               p += 2; i -= 2;
001adc  1cad              ADDS     r5,r5,#2
001ade  f1a90902          SUB      r9,r9,#2
001ae2  e010              B        |L1.6918|
                  |L1.6884|
;;;3121             } else {
;;;3122               if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
001ae4  78e8              LDRB     r0,[r5,#3]
001ae6  0600              LSLS     r0,r0,#24
001ae8  78a9              LDRB     r1,[r5,#2]
001aea  ea404001          ORR      r0,r0,r1,LSL #16
001aee  7869              LDRB     r1,[r5,#1]
001af0  ea402001          ORR      r0,r0,r1,LSL #8
001af4  7829              LDRB     r1,[r5,#0]
001af6  4308              ORRS     r0,r0,r1
001af8  f0304070          BICS     r0,r0,#0xf0000000
001afc  d100              BNE      |L1.6912|
001afe  1c76              ADDS     r6,r6,#1
                  |L1.6912|
;;;3123               p += 4; i -= 4;
001b00  1d2d              ADDS     r5,r5,#4
001b02  f1a90904          SUB      r9,r9,#4
                  |L1.6918|
;;;3124             }
;;;3125           } while (--clst);
001b06  1e78              SUBS     r0,r7,#1
001b08  0007              MOVS     r7,r0
001b0a  d1cb              BNE      |L1.6820|
                  |L1.6924|
001b0c  bf00              NOP                            ;3114
                  |L1.6926|
;;;3126         }
;;;3127         (*fatfs)->free_clust = n;
001b0e  6820              LDR      r0,[r4,#0]
001b10  6106              STR      r6,[r0,#0x10]
;;;3128         if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
001b12  f1ba0f03          CMP      r10,#3
001b16  d102              BNE      |L1.6942|
001b18  2001              MOVS     r0,#1
001b1a  6821              LDR      r1,[r4,#0]
001b1c  7148              STRB     r0,[r1,#5]
                  |L1.6942|
;;;3129         *nclst = n;
001b1e  f8cb6000          STR      r6,[r11,#0]
                  |L1.6946|
;;;3130       }
;;;3131     }
;;;3132     LEAVE_FF(*fatfs, res);
001b22  9801              LDR      r0,[sp,#4]
;;;3133   }
001b24  b005              ADD      sp,sp,#0x14
001b26  e8bd8ff0          POP      {r4-r11,pc}
;;;3134   
                          ENDP

                  f_truncate PROC
;;;3141   
;;;3142   FRESULT f_truncate (
001b2a  b570              PUSH     {r4-r6,lr}
;;;3143     FIL *fp   /* Pointer to the file object */
;;;3144   )
;;;3145   {
001b2c  4604              MOV      r4,r0
;;;3146     FRESULT res;
;;;3147     DWORD ncl;
;;;3148   
;;;3149   
;;;3150     res = validate(fp->fs, fp->id);   /* Check validity of the object */
001b2e  88a1              LDRH     r1,[r4,#4]
001b30  6820              LDR      r0,[r4,#0]
001b32  f7fffffe          BL       validate
001b36  4605              MOV      r5,r0
;;;3151     if (res == FR_OK) {
001b38  b955              CBNZ     r5,|L1.6992|
;;;3152       if (fp->flag & FA__ERROR) {     /* Check abort flag */
001b3a  79a0              LDRB     r0,[r4,#6]
001b3c  f0100f80          TST      r0,#0x80
001b40  d001              BEQ      |L1.6982|
;;;3153         res = FR_INT_ERR;
001b42  2502              MOVS     r5,#2
001b44  e004              B        |L1.6992|
                  |L1.6982|
;;;3154       } else {
;;;3155         if (!(fp->flag & FA_WRITE))   /* Check access mode */
001b46  79a0              LDRB     r0,[r4,#6]
001b48  f0100f02          TST      r0,#2
001b4c  d100              BNE      |L1.6992|
;;;3156           res = FR_DENIED;
001b4e  2507              MOVS     r5,#7
                  |L1.6992|
;;;3157       }
;;;3158     }
;;;3159     if (res == FR_OK) {
001b50  2d00              CMP      r5,#0
001b52  d136              BNE      |L1.7106|
;;;3160       if (fp->fsize > fp->fptr) {
001b54  e9d41002          LDRD     r1,r0,[r4,#8]
001b58  4288              CMP      r0,r1
001b5a  d92d              BLS      |L1.7096|
;;;3161         fp->fsize = fp->fptr; /* Set file size to current R/W point */
001b5c  68a0              LDR      r0,[r4,#8]
001b5e  60e0              STR      r0,[r4,#0xc]
;;;3162         fp->flag |= FA__WRITTEN;
001b60  79a0              LDRB     r0,[r4,#6]
001b62  f0400020          ORR      r0,r0,#0x20
001b66  71a0              STRB     r0,[r4,#6]
;;;3163         if (fp->fptr == 0) {  /* When set file size to zero, remove entire cluster chain */
001b68  68a0              LDR      r0,[r4,#8]
001b6a  b938              CBNZ     r0,|L1.7036|
;;;3164           res = remove_chain(fp->fs, fp->sclust);
001b6c  6921              LDR      r1,[r4,#0x10]
001b6e  6820              LDR      r0,[r4,#0]
001b70  f7fffffe          BL       remove_chain
001b74  4605              MOV      r5,r0
;;;3165           fp->sclust = 0;
001b76  2000              MOVS     r0,#0
001b78  6120              STR      r0,[r4,#0x10]
001b7a  e01d              B        |L1.7096|
                  |L1.7036|
;;;3166         } else {        /* When truncate a part of the file, remove remaining clusters */
;;;3167           ncl = get_fat(fp->fs, fp->clust);
001b7c  6961              LDR      r1,[r4,#0x14]
001b7e  6820              LDR      r0,[r4,#0]
001b80  f7fffffe          BL       get_fat
001b84  4606              MOV      r6,r0
;;;3168           res = FR_OK;
001b86  2500              MOVS     r5,#0
;;;3169           if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
001b88  1c70              ADDS     r0,r6,#1
001b8a  d100              BNE      |L1.7054|
001b8c  2501              MOVS     r5,#1
                  |L1.7054|
;;;3170           if (ncl == 1) res = FR_INT_ERR;
001b8e  2e01              CMP      r6,#1
001b90  d100              BNE      |L1.7060|
001b92  2502              MOVS     r5,#2
                  |L1.7060|
;;;3171           if (res == FR_OK && ncl < fp->fs->n_fatent) {
001b94  b985              CBNZ     r5,|L1.7096|
001b96  6820              LDR      r0,[r4,#0]
001b98  69c0              LDR      r0,[r0,#0x1c]
001b9a  42b0              CMP      r0,r6
001b9c  d90c              BLS      |L1.7096|
;;;3172             res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
001b9e  f06f4270          MVN      r2,#0xf0000000
001ba2  6961              LDR      r1,[r4,#0x14]
001ba4  6820              LDR      r0,[r4,#0]
001ba6  f7fffffe          BL       put_fat
001baa  4605              MOV      r5,r0
;;;3173             if (res == FR_OK) res = remove_chain(fp->fs, ncl);
001bac  b925              CBNZ     r5,|L1.7096|
001bae  4631              MOV      r1,r6
001bb0  6820              LDR      r0,[r4,#0]
001bb2  f7fffffe          BL       remove_chain
001bb6  4605              MOV      r5,r0
                  |L1.7096|
;;;3174           }
;;;3175         }
;;;3176       }
;;;3177       if (res != FR_OK) fp->flag |= FA__ERROR;
001bb8  b11d              CBZ      r5,|L1.7106|
001bba  79a0              LDRB     r0,[r4,#6]
001bbc  f0400080          ORR      r0,r0,#0x80
001bc0  71a0              STRB     r0,[r4,#6]
                  |L1.7106|
;;;3178     }
;;;3179   
;;;3180     LEAVE_FF(fp->fs, res);
001bc2  4628              MOV      r0,r5
;;;3181   }
001bc4  bd70              POP      {r4-r6,pc}
;;;3182   
                          ENDP

                  f_unlink PROC
;;;3189   
;;;3190   FRESULT f_unlink (
001bc6  b571              PUSH     {r0,r4-r6,lr}
;;;3191     const TCHAR *path   /* Pointer to the file or directory path */
;;;3192   )
;;;3193   {
001bc8  b091              SUB      sp,sp,#0x44
;;;3194     FRESULT res;
;;;3195     DIR dj, sdj;
;;;3196     BYTE *dir;
;;;3197     DWORD dclst;
;;;3198     DEF_NAMEBUF;
;;;3199   
;;;3200   
;;;3201     res = chk_mounted(&path, &dj.fs, 1);
001bca  2201              MOVS     r2,#1
001bcc  a90a              ADD      r1,sp,#0x28
001bce  a811              ADD      r0,sp,#0x44
001bd0  f7fffffe          BL       chk_mounted
001bd4  4604              MOV      r4,r0
;;;3202     if (res == FR_OK) {
001bd6  2c00              CMP      r4,#0
001bd8  d155              BNE      |L1.7302|
;;;3203       INIT_BUF(dj);
001bda  f8cdd040          STR      sp,[sp,#0x40]
;;;3204       res = follow_path(&dj, path);   /* Follow the file path */
001bde  a80a              ADD      r0,sp,#0x28
001be0  9911              LDR      r1,[sp,#0x44]
001be2  f7fffffe          BL       follow_path
001be6  4604              MOV      r4,r0
;;;3205       if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
001be8  b92c              CBNZ     r4,|L1.7158|
001bea  9810              LDR      r0,[sp,#0x40]
001bec  7ac0              LDRB     r0,[r0,#0xb]
001bee  f0100f20          TST      r0,#0x20
001bf2  d000              BEQ      |L1.7158|
;;;3206         res = FR_INVALID_NAME;      /* Cannot remove dot entry */
001bf4  2406              MOVS     r4,#6
                  |L1.7158|
;;;3207   #if _FS_SHARE
;;;3208       if (res == FR_OK) res = chk_lock(&dj, 2); /* Cannot remove open file */
;;;3209   #endif
;;;3210       if (res == FR_OK) {         /* The object is accessible */
001bf6  2c00              CMP      r4,#0
001bf8  d145              BNE      |L1.7302|
;;;3211         dir = dj.dir;
001bfa  9d0f              LDR      r5,[sp,#0x3c]
;;;3212         if (!dir) {
001bfc  b90d              CBNZ     r5,|L1.7170|
;;;3213           res = FR_INVALID_NAME;    /* Cannot remove the start directory */
001bfe  2406              MOVS     r4,#6
001c00  e004              B        |L1.7180|
                  |L1.7170|
;;;3214         } else {
;;;3215           if (dir[DIR_Attr] & AM_RDO)
001c02  7ae8              LDRB     r0,[r5,#0xb]
001c04  f0100f01          TST      r0,#1
001c08  d000              BEQ      |L1.7180|
;;;3216             res = FR_DENIED;    /* Cannot remove R/O object */
001c0a  2407              MOVS     r4,#7
                  |L1.7180|
;;;3217         }
;;;3218         dclst = LD_CLUST(dir);
001c0c  7ea9              LDRB     r1,[r5,#0x1a]
001c0e  7ee8              LDRB     r0,[r5,#0x1b]
001c10  ea412100          ORR      r1,r1,r0,LSL #8
001c14  7d2a              LDRB     r2,[r5,#0x14]
001c16  7d68              LDRB     r0,[r5,#0x15]
001c18  ea422000          ORR      r0,r2,r0,LSL #8
001c1c  ea414600          ORR      r6,r1,r0,LSL #16
;;;3219         if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) { /* Is it a sub-dir? */
001c20  bb04              CBNZ     r4,|L1.7268|
001c22  7ae8              LDRB     r0,[r5,#0xb]
001c24  f0100f10          TST      r0,#0x10
001c28  d01c              BEQ      |L1.7268|
;;;3220           if (dclst < 2) {
001c2a  2e02              CMP      r6,#2
001c2c  d201              BCS      |L1.7218|
;;;3221             res = FR_INT_ERR;
001c2e  2402              MOVS     r4,#2
001c30  e018              B        |L1.7268|
                  |L1.7218|
;;;3222           } else {
;;;3223             mem_cpy(&sdj, &dj, sizeof(DIR));  /* Check if the sub-dir is empty or not */
001c32  221c              MOVS     r2,#0x1c
001c34  a90a              ADD      r1,sp,#0x28
001c36  a803              ADD      r0,sp,#0xc
001c38  f7fffffe          BL       mem_cpy
;;;3224             sdj.sclust = dclst;
001c3c  9605              STR      r6,[sp,#0x14]
;;;3225             res = dir_sdi(&sdj, 2);   /* Exclude dot entries */
001c3e  2102              MOVS     r1,#2
001c40  a803              ADD      r0,sp,#0xc
001c42  f7fffffe          BL       dir_sdi
001c46  4604              MOV      r4,r0
;;;3226             if (res == FR_OK) {
001c48  b964              CBNZ     r4,|L1.7268|
;;;3227               res = dir_read(&sdj);
001c4a  a803              ADD      r0,sp,#0xc
001c4c  f7fffffe          BL       dir_read
001c50  4604              MOV      r4,r0
;;;3228               if (res == FR_OK      /* Not empty dir */
001c52  b11c              CBZ      r4,|L1.7260|
;;;3229   #if _FS_RPATH
;;;3230               || dclst == sdj.fs->cdir  /* Current dir */
001c54  9803              LDR      r0,[sp,#0xc]
001c56  6980              LDR      r0,[r0,#0x18]
001c58  42b0              CMP      r0,r6
001c5a  d100              BNE      |L1.7262|
                  |L1.7260|
;;;3231   #endif
;;;3232               ) res = FR_DENIED;
001c5c  2407              MOVS     r4,#7
                  |L1.7262|
;;;3233               if (res == FR_NO_FILE) res = FR_OK; /* Empty */
001c5e  2c04              CMP      r4,#4
001c60  d100              BNE      |L1.7268|
001c62  2400              MOVS     r4,#0
                  |L1.7268|
;;;3234             }
;;;3235           }
;;;3236         }
;;;3237         if (res == FR_OK) {
001c64  b97c              CBNZ     r4,|L1.7302|
;;;3238           res = dir_remove(&dj);    /* Remove the directory entry */
001c66  a80a              ADD      r0,sp,#0x28
001c68  f7fffffe          BL       dir_remove
001c6c  4604              MOV      r4,r0
;;;3239           if (res == FR_OK) {
001c6e  b954              CBNZ     r4,|L1.7302|
;;;3240             if (dclst)        /* Remove the cluster chain if exist */
001c70  b126              CBZ      r6,|L1.7292|
;;;3241               res = remove_chain(dj.fs, dclst);
001c72  4631              MOV      r1,r6
001c74  980a              LDR      r0,[sp,#0x28]
001c76  f7fffffe          BL       remove_chain
001c7a  4604              MOV      r4,r0
                  |L1.7292|
;;;3242             if (res == FR_OK) res = sync(dj.fs);
001c7c  b91c              CBNZ     r4,|L1.7302|
001c7e  980a              LDR      r0,[sp,#0x28]
001c80  f7fffffe          BL       sync
001c84  4604              MOV      r4,r0
                  |L1.7302|
;;;3243           }
;;;3244         }
;;;3245       }
;;;3246       FREE_BUF();
;;;3247     }
;;;3248     LEAVE_FF(dj.fs, res);
001c86  4620              MOV      r0,r4
;;;3249   }
001c88  b012              ADD      sp,sp,#0x48
001c8a  bd70              POP      {r4-r6,pc}
;;;3250   
                          ENDP

                  f_mkdir PROC
;;;3257   
;;;3258   FRESULT f_mkdir (
001c8c  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;3259     const TCHAR *path   /* Pointer to the directory path */
;;;3260   )
;;;3261   {
001c90  b08b              SUB      sp,sp,#0x2c
;;;3262     FRESULT res;
;;;3263     DIR dj;
;;;3264     BYTE *dir, n;
;;;3265     DWORD dsc, dcl, pcl, tim = get_fattime();
001c92  f7fffffe          BL       get_fattime
001c96  4607              MOV      r7,r0
;;;3266     DEF_NAMEBUF;
;;;3267   
;;;3268   
;;;3269     res = chk_mounted(&path, &dj.fs, 1);
001c98  2201              MOVS     r2,#1
001c9a  a904              ADD      r1,sp,#0x10
001c9c  a80b              ADD      r0,sp,#0x2c
001c9e  f7fffffe          BL       chk_mounted
001ca2  4606              MOV      r6,r0
;;;3270     if (res == FR_OK) {
001ca4  2e00              CMP      r6,#0
                  |L1.7334|
001ca6  d173              BNE      |L1.7568|
;;;3271       INIT_BUF(dj);
001ca8  a801              ADD      r0,sp,#4
001caa  900a              STR      r0,[sp,#0x28]
;;;3272       res = follow_path(&dj, path);     /* Follow the file path */
001cac  a804              ADD      r0,sp,#0x10
001cae  990b              LDR      r1,[sp,#0x2c]
001cb0  f7fffffe          BL       follow_path
001cb4  4606              MOV      r6,r0
;;;3273       if (res == FR_OK) res = FR_EXIST;   /* Any object with same name is already existing */
001cb6  b906              CBNZ     r6,|L1.7354|
001cb8  2608              MOVS     r6,#8
                  |L1.7354|
;;;3274       if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
001cba  2e04              CMP      r6,#4
001cbc  d105              BNE      |L1.7370|
001cbe  980a              LDR      r0,[sp,#0x28]
001cc0  7ac0              LDRB     r0,[r0,#0xb]
001cc2  f0100f20          TST      r0,#0x20
001cc6  d000              BEQ      |L1.7370|
;;;3275         res = FR_INVALID_NAME;
001cc8  2606              MOVS     r6,#6
                  |L1.7370|
;;;3276       if (res == FR_NO_FILE) {        /* Can create a new directory */
001cca  2e04              CMP      r6,#4
001ccc  d1eb              BNE      |L1.7334|
;;;3277         dcl = create_chain(dj.fs, 0);   /* Allocate a cluster for the new directory table */
001cce  2100              MOVS     r1,#0
001cd0  9804              LDR      r0,[sp,#0x10]
001cd2  f7fffffe          BL       create_chain
001cd6  4605              MOV      r5,r0
;;;3278         res = FR_OK;
001cd8  2600              MOVS     r6,#0
;;;3279         if (dcl == 0) res = FR_DENIED;    /* No space to allocate a new cluster */
001cda  b905              CBNZ     r5,|L1.7390|
001cdc  2607              MOVS     r6,#7
                  |L1.7390|
;;;3280         if (dcl == 1) res = FR_INT_ERR;
001cde  2d01              CMP      r5,#1
001ce0  d100              BNE      |L1.7396|
001ce2  2602              MOVS     r6,#2
                  |L1.7396|
;;;3281         if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
001ce4  1c68              ADDS     r0,r5,#1
001ce6  d100              BNE      |L1.7402|
001ce8  2601              MOVS     r6,#1
                  |L1.7402|
;;;3282         if (res == FR_OK)         /* Flush FAT */
001cea  b926              CBNZ     r6,|L1.7414|
;;;3283           res = move_window(dj.fs, 0);
001cec  2100              MOVS     r1,#0
001cee  9804              LDR      r0,[sp,#0x10]
001cf0  f7fffffe          BL       move_window
001cf4  4606              MOV      r6,r0
                  |L1.7414|
;;;3284         if (res == FR_OK) {         /* Initialize the new directory table */
001cf6  2e00              CMP      r6,#0
001cf8  d168              BNE      |L1.7628|
;;;3285           dsc = clust2sect(dj.fs, dcl);
001cfa  4629              MOV      r1,r5
001cfc  9804              LDR      r0,[sp,#0x10]
001cfe  f7fffffe          BL       clust2sect
001d02  4682              MOV      r10,r0
;;;3286           dir = dj.fs->win;
001d04  9804              LDR      r0,[sp,#0x10]
001d06  f1000434          ADD      r4,r0,#0x34
;;;3287           mem_set(dir, 0, SS(dj.fs));
001d0a  f44f7200          MOV      r2,#0x200
001d0e  2100              MOVS     r1,#0
001d10  4620              MOV      r0,r4
001d12  f7fffffe          BL       mem_set
;;;3288           mem_set(dir+DIR_Name, ' ', 8+3);  /* Create "." entry */
001d16  220b              MOVS     r2,#0xb
001d18  2120              MOVS     r1,#0x20
001d1a  4620              MOV      r0,r4
001d1c  f7fffffe          BL       mem_set
;;;3289           dir[DIR_Name] = '.';
001d20  202e              MOVS     r0,#0x2e
001d22  7020              STRB     r0,[r4,#0]
;;;3290           dir[DIR_Attr] = AM_DIR;
001d24  2010              MOVS     r0,#0x10
001d26  72e0              STRB     r0,[r4,#0xb]
;;;3291           ST_DWORD(dir+DIR_WrtTime, tim);
001d28  75a7              STRB     r7,[r4,#0x16]
001d2a  0a39              LSRS     r1,r7,#8
001d2c  75e1              STRB     r1,[r4,#0x17]
001d2e  0c39              LSRS     r1,r7,#16
001d30  7621              STRB     r1,[r4,#0x18]
001d32  0e39              LSRS     r1,r7,#24
001d34  7661              STRB     r1,[r4,#0x19]
;;;3292           ST_CLUST(dir, dcl);
001d36  76a5              STRB     r5,[r4,#0x1a]
001d38  0a29              LSRS     r1,r5,#8
001d3a  76e1              STRB     r1,[r4,#0x1b]
001d3c  0c28              LSRS     r0,r5,#16
001d3e  7520              STRB     r0,[r4,#0x14]
001d40  0e29              LSRS     r1,r5,#24
001d42  7561              STRB     r1,[r4,#0x15]
;;;3293           mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
001d44  2220              MOVS     r2,#0x20
001d46  4621              MOV      r1,r4
001d48  f1040020          ADD      r0,r4,#0x20
001d4c  f7fffffe          BL       mem_cpy
;;;3294           dir[33] = '.'; pcl = dj.sclust;
001d50  202e              MOVS     r0,#0x2e
001d52  f8840021          STRB     r0,[r4,#0x21]
001d56  f8dd8018          LDR      r8,[sp,#0x18]
;;;3295           if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
001d5a  9804              LDR      r0,[sp,#0x10]
001d5c  7800              LDRB     r0,[r0,#0]
001d5e  2803              CMP      r0,#3
001d60  d104              BNE      |L1.7532|
001d62  9804              LDR      r0,[sp,#0x10]
001d64  6a80              LDR      r0,[r0,#0x28]
001d66  4540              CMP      r0,r8
001d68  d100              BNE      |L1.7532|
;;;3296             pcl = 0;
001d6a  46b0              MOV      r8,r6
                  |L1.7532|
;;;3297           ST_CLUST(dir+SZ_DIR, pcl);
001d6c  f884803a          STRB     r8,[r4,#0x3a]
001d70  ea4f2118          LSR      r1,r8,#8
001d74  f884103b          STRB     r1,[r4,#0x3b]
001d78  f3c84107          UBFX     r1,r8,#16,#8
001d7c  2034              MOVS     r0,#0x34
001d7e  5501              STRB     r1,[r0,r4]
001d80  ea4f6118          LSR      r1,r8,#24
001d84  f8841035          STRB     r1,[r4,#0x35]
;;;3298           for (n = dj.fs->csize; n; n--) {  /* Write dot entries and clear following sectors */
001d88  9804              LDR      r0,[sp,#0x10]
001d8a  f8909002          LDRB     r9,[r0,#2]
001d8e  e019              B        |L1.7620|
                  |L1.7568|
001d90  e03f              B        |L1.7698|
                  |L1.7570|
;;;3299             dj.fs->winsect = dsc++;
001d92  9804              LDR      r0,[sp,#0x10]
001d94  f8c0a030          STR      r10,[r0,#0x30]
001d98  f10a0a01          ADD      r10,r10,#1
;;;3300             dj.fs->wflag = 1;
001d9c  2001              MOVS     r0,#1
001d9e  9904              LDR      r1,[sp,#0x10]
001da0  7108              STRB     r0,[r1,#4]
;;;3301             res = move_window(dj.fs, 0);
001da2  2100              MOVS     r1,#0
001da4  9804              LDR      r0,[sp,#0x10]
001da6  f7fffffe          BL       move_window
001daa  4606              MOV      r6,r0
;;;3302             if (res != FR_OK) break;
001dac  b106              CBZ      r6,|L1.7600|
001dae  e00c              B        |L1.7626|
                  |L1.7600|
;;;3303             mem_set(dir, 0, SS(dj.fs));
001db0  f44f7200          MOV      r2,#0x200
001db4  2100              MOVS     r1,#0
001db6  4620              MOV      r0,r4
001db8  f7fffffe          BL       mem_set
001dbc  f1a90001          SUB      r0,r9,#1              ;3298
001dc0  f00009ff          AND      r9,r0,#0xff           ;3298
                  |L1.7620|
001dc4  f1b90f00          CMP      r9,#0                 ;3298
001dc8  d1e3              BNE      |L1.7570|
                  |L1.7626|
001dca  bf00              NOP                            ;3302
                  |L1.7628|
;;;3304           }
;;;3305         }
;;;3306         if (res == FR_OK) res = dir_register(&dj);  /* Register the object to the directoy */
001dcc  b91e              CBNZ     r6,|L1.7638|
001dce  a804              ADD      r0,sp,#0x10
001dd0  f7fffffe          BL       dir_register
001dd4  4606              MOV      r6,r0
                  |L1.7638|
;;;3307         if (res != FR_OK) {
001dd6  b126              CBZ      r6,|L1.7650|
;;;3308           remove_chain(dj.fs, dcl);     /* Could not register, remove cluster chain */
001dd8  4629              MOV      r1,r5
001dda  9804              LDR      r0,[sp,#0x10]
001ddc  f7fffffe          BL       remove_chain
001de0  e017              B        |L1.7698|
                  |L1.7650|
;;;3309         } else {
;;;3310           dir = dj.dir;
001de2  9c09              LDR      r4,[sp,#0x24]
;;;3311           dir[DIR_Attr] = AM_DIR;       /* Attribute */
001de4  2010              MOVS     r0,#0x10
001de6  72e0              STRB     r0,[r4,#0xb]
;;;3312           ST_DWORD(dir+DIR_WrtTime, tim);   /* Created time */
001de8  75a7              STRB     r7,[r4,#0x16]
001dea  0a39              LSRS     r1,r7,#8
001dec  75e1              STRB     r1,[r4,#0x17]
001dee  0c39              LSRS     r1,r7,#16
001df0  7621              STRB     r1,[r4,#0x18]
001df2  0e39              LSRS     r1,r7,#24
001df4  7661              STRB     r1,[r4,#0x19]
;;;3313           ST_CLUST(dir, dcl);         /* Table start cluster */
001df6  76a5              STRB     r5,[r4,#0x1a]
001df8  0a29              LSRS     r1,r5,#8
001dfa  76e1              STRB     r1,[r4,#0x1b]
001dfc  0c28              LSRS     r0,r5,#16
001dfe  7520              STRB     r0,[r4,#0x14]
001e00  0e29              LSRS     r1,r5,#24
001e02  7561              STRB     r1,[r4,#0x15]
;;;3314           dj.fs->wflag = 1;
001e04  2001              MOVS     r0,#1
001e06  9904              LDR      r1,[sp,#0x10]
001e08  7108              STRB     r0,[r1,#4]
;;;3315           res = sync(dj.fs);
001e0a  9804              LDR      r0,[sp,#0x10]
001e0c  f7fffffe          BL       sync
001e10  4606              MOV      r6,r0
                  |L1.7698|
;;;3316         }
;;;3317       }
;;;3318       FREE_BUF();
;;;3319     }
;;;3320   
;;;3321     LEAVE_FF(dj.fs, res);
001e12  4630              MOV      r0,r6
;;;3322   }
001e14  b00c              ADD      sp,sp,#0x30
001e16  e8bd87f0          POP      {r4-r10,pc}
;;;3323   
                          ENDP

                  f_chmod PROC
;;;3330   
;;;3331   FRESULT f_chmod (
001e1a  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3332     const TCHAR *path,  /* Pointer to the file path */
;;;3333     BYTE value,     /* Attribute bits */
;;;3334     BYTE mask     /* Attribute mask to change */
;;;3335   )
;;;3336   {
001e1c  b08a              SUB      sp,sp,#0x28
001e1e  460f              MOV      r7,r1
001e20  4614              MOV      r4,r2
;;;3337     FRESULT res;
;;;3338     DIR dj;
;;;3339     BYTE *dir;
;;;3340     DEF_NAMEBUF;
;;;3341   
;;;3342   
;;;3343     res = chk_mounted(&path, &dj.fs, 1);
001e22  2201              MOVS     r2,#1
001e24  a903              ADD      r1,sp,#0xc
001e26  a80a              ADD      r0,sp,#0x28
001e28  f7fffffe          BL       chk_mounted
001e2c  4605              MOV      r5,r0
;;;3344     if (res == FR_OK) {
001e2e  bb0d              CBNZ     r5,|L1.7796|
;;;3345       INIT_BUF(dj);
001e30  f8cdd024          STR      sp,[sp,#0x24]
;;;3346       res = follow_path(&dj, path);   /* Follow the file path */
001e34  a803              ADD      r0,sp,#0xc
001e36  990a              LDR      r1,[sp,#0x28]
001e38  f7fffffe          BL       follow_path
001e3c  4605              MOV      r5,r0
;;;3347       FREE_BUF();
;;;3348       if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
001e3e  b92d              CBNZ     r5,|L1.7756|
001e40  9809              LDR      r0,[sp,#0x24]
001e42  7ac0              LDRB     r0,[r0,#0xb]
001e44  f0100f20          TST      r0,#0x20
001e48  d000              BEQ      |L1.7756|
;;;3349         res = FR_INVALID_NAME;
001e4a  2506              MOVS     r5,#6
                  |L1.7756|
;;;3350       if (res == FR_OK) {
001e4c  b995              CBNZ     r5,|L1.7796|
;;;3351         dir = dj.dir;
001e4e  9e08              LDR      r6,[sp,#0x20]
;;;3352         if (!dir) {           /* Is it a root directory? */
001e50  b90e              CBNZ     r6,|L1.7766|
;;;3353           res = FR_INVALID_NAME;
001e52  2506              MOVS     r5,#6
001e54  e00e              B        |L1.7796|
                  |L1.7766|
;;;3354         } else {            /* File or sub directory */
;;;3355           mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;  /* Valid attribute mask */
001e56  f0040427          AND      r4,r4,#0x27
;;;3356           dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask); /* Apply attribute change */
001e5a  ea070004          AND      r0,r7,r4
001e5e  7af1              LDRB     r1,[r6,#0xb]
001e60  43a1              BICS     r1,r1,r4
001e62  4308              ORRS     r0,r0,r1
001e64  72f0              STRB     r0,[r6,#0xb]
;;;3357           dj.fs->wflag = 1;
001e66  2001              MOVS     r0,#1
001e68  9903              LDR      r1,[sp,#0xc]
001e6a  7108              STRB     r0,[r1,#4]
;;;3358           res = sync(dj.fs);
001e6c  9803              LDR      r0,[sp,#0xc]
001e6e  f7fffffe          BL       sync
001e72  4605              MOV      r5,r0
                  |L1.7796|
;;;3359         }
;;;3360       }
;;;3361     }
;;;3362   
;;;3363     LEAVE_FF(dj.fs, res);
001e74  4628              MOV      r0,r5
;;;3364   }
001e76  b00d              ADD      sp,sp,#0x34
001e78  bdf0              POP      {r4-r7,pc}
;;;3365   
                          ENDP

                  f_utime PROC
;;;3372   
;;;3373   FRESULT f_utime (
001e7a  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3374     const TCHAR *path,  /* Pointer to the file/directory name */
;;;3375     const FILINFO *fno  /* Pointer to the time stamp to be set */
;;;3376   )
;;;3377   {
001e7c  b08a              SUB      sp,sp,#0x28
001e7e  460d              MOV      r5,r1
;;;3378     FRESULT res;
;;;3379     DIR dj;
;;;3380     BYTE *dir;
;;;3381     DEF_NAMEBUF;
;;;3382   
;;;3383   
;;;3384     res = chk_mounted(&path, &dj.fs, 1);
001e80  2201              MOVS     r2,#1
001e82  a903              ADD      r1,sp,#0xc
001e84  a80a              ADD      r0,sp,#0x28
001e86  f7fffffe          BL       chk_mounted
001e8a  4606              MOV      r6,r0
;;;3385     if (res == FR_OK) {
001e8c  bb1e              CBNZ     r6,|L1.7894|
;;;3386       INIT_BUF(dj);
001e8e  f8cdd024          STR      sp,[sp,#0x24]
;;;3387       res = follow_path(&dj, path); /* Follow the file path */
001e92  a803              ADD      r0,sp,#0xc
001e94  990a              LDR      r1,[sp,#0x28]
001e96  f7fffffe          BL       follow_path
001e9a  4606              MOV      r6,r0
;;;3388       FREE_BUF();
;;;3389       if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
001e9c  b92e              CBNZ     r6,|L1.7850|
001e9e  9809              LDR      r0,[sp,#0x24]
001ea0  7ac0              LDRB     r0,[r0,#0xb]
001ea2  f0100f20          TST      r0,#0x20
001ea6  d000              BEQ      |L1.7850|
;;;3390         res = FR_INVALID_NAME;
001ea8  2606              MOVS     r6,#6
                  |L1.7850|
;;;3391       if (res == FR_OK) {
001eaa  b9a6              CBNZ     r6,|L1.7894|
;;;3392         dir = dj.dir;
001eac  9c08              LDR      r4,[sp,#0x20]
;;;3393         if (!dir) {         /* Root directory */
001eae  b90c              CBNZ     r4,|L1.7860|
;;;3394           res = FR_INVALID_NAME;
001eb0  2606              MOVS     r6,#6
001eb2  e010              B        |L1.7894|
                  |L1.7860|
;;;3395         } else {          /* File or sub-directory */
;;;3396           ST_WORD(dir+DIR_WrtTime, fno->ftime);
001eb4  79a8              LDRB     r0,[r5,#6]
001eb6  75a0              STRB     r0,[r4,#0x16]
001eb8  88e8              LDRH     r0,[r5,#6]
001eba  1201              ASRS     r1,r0,#8
001ebc  75e1              STRB     r1,[r4,#0x17]
;;;3397           ST_WORD(dir+DIR_WrtDate, fno->fdate);
001ebe  7928              LDRB     r0,[r5,#4]
001ec0  7620              STRB     r0,[r4,#0x18]
001ec2  88a8              LDRH     r0,[r5,#4]
001ec4  1201              ASRS     r1,r0,#8
001ec6  7661              STRB     r1,[r4,#0x19]
;;;3398           dj.fs->wflag = 1;
001ec8  2001              MOVS     r0,#1
001eca  9903              LDR      r1,[sp,#0xc]
001ecc  7108              STRB     r0,[r1,#4]
;;;3399           res = sync(dj.fs);
001ece  9803              LDR      r0,[sp,#0xc]
001ed0  f7fffffe          BL       sync
001ed4  4606              MOV      r6,r0
                  |L1.7894|
;;;3400         }
;;;3401       }
;;;3402     }
;;;3403   
;;;3404     LEAVE_FF(dj.fs, res);
001ed6  4630              MOV      r0,r6
;;;3405   }
001ed8  b00c              ADD      sp,sp,#0x30
001eda  bd70              POP      {r4-r6,pc}
;;;3406   
                          ENDP

                  f_rename PROC
;;;3413   
;;;3414   FRESULT f_rename (
001edc  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;3415     const TCHAR *path_old,  /* Pointer to the old name */
;;;3416     const TCHAR *path_new /* Pointer to the new name */
;;;3417   )
;;;3418   {
001ede  b097              SUB      sp,sp,#0x5c
001ee0  460f              MOV      r7,r1
;;;3419     FRESULT res;
;;;3420     DIR djo, djn;
;;;3421     BYTE buf[21], *dir;
;;;3422     DWORD dw;
;;;3423     DEF_NAMEBUF;
;;;3424   
;;;3425   
;;;3426     res = chk_mounted(&path_old, &djo.fs, 1);
001ee2  2201              MOVS     r2,#1
001ee4  a910              ADD      r1,sp,#0x40
001ee6  a817              ADD      r0,sp,#0x5c
001ee8  f7fffffe          BL       chk_mounted
001eec  4605              MOV      r5,r0
;;;3427     if (res == FR_OK) {
001eee  2d00              CMP      r5,#0
001ef0  d114              BNE      |L1.7964|
;;;3428       djn.fs = djo.fs;
001ef2  9810              LDR      r0,[sp,#0x40]
001ef4  9009              STR      r0,[sp,#0x24]
;;;3429       INIT_BUF(djo);
001ef6  f8cdd058          STR      sp,[sp,#0x58]
;;;3430       res = follow_path(&djo, path_old);    /* Check old object */
001efa  a810              ADD      r0,sp,#0x40
001efc  9917              LDR      r1,[sp,#0x5c]
001efe  f7fffffe          BL       follow_path
001f02  4605              MOV      r5,r0
;;;3431       if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
001f04  b92d              CBNZ     r5,|L1.7954|
001f06  9816              LDR      r0,[sp,#0x58]
001f08  7ac0              LDRB     r0,[r0,#0xb]
001f0a  f0100f20          TST      r0,#0x20
001f0e  d000              BEQ      |L1.7954|
;;;3432         res = FR_INVALID_NAME;
001f10  2506              MOVS     r5,#6
                  |L1.7954|
;;;3433   #if _FS_SHARE
;;;3434       if (res == FR_OK) res = chk_lock(&djo, 2);
;;;3435   #endif
;;;3436       if (res == FR_OK) {           /* Old object is found */
001f12  2d00              CMP      r5,#0
001f14  d175              BNE      |L1.8194|
;;;3437         if (!djo.dir) {           /* Is root dir? */
001f16  9815              LDR      r0,[sp,#0x54]
001f18  b908              CBNZ     r0,|L1.7966|
;;;3438           res = FR_NO_FILE;
001f1a  2504              MOVS     r5,#4
                  |L1.7964|
001f1c  e071              B        |L1.8194|
                  |L1.7966|
;;;3439         } else {
;;;3440           mem_cpy(buf, djo.dir+DIR_Attr, 21);   /* Save the object information except for name */
001f1e  9815              LDR      r0,[sp,#0x54]
001f20  f100010b          ADD      r1,r0,#0xb
001f24  2215              MOVS     r2,#0x15
001f26  a803              ADD      r0,sp,#0xc
001f28  f7fffffe          BL       mem_cpy
;;;3441           mem_cpy(&djn, &djo, sizeof(DIR));   /* Check new object */
001f2c  221c              MOVS     r2,#0x1c
001f2e  a910              ADD      r1,sp,#0x40
001f30  a809              ADD      r0,sp,#0x24
001f32  f7fffffe          BL       mem_cpy
;;;3442           res = follow_path(&djn, path_new);
001f36  4639              MOV      r1,r7
001f38  a809              ADD      r0,sp,#0x24
001f3a  f7fffffe          BL       follow_path
001f3e  4605              MOV      r5,r0
;;;3443           if (res == FR_OK) res = FR_EXIST;   /* The new object name is already existing */
001f40  b905              CBNZ     r5,|L1.8004|
001f42  2508              MOVS     r5,#8
                  |L1.8004|
;;;3444           if (res == FR_NO_FILE) {        /* Is it a valid path and no name collision? */
001f44  2d04              CMP      r5,#4
001f46  d15c              BNE      |L1.8194|
;;;3445   /* Start critical section that any interruption or error can cause cross-link */
;;;3446             res = dir_register(&djn);     /* Register the new entry */
001f48  a809              ADD      r0,sp,#0x24
001f4a  f7fffffe          BL       dir_register
001f4e  4605              MOV      r5,r0
;;;3447             if (res == FR_OK) {
001f50  2d00              CMP      r5,#0
001f52  d156              BNE      |L1.8194|
;;;3448               dir = djn.dir;          /* Copy object information except for name */
001f54  9c0e              LDR      r4,[sp,#0x38]
;;;3449               mem_cpy(dir+13, buf+2, 19);
001f56  2213              MOVS     r2,#0x13
001f58  f10d010e          ADD      r1,sp,#0xe
001f5c  f104000d          ADD      r0,r4,#0xd
001f60  f7fffffe          BL       mem_cpy
;;;3450               dir[DIR_Attr] = buf[0] | AM_ARC;
001f64  f89d000c          LDRB     r0,[sp,#0xc]
001f68  f0400020          ORR      r0,r0,#0x20
001f6c  72e0              STRB     r0,[r4,#0xb]
;;;3451               djo.fs->wflag = 1;
001f6e  2001              MOVS     r0,#1
001f70  9910              LDR      r1,[sp,#0x40]
001f72  7108              STRB     r0,[r1,#4]
;;;3452               if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {   /* Update .. entry in the directory if needed */
001f74  990b              LDR      r1,[sp,#0x2c]
001f76  9812              LDR      r0,[sp,#0x48]
001f78  4288              CMP      r0,r1
001f7a  d038              BEQ      |L1.8174|
001f7c  7ae0              LDRB     r0,[r4,#0xb]
001f7e  f0100f10          TST      r0,#0x10
001f82  d034              BEQ      |L1.8174|
;;;3453                 dw = clust2sect(djn.fs, LD_CLUST(dir));
001f84  7ea3              LDRB     r3,[r4,#0x1a]
001f86  7ee2              LDRB     r2,[r4,#0x1b]
001f88  ea432302          ORR      r3,r3,r2,LSL #8
001f8c  f894c014          LDRB     r12,[r4,#0x14]
001f90  7d62              LDRB     r2,[r4,#0x15]
001f92  ea4c2202          ORR      r2,r12,r2,LSL #8
001f96  ea434102          ORR      r1,r3,r2,LSL #16
001f9a  9809              LDR      r0,[sp,#0x24]
001f9c  f7fffffe          BL       clust2sect
001fa0  4606              MOV      r6,r0
;;;3454                 if (!dw) {
001fa2  b90e              CBNZ     r6,|L1.8104|
;;;3455                   res = FR_INT_ERR;
001fa4  2502              MOVS     r5,#2
001fa6  e022              B        |L1.8174|
                  |L1.8104|
;;;3456                 } else {
;;;3457                   res = move_window(djn.fs, dw);
001fa8  4631              MOV      r1,r6
001faa  9809              LDR      r0,[sp,#0x24]
001fac  f7fffffe          BL       move_window
001fb0  4605              MOV      r5,r0
;;;3458                   dir = djn.fs->win+SZ_DIR; /* .. entry */
001fb2  9809              LDR      r0,[sp,#0x24]
001fb4  f1000454          ADD      r4,r0,#0x54
;;;3459                   if (res == FR_OK && dir[1] == '.') {
001fb8  b9cd              CBNZ     r5,|L1.8174|
001fba  7860              LDRB     r0,[r4,#1]
001fbc  282e              CMP      r0,#0x2e
001fbe  d116              BNE      |L1.8174|
;;;3460                     dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
001fc0  9809              LDR      r0,[sp,#0x24]
001fc2  7800              LDRB     r0,[r0,#0]
001fc4  2803              CMP      r0,#3
001fc6  d106              BNE      |L1.8150|
001fc8  9909              LDR      r1,[sp,#0x24]
001fca  980b              LDR      r0,[sp,#0x2c]
001fcc  6a89              LDR      r1,[r1,#0x28]
001fce  4288              CMP      r0,r1
001fd0  d101              BNE      |L1.8150|
001fd2  2000              MOVS     r0,#0
001fd4  e000              B        |L1.8152|
                  |L1.8150|
001fd6  980b              LDR      r0,[sp,#0x2c]
                  |L1.8152|
001fd8  4606              MOV      r6,r0
;;;3461                     ST_CLUST(dir, dw);
001fda  76a6              STRB     r6,[r4,#0x1a]
001fdc  0a31              LSRS     r1,r6,#8
001fde  76e1              STRB     r1,[r4,#0x1b]
001fe0  0c30              LSRS     r0,r6,#16
001fe2  7520              STRB     r0,[r4,#0x14]
001fe4  0e31              LSRS     r1,r6,#24
001fe6  7561              STRB     r1,[r4,#0x15]
;;;3462                     djn.fs->wflag = 1;
001fe8  2001              MOVS     r0,#1
001fea  9909              LDR      r1,[sp,#0x24]
001fec  7108              STRB     r0,[r1,#4]
                  |L1.8174|
;;;3463                   }
;;;3464                 }
;;;3465               }
;;;3466               if (res == FR_OK) {
001fee  b945              CBNZ     r5,|L1.8194|
;;;3467                 res = dir_remove(&djo);   /* Remove old entry */
001ff0  a810              ADD      r0,sp,#0x40
001ff2  f7fffffe          BL       dir_remove
001ff6  4605              MOV      r5,r0
;;;3468                 if (res == FR_OK)
001ff8  b91d              CBNZ     r5,|L1.8194|
;;;3469                   res = sync(djo.fs);
001ffa  9810              LDR      r0,[sp,#0x40]
001ffc  f7fffffe          BL       sync
002000  4605              MOV      r5,r0
                  |L1.8194|
;;;3470               }
;;;3471             }
;;;3472   /* End critical section */
;;;3473           }
;;;3474         }
;;;3475       }
;;;3476       FREE_BUF();
;;;3477     }
;;;3478     LEAVE_FF(djo.fs, res);
002002  4628              MOV      r0,r5
;;;3479   }
002004  b019              ADD      sp,sp,#0x64
002006  bdf0              POP      {r4-r7,pc}
;;;3480   
                          ENDP

                  f_mkfs PROC
;;;3555   
;;;3556   FRESULT f_mkfs (
002008  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3557     BYTE drv,   /* Logical drive number */
;;;3558     BYTE sfd,   /* Partitioning rule 0:FDISK, 1:SFD */
;;;3559     UINT au     /* Allocation unit size [bytes] */
;;;3560   )
;;;3561   {
00200c  b08e              SUB      sp,sp,#0x38
00200e  4691              MOV      r9,r2
;;;3562     static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
;;;3563     static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
;;;3564     BYTE fmt, md, sys, *tbl, pdrv, part;
;;;3565     DWORD n_clst, vs, n, wsect;
;;;3566     UINT i;
;;;3567     DWORD b_vol, b_fat, b_dir, b_data;  /* LBA */
;;;3568     DWORD n_vol, n_rsv, n_fat, n_dir; /* Size */
;;;3569     FATFS *fs;
;;;3570     DSTATUS stat;
;;;3571   
;;;3572   
;;;3573     /* Check mounted drive and clear work area */
;;;3574     if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
002010  980e              LDR      r0,[sp,#0x38]
002012  2801              CMP      r0,#1
002014  db03              BLT      |L1.8222|
002016  200b              MOVS     r0,#0xb
                  |L1.8216|
;;;3575     if (sfd > 1) return FR_INVALID_PARAMETER;
;;;3576     if (au & (au - 1)) return FR_INVALID_PARAMETER;
;;;3577     fs = FatFs[drv];
;;;3578     if (!fs) return FR_NOT_ENABLED;
;;;3579     fs->fs_type = 0;
;;;3580     pdrv = LD2PD(drv);  /* Physical drive */
;;;3581     part = LD2PT(drv);  /* Partition (0:auto detect, 1-4:get from partition table)*/
;;;3582   
;;;3583     /* Get disk statics */
;;;3584     stat = disk_initialize(pdrv);
;;;3585     if (stat & STA_NOINIT) return FR_NOT_READY;
;;;3586     if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;3587   #if _MAX_SS != 512          /* Get disk sector size */
;;;3588     if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
;;;3589       return FR_DISK_ERR;
;;;3590   #endif
;;;3591     if (_MULTI_PARTITION && part) {
;;;3592       /* Get partition information from partition table in the MBR */
;;;3593       if (disk_read(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
;;;3594       if (LD_WORD(fs->win+BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
;;;3595       tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;3596       if (!tbl[4]) return FR_MKFS_ABORTED;  /* No partition? */
;;;3597       b_vol = LD_DWORD(tbl+8);  /* Volume start sector */
;;;3598       n_vol = LD_DWORD(tbl+12); /* Volume size */
;;;3599     } else {
;;;3600       /* Create a partition in this function */
;;;3601       if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
;;;3602         return FR_DISK_ERR;
;;;3603       b_vol = (sfd) ? 0 : 63;   /* Volume start sector */
;;;3604       n_vol -= b_vol;       /* Volume size */
;;;3605     }
;;;3606   
;;;3607     if (!au) {        /* AU auto selection */
;;;3608       vs = n_vol / (2000 / (SS(fs) / 512));
;;;3609       for (i = 0; vs < vst[i]; i++) ;
;;;3610       au = cst[i];
;;;3611     }
;;;3612     au /= SS(fs);   /* Number of sectors per cluster */
;;;3613     if (au == 0) au = 1;
;;;3614     if (au > 128) au = 128;
;;;3615   
;;;3616     /* Pre-compute number of clusters and FAT syb-type */
;;;3617     n_clst = n_vol / au;
;;;3618     fmt = FS_FAT12;
;;;3619     if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
;;;3620     if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
;;;3621   
;;;3622     /* Determine offset and size of FAT structure */
;;;3623     if (fmt == FS_FAT32) {
;;;3624       n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;3625       n_rsv = 32;
;;;3626       n_dir = 0;
;;;3627     } else {
;;;3628       n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
;;;3629       n_fat = (n_fat + SS(fs) - 1) / SS(fs);
;;;3630       n_rsv = 1;
;;;3631       n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
;;;3632     }
;;;3633     b_fat = b_vol + n_rsv;        /* FAT area start sector */
;;;3634     b_dir = b_fat + n_fat * N_FATS;   /* Directory area start sector */
;;;3635     b_data = b_dir + n_dir;       /* Data area start sector */
;;;3636     if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;  /* Too small volume */
;;;3637   
;;;3638     /* Align data start sector to erase block boundary (for flash memory media) */
;;;3639     if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
;;;3640     n = (b_data + n - 1) & ~(n - 1);  /* Next nearest erase block from current data start */
;;;3641     n = (n - b_data) / N_FATS;
;;;3642     if (fmt == FS_FAT32) {    /* FAT32: Move FAT offset */
;;;3643       n_rsv += n;
;;;3644       b_fat += n;
;;;3645     } else {          /* FAT12/16: Expand FAT size */
;;;3646       n_fat += n;
;;;3647     }
;;;3648   
;;;3649     /* Determine number of clusters and final check of validity of the FAT sub-type */
;;;3650     n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
;;;3651     if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
;;;3652       || (fmt == FS_FAT32 && n_clst < MIN_FAT32))
;;;3653       return FR_MKFS_ABORTED;
;;;3654   
;;;3655     switch (fmt) {  /* Determine system ID for partition table */
;;;3656     case FS_FAT12:  sys = 0x01; break;
;;;3657     case FS_FAT16:  sys = (n_vol < 0x10000) ? 0x04 : 0x06; break;
;;;3658     default:    sys = 0x0C;
;;;3659     }
;;;3660   
;;;3661     if (_MULTI_PARTITION && part) {
;;;3662       /* Update system ID in the partition table */
;;;3663       tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;3664       tbl[4] = sys;
;;;3665       if (disk_write(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
;;;3666       md = 0xF8;
;;;3667     } else {
;;;3668       if (sfd) {  /* No patition table (SFD) */
;;;3669         md = 0xF0;
;;;3670       } else {  /* Create partition table (FDISK) */
;;;3671         mem_set(fs->win, 0, SS(fs));
;;;3672         tbl = fs->win+MBR_Table;  /* Create partiton table for single partition in the drive */
;;;3673         tbl[1] = 1;           /* Partition start head */
;;;3674         tbl[2] = 1;           /* Partition start sector */
;;;3675         tbl[3] = 0;           /* Partition start cylinder */
;;;3676         tbl[4] = sys;         /* System type */
;;;3677         tbl[5] = 254;         /* Partition end head */
;;;3678         n = (b_vol + n_vol) / 63 / 255;
;;;3679         tbl[6] = (BYTE)((n >> 2) | 63); /* Partiiton end sector */
;;;3680         tbl[7] = (BYTE)n;       /* End cylinder */
;;;3681         ST_DWORD(tbl+8, 63);      /* Partition start in LBA */
;;;3682         ST_DWORD(tbl+12, n_vol);    /* Partition size in LBA */
;;;3683         ST_WORD(fs->win+BS_55AA, 0xAA55); /* MBR signature */
;;;3684         if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)  /* Write it to the MBR sector */
;;;3685           return FR_DISK_ERR;
;;;3686         md = 0xF8;
;;;3687       }
;;;3688     }
;;;3689   
;;;3690     /* Create BPB in the VBR */
;;;3691     tbl = fs->win;              /* Clear sector */
;;;3692     mem_set(tbl, 0, SS(fs));
;;;3693     mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
;;;3694     i = SS(fs);               /* Sector size */
;;;3695     ST_WORD(tbl+BPB_BytsPerSec, i);
;;;3696     tbl[BPB_SecPerClus] = (BYTE)au;     /* Sectors per cluster */
;;;3697     ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);   /* Reserved sectors */
;;;3698     tbl[BPB_NumFATs] = N_FATS;        /* Number of FATs */
;;;3699     i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;  /* Number of rootdir entries */
;;;3700     ST_WORD(tbl+BPB_RootEntCnt, i);
;;;3701     if (n_vol < 0x10000) {          /* Number of total sectors */
;;;3702       ST_WORD(tbl+BPB_TotSec16, n_vol);
;;;3703     } else {
;;;3704       ST_DWORD(tbl+BPB_TotSec32, n_vol);
;;;3705     }
;;;3706     tbl[BPB_Media] = md;          /* Media descriptor */
;;;3707     ST_WORD(tbl+BPB_SecPerTrk, 63);     /* Number of sectors per track */
;;;3708     ST_WORD(tbl+BPB_NumHeads, 255);     /* Number of heads */
;;;3709     ST_DWORD(tbl+BPB_HiddSec, b_vol);   /* Hidden sectors */
;;;3710     n = get_fattime();            /* Use current time as VSN */
;;;3711     if (fmt == FS_FAT32) {
;;;3712       ST_DWORD(tbl+BS_VolID32, n);    /* VSN */
;;;3713       ST_DWORD(tbl+BPB_FATSz32, n_fat); /* Number of sectors per FAT */
;;;3714       ST_DWORD(tbl+BPB_RootClus, 2);    /* Root directory start cluster (2) */
;;;3715       ST_WORD(tbl+BPB_FSInfo, 1);     /* FSInfo record offset (VBR+1) */
;;;3716       ST_WORD(tbl+BPB_BkBootSec, 6);    /* Backup boot record offset (VBR+6) */
;;;3717       tbl[BS_DrvNum32] = 0x80;      /* Drive number */
;;;3718       tbl[BS_BootSig32] = 0x29;     /* Extended boot signature */
;;;3719       mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19); /* Volume label, FAT signature */
;;;3720     } else {
;;;3721       ST_DWORD(tbl+BS_VolID, n);      /* VSN */
;;;3722       ST_WORD(tbl+BPB_FATSz16, n_fat);  /* Number of sectors per FAT */
;;;3723       tbl[BS_DrvNum] = 0x80;        /* Drive number */
;;;3724       tbl[BS_BootSig] = 0x29;       /* Extended boot signature */
;;;3725       mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature */
;;;3726     }
;;;3727     ST_WORD(tbl+BS_55AA, 0xAA55);     /* Signature (Offset is fixed here regardless of sector size) */
;;;3728     if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)  /* Write it to the VBR sector */
;;;3729       return FR_DISK_ERR;
;;;3730     if (fmt == FS_FAT32)              /* Write backup VBR if needed (VBR+6) */
;;;3731       disk_write(pdrv, tbl, b_vol + 6, 1);
;;;3732   
;;;3733     /* Initialize FAT area */
;;;3734     wsect = b_fat;
;;;3735     for (i = 0; i < N_FATS; i++) {    /* Initialize each FAT copy */
;;;3736       mem_set(tbl, 0, SS(fs));      /* 1st sector of the FAT  */
;;;3737       n = md;               /* Media descriptor byte */
;;;3738       if (fmt != FS_FAT32) {
;;;3739         n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;3740         ST_DWORD(tbl+0, n);       /* Reserve cluster #0-1 (FAT12/16) */
;;;3741       } else {
;;;3742         n |= 0xFFFFFF00;
;;;3743         ST_DWORD(tbl+0, n);       /* Reserve cluster #0-1 (FAT32) */
;;;3744         ST_DWORD(tbl+4, 0xFFFFFFFF);
;;;3745         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
;;;3746       }
;;;3747       if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;3748         return FR_DISK_ERR;
;;;3749       mem_set(tbl, 0, SS(fs));      /* Fill following FAT entries with zero */
;;;3750       for (n = 1; n < n_fat; n++) {   /* This loop may take a time on FAT32 volume due to many single sector writes */
;;;3751         if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;3752           return FR_DISK_ERR;
;;;3753       }
;;;3754     }
;;;3755   
;;;3756     /* Initialize root directory */
;;;3757     i = (fmt == FS_FAT32) ? au : n_dir;
;;;3758     do {
;;;3759       if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;3760         return FR_DISK_ERR;
;;;3761     } while (--i);
;;;3762   
;;;3763   #if _USE_ERASE  /* Erase data area if needed */
;;;3764     {
;;;3765       DWORD eb[2];
;;;3766   
;;;3767       eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
;;;3768       disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
;;;3769     }
;;;3770   #endif
;;;3771   
;;;3772     /* Create FSInfo if needed */
;;;3773     if (fmt == FS_FAT32) {
;;;3774       ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
;;;3775       ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
;;;3776       ST_DWORD(tbl+FSI_Free_Count, n_clst - 1); /* Number of free clusters */
;;;3777       ST_DWORD(tbl+FSI_Nxt_Free, 2);        /* Last allocated cluster# */
;;;3778       ST_WORD(tbl+BS_55AA, 0xAA55);
;;;3779       disk_write(pdrv, tbl, b_vol + 1, 1);  /* Write original (VBR+1) */
;;;3780       disk_write(pdrv, tbl, b_vol + 7, 1);  /* Write backup (VBR+7) */
;;;3781     }
;;;3782   
;;;3783     return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;3784   }
002018  b011              ADD      sp,sp,#0x44
00201a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.8222|
00201e  980f              LDR      r0,[sp,#0x3c]         ;3575
002020  2801              CMP      r0,#1                 ;3575
002022  dd01              BLE      |L1.8232|
002024  2013              MOVS     r0,#0x13              ;3575
002026  e7f7              B        |L1.8216|
                  |L1.8232|
002028  f1a90001          SUB      r0,r9,#1              ;3576
00202c  ea100f09          TST      r0,r9                 ;3576
002030  d001              BEQ      |L1.8246|
002032  2013              MOVS     r0,#0x13              ;3576
002034  e7f0              B        |L1.8216|
                  |L1.8246|
002036  49fe              LDR      r1,|L1.9264|
002038  980e              LDR      r0,[sp,#0x38]         ;3577
00203a  f851b020          LDR      r11,[r1,r0,LSL #2]    ;3577
00203e  f1bb0f00          CMP      r11,#0                ;3578
002042  d101              BNE      |L1.8264|
002044  200c              MOVS     r0,#0xc               ;3578
002046  e7e7              B        |L1.8216|
                  |L1.8264|
002048  2000              MOVS     r0,#0                 ;3579
00204a  f88b0000          STRB     r0,[r11,#0]           ;3579
00204e  980e              LDR      r0,[sp,#0x38]         ;3580
002050  900b              STR      r0,[sp,#0x2c]         ;3580
002052  2000              MOVS     r0,#0                 ;3581
002054  900a              STR      r0,[sp,#0x28]         ;3581
002056  980b              LDR      r0,[sp,#0x2c]         ;3584
002058  f7fffffe          BL       disk_initialize
00205c  9000              STR      r0,[sp,#0]            ;3584
00205e  9800              LDR      r0,[sp,#0]            ;3585
002060  f0100f01          TST      r0,#1                 ;3585
002064  d001              BEQ      |L1.8298|
002066  2003              MOVS     r0,#3                 ;3585
002068  e7d6              B        |L1.8216|
                  |L1.8298|
00206a  9800              LDR      r0,[sp,#0]            ;3586
00206c  f0100f04          TST      r0,#4                 ;3586
002070  d001              BEQ      |L1.8310|
002072  200a              MOVS     r0,#0xa               ;3586
002074  e7d0              B        |L1.8216|
                  |L1.8310|
002076  bf00              NOP                            ;3591
002078  aa03              ADD      r2,sp,#0xc            ;3601
00207a  2101              MOVS     r1,#1                 ;3601
00207c  980b              LDR      r0,[sp,#0x2c]         ;3601
00207e  f7fffffe          BL       disk_ioctl
002082  b910              CBNZ     r0,|L1.8330|
002084  9803              LDR      r0,[sp,#0xc]          ;3601
002086  2880              CMP      r0,#0x80              ;3601
002088  d201              BCS      |L1.8334|
                  |L1.8330|
00208a  2001              MOVS     r0,#1                 ;3602
00208c  e7c4              B        |L1.8216|
                  |L1.8334|
00208e  980f              LDR      r0,[sp,#0x3c]         ;3603
002090  b108              CBZ      r0,|L1.8342|
002092  2000              MOVS     r0,#0                 ;3603
002094  e000              B        |L1.8344|
                  |L1.8342|
002096  203f              MOVS     r0,#0x3f              ;3603
                  |L1.8344|
002098  4680              MOV      r8,r0                 ;3603
00209a  9803              LDR      r0,[sp,#0xc]          ;3604
00209c  eba00008          SUB      r0,r0,r8              ;3604
0020a0  9003              STR      r0,[sp,#0xc]          ;3604
0020a2  f1b90f00          CMP      r9,#0                 ;3607
0020a6  d113              BNE      |L1.8400|
0020a8  f44f61fa          MOV      r1,#0x7d0             ;3608
0020ac  9803              LDR      r0,[sp,#0xc]          ;3608
0020ae  fbb0f0f1          UDIV     r0,r0,r1              ;3608
0020b2  9009              STR      r0,[sp,#0x24]         ;3608
0020b4  f04f0a00          MOV      r10,#0                ;3609
0020b8  e001              B        |L1.8382|
                  |L1.8378|
0020ba  f10a0a01          ADD      r10,r10,#1            ;3609
                  |L1.8382|
0020be  48dd              LDR      r0,|L1.9268|
0020c0  f830101a          LDRH     r1,[r0,r10,LSL #1]    ;3609
0020c4  9809              LDR      r0,[sp,#0x24]         ;3609
0020c6  4281              CMP      r1,r0                 ;3609
0020c8  d8f7              BHI      |L1.8378|
0020ca  48db              LDR      r0,|L1.9272|
0020cc  f830901a          LDRH     r9,[r0,r10,LSL #1]    ;3610
                  |L1.8400|
0020d0  ea4f2959          LSR      r9,r9,#9              ;3612
0020d4  f1b90f00          CMP      r9,#0                 ;3613
0020d8  d101              BNE      |L1.8414|
0020da  f04f0901          MOV      r9,#1                 ;3613
                  |L1.8414|
0020de  f1b90f80          CMP      r9,#0x80              ;3614
0020e2  d901              BLS      |L1.8424|
0020e4  f04f0980          MOV      r9,#0x80              ;3614
                  |L1.8424|
0020e8  9803              LDR      r0,[sp,#0xc]          ;3617
0020ea  fbb0f7f9          UDIV     r7,r0,r9              ;3617
0020ee  2501              MOVS     r5,#1                 ;3618
0020f0  f64070f6          MOV      r0,#0xff6             ;3619
0020f4  4287              CMP      r7,r0                 ;3619
0020f6  d300              BCC      |L1.8442|
0020f8  2502              MOVS     r5,#2                 ;3619
                  |L1.8442|
0020fa  f64f70f6          MOV      r0,#0xfff6            ;3620
0020fe  4287              CMP      r7,r0                 ;3620
002100  d300              BCC      |L1.8452|
002102  2503              MOVS     r5,#3                 ;3620
                  |L1.8452|
002104  2d03              CMP      r5,#3                 ;3623
002106  d10a              BNE      |L1.8478|
002108  2008              MOVS     r0,#8                 ;3624
00210a  eb000087          ADD      r0,r0,r7,LSL #2       ;3624
00210e  f20010ff          ADD      r0,r0,#0x1ff          ;3624
002112  0a46              LSRS     r6,r0,#9              ;3624
002114  2020              MOVS     r0,#0x20              ;3625
002116  9002              STR      r0,[sp,#8]            ;3625
002118  2000              MOVS     r0,#0                 ;3626
00211a  9001              STR      r0,[sp,#4]            ;3626
00211c  e011              B        |L1.8514|
                  |L1.8478|
00211e  2d01              CMP      r5,#1                 ;3628
002120  d105              BNE      |L1.8494|
002122  eb070047          ADD      r0,r7,r7,LSL #1       ;3628
002126  1c40              ADDS     r0,r0,#1              ;3628
002128  0840              LSRS     r0,r0,#1              ;3628
00212a  1cc0              ADDS     r0,r0,#3              ;3628
00212c  e001              B        |L1.8498|
                  |L1.8494|
00212e  0078              LSLS     r0,r7,#1              ;3628
002130  1d00              ADDS     r0,r0,#4              ;3628
                  |L1.8498|
002132  4606              MOV      r6,r0                 ;3628
002134  f20610ff          ADD      r0,r6,#0x1ff          ;3629
002138  0a46              LSRS     r6,r0,#9              ;3629
00213a  2001              MOVS     r0,#1                 ;3630
00213c  9002              STR      r0,[sp,#8]            ;3630
00213e  2020              MOVS     r0,#0x20              ;3631
002140  9001              STR      r0,[sp,#4]            ;3631
                  |L1.8514|
002142  9802              LDR      r0,[sp,#8]            ;3633
002144  4440              ADD      r0,r0,r8              ;3633
002146  9006              STR      r0,[sp,#0x18]         ;3633
002148  9806              LDR      r0,[sp,#0x18]         ;3634
00214a  4430              ADD      r0,r0,r6              ;3634
00214c  9005              STR      r0,[sp,#0x14]         ;3634
00214e  9901              LDR      r1,[sp,#4]            ;3635
002150  9805              LDR      r0,[sp,#0x14]         ;3635
002152  4408              ADD      r0,r0,r1              ;3635
002154  9004              STR      r0,[sp,#0x10]         ;3635
002156  9804              LDR      r0,[sp,#0x10]         ;3636
002158  4448              ADD      r0,r0,r9              ;3636
00215a  eba00008          SUB      r0,r0,r8              ;3636
00215e  9903              LDR      r1,[sp,#0xc]          ;3636
002160  4288              CMP      r0,r1                 ;3636
002162  d901              BLS      |L1.8552|
002164  200e              MOVS     r0,#0xe               ;3636
002166  e757              B        |L1.8216|
                  |L1.8552|
002168  aa08              ADD      r2,sp,#0x20           ;3639
00216a  2103              MOVS     r1,#3                 ;3639
00216c  980b              LDR      r0,[sp,#0x2c]         ;3639
00216e  f7fffffe          BL       disk_ioctl
002172  b928              CBNZ     r0,|L1.8576|
002174  9808              LDR      r0,[sp,#0x20]         ;3639
002176  b118              CBZ      r0,|L1.8576|
002178  9808              LDR      r0,[sp,#0x20]         ;3639
00217a  f5b04f00          CMP      r0,#0x8000            ;3639
00217e  d901              BLS      |L1.8580|
                  |L1.8576|
002180  2001              MOVS     r0,#1                 ;3639
002182  9008              STR      r0,[sp,#0x20]         ;3639
                  |L1.8580|
002184  9908              LDR      r1,[sp,#0x20]         ;3640
002186  9804              LDR      r0,[sp,#0x10]         ;3640
002188  4408              ADD      r0,r0,r1              ;3640
00218a  1e40              SUBS     r0,r0,#1              ;3640
00218c  1e49              SUBS     r1,r1,#1              ;3640
00218e  4388              BICS     r0,r0,r1              ;3640
002190  9008              STR      r0,[sp,#0x20]         ;3640
002192  9908              LDR      r1,[sp,#0x20]         ;3641
002194  9804              LDR      r0,[sp,#0x10]         ;3641
002196  1a08              SUBS     r0,r1,r0              ;3641
002198  9008              STR      r0,[sp,#0x20]         ;3641
00219a  2d03              CMP      r5,#3                 ;3642
00219c  d108              BNE      |L1.8624|
00219e  9908              LDR      r1,[sp,#0x20]         ;3643
0021a0  9802              LDR      r0,[sp,#8]            ;3643
0021a2  4408              ADD      r0,r0,r1              ;3643
0021a4  9002              STR      r0,[sp,#8]            ;3643
0021a6  9908              LDR      r1,[sp,#0x20]         ;3644
0021a8  9806              LDR      r0,[sp,#0x18]         ;3644
0021aa  4408              ADD      r0,r0,r1              ;3644
0021ac  9006              STR      r0,[sp,#0x18]         ;3644
0021ae  e001              B        |L1.8628|
                  |L1.8624|
0021b0  9808              LDR      r0,[sp,#0x20]         ;3646
0021b2  4406              ADD      r6,r6,r0              ;3646
                  |L1.8628|
0021b4  e9dd0102          LDRD     r0,r1,[sp,#8]         ;3650
0021b8  1a08              SUBS     r0,r1,r0              ;3650
0021ba  1b81              SUBS     r1,r0,r6              ;3650
0021bc  9801              LDR      r0,[sp,#4]            ;3650
0021be  1a08              SUBS     r0,r1,r0              ;3650
0021c0  fbb0f7f9          UDIV     r7,r0,r9              ;3650
0021c4  2d02              CMP      r5,#2                 ;3651
0021c6  d103              BNE      |L1.8656|
0021c8  f64070f6          MOV      r0,#0xff6             ;3651
0021cc  4287              CMP      r7,r0                 ;3651
0021ce  d305              BCC      |L1.8668|
                  |L1.8656|
0021d0  2d03              CMP      r5,#3                 ;3652
0021d2  d105              BNE      |L1.8672|
0021d4  f64f70f6          MOV      r0,#0xfff6            ;3652
0021d8  4287              CMP      r7,r0                 ;3652
0021da  d201              BCS      |L1.8672|
                  |L1.8668|
0021dc  200e              MOVS     r0,#0xe               ;3653
0021de  e71b              B        |L1.8216|
                  |L1.8672|
0021e0  2d01              CMP      r5,#1                 ;3655
0021e2  d002              BEQ      |L1.8682|
0021e4  2d02              CMP      r5,#2                 ;3655
0021e6  d10c              BNE      |L1.8706|
0021e8  e002              B        |L1.8688|
                  |L1.8682|
0021ea  2001              MOVS     r0,#1                 ;3656
0021ec  900c              STR      r0,[sp,#0x30]         ;3656
0021ee  e00b              B        |L1.8712|
                  |L1.8688|
0021f0  9803              LDR      r0,[sp,#0xc]          ;3657
0021f2  f5b03f80          CMP      r0,#0x10000           ;3657
0021f6  d201              BCS      |L1.8700|
0021f8  2004              MOVS     r0,#4                 ;3657
0021fa  e000              B        |L1.8702|
                  |L1.8700|
0021fc  2006              MOVS     r0,#6                 ;3657
                  |L1.8702|
0021fe  900c              STR      r0,[sp,#0x30]         ;3657
002200  e002              B        |L1.8712|
                  |L1.8706|
002202  200c              MOVS     r0,#0xc               ;3658
002204  900c              STR      r0,[sp,#0x30]         ;3658
002206  bf00              NOP                            ;3655
                  |L1.8712|
002208  bf00              NOP                            ;3656
00220a  bf00              NOP                            ;3661
00220c  980f              LDR      r0,[sp,#0x3c]         ;3668
00220e  b110              CBZ      r0,|L1.8726|
002210  20f0              MOVS     r0,#0xf0              ;3669
002212  900d              STR      r0,[sp,#0x34]         ;3669
002214  e044              B        |L1.8864|
                  |L1.8726|
002216  f44f7200          MOV      r2,#0x200             ;3671
00221a  2100              MOVS     r1,#0                 ;3671
00221c  f10b0034          ADD      r0,r11,#0x34          ;3671
002220  f7fffffe          BL       mem_set
002224  f50b74f9          ADD      r4,r11,#0x1f2         ;3672
002228  2001              MOVS     r0,#1                 ;3673
00222a  7060              STRB     r0,[r4,#1]            ;3673
00222c  70a0              STRB     r0,[r4,#2]            ;3674
00222e  2000              MOVS     r0,#0                 ;3675
002230  70e0              STRB     r0,[r4,#3]            ;3675
002232  980c              LDR      r0,[sp,#0x30]         ;3676
002234  7120              STRB     r0,[r4,#4]            ;3676
002236  20fe              MOVS     r0,#0xfe              ;3677
002238  7160              STRB     r0,[r4,#5]            ;3677
00223a  9803              LDR      r0,[sp,#0xc]          ;3678
00223c  4440              ADD      r0,r0,r8              ;3678
00223e  213f              MOVS     r1,#0x3f              ;3678
002240  fbb0f0f1          UDIV     r0,r0,r1              ;3678
002244  21ff              MOVS     r1,#0xff              ;3678
002246  fbb0f0f1          UDIV     r0,r0,r1              ;3678
00224a  9008              STR      r0,[sp,#0x20]         ;3678
00224c  213f              MOVS     r1,#0x3f              ;3679
00224e  9808              LDR      r0,[sp,#0x20]         ;3679
002250  ea410090          ORR      r0,r1,r0,LSR #2       ;3679
002254  71a0              STRB     r0,[r4,#6]            ;3679
002256  9808              LDR      r0,[sp,#0x20]         ;3680
002258  71e0              STRB     r0,[r4,#7]            ;3680
00225a  203f              MOVS     r0,#0x3f              ;3681
00225c  7220              STRB     r0,[r4,#8]            ;3681
00225e  2100              MOVS     r1,#0                 ;3681
002260  7261              STRB     r1,[r4,#9]            ;3681
002262  72a1              STRB     r1,[r4,#0xa]          ;3681
002264  72e1              STRB     r1,[r4,#0xb]          ;3681
002266  9803              LDR      r0,[sp,#0xc]          ;3682
002268  7320              STRB     r0,[r4,#0xc]          ;3682
00226a  9803              LDR      r0,[sp,#0xc]          ;3682
00226c  0a01              LSRS     r1,r0,#8              ;3682
00226e  7361              STRB     r1,[r4,#0xd]          ;3682
002270  9803              LDR      r0,[sp,#0xc]          ;3682
002272  0c01              LSRS     r1,r0,#16             ;3682
002274  73a1              STRB     r1,[r4,#0xe]          ;3682
002276  9803              LDR      r0,[sp,#0xc]          ;3682
002278  0e01              LSRS     r1,r0,#24             ;3682
00227a  73e1              STRB     r1,[r4,#0xf]          ;3682
00227c  2155              MOVS     r1,#0x55              ;3683
00227e  f88b1232          STRB     r1,[r11,#0x232]       ;3683
002282  21aa              MOVS     r1,#0xaa              ;3683
002284  f88b1233          STRB     r1,[r11,#0x233]       ;3683
002288  2301              MOVS     r3,#1                 ;3684
00228a  2200              MOVS     r2,#0                 ;3684
00228c  f10b0134          ADD      r1,r11,#0x34          ;3684
002290  980b              LDR      r0,[sp,#0x2c]         ;3684
002292  f7fffffe          BL       disk_write
002296  b108              CBZ      r0,|L1.8860|
002298  2001              MOVS     r0,#1                 ;3685
00229a  e6bd              B        |L1.8216|
                  |L1.8860|
00229c  20f8              MOVS     r0,#0xf8              ;3686
00229e  900d              STR      r0,[sp,#0x34]         ;3686
                  |L1.8864|
0022a0  f10b0434          ADD      r4,r11,#0x34          ;3691
0022a4  f44f7200          MOV      r2,#0x200             ;3692
0022a8  2100              MOVS     r1,#0                 ;3692
0022aa  4620              MOV      r0,r4                 ;3692
0022ac  f7fffffe          BL       mem_set
0022b0  220b              MOVS     r2,#0xb               ;3693
0022b2  a162              ADR      r1,|L1.9276|
0022b4  4620              MOV      r0,r4                 ;3693
0022b6  f7fffffe          BL       mem_cpy
0022ba  f44f7a00          MOV      r10,#0x200            ;3694
0022be  f884a00b          STRB     r10,[r4,#0xb]         ;3695
0022c2  ea4f211a          LSR      r1,r10,#8             ;3695
0022c6  7321              STRB     r1,[r4,#0xc]          ;3695
0022c8  f884900d          STRB     r9,[r4,#0xd]          ;3696
0022cc  9802              LDR      r0,[sp,#8]            ;3697
0022ce  73a0              STRB     r0,[r4,#0xe]          ;3697
0022d0  9802              LDR      r0,[sp,#8]            ;3697
0022d2  0a01              LSRS     r1,r0,#8              ;3697
0022d4  73e1              STRB     r1,[r4,#0xf]          ;3697
0022d6  2001              MOVS     r0,#1                 ;3698
0022d8  7420              STRB     r0,[r4,#0x10]         ;3698
0022da  2d03              CMP      r5,#3                 ;3699
0022dc  d101              BNE      |L1.8930|
0022de  2000              MOVS     r0,#0                 ;3699
0022e0  e001              B        |L1.8934|
                  |L1.8930|
0022e2  f44f7000          MOV      r0,#0x200             ;3699
                  |L1.8934|
0022e6  4682              MOV      r10,r0                ;3699
0022e8  f884a011          STRB     r10,[r4,#0x11]        ;3700
0022ec  ea4f211a          LSR      r1,r10,#8             ;3700
0022f0  74a1              STRB     r1,[r4,#0x12]         ;3700
0022f2  9803              LDR      r0,[sp,#0xc]          ;3701
0022f4  f5b03f80          CMP      r0,#0x10000           ;3701
0022f8  d205              BCS      |L1.8966|
0022fa  9803              LDR      r0,[sp,#0xc]          ;3702
0022fc  74e0              STRB     r0,[r4,#0x13]         ;3702
0022fe  9803              LDR      r0,[sp,#0xc]          ;3702
002300  0a01              LSRS     r1,r0,#8              ;3702
002302  7521              STRB     r1,[r4,#0x14]         ;3702
002304  e010              B        |L1.9000|
                  |L1.8966|
002306  9803              LDR      r0,[sp,#0xc]          ;3704
002308  f8840020          STRB     r0,[r4,#0x20]         ;3704
00230c  9803              LDR      r0,[sp,#0xc]          ;3704
00230e  f3c02107          UBFX     r1,r0,#8,#8           ;3704
002312  2021              MOVS     r0,#0x21              ;3704
002314  5501              STRB     r1,[r0,r4]            ;3704
002316  9803              LDR      r0,[sp,#0xc]          ;3704
002318  f3c04107          UBFX     r1,r0,#16,#8          ;3704
00231c  2022              MOVS     r0,#0x22              ;3704
00231e  5501              STRB     r1,[r0,r4]            ;3704
002320  9803              LDR      r0,[sp,#0xc]          ;3704
002322  0e01              LSRS     r1,r0,#24             ;3704
002324  2023              MOVS     r0,#0x23              ;3704
002326  5501              STRB     r1,[r0,r4]            ;3704
                  |L1.9000|
002328  980d              LDR      r0,[sp,#0x34]         ;3706
00232a  7560              STRB     r0,[r4,#0x15]         ;3706
00232c  203f              MOVS     r0,#0x3f              ;3707
00232e  7620              STRB     r0,[r4,#0x18]         ;3707
002330  2100              MOVS     r1,#0                 ;3707
002332  7661              STRB     r1,[r4,#0x19]         ;3707
002334  20ff              MOVS     r0,#0xff              ;3708
002336  76a0              STRB     r0,[r4,#0x1a]         ;3708
002338  76e1              STRB     r1,[r4,#0x1b]         ;3708
00233a  f884801c          STRB     r8,[r4,#0x1c]         ;3709
00233e  ea4f2118          LSR      r1,r8,#8              ;3709
002342  7761              STRB     r1,[r4,#0x1d]         ;3709
002344  ea4f4118          LSR      r1,r8,#16             ;3709
002348  77a1              STRB     r1,[r4,#0x1e]         ;3709
00234a  ea4f6118          LSR      r1,r8,#24             ;3709
00234e  77e1              STRB     r1,[r4,#0x1f]         ;3709
002350  f7fffffe          BL       get_fattime
002354  9008              STR      r0,[sp,#0x20]         ;3710
002356  2d03              CMP      r5,#3                 ;3711
002358  d13e              BNE      |L1.9176|
00235a  9808              LDR      r0,[sp,#0x20]         ;3712
00235c  f8840043          STRB     r0,[r4,#0x43]         ;3712
002360  9808              LDR      r0,[sp,#0x20]         ;3712
002362  f3c02107          UBFX     r1,r0,#8,#8           ;3712
002366  2044              MOVS     r0,#0x44              ;3712
002368  5501              STRB     r1,[r0,r4]            ;3712
00236a  9808              LDR      r0,[sp,#0x20]         ;3712
00236c  f3c04107          UBFX     r1,r0,#16,#8          ;3712
002370  2045              MOVS     r0,#0x45              ;3712
002372  5501              STRB     r1,[r0,r4]            ;3712
002374  9808              LDR      r0,[sp,#0x20]         ;3712
002376  0e01              LSRS     r1,r0,#24             ;3712
002378  2046              MOVS     r0,#0x46              ;3712
00237a  5501              STRB     r1,[r0,r4]            ;3712
00237c  f8846024          STRB     r6,[r4,#0x24]         ;3713
002380  f3c62107          UBFX     r1,r6,#8,#8           ;3713
002384  2025              MOVS     r0,#0x25              ;3713
002386  5501              STRB     r1,[r0,r4]            ;3713
002388  f3c64107          UBFX     r1,r6,#16,#8          ;3713
00238c  2026              MOVS     r0,#0x26              ;3713
00238e  5501              STRB     r1,[r0,r4]            ;3713
002390  0e31              LSRS     r1,r6,#24             ;3713
002392  2027              MOVS     r0,#0x27              ;3713
002394  5501              STRB     r1,[r0,r4]            ;3713
002396  2002              MOVS     r0,#2                 ;3714
002398  f884002c          STRB     r0,[r4,#0x2c]         ;3714
00239c  2100              MOVS     r1,#0                 ;3714
00239e  202d              MOVS     r0,#0x2d              ;3714
0023a0  5501              STRB     r1,[r0,r4]            ;3714
0023a2  202e              MOVS     r0,#0x2e              ;3714
0023a4  5501              STRB     r1,[r0,r4]            ;3714
0023a6  202f              MOVS     r0,#0x2f              ;3714
0023a8  5501              STRB     r1,[r0,r4]            ;3714
0023aa  2001              MOVS     r0,#1                 ;3715
0023ac  f8840030          STRB     r0,[r4,#0x30]         ;3715
0023b0  2031              MOVS     r0,#0x31              ;3715
0023b2  5501              STRB     r1,[r0,r4]            ;3715
0023b4  2006              MOVS     r0,#6                 ;3716
0023b6  f8840032          STRB     r0,[r4,#0x32]         ;3716
0023ba  2033              MOVS     r0,#0x33              ;3716
0023bc  5501              STRB     r1,[r0,r4]            ;3716
0023be  2080              MOVS     r0,#0x80              ;3717
0023c0  f8840040          STRB     r0,[r4,#0x40]         ;3717
0023c4  2029              MOVS     r0,#0x29              ;3718
0023c6  f8840042          STRB     r0,[r4,#0x42]         ;3718
0023ca  2213              MOVS     r2,#0x13              ;3719
0023cc  a11e              ADR      r1,|L1.9288|
0023ce  f1040047          ADD      r0,r4,#0x47           ;3719
0023d2  f7fffffe          BL       mem_cpy
0023d6  e01f              B        |L1.9240|
                  |L1.9176|
0023d8  9808              LDR      r0,[sp,#0x20]         ;3721
0023da  f8840027          STRB     r0,[r4,#0x27]         ;3721
0023de  9808              LDR      r0,[sp,#0x20]         ;3721
0023e0  f3c02107          UBFX     r1,r0,#8,#8           ;3721
0023e4  2028              MOVS     r0,#0x28              ;3721
0023e6  5501              STRB     r1,[r0,r4]            ;3721
0023e8  9808              LDR      r0,[sp,#0x20]         ;3721
0023ea  f3c04107          UBFX     r1,r0,#16,#8          ;3721
0023ee  2029              MOVS     r0,#0x29              ;3721
0023f0  5501              STRB     r1,[r0,r4]            ;3721
0023f2  9808              LDR      r0,[sp,#0x20]         ;3721
0023f4  0e01              LSRS     r1,r0,#24             ;3721
0023f6  202a              MOVS     r0,#0x2a              ;3721
0023f8  5501              STRB     r1,[r0,r4]            ;3721
0023fa  75a6              STRB     r6,[r4,#0x16]         ;3722
0023fc  0a31              LSRS     r1,r6,#8              ;3722
0023fe  75e1              STRB     r1,[r4,#0x17]         ;3722
002400  2080              MOVS     r0,#0x80              ;3723
002402  f8840024          STRB     r0,[r4,#0x24]         ;3723
002406  2029              MOVS     r0,#0x29              ;3724
002408  f8840026          STRB     r0,[r4,#0x26]         ;3724
00240c  2213              MOVS     r2,#0x13              ;3725
00240e  a113              ADR      r1,|L1.9308|
002410  f104002b          ADD      r0,r4,#0x2b           ;3725
002414  f7fffffe          BL       mem_cpy
                  |L1.9240|
002418  2055              MOVS     r0,#0x55              ;3727
00241a  f88401fe          STRB     r0,[r4,#0x1fe]        ;3727
00241e  21aa              MOVS     r1,#0xaa              ;3727
002420  f24010ff          MOV      r0,#0x1ff             ;3727
002424  5501              STRB     r1,[r0,r4]            ;3727
002426  2301              MOVS     r3,#1                 ;3728
002428  4642              MOV      r2,r8                 ;3728
00242a  4621              MOV      r1,r4                 ;3728
00242c  980b              LDR      r0,[sp,#0x2c]         ;3728
00242e  e01f              B        |L1.9328|
                  |L1.9264|
                          DCD      FatFs
                  |L1.9268|
                          DCD      vst
                  |L1.9272|
                          DCD      ||cst||
                  |L1.9276|
00243c  ebfe904d          DCB      235,254,144,"MSDOS5.0",0
002440  53444f53
002444  352e3000
                  |L1.9288|
002448  4e4f204e          DCB      "NO NAME    FAT32   ",0
00244c  414d4520
002450  20202046
002454  41543332
002458  20202000
                  |L1.9308|
00245c  4e4f204e          DCB      "NO NAME    FAT     ",0
002460  414d4520
002464  20202046
002468  41542020
00246c  20202000
                  |L1.9328|
002470  f7fffffe          BL       disk_write
002474  b108              CBZ      r0,|L1.9338|
002476  2001              MOVS     r0,#1                 ;3729
002478  e5ce              B        |L1.8216|
                  |L1.9338|
00247a  2d03              CMP      r5,#3                 ;3730
00247c  d106              BNE      |L1.9356|
00247e  2301              MOVS     r3,#1                 ;3731
002480  f1080206          ADD      r2,r8,#6              ;3731
002484  4621              MOV      r1,r4                 ;3731
002486  980b              LDR      r0,[sp,#0x2c]         ;3731
002488  f7fffffe          BL       disk_write
                  |L1.9356|
00248c  9806              LDR      r0,[sp,#0x18]         ;3734
00248e  9007              STR      r0,[sp,#0x1c]         ;3734
002490  f04f0a00          MOV      r10,#0                ;3735
002494  e061              B        |L1.9562|
                  |L1.9366|
002496  f44f7200          MOV      r2,#0x200             ;3736
00249a  2100              MOVS     r1,#0                 ;3736
00249c  4620              MOV      r0,r4                 ;3736
00249e  f7fffffe          BL       mem_set
0024a2  980d              LDR      r0,[sp,#0x34]         ;3737
0024a4  9008              STR      r0,[sp,#0x20]         ;3737
0024a6  2d03              CMP      r5,#3                 ;3738
0024a8  d014              BEQ      |L1.9428|
0024aa  2d01              CMP      r5,#1                 ;3739
0024ac  d101              BNE      |L1.9394|
0024ae  48fe              LDR      r0,|L1.10408|
0024b0  e001              B        |L1.9398|
                  |L1.9394|
0024b2  f06f00ff          MVN      r0,#0xff              ;3739
                  |L1.9398|
0024b6  9908              LDR      r1,[sp,#0x20]         ;3739
0024b8  4308              ORRS     r0,r0,r1              ;3739
0024ba  9008              STR      r0,[sp,#0x20]         ;3739
0024bc  9808              LDR      r0,[sp,#0x20]         ;3740
0024be  7020              STRB     r0,[r4,#0]            ;3740
0024c0  9808              LDR      r0,[sp,#0x20]         ;3740
0024c2  0a00              LSRS     r0,r0,#8              ;3740
0024c4  7060              STRB     r0,[r4,#1]            ;3740
0024c6  9808              LDR      r0,[sp,#0x20]         ;3740
0024c8  0c00              LSRS     r0,r0,#16             ;3740
0024ca  70a0              STRB     r0,[r4,#2]            ;3740
0024cc  9808              LDR      r0,[sp,#0x20]         ;3740
0024ce  0e00              LSRS     r0,r0,#24             ;3740
0024d0  70e0              STRB     r0,[r4,#3]            ;3740
0024d2  e019              B        |L1.9480|
                  |L1.9428|
0024d4  9808              LDR      r0,[sp,#0x20]         ;3742
0024d6  f06000ff          ORN      r0,r0,#0xff           ;3742
0024da  9008              STR      r0,[sp,#0x20]         ;3742
0024dc  9808              LDR      r0,[sp,#0x20]         ;3743
0024de  7020              STRB     r0,[r4,#0]            ;3743
0024e0  9808              LDR      r0,[sp,#0x20]         ;3743
0024e2  0a00              LSRS     r0,r0,#8              ;3743
0024e4  7060              STRB     r0,[r4,#1]            ;3743
0024e6  9808              LDR      r0,[sp,#0x20]         ;3743
0024e8  0c00              LSRS     r0,r0,#16             ;3743
0024ea  70a0              STRB     r0,[r4,#2]            ;3743
0024ec  9808              LDR      r0,[sp,#0x20]         ;3743
0024ee  0e00              LSRS     r0,r0,#24             ;3743
0024f0  70e0              STRB     r0,[r4,#3]            ;3743
0024f2  20ff              MOVS     r0,#0xff              ;3744
0024f4  7120              STRB     r0,[r4,#4]            ;3744
0024f6  21ff              MOVS     r1,#0xff              ;3744
0024f8  7161              STRB     r1,[r4,#5]            ;3744
0024fa  71a1              STRB     r1,[r4,#6]            ;3744
0024fc  71e1              STRB     r1,[r4,#7]            ;3744
0024fe  7220              STRB     r0,[r4,#8]            ;3745
002500  7261              STRB     r1,[r4,#9]            ;3745
002502  72a1              STRB     r1,[r4,#0xa]          ;3745
002504  210f              MOVS     r1,#0xf               ;3745
002506  72e1              STRB     r1,[r4,#0xb]          ;3745
                  |L1.9480|
002508  9807              LDR      r0,[sp,#0x1c]         ;3747
00250a  1c41              ADDS     r1,r0,#1              ;3747
00250c  4602              MOV      r2,r0                 ;3747
00250e  2301              MOVS     r3,#1                 ;3747
002510  9107              STR      r1,[sp,#0x1c]         ;3747
002512  4621              MOV      r1,r4                 ;3747
002514  980b              LDR      r0,[sp,#0x2c]         ;3747
002516  f7fffffe          BL       disk_write
00251a  b108              CBZ      r0,|L1.9504|
00251c  2001              MOVS     r0,#1                 ;3748
00251e  e57b              B        |L1.8216|
                  |L1.9504|
002520  f44f7200          MOV      r2,#0x200             ;3749
002524  2100              MOVS     r1,#0                 ;3749
002526  4620              MOV      r0,r4                 ;3749
002528  f7fffffe          BL       mem_set
00252c  2001              MOVS     r0,#1                 ;3750
00252e  9008              STR      r0,[sp,#0x20]         ;3750
002530  e00e              B        |L1.9552|
                  |L1.9522|
002532  9807              LDR      r0,[sp,#0x1c]         ;3751
002534  1c41              ADDS     r1,r0,#1              ;3751
002536  4602              MOV      r2,r0                 ;3751
002538  2301              MOVS     r3,#1                 ;3751
00253a  9107              STR      r1,[sp,#0x1c]         ;3751
00253c  4621              MOV      r1,r4                 ;3751
00253e  980b              LDR      r0,[sp,#0x2c]         ;3751
002540  f7fffffe          BL       disk_write
002544  b108              CBZ      r0,|L1.9546|
002546  2001              MOVS     r0,#1                 ;3752
002548  e566              B        |L1.8216|
                  |L1.9546|
00254a  9808              LDR      r0,[sp,#0x20]         ;3750
00254c  1c40              ADDS     r0,r0,#1              ;3750
00254e  9008              STR      r0,[sp,#0x20]         ;3750
                  |L1.9552|
002550  9808              LDR      r0,[sp,#0x20]         ;3750
002552  42b0              CMP      r0,r6                 ;3750
002554  d3ed              BCC      |L1.9522|
002556  f10a0a01          ADD      r10,r10,#1            ;3735
                  |L1.9562|
00255a  f1ba0f00          CMP      r10,#0                ;3735
00255e  d09a              BEQ      |L1.9366|
002560  2d03              CMP      r5,#3                 ;3757
002562  d101              BNE      |L1.9576|
002564  4648              MOV      r0,r9                 ;3757
002566  e000              B        |L1.9578|
                  |L1.9576|
002568  9801              LDR      r0,[sp,#4]            ;3757
                  |L1.9578|
00256a  4682              MOV      r10,r0                ;3757
00256c  bf00              NOP                            ;3758
                  |L1.9582|
00256e  9807              LDR      r0,[sp,#0x1c]         ;3759
002570  1c41              ADDS     r1,r0,#1              ;3759
002572  4602              MOV      r2,r0                 ;3759
002574  2301              MOVS     r3,#1                 ;3759
002576  9107              STR      r1,[sp,#0x1c]         ;3759
002578  4621              MOV      r1,r4                 ;3759
00257a  980b              LDR      r0,[sp,#0x2c]         ;3759
00257c  f7fffffe          BL       disk_write
002580  b108              CBZ      r0,|L1.9606|
002582  2001              MOVS     r0,#1                 ;3760
002584  e548              B        |L1.8216|
                  |L1.9606|
002586  f1aa0001          SUB      r0,r10,#1             ;3761
00258a  ea5f0a00          MOVS     r10,r0                ;3761
00258e  d1ee              BNE      |L1.9582|
002590  2d03              CMP      r5,#3                 ;3773
002592  d146              BNE      |L1.9762|
002594  2052              MOVS     r0,#0x52              ;3774
002596  7020              STRB     r0,[r4,#0]            ;3774
002598  7060              STRB     r0,[r4,#1]            ;3774
00259a  2061              MOVS     r0,#0x61              ;3774
00259c  70a0              STRB     r0,[r4,#2]            ;3774
00259e  2041              MOVS     r0,#0x41              ;3774
0025a0  70e0              STRB     r0,[r4,#3]            ;3774
0025a2  2072              MOVS     r0,#0x72              ;3775
0025a4  f88401e4          STRB     r0,[r4,#0x1e4]        ;3775
0025a8  2172              MOVS     r1,#0x72              ;3775
0025aa  f24010e5          MOV      r0,#0x1e5             ;3775
0025ae  5501              STRB     r1,[r0,r4]            ;3775
0025b0  2141              MOVS     r1,#0x41              ;3775
0025b2  1c40              ADDS     r0,r0,#1              ;3775
0025b4  5501              STRB     r1,[r0,r4]            ;3775
0025b6  2161              MOVS     r1,#0x61              ;3775
0025b8  1c40              ADDS     r0,r0,#1              ;3775
0025ba  5501              STRB     r1,[r0,r4]            ;3775
0025bc  1e78              SUBS     r0,r7,#1              ;3776
0025be  f88401e8          STRB     r0,[r4,#0x1e8]        ;3776
0025c2  f3c02107          UBFX     r1,r0,#8,#8           ;3776
0025c6  f24010e9          MOV      r0,#0x1e9             ;3776
0025ca  5501              STRB     r1,[r0,r4]            ;3776
0025cc  1e78              SUBS     r0,r7,#1              ;3776
0025ce  f3c04107          UBFX     r1,r0,#16,#8          ;3776
0025d2  f44f70f5          MOV      r0,#0x1ea             ;3776
0025d6  5501              STRB     r1,[r0,r4]            ;3776
0025d8  1e78              SUBS     r0,r7,#1              ;3776
0025da  0e01              LSRS     r1,r0,#24             ;3776
0025dc  f24010eb          MOV      r0,#0x1eb             ;3776
0025e0  5501              STRB     r1,[r0,r4]            ;3776
0025e2  2002              MOVS     r0,#2                 ;3777
0025e4  f88401ec          STRB     r0,[r4,#0x1ec]        ;3777
0025e8  2100              MOVS     r1,#0                 ;3777
0025ea  f24010ed          MOV      r0,#0x1ed             ;3777
0025ee  5501              STRB     r1,[r0,r4]            ;3777
0025f0  1c40              ADDS     r0,r0,#1              ;3777
0025f2  5501              STRB     r1,[r0,r4]            ;3777
0025f4  1c40              ADDS     r0,r0,#1              ;3777
0025f6  5501              STRB     r1,[r0,r4]            ;3777
0025f8  2055              MOVS     r0,#0x55              ;3778
0025fa  f88401fe          STRB     r0,[r4,#0x1fe]        ;3778
0025fe  21aa              MOVS     r1,#0xaa              ;3778
002600  f24010ff          MOV      r0,#0x1ff             ;3778
002604  5501              STRB     r1,[r0,r4]            ;3778
002606  2301              MOVS     r3,#1                 ;3779
002608  f1080201          ADD      r2,r8,#1              ;3779
00260c  4621              MOV      r1,r4                 ;3779
00260e  980b              LDR      r0,[sp,#0x2c]         ;3779
002610  f7fffffe          BL       disk_write
002614  2301              MOVS     r3,#1                 ;3780
002616  f1080207          ADD      r2,r8,#7              ;3780
00261a  4621              MOV      r1,r4                 ;3780
00261c  980b              LDR      r0,[sp,#0x2c]         ;3780
00261e  f7fffffe          BL       disk_write
                  |L1.9762|
002622  2200              MOVS     r2,#0                 ;3783
002624  4611              MOV      r1,r2                 ;3783
002626  980b              LDR      r0,[sp,#0x2c]         ;3783
002628  f7fffffe          BL       disk_ioctl
00262c  b108              CBZ      r0,|L1.9778|
00262e  2001              MOVS     r0,#1                 ;3783
002630  e4f2              B        |L1.8216|
                  |L1.9778|
002632  2000              MOVS     r0,#0                 ;3783
002634  e4f0              B        |L1.8216|
;;;3785   
                          ENDP

                  f_gets PROC
;;;3863   /*-----------------------------------------------------------------------*/
;;;3864   TCHAR* f_gets (
002636  e92d47fc          PUSH     {r2-r10,lr}
;;;3865     TCHAR* buff,  /* Pointer to the string buffer to read */
;;;3866     int len,    /* Size of string buffer (characters) */
;;;3867     FIL* fil    /* Pointer to the file object */
;;;3868   )
;;;3869   {
00263a  4607              MOV      r7,r0
00263c  4688              MOV      r8,r1
00263e  4691              MOV      r9,r2
;;;3870     int n = 0;
002640  2400              MOVS     r4,#0
;;;3871     TCHAR c, *p = buff;
002642  463e              MOV      r6,r7
;;;3872     BYTE s[2];
;;;3873     UINT rc;
;;;3874   
;;;3875   
;;;3876     while (n < len - 1) {     /* Read bytes until buffer gets filled */
002644  e012              B        |L1.9836|
                  |L1.9798|
;;;3877       f_read(fil, s, 1, &rc);
002646  466b              MOV      r3,sp
002648  2201              MOVS     r2,#1
00264a  a901              ADD      r1,sp,#4
00264c  4648              MOV      r0,r9
00264e  f7fffffe          BL       f_read
;;;3878       if (rc != 1) break;     /* Break on EOF or error */
002652  9800              LDR      r0,[sp,#0]
002654  2801              CMP      r0,#1
002656  d000              BEQ      |L1.9818|
002658  e00c              B        |L1.9844|
                  |L1.9818|
;;;3879       c = s[0];
00265a  f89d0004          LDRB     r0,[sp,#4]
00265e  b245              SXTB     r5,r0
;;;3880   #if _LFN_UNICODE          /* Read a character in UTF-8 encoding */
;;;3881       if (c >= 0x80) {
;;;3882         if (c < 0xC0) continue; /* Skip stray trailer */
;;;3883         if (c < 0xE0) {     /* Two-byte sequense */
;;;3884           f_read(fil, s, 1, &rc);
;;;3885           if (rc != 1) break;
;;;3886           c = ((c & 0x1F) << 6) | (s[0] & 0x3F);
;;;3887           if (c < 0x80) c = '?';
;;;3888         } else {
;;;3889           if (c < 0xF0) {   /* Three-byte sequense */
;;;3890             f_read(fil, s, 2, &rc);
;;;3891             if (rc != 2) break;
;;;3892             c = (c << 12) | ((s[0] & 0x3F) << 6) | (s[1] & 0x3F);
;;;3893             if (c < 0x800) c = '?';
;;;3894           } else {      /* Reject four-byte sequense */
;;;3895             c = '?';
;;;3896           }
;;;3897         }
;;;3898       }
;;;3899   #endif
;;;3900   #if _USE_STRFUNC >= 2
;;;3901       if (c == '\r') continue;  /* Strip '\r' */
;;;3902   #endif
;;;3903       *p++ = c;
002660  f8065b01          STRB     r5,[r6],#1
;;;3904       n++;
002664  1c64              ADDS     r4,r4,#1
;;;3905       if (c == '\n') break;   /* Break on EOL */
002666  2d0a              CMP      r5,#0xa
002668  d100              BNE      |L1.9836|
00266a  e003              B        |L1.9844|
                  |L1.9836|
00266c  f1a80001          SUB      r0,r8,#1              ;3876
002670  42a0              CMP      r0,r4                 ;3876
002672  dce8              BGT      |L1.9798|
                  |L1.9844|
002674  bf00              NOP                            ;3878
;;;3906     }
;;;3907     *p = 0;
002676  2000              MOVS     r0,#0
002678  7030              STRB     r0,[r6,#0]
;;;3908     return n ? buff : 0;      /* When no data read (eof or error), return with error. */
00267a  b114              CBZ      r4,|L1.9858|
00267c  4638              MOV      r0,r7
                  |L1.9854|
;;;3909   }
00267e  e8bd87fc          POP      {r2-r10,pc}
                  |L1.9858|
002682  2000              MOVS     r0,#0                 ;3908
002684  e7fb              B        |L1.9854|
;;;3910   
                          ENDP

                  f_putc PROC
;;;3917   /*-----------------------------------------------------------------------*/
;;;3918   int f_putc (
002686  b57c              PUSH     {r2-r6,lr}
;;;3919     TCHAR c,  /* A character to be output */
;;;3920     FIL* fil  /* Pointer to the file object */
;;;3921   )
;;;3922   {
002688  4604              MOV      r4,r0
00268a  460d              MOV      r5,r1
;;;3923     UINT bw, btw;
;;;3924     BYTE s[3];
;;;3925   
;;;3926   
;;;3927   #if _USE_STRFUNC >= 2
;;;3928     if (c == '\n') f_putc ('\r', fil);  /* LF -> CRLF conversion */
;;;3929   #endif
;;;3930   
;;;3931   #if _LFN_UNICODE  /* Write the character in UTF-8 encoding */
;;;3932     if (c < 0x80) {     /* 7-bit */
;;;3933       s[0] = (BYTE)c;
;;;3934       btw = 1;
;;;3935     } else {
;;;3936       if (c < 0x800) {  /* 11-bit */
;;;3937         s[0] = (BYTE)(0xC0 | (c >> 6));
;;;3938         s[1] = (BYTE)(0x80 | (c & 0x3F));
;;;3939         btw = 2;
;;;3940       } else {      /* 16-bit */
;;;3941         s[0] = (BYTE)(0xE0 | (c >> 12));
;;;3942         s[1] = (BYTE)(0x80 | ((c >> 6) & 0x3F));
;;;3943         s[2] = (BYTE)(0x80 | (c & 0x3F));
;;;3944         btw = 3;
;;;3945       }
;;;3946     }
;;;3947   #else       /* Write the character without conversion */
;;;3948     s[0] = (BYTE)c;
00268c  b2e0              UXTB     r0,r4
00268e  f88d0000          STRB     r0,[sp,#0]
;;;3949     btw = 1;
002692  2601              MOVS     r6,#1
;;;3950   #endif
;;;3951     f_write(fil, s, btw, &bw);    /* Write the char to the file */
002694  ab01              ADD      r3,sp,#4
002696  4632              MOV      r2,r6
002698  4669              MOV      r1,sp
00269a  4628              MOV      r0,r5
00269c  f7fffffe          BL       f_write
;;;3952     return (bw == btw) ? 1 : EOF; /* Return the result */
0026a0  9801              LDR      r0,[sp,#4]
0026a2  42b0              CMP      r0,r6
0026a4  d100              BNE      |L1.9896|
                  |L1.9894|
;;;3953   }
0026a6  bd7c              POP      {r2-r6,pc}
                  |L1.9896|
0026a8  f04f30ff          MOV      r0,#0xffffffff        ;3952
0026ac  e7fb              B        |L1.9894|
;;;3954   
                          ENDP

                  f_puts PROC
;;;3960   /*-----------------------------------------------------------------------*/
;;;3961   int f_puts (
0026ae  b570              PUSH     {r4-r6,lr}
;;;3962     const TCHAR* str, /* Pointer to the string to be output */
;;;3963     FIL* fil      /* Pointer to the file object */
;;;3964   )
;;;3965   {
0026b0  4604              MOV      r4,r0
0026b2  460e              MOV      r6,r1
;;;3966     int n;
;;;3967   
;;;3968   
;;;3969     for (n = 0; *str; str++, n++) {
0026b4  2500              MOVS     r5,#0
0026b6  e00a              B        |L1.9934|
                  |L1.9912|
;;;3970       if (f_putc(*str, fil) == EOF) return EOF;
0026b8  f9940000          LDRSB    r0,[r4,#0]
0026bc  4631              MOV      r1,r6
0026be  f7fffffe          BL       f_putc
0026c2  1c40              ADDS     r0,r0,#1
0026c4  d101              BNE      |L1.9930|
0026c6  1e40              SUBS     r0,r0,#1
                  |L1.9928|
;;;3971     }
;;;3972     return n;
;;;3973   }
0026c8  bd70              POP      {r4-r6,pc}
                  |L1.9930|
0026ca  1c64              ADDS     r4,r4,#1              ;3969
0026cc  1c6d              ADDS     r5,r5,#1              ;3969
                  |L1.9934|
0026ce  7820              LDRB     r0,[r4,#0]            ;3969
0026d0  2800              CMP      r0,#0                 ;3969
0026d2  d1f1              BNE      |L1.9912|
0026d4  4628              MOV      r0,r5                 ;3972
0026d6  e7f7              B        |L1.9928|
;;;3974   
                          ENDP

                  f_printf PROC
;;;3980   /*-----------------------------------------------------------------------*/
;;;3981   int f_printf (
0026d8  b40f              PUSH     {r0-r3}
;;;3982     FIL* fil,     /* Pointer to the file object */
;;;3983     const TCHAR* str, /* Pointer to the format string */
;;;3984     ...         /* Optional arguments... */
;;;3985   )
;;;3986   {
0026da  e92d4ff0          PUSH     {r4-r11,lr}
0026de  b089              SUB      sp,sp,#0x24
;;;3987     va_list arp;
;;;3988     BYTE f, r;
;;;3989     UINT i, j, w;
;;;3990     ULONG v;
;;;3991     TCHAR c, d, s[16], *p;
;;;3992     int res, chc, cc;
;;;3993   
;;;3994   
;;;3995     va_start(arp, str);
0026e0  a814              ADD      r0,sp,#0x50
0026e2  9008              STR      r0,[sp,#0x20]
;;;3996   
;;;3997     for (cc = res = 0; cc != EOF; res += cc) {
0026e4  2000              MOVS     r0,#0
0026e6  4681              MOV      r9,r0
0026e8  9001              STR      r0,[sp,#4]
0026ea  e144              B        |L1.10614|
                  |L1.9964|
;;;3998       c = *str++;
0026ec  9813              LDR      r0,[sp,#0x4c]
0026ee  f9104b01          LDRSB    r4,[r0],#1
0026f2  9013              STR      r0,[sp,#0x4c]
;;;3999       if (c == 0) break;      /* End of string */
0026f4  b904              CBNZ     r4,|L1.9976|
0026f6  e142              B        |L1.10622|
                  |L1.9976|
;;;4000       if (c != '%') {       /* Non escape character */
0026f8  2c25              CMP      r4,#0x25
0026fa  d00a              BEQ      |L1.10002|
;;;4001         cc = f_putc(c, fil);
0026fc  4620              MOV      r0,r4
0026fe  9912              LDR      r1,[sp,#0x48]
002700  f7fffffe          BL       f_putc
002704  4681              MOV      r9,r0
;;;4002         if (cc != EOF) cc = 1;
002706  f1190001          ADDS     r0,r9,#1
00270a  d001              BEQ      |L1.10000|
00270c  f04f0901          MOV      r9,#1
                  |L1.10000|
;;;4003         continue;
002710  e12e              B        |L1.10608|
                  |L1.10002|
;;;4004       }
;;;4005       w = f = 0;
002712  2000              MOVS     r0,#0
002714  4606              MOV      r6,r0
002716  4682              MOV      r10,r0
;;;4006       c = *str++;
002718  9813              LDR      r0,[sp,#0x4c]
00271a  f9104b01          LDRSB    r4,[r0],#1
00271e  9013              STR      r0,[sp,#0x4c]
;;;4007       if (c == '0') {       /* Flag: '0' padding */
002720  2c30              CMP      r4,#0x30
002722  d105              BNE      |L1.10032|
;;;4008         f = 1; c = *str++;
002724  2601              MOVS     r6,#1
002726  9813              LDR      r0,[sp,#0x4c]
002728  f9104b01          LDRSB    r4,[r0],#1
00272c  9013              STR      r0,[sp,#0x4c]
00272e  e006              B        |L1.10046|
                  |L1.10032|
;;;4009       } else {
;;;4010         if (c == '-') {     /* Flag: left justified */
002730  2c2d              CMP      r4,#0x2d
002732  d104              BNE      |L1.10046|
;;;4011           f = 2; c = *str++;
002734  2602              MOVS     r6,#2
002736  9813              LDR      r0,[sp,#0x4c]
002738  f9104b01          LDRSB    r4,[r0],#1
00273c  9013              STR      r0,[sp,#0x4c]
                  |L1.10046|
;;;4012         }
;;;4013       }
;;;4014       while (IsDigit(c)) {    /* Precision */
00273e  e009              B        |L1.10068|
                  |L1.10048|
;;;4015         w = w * 10 + c - '0';
002740  eb0a008a          ADD      r0,r10,r10,LSL #2
002744  eb040040          ADD      r0,r4,r0,LSL #1
002748  f1a00a30          SUB      r10,r0,#0x30
;;;4016         c = *str++;
00274c  9813              LDR      r0,[sp,#0x4c]
00274e  f9104b01          LDRSB    r4,[r0],#1
002752  9013              STR      r0,[sp,#0x4c]
                  |L1.10068|
002754  2c30              CMP      r4,#0x30              ;4014
002756  db01              BLT      |L1.10076|
002758  2c39              CMP      r4,#0x39              ;4014
00275a  ddf1              BLE      |L1.10048|
                  |L1.10076|
;;;4017       }
;;;4018       if (c == 'l' || c == 'L') { /* Prefix: Size is long int */
00275c  2c6c              CMP      r4,#0x6c
00275e  d001              BEQ      |L1.10084|
002760  2c4c              CMP      r4,#0x4c
002762  d105              BNE      |L1.10096|
                  |L1.10084|
;;;4019         f |= 4; c = *str++;
002764  f0460604          ORR      r6,r6,#4
002768  9813              LDR      r0,[sp,#0x4c]
00276a  f9104b01          LDRSB    r4,[r0],#1
00276e  9013              STR      r0,[sp,#0x4c]
                  |L1.10096|
;;;4020       }
;;;4021       if (!c) break;
002770  b904              CBNZ     r4,|L1.10100|
002772  e104              B        |L1.10622|
                  |L1.10100|
;;;4022       d = c;
002774  4625              MOV      r5,r4
;;;4023       if (IsLower(d)) d -= 0x20;
002776  2d61              CMP      r5,#0x61
002778  db04              BLT      |L1.10116|
00277a  2d7a              CMP      r5,#0x7a
00277c  dc02              BGT      |L1.10116|
00277e  f1a50020          SUB      r0,r5,#0x20
002782  b245              SXTB     r5,r0
                  |L1.10116|
;;;4024       switch (d) {        /* Type is... */
002784  2d4f              CMP      r5,#0x4f
002786  d059              BEQ      |L1.10300|
002788  dc06              BGT      |L1.10136|
00278a  2d42              CMP      r5,#0x42
00278c  d053              BEQ      |L1.10294|
00278e  2d43              CMP      r5,#0x43
002790  d047              BEQ      |L1.10274|
002792  2d44              CMP      r5,#0x44
002794  d15c              BNE      |L1.10320|
002796  e054              B        |L1.10306|
                  |L1.10136|
002798  2d53              CMP      r5,#0x53
00279a  d004              BEQ      |L1.10150|
00279c  2d55              CMP      r5,#0x55
00279e  d051              BEQ      |L1.10308|
0027a0  2d58              CMP      r5,#0x58
0027a2  d155              BNE      |L1.10320|
0027a4  e051              B        |L1.10314|
                  |L1.10150|
;;;4025       case 'S' :          /* String */
;;;4026         p = va_arg(arp, TCHAR*);
0027a6  9808              LDR      r0,[sp,#0x20]
0027a8  6800              LDR      r0,[r0,#0]
0027aa  9002              STR      r0,[sp,#8]
0027ac  9808              LDR      r0,[sp,#0x20]
0027ae  1d00              ADDS     r0,r0,#4
0027b0  9008              STR      r0,[sp,#0x20]
;;;4027         for (j = 0; p[j]; j++) ;
0027b2  f04f0800          MOV      r8,#0
0027b6  e001              B        |L1.10172|
                  |L1.10168|
0027b8  f1080801          ADD      r8,r8,#1
                  |L1.10172|
0027bc  9802              LDR      r0,[sp,#8]
0027be  f8100008          LDRB     r0,[r0,r8]
0027c2  2800              CMP      r0,#0
0027c4  d1f8              BNE      |L1.10168|
;;;4028         chc = 0;
0027c6  9000              STR      r0,[sp,#0]
;;;4029         if (!(f & 2)) {
0027c8  f0160f02          TST      r6,#2
0027cc  d10d              BNE      |L1.10218|
;;;4030           while (j++ < w) chc += (cc = f_putc(' ', fil));
0027ce  e007              B        |L1.10208|
                  |L1.10192|
0027d0  2020              MOVS     r0,#0x20
0027d2  9912              LDR      r1,[sp,#0x48]
0027d4  f7fffffe          BL       f_putc
0027d8  4681              MOV      r9,r0
0027da  9900              LDR      r1,[sp,#0]
0027dc  4408              ADD      r0,r0,r1
0027de  9000              STR      r0,[sp,#0]
                  |L1.10208|
0027e0  4640              MOV      r0,r8
0027e2  f1080801          ADD      r8,r8,#1
0027e6  4550              CMP      r0,r10
0027e8  d3f2              BCC      |L1.10192|
                  |L1.10218|
;;;4031         }
;;;4032         chc += (cc = f_puts(p, fil));
0027ea  9912              LDR      r1,[sp,#0x48]
0027ec  9802              LDR      r0,[sp,#8]
0027ee  f7fffffe          BL       f_puts
0027f2  4681              MOV      r9,r0
0027f4  9900              LDR      r1,[sp,#0]
0027f6  4408              ADD      r0,r0,r1
0027f8  9000              STR      r0,[sp,#0]
;;;4033         while (j++ < w) chc += (cc = f_putc(' ', fil));
0027fa  e007              B        |L1.10252|
                  |L1.10236|
0027fc  2020              MOVS     r0,#0x20
0027fe  9912              LDR      r1,[sp,#0x48]
002800  f7fffffe          BL       f_putc
002804  4681              MOV      r9,r0
002806  9900              LDR      r1,[sp,#0]
002808  4408              ADD      r0,r0,r1
00280a  9000              STR      r0,[sp,#0]
                  |L1.10252|
00280c  4640              MOV      r0,r8
00280e  f1080801          ADD      r8,r8,#1
002812  4550              CMP      r0,r10
002814  d3f2              BCC      |L1.10236|
;;;4034         if (cc != EOF) cc = chc;
002816  f1190001          ADDS     r0,r9,#1
00281a  d001              BEQ      |L1.10272|
00281c  f8dd9000          LDR      r9,[sp,#0]
                  |L1.10272|
;;;4035         continue;
002820  e0a6              B        |L1.10608|
                  |L1.10274|
;;;4036       case 'C' :          /* Character */
;;;4037         cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
002822  9908              LDR      r1,[sp,#0x20]
002824  f8112b04          LDRB     r2,[r1],#4
002828  b250              SXTB     r0,r2
00282a  9108              STR      r1,[sp,#0x20]
00282c  9912              LDR      r1,[sp,#0x48]
00282e  f7fffffe          BL       f_putc
002832  4681              MOV      r9,r0
002834  e09c              B        |L1.10608|
                  |L1.10294|
;;;4038       case 'B' :          /* Binary */
;;;4039         r = 2; break;
002836  2002              MOVS     r0,#2
002838  9007              STR      r0,[sp,#0x1c]
00283a  e00f              B        |L1.10332|
                  |L1.10300|
;;;4040       case 'O' :          /* Octal */
;;;4041         r = 8; break;
00283c  2008              MOVS     r0,#8
00283e  9007              STR      r0,[sp,#0x1c]
002840  e00c              B        |L1.10332|
                  |L1.10306|
;;;4042       case 'D' :          /* Signed decimal */
;;;4043       case 'U' :          /* Unsigned decimal */
002842  bf00              NOP      
                  |L1.10308|
;;;4044         r = 10; break;
002844  200a              MOVS     r0,#0xa
002846  9007              STR      r0,[sp,#0x1c]
002848  e008              B        |L1.10332|
                  |L1.10314|
;;;4045       case 'X' :          /* Hexdecimal */
;;;4046         r = 16; break;
00284a  2010              MOVS     r0,#0x10
00284c  9007              STR      r0,[sp,#0x1c]
00284e  e005              B        |L1.10332|
                  |L1.10320|
;;;4047       default:          /* Unknown type (passthrough) */
;;;4048         cc = f_putc(c, fil); continue;
002850  4620              MOV      r0,r4
002852  9912              LDR      r1,[sp,#0x48]
002854  f7fffffe          BL       f_putc
002858  4681              MOV      r9,r0
00285a  e089              B        |L1.10608|
                  |L1.10332|
00285c  bf00              NOP                            ;4039
;;;4049       }
;;;4050   
;;;4051       /* Get an argument and put it in numeral */
;;;4052       v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
00285e  f0160f04          TST      r6,#4
002862  d005              BEQ      |L1.10352|
002864  9808              LDR      r0,[sp,#0x20]
002866  6800              LDR      r0,[r0,#0]
002868  9908              LDR      r1,[sp,#0x20]
00286a  1d09              ADDS     r1,r1,#4
00286c  9108              STR      r1,[sp,#0x20]
00286e  e00c              B        |L1.10378|
                  |L1.10352|
002870  2d44              CMP      r5,#0x44
002872  d105              BNE      |L1.10368|
002874  9808              LDR      r0,[sp,#0x20]
002876  6800              LDR      r0,[r0,#0]
002878  9908              LDR      r1,[sp,#0x20]
00287a  1d09              ADDS     r1,r1,#4
00287c  9108              STR      r1,[sp,#0x20]
00287e  e004              B        |L1.10378|
                  |L1.10368|
002880  9808              LDR      r0,[sp,#0x20]
002882  6800              LDR      r0,[r0,#0]
002884  9908              LDR      r1,[sp,#0x20]
002886  1d09              ADDS     r1,r1,#4
002888  9108              STR      r1,[sp,#0x20]
                  |L1.10378|
00288a  4683              MOV      r11,r0
;;;4053       if (d == 'D' && (v & 0x80000000)) {
00288c  2d44              CMP      r5,#0x44
00288e  d106              BNE      |L1.10398|
002890  f01b4f00          TST      r11,#0x80000000
002894  d003              BEQ      |L1.10398|
;;;4054         v = 0 - v;
002896  f1cb0b00          RSB      r11,r11,#0
;;;4055         f |= 8;
00289a  f0460608          ORR      r6,r6,#8
                  |L1.10398|
;;;4056       }
;;;4057       i = 0;
00289e  2700              MOVS     r7,#0
;;;4058       do {
0028a0  bf00              NOP      
                  |L1.10402|
;;;4059         d = (TCHAR)(v % r); v /= r;
0028a2  9807              LDR      r0,[sp,#0x1c]
0028a4  e002              B        |L1.10412|
0028a6  0000              DCW      0x0000
                  |L1.10408|
                          DCD      0x00ffff00
                  |L1.10412|
0028ac  fbbbf1f0          UDIV     r1,r11,r0
0028b0  fb00b011          MLS      r0,r0,r1,r11
0028b4  b245              SXTB     r5,r0
0028b6  9807              LDR      r0,[sp,#0x1c]
0028b8  fbbbfbf0          UDIV     r11,r11,r0
;;;4060         if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
0028bc  2d09              CMP      r5,#9
0028be  dd06              BLE      |L1.10446|
0028c0  2c78              CMP      r4,#0x78
0028c2  d101              BNE      |L1.10440|
0028c4  2027              MOVS     r0,#0x27
0028c6  e000              B        |L1.10442|
                  |L1.10440|
0028c8  2007              MOVS     r0,#7
                  |L1.10442|
0028ca  4428              ADD      r0,r0,r5
0028cc  b245              SXTB     r5,r0
                  |L1.10446|
;;;4061         s[i++] = d + '0';
0028ce  f1050030          ADD      r0,r5,#0x30
0028d2  b242              SXTB     r2,r0
0028d4  4638              MOV      r0,r7
0028d6  1c7f              ADDS     r7,r7,#1
0028d8  a903              ADD      r1,sp,#0xc
0028da  540a              STRB     r2,[r1,r0]
;;;4062       } while (v && i < sizeof(s) / sizeof(s[0]));
0028dc  f1bb0f00          CMP      r11,#0
0028e0  d001              BEQ      |L1.10470|
0028e2  2f10              CMP      r7,#0x10
0028e4  d3dd              BCC      |L1.10402|
                  |L1.10470|
;;;4063       if (f & 8) s[i++] = '-';
0028e6  f0160f08          TST      r6,#8
0028ea  d004              BEQ      |L1.10486|
0028ec  222d              MOVS     r2,#0x2d
0028ee  4638              MOV      r0,r7
0028f0  1c7f              ADDS     r7,r7,#1
0028f2  a903              ADD      r1,sp,#0xc
0028f4  540a              STRB     r2,[r1,r0]
                  |L1.10486|
;;;4064       j = i; d = (f & 1) ? '0' : ' ';
0028f6  46b8              MOV      r8,r7
0028f8  f0160f01          TST      r6,#1
0028fc  d001              BEQ      |L1.10498|
0028fe  2030              MOVS     r0,#0x30
002900  e000              B        |L1.10500|
                  |L1.10498|
002902  2020              MOVS     r0,#0x20
                  |L1.10500|
002904  4605              MOV      r5,r0
;;;4065       res = 0;
002906  2000              MOVS     r0,#0
002908  9001              STR      r0,[sp,#4]
;;;4066       while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
00290a  e007              B        |L1.10524|
                  |L1.10508|
00290c  4628              MOV      r0,r5
00290e  9912              LDR      r1,[sp,#0x48]
002910  f7fffffe          BL       f_putc
002914  4681              MOV      r9,r0
002916  9901              LDR      r1,[sp,#4]
002918  4408              ADD      r0,r0,r1
00291a  9001              STR      r0,[sp,#4]
                  |L1.10524|
00291c  f0160f02          TST      r6,#2
002920  d104              BNE      |L1.10540|
002922  4640              MOV      r0,r8
002924  f1080801          ADD      r8,r8,#1
002928  4550              CMP      r0,r10
00292a  d3ef              BCC      |L1.10508|
                  |L1.10540|
;;;4067       do res += (cc = f_putc(s[--i], fil)); while(i);
00292c  bf00              NOP      
                  |L1.10542|
00292e  1e79              SUBS     r1,r7,#1
002930  460f              MOV      r7,r1
002932  aa03              ADD      r2,sp,#0xc
002934  5650              LDRSB    r0,[r2,r1]
002936  9912              LDR      r1,[sp,#0x48]
002938  f7fffffe          BL       f_putc
00293c  4681              MOV      r9,r0
00293e  9901              LDR      r1,[sp,#4]
002940  4408              ADD      r0,r0,r1
002942  9001              STR      r0,[sp,#4]
002944  2f00              CMP      r7,#0
002946  d1f2              BNE      |L1.10542|
;;;4068       while (j++ < w) res += (cc = f_putc(' ', fil));
002948  e007              B        |L1.10586|
                  |L1.10570|
00294a  2020              MOVS     r0,#0x20
00294c  9912              LDR      r1,[sp,#0x48]
00294e  f7fffffe          BL       f_putc
002952  4681              MOV      r9,r0
002954  9901              LDR      r1,[sp,#4]
002956  4408              ADD      r0,r0,r1
002958  9001              STR      r0,[sp,#4]
                  |L1.10586|
00295a  4640              MOV      r0,r8
00295c  f1080801          ADD      r8,r8,#1
002960  4550              CMP      r0,r10
002962  d3f2              BCC      |L1.10570|
;;;4069       if (cc != EOF) cc = res;
002964  f1190001          ADDS     r0,r9,#1
002968  d001              BEQ      |L1.10606|
00296a  f8dd9004          LDR      r9,[sp,#4]
                  |L1.10606|
00296e  bf00              NOP                            ;4003
                  |L1.10608|
002970  9801              LDR      r0,[sp,#4]            ;3997
002972  4448              ADD      r0,r0,r9              ;3997
002974  9001              STR      r0,[sp,#4]            ;3997
                  |L1.10614|
002976  f1190001          ADDS     r0,r9,#1              ;3997
00297a  f47faeb7          BNE      |L1.9964|
                  |L1.10622|
00297e  bf00              NOP                            ;3999
;;;4070     }
;;;4071   
;;;4072     va_end(arp);
002980  2000              MOVS     r0,#0
002982  9008              STR      r0,[sp,#0x20]
;;;4073     return (cc == EOF) ? cc : res;
002984  f1190001          ADDS     r0,r9,#1
002988  d105              BNE      |L1.10646|
00298a  4648              MOV      r0,r9
                  |L1.10636|
;;;4074   }
00298c  b009              ADD      sp,sp,#0x24
00298e  e8bd0ff0          POP      {r4-r11}
002992  f85dfb14          LDR      pc,[sp],#0x14
                  |L1.10646|
002996  9801              LDR      r0,[sp,#4]            ;4073
002998  e7f8              B        |L1.10636|
;;;4075   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  vst
000000  04000200          DCW      0x0400,0x0200
000004  01000080          DCW      0x0100,0x0080
000008  00400020          DCW      0x0040,0x0020
00000c  00100008          DCW      0x0010,0x0008
000010  00040002          DCW      0x0004,0x0002
000014  0000              DCW      0x0000
                  ||cst||
000016  8000              DCW      0x8000
000018  40002000          DCW      0x4000,0x2000
00001c  10000800          DCW      0x1000,0x0800
000020  40002000          DCW      0x4000,0x2000
000024  10000800          DCW      0x1000,0x0800
000028  04000200          DCW      0x0400,0x0200

                          AREA ||.data||, DATA, ALIGN=2

                  FatFs
                          DCD      0x00000000
                  Fsid
000004  0000              DCB      0x00,0x00
                  CurrVol
000006  00                DCB      0x00
