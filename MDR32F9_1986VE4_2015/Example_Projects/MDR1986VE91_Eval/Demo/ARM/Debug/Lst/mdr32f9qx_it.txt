; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\mdr32f9qx_it.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\mdr32f9qx_it.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\mdr32f9qx_it.crf ..\..\src\MDR32F9Qx_it.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;84     *******************************************************************************/
;;;85     void SysTick_Handler(void)
000000  4885              LDR      r0,|L1.536|
;;;86     {
;;;87       if (TimerCounter)
000002  6800              LDR      r0,[r0,#0]  ; TimerCounter
000004  b120              CBZ      r0,|L1.16|
;;;88       {
;;;89         TimerCounter--;
000006  4884              LDR      r0,|L1.536|
000008  6800              LDR      r0,[r0,#0]  ; TimerCounter
00000a  1e40              SUBS     r0,r0,#1
00000c  4982              LDR      r1,|L1.536|
00000e  6008              STR      r0,[r1,#0]  ; TimerCounter
                  |L1.16|
;;;90       }
;;;91     }
000010  4770              BX       lr
;;;92     
                          ENDP

                  UARTx_HandlerWork PROC
;;;99     *******************************************************************************/
;;;100    static void UARTx_HandlerWork(MDR_UART_TypeDef* UARTx)
000012  b570              PUSH     {r4-r6,lr}
;;;101    {
000014  4605              MOV      r5,r0
;;;102      uint32_t tmp_ris = UARTx->RIS;
000016  6bec              LDR      r4,[r5,#0x3c]
;;;103    
;;;104      /* Clear all pending bits except for UART_IT_RX */
;;;105      UARTx->ICR |= (tmp_ris & (~UART_IT_RX));
000018  6c68              LDR      r0,[r5,#0x44]
00001a  f0240110          BIC      r1,r4,#0x10
00001e  4308              ORRS     r0,r0,r1
000020  6468              STR      r0,[r5,#0x44]
;;;106    
;;;107      /* Receive handler */
;;;108      if ((tmp_ris & UART_IT_RX) && pfUARTReceiverFunc != 0)
000022  f0140f10          TST      r4,#0x10
000026  d005              BEQ      |L1.52|
000028  487c              LDR      r0,|L1.540|
00002a  6800              LDR      r0,[r0,#0]  ; pfUARTReceiverFunc
00002c  b110              CBZ      r0,|L1.52|
;;;109      {
;;;110        pfUARTReceiverFunc();
00002e  487b              LDR      r0,|L1.540|
000030  6800              LDR      r0,[r0,#0]  ; pfUARTReceiverFunc
000032  4780              BLX      r0
                  |L1.52|
;;;111      }
;;;112    
;;;113      /* Transmit handler */
;;;114      if ((tmp_ris & UART_IT_TX) && pfUARTSenderFunc != 0)
000034  f0140f20          TST      r4,#0x20
000038  d005              BEQ      |L1.70|
00003a  4879              LDR      r0,|L1.544|
00003c  6800              LDR      r0,[r0,#0]  ; pfUARTSenderFunc
00003e  b110              CBZ      r0,|L1.70|
;;;115      {
;;;116        pfUARTSenderFunc();
000040  4877              LDR      r0,|L1.544|
000042  6800              LDR      r0,[r0,#0]  ; pfUARTSenderFunc
000044  4780              BLX      r0
                  |L1.70|
;;;117      }
;;;118    
;;;119      /* Break/error handler */
;;;120      if (pfUARTLineStateFunc != 0)
000046  4877              LDR      r0,|L1.548|
000048  6800              LDR      r0,[r0,#0]  ; pfUARTLineStateFunc
00004a  b138              CBZ      r0,|L1.92|
;;;121      {
;;;122        tmp_ris &= UART_LINE_STATE_EVENTS;
00004c  f240708d          MOV      r0,#0x78d
000050  4004              ANDS     r4,r4,r0
;;;123        if (tmp_ris)
000052  b11c              CBZ      r4,|L1.92|
;;;124        {
;;;125          pfUARTLineStateFunc(tmp_ris);
000054  4620              MOV      r0,r4
000056  4973              LDR      r1,|L1.548|
000058  6809              LDR      r1,[r1,#0]  ; pfUARTLineStateFunc
00005a  4788              BLX      r1
                  |L1.92|
;;;126        }
;;;127      }
;;;128    }
00005c  bd70              POP      {r4-r6,pc}
;;;129    
                          ENDP

                  UART1_IRQHandler PROC
;;;130    void UART1_IRQHandler(void)
00005e  4770              BX       lr
;;;131    {
;;;132      //UARTx_HandlerWork(MDR_UART1);
;;;133    }
;;;134    
                          ENDP

                  UART2_IRQHandler PROC
;;;135    void UART2_IRQHandler(void)
000060  b510              PUSH     {r4,lr}
;;;136    {
;;;137    	uint32_t temp_1;
;;;138    	
;;;139      //UARTx_HandlerWork(MDR_UART2);
;;;140      if (UART_GetITStatusMasked(MDR_UART2, UART_IT_RX) == SET)
000062  2110              MOVS     r1,#0x10
000064  4870              LDR      r0,|L1.552|
000066  f7fffffe          BL       UART_GetITStatusMasked
00006a  2801              CMP      r0,#1
00006c  d10b              BNE      |L1.134|
;;;141      {
;;;142    		temp_1 = MDR_UART2->DR;
00006e  486e              LDR      r0,|L1.552|
000070  6804              LDR      r4,[r0,#0]
;;;143    		
;;;144    		UART_ClearITPendingBit(MDR_UART2, UART_IT_RX);
000072  2110              MOVS     r1,#0x10
000074  f7fffffe          BL       UART_ClearITPendingBit
;;;145    
;;;146    		while (UART_GetFlagStatus (MDR_UART2, UART_FLAG_TXFE)!= SET)
000078  bf00              NOP      
                  |L1.122|
00007a  2180              MOVS     r1,#0x80
00007c  486a              LDR      r0,|L1.552|
00007e  f7fffffe          BL       UART_GetFlagStatus
000082  2801              CMP      r0,#1
000084  d1f9              BNE      |L1.122|
                  |L1.134|
;;;147        {
;;;148        }
;;;149    		//UART_SendData (MDR_UART2,0x44);
;;;150    		
;;;151      }
;;;152    }
000086  bd10              POP      {r4,pc}
;;;153    
                          ENDP

                  ADC_IRQHandler PROC
;;;161    *******************************************************************************/
;;;162    void ADC_IRQHandler(void)
000088  b510              PUSH     {r4,lr}
;;;163    {
;;;164      if(ADC1_GetFlagStatus(ADCx_IT_OUT_OF_RANGE) == SET)
00008a  2002              MOVS     r0,#2
00008c  f7fffffe          BL       ADC1_GetFlagStatus
000090  2801              CMP      r0,#1
000092  d104              BNE      |L1.158|
;;;165      {
;;;166        /* Turns LED1 On */
;;;167        PORT_SetBits(MDR_PORTD, PORT_Pin_10);
000094  0281              LSLS     r1,r0,#10
000096  4865              LDR      r0,|L1.556|
000098  f7fffffe          BL       PORT_SetBits
00009c  e004              B        |L1.168|
                  |L1.158|
;;;168      }
;;;169      else
;;;170      {
;;;171        /* Turns LED1 Off */
;;;172        PORT_ResetBits(MDR_PORTD, PORT_Pin_10);
00009e  f44f6180          MOV      r1,#0x400
0000a2  4862              LDR      r0,|L1.556|
0000a4  f7fffffe          BL       PORT_ResetBits
                  |L1.168|
;;;173      }
;;;174      tmp = MDR_ADC->ADC1_RESULT & 0x0FFF;
0000a8  4861              LDR      r0,|L1.560|
0000aa  6980              LDR      r0,[r0,#0x18]
0000ac  f3c0000b          UBFX     r0,r0,#0,#12
0000b0  4960              LDR      r1,|L1.564|
0000b2  6008              STR      r0,[r1,#0]  ; tmp
;;;175      if(tmp > H_Level)
0000b4  4608              MOV      r0,r1
0000b6  6800              LDR      r0,[r0,#0]  ; tmp
0000b8  495f              LDR      r1,|L1.568|
0000ba  6809              LDR      r1,[r1,#0]  ; H_Level
0000bc  4288              CMP      r0,r1
0000be  d905              BLS      |L1.204|
;;;176      {
;;;177        /* Turns LED2 On */
;;;178        PORT_SetBits(MDR_PORTD, PORT_Pin_11);
0000c0  f44f6100          MOV      r1,#0x800
0000c4  4859              LDR      r0,|L1.556|
0000c6  f7fffffe          BL       PORT_SetBits
0000ca  e004              B        |L1.214|
                  |L1.204|
;;;179      }
;;;180      else
;;;181      {
;;;182        /* Turns LED2 Off */
;;;183        PORT_ResetBits(MDR_PORTD, PORT_Pin_11);
0000cc  f44f6100          MOV      r1,#0x800
0000d0  4856              LDR      r0,|L1.556|
0000d2  f7fffffe          BL       PORT_ResetBits
                  |L1.214|
;;;184      }
;;;185      /* Clear ADC1 OUT_OF_RANGE interrupt bit */
;;;186      MDR_ADC->ADC1_STATUS = (ADCx_IT_END_OF_CONVERSION | ADCx_IT_OUT_OF_RANGE)<<2;
0000d6  2018              MOVS     r0,#0x18
0000d8  4955              LDR      r1,|L1.560|
0000da  6208              STR      r0,[r1,#0x20]
;;;187    }
0000dc  bd10              POP      {r4,pc}
;;;188    
                          ENDP

                  BACKUP_IRQHandler PROC
;;;195    *******************************************************************************/
;;;196    void BACKUP_IRQHandler(void)
0000de  b570              PUSH     {r4-r6,lr}
;;;197    {
;;;198      uint32_t tmp;
;;;199      vuint32_t i, j;
;;;200    
;;;201      if (BKP_RTC_GetFlagStatus(BKP_RTC_FLAG_ALRF) == SET)
0000e0  2004              MOVS     r0,#4
0000e2  f7fffffe          BL       BKP_RTC_GetFlagStatus
0000e6  2801              CMP      r0,#1
0000e8  d129              BNE      |L1.318|
;;;202      {
;;;203        if (STOPModeStatus)
0000ea  4854              LDR      r0,|L1.572|
0000ec  6800              LDR      r0,[r0,#0]  ; STOPModeStatus
0000ee  b140              CBZ      r0,|L1.258|
;;;204        {
;;;205          /* Wake-up from STOP mode is handled by an RTC Alarm */
;;;206          /* Disable SLEEPONEXIT mode */
;;;207          tmp = SCB->SCR;
0000f0  4853              LDR      r0,|L1.576|
0000f2  6804              LDR      r4,[r0,#0]
;;;208          tmp &= ~SCB_SCR_SLEEPONEXIT_Msk;
0000f4  f0240402          BIC      r4,r4,#2
;;;209          SCB->SCR = tmp;
0000f8  6004              STR      r4,[r0,#0]
;;;210    
;;;211          STOPModeStatus = 0;
0000fa  2000              MOVS     r0,#0
0000fc  494f              LDR      r1,|L1.572|
0000fe  6008              STR      r0,[r1,#0]  ; STOPModeStatus
000100  e01d              B        |L1.318|
                  |L1.258|
;;;212        }
;;;213        else
;;;214          /* RTC Alarm handling */
;;;215          if (AlarmSetStatus)
000102  4850              LDR      r0,|L1.580|
000104  6800              LDR      r0,[r0,#0]  ; AlarmSetStatus
000106  b1d0              CBZ      r0,|L1.318|
;;;216          {
;;;217            for (i = 0; i < 5; i++)
000108  2600              MOVS     r6,#0
00010a  e016              B        |L1.314|
                  |L1.268|
;;;218            {
;;;219              PORT_SetBits(LEDs_PORT, LEDs_PINs);
00010c  f44f41f8          MOV      r1,#0x7c00
000110  4846              LDR      r0,|L1.556|
000112  f7fffffe          BL       PORT_SetBits
;;;220              for (j = 0; j < 300000; j++)
000116  2500              MOVS     r5,#0
000118  e000              B        |L1.284|
                  |L1.282|
00011a  1c6d              ADDS     r5,r5,#1
                  |L1.284|
00011c  484a              LDR      r0,|L1.584|
00011e  4285              CMP      r5,r0
000120  d3fb              BCC      |L1.282|
;;;221              {
;;;222              }
;;;223              PORT_ResetBits(LEDs_PORT, LEDs_PINs);
000122  f44f41f8          MOV      r1,#0x7c00
000126  4841              LDR      r0,|L1.556|
000128  f7fffffe          BL       PORT_ResetBits
;;;224              for (j = 0; j < 300000; j++)
00012c  2500              MOVS     r5,#0
00012e  e000              B        |L1.306|
                  |L1.304|
000130  1c6d              ADDS     r5,r5,#1
                  |L1.306|
000132  4845              LDR      r0,|L1.584|
000134  4285              CMP      r5,r0
000136  d3fb              BCC      |L1.304|
000138  1c76              ADDS     r6,r6,#1              ;217
                  |L1.314|
00013a  2e05              CMP      r6,#5                 ;217
00013c  d3e6              BCC      |L1.268|
                  |L1.318|
;;;225              {
;;;226              }
;;;227            }
;;;228          }
;;;229      }
;;;230      if (BKP_RTC_GetFlagStatus(BKP_RTC_FLAG_SECF) == SET)
00013e  2002              MOVS     r0,#2
000140  f7fffffe          BL       BKP_RTC_GetFlagStatus
000144  2801              CMP      r0,#1
000146  d131              BNE      |L1.428|
;;;231      {
;;;232        BKP_RTC_ITConfig(BKP_RTC_IT_SECF, DISABLE);
000148  2100              MOVS     r1,#0
00014a  2010              MOVS     r0,#0x10
00014c  f7fffffe          BL       BKP_RTC_ITConfig
;;;233    
;;;234        /* If counter is equal to 86339: one day was elapsed */
;;;235        tmp = BKP_RTC_GetCounter();
000150  f7fffffe          BL       BKP_RTC_GetCounter
000154  4604              MOV      r4,r0
;;;236        if ((tmp / 3600 == 23) &&
000156  f44f6061          MOV      r0,#0xe10
00015a  fbb4f0f0          UDIV     r0,r4,r0
00015e  2817              CMP      r0,#0x17
000160  d120              BNE      |L1.420|
;;;237            (((tmp % 3600) / 60) == 59) &&
000162  f44f6061          MOV      r0,#0xe10
000166  fbb4f1f0          UDIV     r1,r4,r0
00016a  fb004011          MLS      r0,r0,r1,r4
00016e  213c              MOVS     r1,#0x3c
000170  fbb0f0f1          UDIV     r0,r0,r1
000174  283b              CMP      r0,#0x3b
000176  d115              BNE      |L1.420|
;;;238            (((tmp % 3600) % 60) == 59))
000178  f44f6061          MOV      r0,#0xe10
00017c  fbb4f1f0          UDIV     r1,r4,r0
000180  fb004011          MLS      r0,r0,r1,r4
000184  213c              MOVS     r1,#0x3c
000186  fbb0f2f1          UDIV     r2,r0,r1
00018a  fb010012          MLS      r0,r1,r2,r0
00018e  283b              CMP      r0,#0x3b
000190  d108              BNE      |L1.420|
;;;239        {
;;;240          /* Wait until last write operation on RTC registers has finished */
;;;241          BKP_RTC_WaitForUpdate();
000192  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;242          /* Reset counter value */
;;;243          BKP_RTC_SetCounter(0);
000196  2000              MOVS     r0,#0
000198  f7fffffe          BL       BKP_RTC_SetCounter
;;;244          /* Wait until last write operation on RTC registers has finished */
;;;245          BKP_RTC_WaitForUpdate();
00019c  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;246    
;;;247          /* Increment the date */
;;;248          Date_Update();
0001a0  f7fffffe          BL       Date_Update
                  |L1.420|
;;;249        }
;;;250        BKP_RTC_ITConfig(BKP_RTC_IT_SECF, ENABLE);
0001a4  2101              MOVS     r1,#1
0001a6  2010              MOVS     r0,#0x10
0001a8  f7fffffe          BL       BKP_RTC_ITConfig
                  |L1.428|
;;;251      }
;;;252    }
0001ac  bd70              POP      {r4-r6,pc}
;;;253    
                          ENDP

                  DMA_IRQHandler PROC
;;;254    void DMA_IRQHandler(void)
0001ae  b510              PUSH     {r4,lr}
;;;255    {
;;;256    	PORT_SetBits(MDR_PORTD, PORT_Pin_14);
0001b0  f44f4180          MOV      r1,#0x4000
0001b4  481d              LDR      r0,|L1.556|
0001b6  f7fffffe          BL       PORT_SetBits
;;;257      /* Reconfigure the inactive DMA data structure*/
;;;258      if((MDR_DMA->CHNL_PRI_ALT_SET & (1<<DMA_Channel_TIM1)) == (0<<DMA_Channel_TIM1))
0001ba  4824              LDR      r0,|L1.588|
0001bc  6b00              LDR      r0,[r0,#0x30]
0001be  f4106f80          TST      r0,#0x400
0001c2  d107              BNE      |L1.468|
;;;259      {
;;;260        DMA_AltCtrlStr.DMA_CycleSize = 32;
0001c4  2020              MOVS     r0,#0x20
0001c6  4922              LDR      r1,|L1.592|
0001c8  6188              STR      r0,[r1,#0x18]  ; DMA_AltCtrlStr
;;;261        DMA_Init(DMA_Channel_TIM1, &DMA_InitStr);
0001ca  4922              LDR      r1,|L1.596|
0001cc  200a              MOVS     r0,#0xa
0001ce  f7fffffe          BL       DMA_Init
0001d2  e00d              B        |L1.496|
                  |L1.468|
;;;262    		  // DMA_CtrlInit(DMA_Channel_TIM1, DMA_CTRL_DATA_ALTERNATE,  &DMA_AltCtrlStr);
;;;263    
;;;264      }
;;;265      else if((MDR_DMA->CHNL_PRI_ALT_SET & (1<<DMA_Channel_TIM1)) == (1<<DMA_Channel_TIM1))
0001d4  481d              LDR      r0,|L1.588|
0001d6  6b00              LDR      r0,[r0,#0x30]
0001d8  f4006080          AND      r0,r0,#0x400
0001dc  f5b06f80          CMP      r0,#0x400
0001e0  d106              BNE      |L1.496|
;;;266      {
;;;267        DMA_PriCtrlStr.DMA_CycleSize = 32;
0001e2  2020              MOVS     r0,#0x20
0001e4  491c              LDR      r1,|L1.600|
0001e6  6188              STR      r0,[r1,#0x18]  ; DMA_PriCtrlStr
;;;268        DMA_Init(DMA_Channel_TIM1, &DMA_InitStr);
0001e8  491a              LDR      r1,|L1.596|
0001ea  200a              MOVS     r0,#0xa
0001ec  f7fffffe          BL       DMA_Init
                  |L1.496|
;;;269    		  // DMA_CtrlInit(DMA_Channel_TIM1, DMA_CTRL_DATA_PRIMARY, &DMA_PriCtrlStr);
;;;270    
;;;271      }
;;;272    			PORT_ResetBits(MDR_PORTD, PORT_Pin_14);
0001f0  f44f4180          MOV      r1,#0x4000
0001f4  480d              LDR      r0,|L1.556|
0001f6  f7fffffe          BL       PORT_ResetBits
;;;273    }
0001fa  bd10              POP      {r4,pc}
;;;274    
                          ENDP

                  Timer1_IRQHandler PROC
;;;275    void Timer1_IRQHandler(void)
0001fc  b510              PUSH     {r4,lr}
;;;276    {
;;;277    	  if (TIMER_GetITStatus(MDR_TIMER1, TIMER_STATUS_CNT_ARR) == SET)
0001fe  2102              MOVS     r1,#2
000200  4816              LDR      r0,|L1.604|
000202  f7fffffe          BL       TIMER_GetITStatus
000206  2801              CMP      r0,#1
000208  d105              BNE      |L1.534|
;;;278    		{		
;;;279    		//TIMER_ClearITPendingBit(MDR_TIMER1, TIMER_STATUS_CNT_ARR);
;;;280    			  MDR_TIMER1->STATUS &= ~TIMER_STATUS_CNT_ARR;
00020a  4814              LDR      r0,|L1.604|
00020c  6d40              LDR      r0,[r0,#0x54]
00020e  f0200002          BIC      r0,r0,#2
000212  4912              LDR      r1,|L1.604|
000214  6548              STR      r0,[r1,#0x54]
                  |L1.534|
;;;281    			
;;;282    			/*while (UART_GetFlagStatus (MDR_UART2, UART_FLAG_TXFE)!= SET)
;;;283    			{
;;;284    			}
;;;285    			UART_SendData (MDR_UART2,0x35);*/
;;;286    		}
;;;287    }
000216  bd10              POP      {r4,pc}
;;;288    
                          ENDP

                  |L1.536|
                          DCD      TimerCounter
                  |L1.540|
                          DCD      pfUARTReceiverFunc
                  |L1.544|
                          DCD      pfUARTSenderFunc
                  |L1.548|
                          DCD      pfUARTLineStateFunc
                  |L1.552|
                          DCD      0x40038000
                  |L1.556|
                          DCD      0x400c0000
                  |L1.560|
                          DCD      0x40088000
                  |L1.564|
                          DCD      tmp
                  |L1.568|
                          DCD      H_Level
                  |L1.572|
                          DCD      STOPModeStatus
                  |L1.576|
                          DCD      0xe000ed10
                  |L1.580|
                          DCD      AlarmSetStatus
                  |L1.584|
                          DCD      0x000493e0
                  |L1.588|
                          DCD      0x40028000
                  |L1.592|
                          DCD      DMA_AltCtrlStr
                  |L1.596|
                          DCD      DMA_InitStr
                  |L1.600|
                          DCD      DMA_PriCtrlStr
                  |L1.604|
                          DCD      0x40070000

                          AREA ||.data||, DATA, ALIGN=2

                  TimerCounter
                          DCD      0x00000000
                  ADC1_Value
                          DCD      0x00000000
                  pfUARTSenderFunc
                          DCD      0x00000000
                  pfUARTReceiverFunc
                          DCD      0x00000000
                  pfUARTLineStateFunc
                          DCD      0x00000000
                  STOPModeStatus
                          DCD      0x00000000
                  AlarmSetStatus
                          DCD      0x00000000
                  tmp
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\src\\MDR32F9Qx_it.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_MDR32F9Qx_it_c_205aa0fd____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___14_MDR32F9Qx_it_c_205aa0fd____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_MDR32F9Qx_it_c_205aa0fd____REVSH|
#line 144
|__asm___14_MDR32F9Qx_it_c_205aa0fd____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
