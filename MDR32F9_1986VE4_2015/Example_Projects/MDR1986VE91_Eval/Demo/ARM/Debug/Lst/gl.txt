; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\gl.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\gl.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\gl.crf ..\..\src\gl.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_PutPixel PROC
;;;45     *******************************************************************************/
;;;46     void LCD_PutPixel(uint32_t x, uint32_t y)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;47     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;48       uint32_t shifted, page;
;;;49       uint32_t data;
;;;50     
;;;51       if ((x>MAX_X)|(y>MAX_Y))
000008  2c7f              CMP      r4,#0x7f
00000a  d901              BLS      |L1.16|
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L1.18|
                  |L1.16|
000010  2000              MOVS     r0,#0
                  |L1.18|
000012  2e3f              CMP      r6,#0x3f
000014  d901              BLS      |L1.26|
000016  2101              MOVS     r1,#1
000018  e000              B        |L1.28|
                  |L1.26|
00001a  2100              MOVS     r1,#0
                  |L1.28|
00001c  4308              ORRS     r0,r0,r1
00001e  d001              BEQ      |L1.36|
                  |L1.32|
;;;52       {
;;;53         return;
;;;54       }
;;;55     
;;;56       SetCrystal((LCD_Crystal)(x/64));
;;;57       x %= 64;
;;;58     
;;;59       page = y/8;
;;;60       shifted = (1 << (y%8));
;;;61       LCD_SET_PAGE(page);
;;;62       LCD_SET_ADDRESS(x);
;;;63       data = ReadLCD_Data();
;;;64       switch (CurrentMethod)
;;;65       {
;;;66         case MET_OR :   data |= shifted;    break;
;;;67         case MET_XOR :  data ^= shifted;    break;
;;;68         case MET_AND :  data &= ~shifted;  	break;
;;;69       }
;;;70       LCD_SET_ADDRESS(x);
;;;71       WriteLCD_Data(data);
;;;72     }
000020  e8bd81f0          POP      {r4-r8,pc}
                  |L1.36|
000024  f3c41087          UBFX     r0,r4,#6,#8           ;56
000028  f7fffffe          BL       SetCrystal
00002c  f004043f          AND      r4,r4,#0x3f           ;57
000030  ea4f08d6          LSR      r8,r6,#3              ;59
000034  f0060107          AND      r1,r6,#7              ;60
000038  2001              MOVS     r0,#1                 ;60
00003a  fa00f701          LSL      r7,r0,r1              ;60
00003e  f04800b8          ORR      r0,r8,#0xb8           ;61
000042  f7fffffe          BL       WriteLCD_Cmd
000046  f0440040          ORR      r0,r4,#0x40           ;62
00004a  f7fffffe          BL       WriteLCD_Cmd
00004e  f7fffffe          BL       ReadLCD_Data
000052  4605              MOV      r5,r0                 ;63
000054  485c              LDR      r0,|L1.456|
000056  7800              LDRB     r0,[r0,#0]            ;64  ; CurrentMethod
000058  b120              CBZ      r0,|L1.100|
00005a  2801              CMP      r0,#1                 ;64
00005c  d004              BEQ      |L1.104|
00005e  2804              CMP      r0,#4                 ;64
000060  d106              BNE      |L1.112|
000062  e003              B        |L1.108|
                  |L1.100|
000064  433d              ORRS     r5,r5,r7              ;66
000066  e003              B        |L1.112|
                  |L1.104|
000068  407d              EORS     r5,r5,r7              ;67
00006a  e001              B        |L1.112|
                  |L1.108|
00006c  43bd              BICS     r5,r5,r7              ;68
00006e  bf00              NOP                            ;68
                  |L1.112|
000070  bf00              NOP                            ;66
000072  f0440040          ORR      r0,r4,#0x40           ;70
000076  f7fffffe          BL       WriteLCD_Cmd
00007a  4628              MOV      r0,r5                 ;71
00007c  f7fffffe          BL       WriteLCD_Data
000080  bf00              NOP      
000082  e7cd              B        |L1.32|
;;;73     
                          ENDP

                  LCD_Line PROC
;;;83     *******************************************************************************/
;;;84     void LCD_Line(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2)
000084  e92d4fff          PUSH     {r0-r11,lr}
;;;85     {
000088  b083              SUB      sp,sp,#0xc
;;;86       int32_t dx, dy, i1, i2, i, kx, ky;
;;;87       int32_t d;
;;;88       int32_t x, y;
;;;89       int32_t flag;
;;;90     
;;;91       dy = y2 - y1;
00008a  9904              LDR      r1,[sp,#0x10]
00008c  9806              LDR      r0,[sp,#0x18]
00008e  1a45              SUBS     r5,r0,r1
;;;92       dx = x2 - x1;
000090  9903              LDR      r1,[sp,#0xc]
000092  9805              LDR      r0,[sp,#0x14]
000094  1a44              SUBS     r4,r0,r1
;;;93       if (dx == 0 && dy == 0)
000096  b93c              CBNZ     r4,|L1.168|
000098  b935              CBNZ     r5,|L1.168|
;;;94       {
;;;95         LCD_PutPixel(x1, y1);
00009a  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00009e  f7fffffe          BL       LCD_PutPixel
                  |L1.162|
;;;96         return;
;;;97       }
;;;98     
;;;99       flag = kx = ky = 1;
;;;100    
;;;101      if (dx < 0)
;;;102      {
;;;103        dx = -dx;
;;;104        kx = -1;
;;;105      }
;;;106      else if (dx == 0)
;;;107      {
;;;108        kx = 0;
;;;109      }
;;;110    
;;;111      if (dy < 0)
;;;112      {
;;;113        dy = -dy;
;;;114        ky = -1;
;;;115      }
;;;116    
;;;117      if (dx < dy)
;;;118      {
;;;119        flag = 0;
;;;120        d = dx;
;;;121        dx = dy;
;;;122        dy = d;
;;;123      }
;;;124    
;;;125      i1 = dy + dy;
;;;126      d = i1 - dx;
;;;127      i2 = d - dx;
;;;128      x = x1;
;;;129      y = y1;
;;;130    
;;;131      for (i=0; ; i++)
;;;132      {
;;;133        LCD_PutPixel(x,y);
;;;134        if (i >= dx)
;;;135        {
;;;136          break;
;;;137        }
;;;138        if (flag)
;;;139        {
;;;140          x += kx;
;;;141        }
;;;142        else
;;;143        {
;;;144          y += ky;
;;;145        }
;;;146    
;;;147        if (d < 0)
;;;148        {
;;;149          d += i1;
;;;150        }
;;;151        else
;;;152        {
;;;153          d += i2;
;;;154          if (flag)
;;;155          {
;;;156            y += ky;
;;;157          }
;;;158          else
;;;159          {
;;;160            x += kx;
;;;161          }
;;;162        }
;;;163      }
;;;164    }
0000a2  b007              ADD      sp,sp,#0x1c
0000a4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.168|
0000a8  f04f0b01          MOV      r11,#1                ;99
0000ac  f8cdb004          STR      r11,[sp,#4]           ;99
0000b0  f8cdb000          STR      r11,[sp,#0]           ;99
0000b4  2c00              CMP      r4,#0                 ;101
0000b6  da04              BGE      |L1.194|
0000b8  4264              RSBS     r4,r4,#0              ;103
0000ba  f04f30ff          MOV      r0,#0xffffffff        ;104
0000be  9001              STR      r0,[sp,#4]            ;104
0000c0  e002              B        |L1.200|
                  |L1.194|
0000c2  b90c              CBNZ     r4,|L1.200|
0000c4  2000              MOVS     r0,#0                 ;108
0000c6  9001              STR      r0,[sp,#4]            ;108
                  |L1.200|
0000c8  2d00              CMP      r5,#0                 ;111
0000ca  da02              BGE      |L1.210|
0000cc  426d              RSBS     r5,r5,#0              ;113
0000ce  f04f3bff          MOV      r11,#0xffffffff       ;114
                  |L1.210|
0000d2  42ac              CMP      r4,r5                 ;117
0000d4  da04              BGE      |L1.224|
0000d6  2000              MOVS     r0,#0                 ;119
0000d8  9000              STR      r0,[sp,#0]            ;119
0000da  4626              MOV      r6,r4                 ;120
0000dc  462c              MOV      r4,r5                 ;121
0000de  4635              MOV      r5,r6                 ;122
                  |L1.224|
0000e0  ea4f0945          LSL      r9,r5,#1              ;125
0000e4  eba90604          SUB      r6,r9,r4              ;126
0000e8  1b30              SUBS     r0,r6,r4              ;127
0000ea  9002              STR      r0,[sp,#8]            ;127
0000ec  9f03              LDR      r7,[sp,#0xc]          ;128
0000ee  f8dd8010          LDR      r8,[sp,#0x10]         ;129
0000f2  f04f0a00          MOV      r10,#0                ;131
0000f6  bf00              NOP                            ;131
                  |L1.248|
0000f8  4641              MOV      r1,r8                 ;133
0000fa  4638              MOV      r0,r7                 ;133
0000fc  f7fffffe          BL       LCD_PutPixel
000100  45a2              CMP      r10,r4                ;134
000102  db00              BLT      |L1.262|
000104  e014              B        |L1.304|
                  |L1.262|
000106  9800              LDR      r0,[sp,#0]            ;138
000108  b110              CBZ      r0,|L1.272|
00010a  9801              LDR      r0,[sp,#4]            ;140
00010c  4407              ADD      r7,r7,r0              ;140
00010e  e000              B        |L1.274|
                  |L1.272|
000110  44d8              ADD      r8,r8,r11             ;144
                  |L1.274|
000112  2e00              CMP      r6,#0                 ;147
000114  da01              BGE      |L1.282|
000116  444e              ADD      r6,r6,r9              ;149
000118  e007              B        |L1.298|
                  |L1.282|
00011a  9802              LDR      r0,[sp,#8]            ;153
00011c  4406              ADD      r6,r6,r0              ;153
00011e  9800              LDR      r0,[sp,#0]            ;154
000120  b108              CBZ      r0,|L1.294|
000122  44d8              ADD      r8,r8,r11             ;156
000124  e001              B        |L1.298|
                  |L1.294|
000126  9801              LDR      r0,[sp,#4]            ;160
000128  4407              ADD      r7,r7,r0              ;160
                  |L1.298|
00012a  f10a0a01          ADD      r10,r10,#1            ;131
00012e  e7e3              B        |L1.248|
                  |L1.304|
000130  bf00              NOP                            ;136
000132  bf00              NOP      
000134  e7b5              B        |L1.162|
;;;165    
                          ENDP

                  LCD_Circle PROC
;;;174    *******************************************************************************/
;;;175    void LCD_Circle(uint32_t xc, uint32_t yc, uint32_t r)
000136  e92d47f0          PUSH     {r4-r10,lr}
;;;176    {
00013a  4606              MOV      r6,r0
00013c  460f              MOV      r7,r1
00013e  4690              MOV      r8,r2
;;;177      int32_t d, x, y;
;;;178    
;;;179      for (x = 0, y = r, d = 3-2*r; ;)
000140  2400              MOVS     r4,#0
000142  4645              MOV      r5,r8
000144  ea4f0048          LSL      r0,r8,#1
000148  f1c00903          RSB      r9,r0,#3
00014c  bf00              NOP      
                  |L1.334|
;;;180      {
;;;181        LCD_PutPixel(x+xc, y+yc);
00014e  19e9              ADDS     r1,r5,r7
000150  19a0              ADDS     r0,r4,r6
000152  f7fffffe          BL       LCD_PutPixel
;;;182        LCD_PutPixel(x+xc, -y+yc);
000156  426a              RSBS     r2,r5,#0
000158  19d1              ADDS     r1,r2,r7
00015a  19a0              ADDS     r0,r4,r6
00015c  f7fffffe          BL       LCD_PutPixel
;;;183        LCD_PutPixel(-x+xc, -y+yc);
000160  426a              RSBS     r2,r5,#0
000162  19d1              ADDS     r1,r2,r7
000164  4262              RSBS     r2,r4,#0
000166  1990              ADDS     r0,r2,r6
000168  f7fffffe          BL       LCD_PutPixel
;;;184        LCD_PutPixel(-x+xc, y+yc);
00016c  19e9              ADDS     r1,r5,r7
00016e  4262              RSBS     r2,r4,#0
000170  1990              ADDS     r0,r2,r6
000172  f7fffffe          BL       LCD_PutPixel
;;;185        LCD_PutPixel(y+xc, x+yc);
000176  19e1              ADDS     r1,r4,r7
000178  19a8              ADDS     r0,r5,r6
00017a  f7fffffe          BL       LCD_PutPixel
;;;186        LCD_PutPixel(y+xc, -x+yc);
00017e  4262              RSBS     r2,r4,#0
000180  19d1              ADDS     r1,r2,r7
000182  19a8              ADDS     r0,r5,r6
000184  f7fffffe          BL       LCD_PutPixel
;;;187        LCD_PutPixel(-y+xc, -x+yc);
000188  4262              RSBS     r2,r4,#0
00018a  19d1              ADDS     r1,r2,r7
00018c  426a              RSBS     r2,r5,#0
00018e  1990              ADDS     r0,r2,r6
000190  f7fffffe          BL       LCD_PutPixel
;;;188        LCD_PutPixel(-y+xc, x+yc);
000194  19e1              ADDS     r1,r4,r7
000196  426a              RSBS     r2,r5,#0
000198  1990              ADDS     r0,r2,r6
00019a  f7fffffe          BL       LCD_PutPixel
;;;189    
;;;190        if (x >= y)
00019e  42ac              CMP      r4,r5
0001a0  db00              BLT      |L1.420|
;;;191        {
;;;192          break;
0001a2  e00d              B        |L1.448|
                  |L1.420|
;;;193        }
;;;194    
;;;195        if (d <= 0)
0001a4  f1b90f00          CMP      r9,#0
0001a8  dc03              BGT      |L1.434|
;;;196        {
;;;197          d += 4*x+6;
0001aa  00a0              LSLS     r0,r4,#2
0001ac  1d80              ADDS     r0,r0,#6
0001ae  4481              ADD      r9,r9,r0
0001b0  e004              B        |L1.444|
                  |L1.434|
;;;198        }
;;;199        else
;;;200        {
;;;201          d += 4*(x-y)+10;
0001b2  1b60              SUBS     r0,r4,r5
0001b4  0080              LSLS     r0,r0,#2
0001b6  300a              ADDS     r0,r0,#0xa
0001b8  4481              ADD      r9,r9,r0
;;;202          y--;
0001ba  1e6d              SUBS     r5,r5,#1
                  |L1.444|
;;;203        }
;;;204        x++;
0001bc  1c64              ADDS     r4,r4,#1
0001be  e7c6              B        |L1.334|
                  |L1.448|
0001c0  bf00              NOP                            ;192
;;;205      }
;;;206    }
0001c2  e8bd87f0          POP      {r4-r10,pc}
;;;207    
                          ENDP

0001c6  0000              DCW      0x0000
                  |L1.456|
                          DCD      CurrentMethod

;*** Start embedded assembler ***

#line 1 "..\\..\\src\\gl.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___4_gl_c_3838d52b____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___4_gl_c_3838d52b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___4_gl_c_3838d52b____REVSH|
#line 144
|__asm___4_gl_c_3838d52b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
