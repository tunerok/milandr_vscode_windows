; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\menu_time.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\menu_time.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\menu_time.crf ..\..\src\Menu_time.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  RTC_Configuration PROC
;;;144    *******************************************************************************/
;;;145    void RTC_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;146    {
;;;147      /* Configure LSE as RTC clock source */
;;;148      RST_CLK_LSEconfig(RST_CLK_LSE_ON);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RST_CLK_LSEconfig
;;;149      /* Wait till LSE is ready */
;;;150      while (RST_CLK_LSEstatus() != SUCCESS)
000008  bf00              NOP      
                  |L1.10|
00000a  f7fffffe          BL       RST_CLK_LSEstatus
00000e  2801              CMP      r0,#1
000010  d1fb              BNE      |L1.10|
;;;151      {
;;;152      }
;;;153    
;;;154      /* Select the RTC Clock Source */
;;;155      BKP_RTCclkSource(BKP_RTC_LSEclk);
000012  2004              MOVS     r0,#4
000014  f7fffffe          BL       BKP_RTCclkSource
;;;156      /* Wait until last write operation on RTC registers has finished */
;;;157      BKP_RTC_WaitForUpdate();
000018  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;158    
;;;159      /* Sets the RTC prescaler */
;;;160      BKP_RTC_SetPrescaler(RTC_PRESCALER_VALUE);
00001c  f44f4000          MOV      r0,#0x8000
000020  f7fffffe          BL       BKP_RTC_SetPrescaler
;;;161      /* Wait until last write operation on RTC registers has finished */
;;;162      BKP_RTC_WaitForUpdate();
000024  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;163    
;;;164      /* Sets the RTC calibrator */
;;;165      BKP_RTC_Calibration(RTC_CalibratorValue);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       BKP_RTC_Calibration
;;;166      /* Wait until last write operation on RTC registers has finished */
;;;167      BKP_RTC_WaitForUpdate();
00002e  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;168    
;;;169      /* Enable the RTC Clock */
;;;170      BKP_RTC_Enable(ENABLE);
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       BKP_RTC_Enable
;;;171    
;;;172      /* Enable the Second interrupt */
;;;173      BKP_RTC_ITConfig(BKP_RTC_IT_SECF, ENABLE);
000038  2101              MOVS     r1,#1
00003a  2010              MOVS     r0,#0x10
00003c  f7fffffe          BL       BKP_RTC_ITConfig
;;;174      NVIC_EnableIRQ(BACKUP_IRQn);
000040  201b              MOVS     r0,#0x1b
000042  2101              MOVS     r1,#1
000044  4081              LSLS     r1,r1,r0
000046  0942              LSRS     r2,r0,#5
000048  f04f23e0          MOV      r3,#0xe000e000
00004c  eb030282          ADD      r2,r3,r2,LSL #2
000050  f8c21100          STR      r1,[r2,#0x100]
000054  bf00              NOP      
;;;175    }
000056  bd10              POP      {r4,pc}
;;;176    
                          ENDP

                  ShowSelDigit PROC
;;;185    *******************************************************************************/
;;;186    void ShowSelDigit(uint8_t Col, uint8_t Line, uint8_t ch)
000058  e92d41f0          PUSH     {r4-r8,lr}
;;;187    {
00005c  4604              MOV      r4,r0
00005e  460d              MOV      r5,r1
000060  4616              MOV      r6,r2
;;;188      LCD_Method OldMethod = CurrentMethod;
000062  48f7              LDR      r0,|L1.1088|
000064  7807              LDRB     r7,[r0,#0]  ; CurrentMethod
;;;189    
;;;190      CurrentMethod = MET_AND;
000066  2004              MOVS     r0,#4
000068  49f5              LDR      r1,|L1.1088|
00006a  7008              STRB     r0,[r1,#0]
;;;191      LCD_PUTC(Col, Line, ' ');
00006c  2220              MOVS     r2,#0x20
00006e  4629              MOV      r1,r5
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       LCD_PUTC
;;;192      CurrentMethod = MET_NOT_XOR;
000076  2003              MOVS     r0,#3
000078  49f1              LDR      r1,|L1.1088|
00007a  7008              STRB     r0,[r1,#0]
;;;193      LCD_PUTC(Col, Line, ch);
00007c  4632              MOV      r2,r6
00007e  4629              MOV      r1,r5
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       LCD_PUTC
;;;194    
;;;195      CurrentMethod = OldMethod;
000086  48ee              LDR      r0,|L1.1088|
000088  7007              STRB     r7,[r0,#0]
;;;196    }
00008a  e8bd81f0          POP      {r4-r8,pc}
;;;197    
                          ENDP

                  ReadDigit PROC
;;;208    *******************************************************************************/
;;;209    uint8_t ReadDigit(uint8_t ColBegin, uint8_t CountBegin, uint8_t ValueMax, uint8_t ValueMin)
00008e  e92d47f0          PUSH     {r4-r10,lr}
;;;210    {
000092  4681              MOV      r9,r0
000094  460e              MOV      r6,r1
000096  4617              MOV      r7,r2
000098  4698              MOV      r8,r3
;;;211      uint32_t tmp = CountBegin;
00009a  4634              MOV      r4,r6
;;;212      KeyCode key;
;;;213    
;;;214      /* Display selected digit */
;;;215      ShowSelDigit(ColBegin, LineDigits, (tmp + 0x30));
00009c  f1040030          ADD      r0,r4,#0x30
0000a0  b2c2              UXTB     r2,r0
0000a2  2134              MOVS     r1,#0x34
0000a4  4648              MOV      r0,r9
0000a6  f7fffffe          BL       ShowSelDigit
;;;216    
;;;217      for (key = GetKey(); key != SEL; key = GetKey())
0000aa  f7fffffe          BL       GetKey
0000ae  4605              MOV      r5,r0
0000b0  e025              B        |L1.254|
                  |L1.178|
;;;218      {
;;;219        /* If "UP" pushbutton is pressed */
;;;220        if(key == UP)
0000b2  2d01              CMP      r5,#1
0000b4  d10b              BNE      |L1.206|
;;;221        {
;;;222          /* Increase the value of the digit */
;;;223          if(tmp >= ValueMax)
0000b6  42bc              CMP      r4,r7
0000b8  d301              BCC      |L1.190|
;;;224          {
;;;225            tmp = (ValueMin - 1);
0000ba  f1a80401          SUB      r4,r8,#1
                  |L1.190|
;;;226          }
;;;227          /* Display new value */
;;;228          tmp++;
0000be  1c64              ADDS     r4,r4,#1
;;;229          ShowSelDigit(ColBegin, LineDigits, (tmp + 0x30));
0000c0  f1040030          ADD      r0,r4,#0x30
0000c4  b2c2              UXTB     r2,r0
0000c6  2134              MOVS     r1,#0x34
0000c8  4648              MOV      r0,r9
0000ca  f7fffffe          BL       ShowSelDigit
                  |L1.206|
;;;230        }
;;;231        /* If "DOWN" pushbutton is pressed */
;;;232        if(key == DOWN)
0000ce  2d02              CMP      r5,#2
0000d0  d10d              BNE      |L1.238|
;;;233        {
;;;234          /* Decrease the value of the digit */
;;;235          if(tmp == ValueMin)
0000d2  4544              CMP      r4,r8
0000d4  d100              BNE      |L1.216|
;;;236          {
;;;237            tmp = (ValueMax + 1);
0000d6  1c7c              ADDS     r4,r7,#1
                  |L1.216|
;;;238          }
;;;239          /* Display new value */
;;;240          tmp--;
0000d8  1e64              SUBS     r4,r4,#1
;;;241          CurrentMethod = MET_AND;
0000da  2004              MOVS     r0,#4
0000dc  49d8              LDR      r1,|L1.1088|
0000de  7008              STRB     r0,[r1,#0]
;;;242          ShowSelDigit(ColBegin, LineDigits, (tmp + 0x30));
0000e0  f1040030          ADD      r0,r4,#0x30
0000e4  b2c2              UXTB     r2,r0
0000e6  2134              MOVS     r1,#0x34
0000e8  4648              MOV      r0,r9
0000ea  f7fffffe          BL       ShowSelDigit
                  |L1.238|
;;;243        }
;;;244        WAIT_UNTIL_KEY_RELEASED(key);
0000ee  bf00              NOP      
                  |L1.240|
0000f0  f7fffffe          BL       GetKey
0000f4  42a8              CMP      r0,r5
0000f6  d0fb              BEQ      |L1.240|
0000f8  f7fffffe          BL       GetKey
0000fc  4605              MOV      r5,r0                 ;217
                  |L1.254|
0000fe  2d00              CMP      r5,#0                 ;217
000100  d1d7              BNE      |L1.178|
;;;245      }
;;;246      /* "SEL" pushbutton is pressed */
;;;247      WAIT_UNTIL_KEY_RELEASED(SEL);
000102  bf00              NOP      
                  |L1.260|
000104  f7fffffe          BL       GetKey
000108  2800              CMP      r0,#0
00010a  d0fb              BEQ      |L1.260|
;;;248      CurrentMethod = MET_AND;
00010c  2004              MOVS     r0,#4
00010e  49cc              LDR      r1,|L1.1088|
000110  7008              STRB     r0,[r1,#0]
;;;249      LCD_PUTC(ColBegin, LineDigits, (tmp + 0x30));
000112  f1040030          ADD      r0,r4,#0x30
000116  b2c2              UXTB     r2,r0
000118  2134              MOVS     r1,#0x34
00011a  4648              MOV      r0,r9
00011c  f7fffffe          BL       LCD_PUTC
;;;250      /* Return the digit value and exit */
;;;251      return tmp;
000120  b2e0              UXTB     r0,r4
;;;252    }
000122  e8bd87f0          POP      {r4-r10,pc}
;;;253    
                          ENDP

                  Time_Display PROC
;;;260    *******************************************************************************/
;;;261    void Time_Display()
000126  b510              PUSH     {r4,lr}
;;;262    {
;;;263      uint32_t TimeVar = BKP_RTC_GetCounter();
000128  f7fffffe          BL       BKP_RTC_GetCounter
00012c  4604              MOV      r4,r0
;;;264    
;;;265      /* Display hours */
;;;266      sTime.hour_h = (uint8_t)(TimeVar / 3600) / 10;
00012e  f44f6061          MOV      r0,#0xe10
000132  fbb4f0f0          UDIV     r0,r4,r0
000136  b2c0              UXTB     r0,r0
000138  210a              MOVS     r1,#0xa
00013a  fb90f0f1          SDIV     r0,r0,r1
00013e  49c1              LDR      r1,|L1.1092|
000140  7148              STRB     r0,[r1,#5]
;;;267      LCD_PUTC(TimeH_h, LineDigits, (sTime.hour_h + 0x30));
000142  4608              MOV      r0,r1
000144  7940              LDRB     r0,[r0,#5]  ; sTime
000146  3030              ADDS     r0,r0,#0x30
000148  b2c2              UXTB     r2,r0
00014a  2134              MOVS     r1,#0x34
00014c  2021              MOVS     r0,#0x21
00014e  f7fffffe          BL       LCD_PUTC
;;;268      sTime.hour_l = (uint8_t)(((TimeVar) / 3600) % 10);
000152  f44f6061          MOV      r0,#0xe10
000156  fbb4f0f0          UDIV     r0,r4,r0
00015a  210a              MOVS     r1,#0xa
00015c  fbb0f2f1          UDIV     r2,r0,r1
000160  fb010012          MLS      r0,r1,r2,r0
000164  49b7              LDR      r1,|L1.1092|
000166  7108              STRB     r0,[r1,#4]
;;;269      LCD_PUTC(TimeH_l, LineDigits, (sTime.hour_l + 0x30));
000168  4608              MOV      r0,r1
00016a  7900              LDRB     r0,[r0,#4]  ; sTime
00016c  3030              ADDS     r0,r0,#0x30
00016e  b2c2              UXTB     r2,r0
000170  2134              MOVS     r1,#0x34
000172  2027              MOVS     r0,#0x27
000174  f7fffffe          BL       LCD_PUTC
;;;270    
;;;271      /* Display separator */
;;;272      LCD_PUTC(TimeH_sep, LineDigits, ':');
000178  223a              MOVS     r2,#0x3a
00017a  2134              MOVS     r1,#0x34
00017c  202d              MOVS     r0,#0x2d
00017e  f7fffffe          BL       LCD_PUTC
;;;273    
;;;274      /* Display minutes */
;;;275      sTime.min_h = (uint8_t)(((TimeVar) % 3600) / 60) / 10;
000182  f44f6061          MOV      r0,#0xe10
000186  fbb4f1f0          UDIV     r1,r4,r0
00018a  fb004011          MLS      r0,r0,r1,r4
00018e  213c              MOVS     r1,#0x3c
000190  fbb0f0f1          UDIV     r0,r0,r1
000194  b2c0              UXTB     r0,r0
000196  210a              MOVS     r1,#0xa
000198  fb90f0f1          SDIV     r0,r0,r1
00019c  49a9              LDR      r1,|L1.1092|
00019e  70c8              STRB     r0,[r1,#3]
;;;276      LCD_PUTC(TimeM_h, LineDigits, (sTime.min_h + 0x30));
0001a0  4608              MOV      r0,r1
0001a2  78c0              LDRB     r0,[r0,#3]  ; sTime
0001a4  3030              ADDS     r0,r0,#0x30
0001a6  b2c2              UXTB     r2,r0
0001a8  2134              MOVS     r1,#0x34
0001aa  2033              MOVS     r0,#0x33
0001ac  f7fffffe          BL       LCD_PUTC
;;;277      sTime.min_l = (uint8_t)(((TimeVar) % 3600) / 60) % 10;
0001b0  f44f6061          MOV      r0,#0xe10
0001b4  fbb4f1f0          UDIV     r1,r4,r0
0001b8  fb004011          MLS      r0,r0,r1,r4
0001bc  213c              MOVS     r1,#0x3c
0001be  fbb0f0f1          UDIV     r0,r0,r1
0001c2  b2c0              UXTB     r0,r0
0001c4  210a              MOVS     r1,#0xa
0001c6  fb90f2f1          SDIV     r2,r0,r1
0001ca  fb010012          MLS      r0,r1,r2,r0
0001ce  499d              LDR      r1,|L1.1092|
0001d0  7088              STRB     r0,[r1,#2]
;;;278      LCD_PUTC(TimeM_l, LineDigits, (sTime.min_l + 0x30));
0001d2  4608              MOV      r0,r1
0001d4  7880              LDRB     r0,[r0,#2]  ; sTime
0001d6  3030              ADDS     r0,r0,#0x30
0001d8  b2c2              UXTB     r2,r0
0001da  2134              MOVS     r1,#0x34
0001dc  2039              MOVS     r0,#0x39
0001de  f7fffffe          BL       LCD_PUTC
;;;279    
;;;280      /* Display separator */
;;;281      LCD_PUTC(TimeM_sep, LineDigits, ':');
0001e2  223a              MOVS     r2,#0x3a
0001e4  2134              MOVS     r1,#0x34
0001e6  203f              MOVS     r0,#0x3f
0001e8  f7fffffe          BL       LCD_PUTC
;;;282    
;;;283      /* Display seconds */
;;;284      sTime.sec_h = (uint8_t)(((TimeVar) % 3600) % 60) / 10;
0001ec  f44f6061          MOV      r0,#0xe10
0001f0  fbb4f1f0          UDIV     r1,r4,r0
0001f4  fb004011          MLS      r0,r0,r1,r4
0001f8  213c              MOVS     r1,#0x3c
0001fa  fbb0f2f1          UDIV     r2,r0,r1
0001fe  fb010012          MLS      r0,r1,r2,r0
000202  210a              MOVS     r1,#0xa
000204  fb90f0f1          SDIV     r0,r0,r1
000208  498e              LDR      r1,|L1.1092|
00020a  7048              STRB     r0,[r1,#1]
;;;285      LCD_PUTC(TimeS_h, LineDigits, (sTime.sec_h + 0x30));
00020c  4608              MOV      r0,r1
00020e  7840              LDRB     r0,[r0,#1]  ; sTime
000210  3030              ADDS     r0,r0,#0x30
000212  b2c2              UXTB     r2,r0
000214  2134              MOVS     r1,#0x34
000216  2045              MOVS     r0,#0x45
000218  f7fffffe          BL       LCD_PUTC
;;;286      sTime.sec_l = (uint8_t)(((TimeVar) % 3600) % 60) % 10;
00021c  f44f6061          MOV      r0,#0xe10
000220  fbb4f1f0          UDIV     r1,r4,r0
000224  fb004011          MLS      r0,r0,r1,r4
000228  213c              MOVS     r1,#0x3c
00022a  fbb0f2f1          UDIV     r2,r0,r1
00022e  fb010012          MLS      r0,r1,r2,r0
000232  210a              MOVS     r1,#0xa
000234  fb90f2f1          SDIV     r2,r0,r1
000238  fb010012          MLS      r0,r1,r2,r0
00023c  4981              LDR      r1,|L1.1092|
00023e  7008              STRB     r0,[r1,#0]
;;;287      LCD_PUTC(TimeS_l, LineDigits, (sTime.sec_l + 0x30));
000240  4608              MOV      r0,r1
000242  7800              LDRB     r0,[r0,#0]  ; sTime
000244  3030              ADDS     r0,r0,#0x30
000246  b2c2              UXTB     r2,r0
000248  2134              MOVS     r1,#0x34
00024a  204b              MOVS     r0,#0x4b
00024c  f7fffffe          BL       LCD_PUTC
;;;288    }
000250  bd10              POP      {r4,pc}
;;;289    
                          ENDP

                  Time_Regulate PROC
;;;296    *******************************************************************************/
;;;297    uint32_t Time_Regulate(void)
000252  b570              PUSH     {r4-r6,lr}
;;;298    {
;;;299      uint32_t Tmp_HH, Tmp_MM, Tmp_SS;
;;;300    
;;;301      /* Read hours */
;;;302      Tmp_HH = ReadDigit(TimeH_h, sTime.hour_h, 0x2, 0x0);
000254  487b              LDR      r0,|L1.1092|
000256  7941              LDRB     r1,[r0,#5]  ; sTime
000258  2300              MOVS     r3,#0
00025a  2202              MOVS     r2,#2
00025c  2021              MOVS     r0,#0x21
00025e  f7fffffe          BL       ReadDigit
000262  4604              MOV      r4,r0
;;;303      if(Tmp_HH == 2)
000264  2c02              CMP      r4,#2
000266  d112              BNE      |L1.654|
;;;304      {
;;;305        if(sTime.hour_l > 3)
000268  4876              LDR      r0,|L1.1092|
00026a  7900              LDRB     r0,[r0,#4]  ; sTime
00026c  2803              CMP      r0,#3
00026e  dd02              BLE      |L1.630|
;;;306        {
;;;307          sTime.hour_l = 0;
000270  2000              MOVS     r0,#0
000272  4974              LDR      r1,|L1.1092|
000274  7108              STRB     r0,[r1,#4]
                  |L1.630|
;;;308        }
;;;309        Tmp_HH = Tmp_HH*10 + ReadDigit(TimeH_l, sTime.hour_l, 0x3, 0x0);
000276  4873              LDR      r0,|L1.1092|
000278  7901              LDRB     r1,[r0,#4]  ; sTime
00027a  2300              MOVS     r3,#0
00027c  2203              MOVS     r2,#3
00027e  2027              MOVS     r0,#0x27
000280  f7fffffe          BL       ReadDigit
000284  eb040184          ADD      r1,r4,r4,LSL #2
000288  eb000441          ADD      r4,r0,r1,LSL #1
00028c  e00a              B        |L1.676|
                  |L1.654|
;;;310      }
;;;311      else
;;;312      {
;;;313        Tmp_HH = Tmp_HH*10 + ReadDigit(TimeH_l, sTime.hour_l, 0x9, 0x0);
00028e  486d              LDR      r0,|L1.1092|
000290  7901              LDRB     r1,[r0,#4]  ; sTime
000292  2300              MOVS     r3,#0
000294  2209              MOVS     r2,#9
000296  2027              MOVS     r0,#0x27
000298  f7fffffe          BL       ReadDigit
00029c  eb040184          ADD      r1,r4,r4,LSL #2
0002a0  eb000441          ADD      r4,r0,r1,LSL #1
                  |L1.676|
;;;314      }
;;;315      /* Read minutes */
;;;316      Tmp_MM = ReadDigit(TimeM_h, sTime.min_h, 0x5, 0x0);
0002a4  4867              LDR      r0,|L1.1092|
0002a6  78c1              LDRB     r1,[r0,#3]  ; sTime
0002a8  2300              MOVS     r3,#0
0002aa  2205              MOVS     r2,#5
0002ac  2033              MOVS     r0,#0x33
0002ae  f7fffffe          BL       ReadDigit
0002b2  4605              MOV      r5,r0
;;;317      Tmp_MM = Tmp_MM*10 + ReadDigit(TimeM_l, sTime.min_l, 0x9, 0x0);
0002b4  4863              LDR      r0,|L1.1092|
0002b6  7881              LDRB     r1,[r0,#2]  ; sTime
0002b8  2300              MOVS     r3,#0
0002ba  2209              MOVS     r2,#9
0002bc  2039              MOVS     r0,#0x39
0002be  f7fffffe          BL       ReadDigit
0002c2  eb050185          ADD      r1,r5,r5,LSL #2
0002c6  eb000541          ADD      r5,r0,r1,LSL #1
;;;318      /* Read seconds */
;;;319      Tmp_SS = ReadDigit(TimeS_h, sTime.sec_h, 0x5, 0x0);
0002ca  485e              LDR      r0,|L1.1092|
0002cc  7841              LDRB     r1,[r0,#1]  ; sTime
0002ce  2300              MOVS     r3,#0
0002d0  2205              MOVS     r2,#5
0002d2  2045              MOVS     r0,#0x45
0002d4  f7fffffe          BL       ReadDigit
0002d8  4606              MOV      r6,r0
;;;320      Tmp_SS = Tmp_SS*10 + ReadDigit(TimeS_l, sTime.sec_l, 0x9, 0x0);
0002da  485a              LDR      r0,|L1.1092|
0002dc  7801              LDRB     r1,[r0,#0]  ; sTime
0002de  2300              MOVS     r3,#0
0002e0  2209              MOVS     r2,#9
0002e2  204b              MOVS     r0,#0x4b
0002e4  f7fffffe          BL       ReadDigit
0002e8  eb060186          ADD      r1,r6,r6,LSL #2
0002ec  eb000641          ADD      r6,r0,r1,LSL #1
;;;321    
;;;322      /* Return the value that to be stored in RTC counter register */
;;;323      return((Tmp_HH*3600 + Tmp_MM*60 + Tmp_SS));
0002f0  f44f6061          MOV      r0,#0xe10
0002f4  4360              MULS     r0,r4,r0
0002f6  ebc51105          RSB      r1,r5,r5,LSL #4
0002fa  eb000081          ADD      r0,r0,r1,LSL #2
0002fe  4430              ADD      r0,r0,r6
;;;324    }
000300  bd70              POP      {r4-r6,pc}
;;;325    
                          ENDP

                  RTCHelp PROC
;;;332    *******************************************************************************/
;;;333    void RTCHelp(void)
000302  b510              PUSH     {r4,lr}
;;;334    {
;;;335      LCD_PUTS(0, LineMessage1, "RTC is not configured");
000304  a250              ADR      r2,|L1.1096|
000306  210c              MOVS     r1,#0xc
000308  2000              MOVS     r0,#0
00030a  f7fffffe          BL       LCD_PUTS
;;;336      LCD_PUTS(0, LineMessage2, "Please, use the ");
00030e  a254              ADR      r2,|L1.1120|
000310  2116              MOVS     r1,#0x16
000312  2000              MOVS     r0,#0
000314  f7fffffe          BL       LCD_PUTS
;;;337      LCD_PUTS(0, LineMessage3, "Time Adjust menu.    ");
000318  a256              ADR      r2,|L1.1140|
00031a  2120              MOVS     r1,#0x20
00031c  2000              MOVS     r0,#0
00031e  f7fffffe          BL       LCD_PUTS
;;;338      WAIT_UNTIL_KEY_PRESSED(SEL);
000322  bf00              NOP      
                  |L1.804|
000324  f7fffffe          BL       GetKey
000328  2800              CMP      r0,#0
00032a  d1fb              BNE      |L1.804|
;;;339      WAIT_UNTIL_KEY_RELEASED(SEL);
00032c  bf00              NOP      
                  |L1.814|
00032e  f7fffffe          BL       GetKey
000332  2800              CMP      r0,#0
000334  d0fb              BEQ      |L1.814|
;;;340    }
000336  bd10              POP      {r4,pc}
;;;341    
                          ENDP

                  TimePreAdjustFunc PROC
;;;348    *******************************************************************************/
;;;349    void TimePreAdjustFunc(void)
000338  b570              PUSH     {r4-r6,lr}
;;;350    {
;;;351      sFONT *OldFont = CurrentFont;
00033a  4854              LDR      r0,|L1.1164|
00033c  6804              LDR      r4,[r0,#0]  ; CurrentFont
;;;352      LCD_Method OldMethod = CurrentMethod;
00033e  4840              LDR      r0,|L1.1088|
000340  7805              LDRB     r5,[r0,#0]  ; CurrentMethod
;;;353    
;;;354      /* Print the header */
;;;355      LCD_CLS();
000342  f7fffffe          BL       LCD_CLS
;;;356      CurrentMethod = MET_AND;
000346  2004              MOVS     r0,#4
000348  493d              LDR      r1,|L1.1088|
00034a  7008              STRB     r0,[r1,#0]
;;;357      CurrentFont = &Font_6x8;
00034c  4850              LDR      r0,|L1.1168|
00034e  494f              LDR      r1,|L1.1164|
000350  6008              STR      r0,[r1,#0]  ; CurrentFont
;;;358      DisplayMenuTitle("Time adjust");
000352  a050              ADR      r0,|L1.1172|
000354  f7fffffe          BL       DisplayMenuTitle
;;;359      WAIT_UNTIL_KEY_RELEASED(SEL);
000358  bf00              NOP      
                  |L1.858|
00035a  f7fffffe          BL       GetKey
00035e  2800              CMP      r0,#0
000360  d0fb              BEQ      |L1.858|
;;;360    
;;;361      if((MDR_BKP->REG_00 != 0x1234) || (MDR_BKP->RTC_PRL != RTC_PRESCALER_VALUE))
000362  484f              LDR      r0,|L1.1184|
000364  6800              LDR      r0,[r0,#0]
000366  f5a05190          SUB      r1,r0,#0x1200
00036a  3934              SUBS     r1,r1,#0x34
00036c  d104              BNE      |L1.888|
00036e  484c              LDR      r0,|L1.1184|
000370  6c80              LDR      r0,[r0,#0x48]
000372  f5b04f00          CMP      r0,#0x8000
000376  d026              BEQ      |L1.966|
                  |L1.888|
;;;362      {
;;;363        LCD_PUTS(0, LineTitle, "RTC is configured...");
000378  a24a              ADR      r2,|L1.1188|
00037a  212a              MOVS     r1,#0x2a
00037c  2000              MOVS     r0,#0
00037e  f7fffffe          BL       LCD_PUTS
;;;364        /* Reset Backup Domain */
;;;365        /* RTC reset */
;;;366        BKP_RTC_Reset(ENABLE);
000382  2001              MOVS     r0,#1
000384  f7fffffe          BL       BKP_RTC_Reset
;;;367        BKP_RTC_Reset(DISABLE);
000388  2000              MOVS     r0,#0
00038a  f7fffffe          BL       BKP_RTC_Reset
;;;368        /* RTC Configuration */
;;;369        RTC_Configuration();
00038e  f7fffffe          BL       RTC_Configuration
;;;370        /* Set the RTC counter value */
;;;371        BKP_RTC_SetCounter(0);
000392  2000              MOVS     r0,#0
000394  f7fffffe          BL       BKP_RTC_SetCounter
;;;372        /* Wait until last write operation on RTC registers has finished */
;;;373        BKP_RTC_WaitForUpdate();
000398  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;374    
;;;375        LCD_PUTS(0, LineTitle, "        TIME        ");
00039c  a247              ADR      r2,|L1.1212|
00039e  212a              MOVS     r1,#0x2a
0003a0  2000              MOVS     r0,#0
0003a2  f7fffffe          BL       LCD_PUTS
;;;376    
;;;377        /* Display the current time */
;;;378        Time_Display();
0003a6  f7fffffe          BL       Time_Display
;;;379    
;;;380        /* Change the current time */
;;;381        BKP_RTC_SetCounter(Time_Regulate());
0003aa  f7fffffe          BL       Time_Regulate
0003ae  4606              MOV      r6,r0
0003b0  f7fffffe          BL       BKP_RTC_SetCounter
;;;382        /* Wait until last write operation on RTC registers has finished */
;;;383        BKP_RTC_WaitForUpdate();
0003b4  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;384    
;;;385        MDR_BKP->REG_00 = 0x1234;
0003b8  f2412034          MOV      r0,#0x1234
0003bc  4938              LDR      r1,|L1.1184|
0003be  6008              STR      r0,[r1,#0]
;;;386        /* Wait until last write operation on RTC registers has finished */
;;;387        BKP_RTC_WaitForUpdate();
0003c0  f7fffffe          BL       BKP_RTC_WaitForUpdate
0003c4  e00d              B        |L1.994|
                  |L1.966|
;;;388      }
;;;389      else
;;;390      {
;;;391        LCD_PUTS(0, LineTitle, "        TIME        ");
0003c6  a23d              ADR      r2,|L1.1212|
0003c8  212a              MOVS     r1,#0x2a
0003ca  2000              MOVS     r0,#0
0003cc  f7fffffe          BL       LCD_PUTS
;;;392    
;;;393        /* Display the current time */
;;;394        Time_Display();
0003d0  f7fffffe          BL       Time_Display
;;;395    
;;;396        /* Change the current time */
;;;397        BKP_RTC_SetCounter(Time_Regulate());
0003d4  f7fffffe          BL       Time_Regulate
0003d8  4606              MOV      r6,r0
0003da  f7fffffe          BL       BKP_RTC_SetCounter
;;;398        /* Wait until last write operation on RTC registers has finished */
;;;399        BKP_RTC_WaitForUpdate();
0003de  f7fffffe          BL       BKP_RTC_WaitForUpdate
                  |L1.994|
;;;400      }
;;;401      CurrentMethod = OldMethod;
0003e2  4817              LDR      r0,|L1.1088|
0003e4  7005              STRB     r5,[r0,#0]
;;;402      CurrentFont = OldFont;
0003e6  4829              LDR      r0,|L1.1164|
0003e8  6004              STR      r4,[r0,#0]  ; CurrentFont
;;;403    }
0003ea  bd70              POP      {r4-r6,pc}
;;;404    
                          ENDP

                  TimeAdjustFunc PROC
;;;411    *******************************************************************************/
;;;412    void TimeAdjustFunc(void)
0003ec  b510              PUSH     {r4,lr}
;;;413    {
;;;414      TimePreAdjustFunc();
0003ee  f7fffffe          BL       TimePreAdjustFunc
;;;415      /* Display the menu */
;;;416      DisplayMenu();
0003f2  f7fffffe          BL       DisplayMenu
;;;417    }
0003f6  bd10              POP      {r4,pc}
;;;418    
                          ENDP

                  TimeShowFunc PROC
;;;425    *******************************************************************************/
;;;426    void TimeShowFunc(void)
0003f8  b570              PUSH     {r4-r6,lr}
;;;427    {
;;;428      sFONT *OldFont = CurrentFont;
0003fa  4824              LDR      r0,|L1.1164|
0003fc  6804              LDR      r4,[r0,#0]  ; CurrentFont
;;;429      LCD_Method OldMethod = CurrentMethod;
0003fe  4810              LDR      r0,|L1.1088|
000400  7805              LDRB     r5,[r0,#0]  ; CurrentMethod
;;;430    
;;;431      /* Print the header */
;;;432      LCD_CLS();
000402  f7fffffe          BL       LCD_CLS
;;;433      CurrentMethod = MET_AND;
000406  2004              MOVS     r0,#4
000408  490d              LDR      r1,|L1.1088|
00040a  7008              STRB     r0,[r1,#0]
;;;434      CurrentFont = &Font_6x8;
00040c  4820              LDR      r0,|L1.1168|
00040e  491f              LDR      r1,|L1.1164|
000410  6008              STR      r0,[r1,#0]  ; CurrentFont
;;;435      DisplayMenuTitle("Time show");
000412  a030              ADR      r0,|L1.1236|
000414  f7fffffe          BL       DisplayMenuTitle
;;;436      WAIT_UNTIL_KEY_RELEASED(SEL);
000418  bf00              NOP      
                  |L1.1050|
00041a  f7fffffe          BL       GetKey
00041e  2800              CMP      r0,#0
000420  d0fb              BEQ      |L1.1050|
;;;437    
;;;438      if((MDR_BKP->REG_00 != 0x1234) || (MDR_BKP->RTC_PRL != RTC_PRESCALER_VALUE))
000422  481f              LDR      r0,|L1.1184|
000424  6800              LDR      r0,[r0,#0]
000426  f5a05190          SUB      r1,r0,#0x1200
00042a  3934              SUBS     r1,r1,#0x34
00042c  d104              BNE      |L1.1080|
00042e  481c              LDR      r0,|L1.1184|
000430  6c80              LDR      r0,[r0,#0x48]
000432  f5b04f00          CMP      r0,#0x8000
000436  d053              BEQ      |L1.1248|
                  |L1.1080|
;;;439      {
;;;440        RTCHelp();
000438  f7fffffe          BL       RTCHelp
00043c  e062              B        |L1.1284|
00043e  0000              DCW      0x0000
                  |L1.1088|
                          DCD      CurrentMethod
                  |L1.1092|
                          DCD      sTime
                  |L1.1096|
000448  52544320          DCB      "RTC is not configured",0
00044c  6973206e
000450  6f742063
000454  6f6e6669
000458  67757265
00045c  6400    
00045e  00                DCB      0
00045f  00                DCB      0
                  |L1.1120|
000460  506c6561          DCB      "Please, use the ",0
000464  73652c20
000468  75736520
00046c  74686520
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L1.1140|
000474  54696d65          DCB      "Time Adjust menu.    ",0
000478  2041646a
00047c  75737420
000480  6d656e75
000484  2e202020
000488  2000    
00048a  00                DCB      0
00048b  00                DCB      0
                  |L1.1164|
                          DCD      CurrentFont
                  |L1.1168|
                          DCD      Font_6x8
                  |L1.1172|
000494  54696d65          DCB      "Time adjust",0
000498  2061646a
00049c  75737400
                  |L1.1184|
                          DCD      0x400d8000
                  |L1.1188|
0004a4  52544320          DCB      "RTC is configured...",0
0004a8  69732063
0004ac  6f6e6669
0004b0  67757265
0004b4  642e2e2e
0004b8  00      
0004b9  00                DCB      0
0004ba  00                DCB      0
0004bb  00                DCB      0
                  |L1.1212|
0004bc  20202020          DCB      "        TIME        ",0
0004c0  20202020
0004c4  54494d45
0004c8  20202020
0004cc  20202020
0004d0  00      
0004d1  00                DCB      0
0004d2  00                DCB      0
0004d3  00                DCB      0
                  |L1.1236|
0004d4  54696d65          DCB      "Time show",0
0004d8  2073686f
0004dc  7700    
0004de  00                DCB      0
0004df  00                DCB      0
                  |L1.1248|
;;;441      }
;;;442      else
;;;443      {
;;;444        LCD_PUTS(0, LineTitle, "        TIME        ");
0004e0  f2af0228          ADR      r2,|L1.1212|
0004e4  212a              MOVS     r1,#0x2a
0004e6  2000              MOVS     r0,#0
0004e8  f7fffffe          BL       LCD_PUTS
;;;445        while (GetKey() != SEL)
0004ec  e001              B        |L1.1266|
                  |L1.1262|
;;;446        {
;;;447          /* Display the current time */
;;;448          Time_Display();
0004ee  f7fffffe          BL       Time_Display
                  |L1.1266|
0004f2  f7fffffe          BL       GetKey
0004f6  2800              CMP      r0,#0                 ;445
0004f8  d1f9              BNE      |L1.1262|
;;;449        }
;;;450        WAIT_UNTIL_KEY_RELEASED(SEL);
0004fa  bf00              NOP      
                  |L1.1276|
0004fc  f7fffffe          BL       GetKey
000500  2800              CMP      r0,#0
000502  d0fb              BEQ      |L1.1276|
                  |L1.1284|
;;;451      }
;;;452    
;;;453      CurrentMethod = OldMethod;
000504  48fe              LDR      r0,|L1.2304|
000506  7005              STRB     r5,[r0,#0]
;;;454      CurrentFont = OldFont;
000508  48fe              LDR      r0,|L1.2308|
00050a  6004              STR      r4,[r0,#0]  ; CurrentFont
;;;455    
;;;456      /* Display the menu */
;;;457      DisplayMenu();
00050c  f7fffffe          BL       DisplayMenu
;;;458    
;;;459    }
000510  bd70              POP      {r4-r6,pc}
;;;460    
                          ENDP

                  IsLeapYear PROC
;;;468    *******************************************************************************/
;;;469    static uint32_t IsLeapYear(uint32_t nYear)
000512  4601              MOV      r1,r0
;;;470    {
;;;471      if(nYear % 4 != 0) return 0;
000514  f0110f03          TST      r1,#3
000518  d001              BEQ      |L1.1310|
00051a  2000              MOVS     r0,#0
                  |L1.1308|
;;;472      if(nYear % 100 != 0) return 1;
;;;473      return (uint8_t)(nYear % 400 == 0);
;;;474    }
00051c  4770              BX       lr
                  |L1.1310|
00051e  2064              MOVS     r0,#0x64              ;472
000520  fbb1f2f0          UDIV     r2,r1,r0              ;472
000524  fb001012          MLS      r0,r0,r2,r1           ;472
000528  b108              CBZ      r0,|L1.1326|
00052a  2001              MOVS     r0,#1                 ;472
00052c  e7f6              B        |L1.1308|
                  |L1.1326|
00052e  f44f70c8          MOV      r0,#0x190             ;473
000532  fbb1f2f0          UDIV     r2,r1,r0              ;473
000536  fb001012          MLS      r0,r0,r2,r1           ;473
00053a  b908              CBNZ     r0,|L1.1344|
00053c  2001              MOVS     r0,#1                 ;473
00053e  e7ed              B        |L1.1308|
                  |L1.1344|
000540  2000              MOVS     r0,#0                 ;473
000542  e7eb              B        |L1.1308|
;;;475    
                          ENDP

                  Date_Update PROC
;;;482    *******************************************************************************/
;;;483    void Date_Update(void)
000544  b510              PUSH     {r4,lr}
;;;484    {
;;;485      if(sDate.month == 1 || sDate.month == 3 || sDate.month == 5 || sDate.month == 7 ||
000546  48f0              LDR      r0,|L1.2312|
000548  7840              LDRB     r0,[r0,#1]  ; sDate
00054a  2801              CMP      r0,#1
00054c  d017              BEQ      |L1.1406|
00054e  48ee              LDR      r0,|L1.2312|
000550  7840              LDRB     r0,[r0,#1]  ; sDate
000552  2803              CMP      r0,#3
000554  d013              BEQ      |L1.1406|
000556  48ec              LDR      r0,|L1.2312|
000558  7840              LDRB     r0,[r0,#1]  ; sDate
00055a  2805              CMP      r0,#5
00055c  d00f              BEQ      |L1.1406|
00055e  48ea              LDR      r0,|L1.2312|
000560  7840              LDRB     r0,[r0,#1]  ; sDate
000562  2807              CMP      r0,#7
000564  d00b              BEQ      |L1.1406|
;;;486         sDate.month == 8 || sDate.month == 10 || sDate.month == 12)
000566  48e8              LDR      r0,|L1.2312|
000568  7840              LDRB     r0,[r0,#1]  ; sDate
00056a  2808              CMP      r0,#8
00056c  d007              BEQ      |L1.1406|
00056e  48e6              LDR      r0,|L1.2312|
000570  7840              LDRB     r0,[r0,#1]  ; sDate
000572  280a              CMP      r0,#0xa
000574  d003              BEQ      |L1.1406|
000576  48e4              LDR      r0,|L1.2312|
000578  7840              LDRB     r0,[r0,#1]  ; sDate
00057a  280c              CMP      r0,#0xc
00057c  d11e              BNE      |L1.1468|
                  |L1.1406|
;;;487      {
;;;488        if(sDate.day < 31)
00057e  48e2              LDR      r0,|L1.2312|
000580  7800              LDRB     r0,[r0,#0]  ; sDate
000582  281f              CMP      r0,#0x1f
000584  da05              BGE      |L1.1426|
;;;489        {
;;;490          sDate.day++;
000586  48e0              LDR      r0,|L1.2312|
000588  7800              LDRB     r0,[r0,#0]  ; sDate
00058a  1c40              ADDS     r0,r0,#1
00058c  49de              LDR      r1,|L1.2312|
00058e  7008              STRB     r0,[r1,#0]
000590  e066              B        |L1.1632|
                  |L1.1426|
;;;491        }
;;;492        /* Date structure member: sDate.day = 31 */
;;;493        else
;;;494        {
;;;495          if(sDate.month != 12)
000592  48dd              LDR      r0,|L1.2312|
000594  7840              LDRB     r0,[r0,#1]  ; sDate
000596  280c              CMP      r0,#0xc
000598  d007              BEQ      |L1.1450|
;;;496          {
;;;497            sDate.month++;
00059a  48db              LDR      r0,|L1.2312|
00059c  7840              LDRB     r0,[r0,#1]  ; sDate
00059e  1c40              ADDS     r0,r0,#1
0005a0  49d9              LDR      r1,|L1.2312|
0005a2  7048              STRB     r0,[r1,#1]
;;;498            sDate.day = 1;
0005a4  2001              MOVS     r0,#1
0005a6  7008              STRB     r0,[r1,#0]
0005a8  e05a              B        |L1.1632|
                  |L1.1450|
;;;499          }
;;;500          /* Date structure member: sDate.day = 31 & sDate.month =12 */
;;;501          else
;;;502          {
;;;503            sDate.month = 1;
0005aa  2001              MOVS     r0,#1
0005ac  49d6              LDR      r1,|L1.2312|
0005ae  7048              STRB     r0,[r1,#1]
;;;504            sDate.day = 1;
0005b0  7008              STRB     r0,[r1,#0]
;;;505            sDate.year++;
0005b2  4608              MOV      r0,r1
0005b4  8840              LDRH     r0,[r0,#2]  ; sDate
0005b6  1c40              ADDS     r0,r0,#1
0005b8  8048              STRH     r0,[r1,#2]
0005ba  e051              B        |L1.1632|
                  |L1.1468|
;;;506          }
;;;507        }
;;;508      }
;;;509      else if(sDate.month == 4 || sDate.month == 6 || sDate.month == 9 ||
0005bc  48d2              LDR      r0,|L1.2312|
0005be  7840              LDRB     r0,[r0,#1]  ; sDate
0005c0  2804              CMP      r0,#4
0005c2  d00b              BEQ      |L1.1500|
0005c4  48d0              LDR      r0,|L1.2312|
0005c6  7840              LDRB     r0,[r0,#1]  ; sDate
0005c8  2806              CMP      r0,#6
0005ca  d007              BEQ      |L1.1500|
0005cc  48ce              LDR      r0,|L1.2312|
0005ce  7840              LDRB     r0,[r0,#1]  ; sDate
0005d0  2809              CMP      r0,#9
0005d2  d003              BEQ      |L1.1500|
;;;510              sDate.month == 11)
0005d4  48cc              LDR      r0,|L1.2312|
0005d6  7840              LDRB     r0,[r0,#1]  ; sDate
0005d8  280b              CMP      r0,#0xb
0005da  d111              BNE      |L1.1536|
                  |L1.1500|
;;;511      {
;;;512        if(sDate.day < 30)
0005dc  48ca              LDR      r0,|L1.2312|
0005de  7800              LDRB     r0,[r0,#0]  ; sDate
0005e0  281e              CMP      r0,#0x1e
0005e2  da05              BGE      |L1.1520|
;;;513        {
;;;514          sDate.day++;
0005e4  48c8              LDR      r0,|L1.2312|
0005e6  7800              LDRB     r0,[r0,#0]  ; sDate
0005e8  1c40              ADDS     r0,r0,#1
0005ea  49c7              LDR      r1,|L1.2312|
0005ec  7008              STRB     r0,[r1,#0]
0005ee  e037              B        |L1.1632|
                  |L1.1520|
;;;515        }
;;;516        /* Date structure member: sDate.day = 30 */
;;;517        else
;;;518        {
;;;519          sDate.month++;
0005f0  48c5              LDR      r0,|L1.2312|
0005f2  7840              LDRB     r0,[r0,#1]  ; sDate
0005f4  1c40              ADDS     r0,r0,#1
0005f6  49c4              LDR      r1,|L1.2312|
0005f8  7048              STRB     r0,[r1,#1]
;;;520          sDate.day = 1;
0005fa  2001              MOVS     r0,#1
0005fc  7008              STRB     r0,[r1,#0]
0005fe  e02f              B        |L1.1632|
                  |L1.1536|
;;;521        }
;;;522      }
;;;523      else if(sDate.month == 2)
000600  48c1              LDR      r0,|L1.2312|
000602  7840              LDRB     r0,[r0,#1]  ; sDate
000604  2802              CMP      r0,#2
000606  d12b              BNE      |L1.1632|
;;;524      {
;;;525        if(sDate.day < 28)
000608  48bf              LDR      r0,|L1.2312|
00060a  7800              LDRB     r0,[r0,#0]  ; sDate
00060c  281c              CMP      r0,#0x1c
00060e  da05              BGE      |L1.1564|
;;;526        {
;;;527          sDate.day++;
000610  48bd              LDR      r0,|L1.2312|
000612  7800              LDRB     r0,[r0,#0]  ; sDate
000614  1c40              ADDS     r0,r0,#1
000616  49bc              LDR      r1,|L1.2312|
000618  7008              STRB     r0,[r1,#0]
00061a  e021              B        |L1.1632|
                  |L1.1564|
;;;528        }
;;;529        else if(sDate.day == 28)
00061c  48ba              LDR      r0,|L1.2312|
00061e  7800              LDRB     r0,[r0,#0]  ; sDate
000620  281c              CMP      r0,#0x1c
000622  d112              BNE      |L1.1610|
;;;530        {
;;;531          /* Leap year */
;;;532          if(IsLeapYear(sDate.year))
000624  49b8              LDR      r1,|L1.2312|
000626  8848              LDRH     r0,[r1,#2]  ; sDate
000628  f7fffffe          BL       IsLeapYear
00062c  b128              CBZ      r0,|L1.1594|
;;;533          {
;;;534            sDate.day++;
00062e  48b6              LDR      r0,|L1.2312|
000630  7800              LDRB     r0,[r0,#0]  ; sDate
000632  1c40              ADDS     r0,r0,#1
000634  49b4              LDR      r1,|L1.2312|
000636  7008              STRB     r0,[r1,#0]
000638  e012              B        |L1.1632|
                  |L1.1594|
;;;535          }
;;;536          else
;;;537          {
;;;538            sDate.month++;
00063a  48b3              LDR      r0,|L1.2312|
00063c  7840              LDRB     r0,[r0,#1]  ; sDate
00063e  1c40              ADDS     r0,r0,#1
000640  49b1              LDR      r1,|L1.2312|
000642  7048              STRB     r0,[r1,#1]
;;;539            sDate.day = 1;
000644  2001              MOVS     r0,#1
000646  7008              STRB     r0,[r1,#0]
000648  e00a              B        |L1.1632|
                  |L1.1610|
;;;540          }
;;;541        }
;;;542        else if(sDate.day == 29)
00064a  48af              LDR      r0,|L1.2312|
00064c  7800              LDRB     r0,[r0,#0]  ; sDate
00064e  281d              CMP      r0,#0x1d
000650  d106              BNE      |L1.1632|
;;;543        {
;;;544          sDate.month++;
000652  48ad              LDR      r0,|L1.2312|
000654  7840              LDRB     r0,[r0,#1]  ; sDate
000656  1c40              ADDS     r0,r0,#1
000658  49ab              LDR      r1,|L1.2312|
00065a  7048              STRB     r0,[r1,#1]
;;;545          sDate.day = 1;
00065c  2001              MOVS     r0,#1
00065e  7008              STRB     r0,[r1,#0]
                  |L1.1632|
;;;546        }
;;;547      }
;;;548    
;;;549      MDR_BKP->REG_01 = sDate.year + (sDate.month << 16) + (sDate.day << 24);
000660  48a9              LDR      r0,|L1.2312|
000662  8840              LDRH     r0,[r0,#2]  ; sDate
000664  49a8              LDR      r1,|L1.2312|
000666  7849              LDRB     r1,[r1,#1]  ; sDate
000668  eb004001          ADD      r0,r0,r1,LSL #16
00066c  49a6              LDR      r1,|L1.2312|
00066e  7809              LDRB     r1,[r1,#0]  ; sDate
000670  eb006001          ADD      r0,r0,r1,LSL #24
000674  49a5              LDR      r1,|L1.2316|
000676  6048              STR      r0,[r1,#4]
;;;550      /* Wait until last write operation on RTC registers has finished */
;;;551      BKP_RTC_WaitForUpdate();
000678  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;552    }
00067c  bd10              POP      {r4,pc}
;;;553    
                          ENDP

                  IsValidDate PROC
;;;563    *******************************************************************************/
;;;564    ErrorStatus IsValidDate(uint32_t Day, uint32_t Month, uint32_t Year)
00067e  b570              PUSH     {r4-r6,lr}
;;;565    {
000680  4605              MOV      r5,r0
000682  460c              MOV      r4,r1
000684  4616              MOV      r6,r2
;;;566      if(Day == 0 || Month == 0 || Month > 12 || Year == 0)
000686  b11d              CBZ      r5,|L1.1680|
000688  b114              CBZ      r4,|L1.1680|
00068a  2c0c              CMP      r4,#0xc
00068c  d800              BHI      |L1.1680|
00068e  b90e              CBNZ     r6,|L1.1684|
                  |L1.1680|
;;;567      {
;;;568        return ERROR;
000690  2000              MOVS     r0,#0
                  |L1.1682|
;;;569      }
;;;570      if((Month == 1 || Month == 3 || Month == 5 || Month == 7 ||
;;;571         Month == 8 || Month == 10 || Month == 12) && (Day > 31))
;;;572      {
;;;573        return ERROR;
;;;574      }
;;;575      if((Month == 4 || Month == 6 || Month == 9 || Month == 11) && (Day > 30))
;;;576      {
;;;577        return ERROR;
;;;578      }
;;;579      if(Month == 2)
;;;580      {
;;;581        if (IsLeapYear(Year))
;;;582        {
;;;583          if (Day > 29)
;;;584          return ERROR;
;;;585        }
;;;586        else
;;;587        {
;;;588          if (Day > 28)
;;;589          return ERROR;
;;;590        }
;;;591      }
;;;592      return SUCCESS;
;;;593    }
000692  bd70              POP      {r4-r6,pc}
                  |L1.1684|
000694  2c01              CMP      r4,#1                 ;570
000696  d00b              BEQ      |L1.1712|
000698  2c03              CMP      r4,#3                 ;570
00069a  d009              BEQ      |L1.1712|
00069c  2c05              CMP      r4,#5                 ;570
00069e  d007              BEQ      |L1.1712|
0006a0  2c07              CMP      r4,#7                 ;570
0006a2  d005              BEQ      |L1.1712|
0006a4  2c08              CMP      r4,#8                 ;571
0006a6  d003              BEQ      |L1.1712|
0006a8  2c0a              CMP      r4,#0xa               ;571
0006aa  d001              BEQ      |L1.1712|
0006ac  2c0c              CMP      r4,#0xc               ;571
0006ae  d103              BNE      |L1.1720|
                  |L1.1712|
0006b0  2d1f              CMP      r5,#0x1f              ;571
0006b2  d901              BLS      |L1.1720|
0006b4  2000              MOVS     r0,#0                 ;573
0006b6  e7ec              B        |L1.1682|
                  |L1.1720|
0006b8  2c04              CMP      r4,#4                 ;575
0006ba  d005              BEQ      |L1.1736|
0006bc  2c06              CMP      r4,#6                 ;575
0006be  d003              BEQ      |L1.1736|
0006c0  2c09              CMP      r4,#9                 ;575
0006c2  d001              BEQ      |L1.1736|
0006c4  2c0b              CMP      r4,#0xb               ;575
0006c6  d103              BNE      |L1.1744|
                  |L1.1736|
0006c8  2d1e              CMP      r5,#0x1e              ;575
0006ca  d901              BLS      |L1.1744|
0006cc  2000              MOVS     r0,#0                 ;577
0006ce  e7e0              B        |L1.1682|
                  |L1.1744|
0006d0  2c02              CMP      r4,#2                 ;579
0006d2  d10b              BNE      |L1.1772|
0006d4  4630              MOV      r0,r6                 ;581
0006d6  f7fffffe          BL       IsLeapYear
0006da  b118              CBZ      r0,|L1.1764|
0006dc  2d1d              CMP      r5,#0x1d              ;583
0006de  d905              BLS      |L1.1772|
0006e0  2000              MOVS     r0,#0                 ;584
0006e2  e7d6              B        |L1.1682|
                  |L1.1764|
0006e4  2d1c              CMP      r5,#0x1c              ;588
0006e6  d901              BLS      |L1.1772|
0006e8  2000              MOVS     r0,#0                 ;589
0006ea  e7d2              B        |L1.1682|
                  |L1.1772|
0006ec  2001              MOVS     r0,#1                 ;592
0006ee  e7d0              B        |L1.1682|
;;;594    
                          ENDP

                  Date_Display PROC
;;;601    *******************************************************************************/
;;;602    void Date_Display(void)
0006f0  b570              PUSH     {r4-r6,lr}
;;;603    {
;;;604      uint8_t tmp;
;;;605      uint32_t temp_date;
;;;606    
;;;607      /* Initialize Date structure */
;;;608      temp_date   = MDR_BKP->REG_01;
0006f2  4886              LDR      r0,|L1.2316|
0006f4  6845              LDR      r5,[r0,#4]
;;;609      sDate.day   = temp_date >> 24;
0006f6  0e28              LSRS     r0,r5,#24
0006f8  4983              LDR      r1,|L1.2312|
0006fa  7008              STRB     r0,[r1,#0]
;;;610      sDate.month = (temp_date >> 16) & 0xFF;
0006fc  0c28              LSRS     r0,r5,#16
0006fe  7048              STRB     r0,[r1,#1]
;;;611      sDate.year  = temp_date & 0xFFFF;
000700  804d              STRH     r5,[r1,#2]
;;;612    
;;;613      /* Display day */
;;;614      tmp = (uint8_t)(sDate.day / 10);
000702  4608              MOV      r0,r1
000704  7800              LDRB     r0,[r0,#0]  ; sDate
000706  210a              MOVS     r1,#0xa
000708  fb90f0f1          SDIV     r0,r0,r1
00070c  b2c4              UXTB     r4,r0
;;;615      LCD_PUTC(DateD_h, LineDigits, (tmp + 0x30));
00070e  f1040030          ADD      r0,r4,#0x30
000712  b2c2              UXTB     r2,r0
000714  2134              MOVS     r1,#0x34
000716  2025              MOVS     r0,#0x25
000718  f7fffffe          BL       LCD_PUTC
;;;616      tmp = (uint8_t)(sDate.day % 10);
00071c  487a              LDR      r0,|L1.2312|
00071e  7800              LDRB     r0,[r0,#0]  ; sDate
000720  210a              MOVS     r1,#0xa
000722  fb90f2f1          SDIV     r2,r0,r1
000726  fb010012          MLS      r0,r1,r2,r0
00072a  b2c4              UXTB     r4,r0
;;;617      LCD_PUTC(DateD_l, LineDigits, (tmp + 0x30));
00072c  f1040030          ADD      r0,r4,#0x30
000730  b2c2              UXTB     r2,r0
000732  2134              MOVS     r1,#0x34
000734  202b              MOVS     r0,#0x2b
000736  f7fffffe          BL       LCD_PUTC
;;;618    
;;;619      /* Display separator */
;;;620      LCD_PUTC(DateD_sep, LineDigits, '.');
00073a  222e              MOVS     r2,#0x2e
00073c  2134              MOVS     r1,#0x34
00073e  2031              MOVS     r0,#0x31
000740  f7fffffe          BL       LCD_PUTC
;;;621    
;;;622      /* Display month */
;;;623      tmp = (uint8_t)(sDate.month / 10);
000744  4870              LDR      r0,|L1.2312|
000746  7840              LDRB     r0,[r0,#1]  ; sDate
000748  210a              MOVS     r1,#0xa
00074a  fb90f0f1          SDIV     r0,r0,r1
00074e  b2c4              UXTB     r4,r0
;;;624      LCD_PUTC(DateM_h, LineDigits, (tmp + 0x30));
000750  f1040030          ADD      r0,r4,#0x30
000754  b2c2              UXTB     r2,r0
000756  2134              MOVS     r1,#0x34
000758  2037              MOVS     r0,#0x37
00075a  f7fffffe          BL       LCD_PUTC
;;;625      tmp = (uint8_t)(sDate.month % 10);
00075e  486a              LDR      r0,|L1.2312|
000760  7840              LDRB     r0,[r0,#1]  ; sDate
000762  210a              MOVS     r1,#0xa
000764  fb90f2f1          SDIV     r2,r0,r1
000768  fb010012          MLS      r0,r1,r2,r0
00076c  b2c4              UXTB     r4,r0
;;;626      LCD_PUTC(DateM_l, LineDigits, (tmp + 0x30));
00076e  f1040030          ADD      r0,r4,#0x30
000772  b2c2              UXTB     r2,r0
000774  2134              MOVS     r1,#0x34
000776  203d              MOVS     r0,#0x3d
000778  f7fffffe          BL       LCD_PUTC
;;;627    
;;;628      /* Display separator */
;;;629      LCD_PUTC(DateM_sep, LineDigits, '.');
00077c  222e              MOVS     r2,#0x2e
00077e  2134              MOVS     r1,#0x34
000780  2043              MOVS     r0,#0x43
000782  f7fffffe          BL       LCD_PUTC
;;;630    
;;;631      /* Display year */
;;;632      tmp = (uint8_t)(sDate.year / 1000);
000786  4860              LDR      r0,|L1.2312|
000788  8840              LDRH     r0,[r0,#2]  ; sDate
00078a  f44f717a          MOV      r1,#0x3e8
00078e  fb90f0f1          SDIV     r0,r0,r1
000792  b2c4              UXTB     r4,r0
;;;633      LCD_PUTC(DateY_1000, LineDigits, (tmp + 0x30));
000794  f1040030          ADD      r0,r4,#0x30
000798  b2c2              UXTB     r2,r0
00079a  2134              MOVS     r1,#0x34
00079c  2049              MOVS     r0,#0x49
00079e  f7fffffe          BL       LCD_PUTC
;;;634      tmp = (uint8_t)((sDate.year / 100) % 10);
0007a2  4859              LDR      r0,|L1.2312|
0007a4  8840              LDRH     r0,[r0,#2]  ; sDate
0007a6  2164              MOVS     r1,#0x64
0007a8  fb90f0f1          SDIV     r0,r0,r1
0007ac  210a              MOVS     r1,#0xa
0007ae  fb90f2f1          SDIV     r2,r0,r1
0007b2  fb010012          MLS      r0,r1,r2,r0
0007b6  b2c4              UXTB     r4,r0
;;;635      LCD_PUTC(DateY_100, LineDigits, (tmp + 0x30));
0007b8  f1040030          ADD      r0,r4,#0x30
0007bc  b2c2              UXTB     r2,r0
0007be  2134              MOVS     r1,#0x34
0007c0  204f              MOVS     r0,#0x4f
0007c2  f7fffffe          BL       LCD_PUTC
;;;636      tmp = (uint8_t)((sDate.year / 10) % 10);
0007c6  4850              LDR      r0,|L1.2312|
0007c8  8840              LDRH     r0,[r0,#2]  ; sDate
0007ca  210a              MOVS     r1,#0xa
0007cc  fb90f0f1          SDIV     r0,r0,r1
0007d0  fb90f2f1          SDIV     r2,r0,r1
0007d4  fb010012          MLS      r0,r1,r2,r0
0007d8  b2c4              UXTB     r4,r0
;;;637      LCD_PUTC(DateY_10, LineDigits, (tmp + 0x30));
0007da  f1040030          ADD      r0,r4,#0x30
0007de  b2c2              UXTB     r2,r0
0007e0  2134              MOVS     r1,#0x34
0007e2  2055              MOVS     r0,#0x55
0007e4  f7fffffe          BL       LCD_PUTC
;;;638      tmp = (uint8_t)(sDate.year % 10);
0007e8  4847              LDR      r0,|L1.2312|
0007ea  8840              LDRH     r0,[r0,#2]  ; sDate
0007ec  210a              MOVS     r1,#0xa
0007ee  fb90f2f1          SDIV     r2,r0,r1
0007f2  fb010012          MLS      r0,r1,r2,r0
0007f6  b2c4              UXTB     r4,r0
;;;639      LCD_PUTC(DateY_1, LineDigits, (tmp + 0x30));
0007f8  f1040030          ADD      r0,r4,#0x30
0007fc  b2c2              UXTB     r2,r0
0007fe  2134              MOVS     r1,#0x34
000800  205b              MOVS     r0,#0x5b
000802  f7fffffe          BL       LCD_PUTC
;;;640    }
000806  bd70              POP      {r4-r6,pc}
;;;641    
                          ENDP

                  Date_Regulate PROC
;;;649    *******************************************************************************/
;;;650    void Date_Regulate(void)
000808  e92d41f0          PUSH     {r4-r8,lr}
;;;651    {
;;;652      uint32_t Tmp_day, Tmp_month, Tmp_year;
;;;653      FlagStatus ValidDateFlag;
;;;654    
;;;655      do
00080c  bf00              NOP      
                  |L1.2062|
;;;656      {
;;;657        ValidDateFlag = SET;
00080e  2701              MOVS     r7,#1
;;;658        /* Read day */
;;;659        Tmp_day  = ReadDigit(DateD_h, (sDate.day / 10), 0x3, 0x0);
000810  483d              LDR      r0,|L1.2312|
000812  7800              LDRB     r0,[r0,#0]  ; sDate
000814  210a              MOVS     r1,#0xa
000816  fb90f0f1          SDIV     r0,r0,r1
00081a  f00008ff          AND      r8,r0,#0xff
00081e  2300              MOVS     r3,#0
000820  2203              MOVS     r2,#3
000822  4641              MOV      r1,r8
000824  2025              MOVS     r0,#0x25
000826  f7fffffe          BL       ReadDigit
00082a  4605              MOV      r5,r0
;;;660        Tmp_day  = Tmp_day * 10 + ReadDigit(DateD_l, (sDate.day % 10), (Tmp_day < 3) ? 0x9 : 0x1, 0x0);
00082c  4836              LDR      r0,|L1.2312|
00082e  7800              LDRB     r0,[r0,#0]  ; sDate
000830  210a              MOVS     r1,#0xa
000832  fb90f2f1          SDIV     r2,r0,r1
000836  fb010012          MLS      r0,r1,r2,r0
00083a  f00008ff          AND      r8,r0,#0xff
00083e  2d03              CMP      r5,#3
000840  d201              BCS      |L1.2118|
000842  2009              MOVS     r0,#9
000844  e000              B        |L1.2120|
                  |L1.2118|
000846  2001              MOVS     r0,#1
                  |L1.2120|
000848  4602              MOV      r2,r0
00084a  2300              MOVS     r3,#0
00084c  4641              MOV      r1,r8
00084e  202b              MOVS     r0,#0x2b
000850  f7fffffe          BL       ReadDigit
000854  eb050185          ADD      r1,r5,r5,LSL #2
000858  eb000541          ADD      r5,r0,r1,LSL #1
;;;661        /* Read month */
;;;662        Tmp_month = ReadDigit(DateM_h, (sDate.month / 10), 0x1, 0x0);
00085c  482a              LDR      r0,|L1.2312|
00085e  7840              LDRB     r0,[r0,#1]  ; sDate
000860  210a              MOVS     r1,#0xa
000862  fb90f0f1          SDIV     r0,r0,r1
000866  f00008ff          AND      r8,r0,#0xff
00086a  2300              MOVS     r3,#0
00086c  2201              MOVS     r2,#1
00086e  4641              MOV      r1,r8
000870  2037              MOVS     r0,#0x37
000872  f7fffffe          BL       ReadDigit
000876  4606              MOV      r6,r0
;;;663        Tmp_month = Tmp_month * 10 + ReadDigit(DateM_l, (sDate.month % 10), (Tmp_month < 1) ? 0x9 : 0x2, 0x0);
000878  4823              LDR      r0,|L1.2312|
00087a  7840              LDRB     r0,[r0,#1]  ; sDate
00087c  210a              MOVS     r1,#0xa
00087e  fb90f2f1          SDIV     r2,r0,r1
000882  fb010012          MLS      r0,r1,r2,r0
000886  f00008ff          AND      r8,r0,#0xff
00088a  b90e              CBNZ     r6,|L1.2192|
00088c  2009              MOVS     r0,#9
00088e  e000              B        |L1.2194|
                  |L1.2192|
000890  2002              MOVS     r0,#2
                  |L1.2194|
000892  4602              MOV      r2,r0
000894  2300              MOVS     r3,#0
000896  4641              MOV      r1,r8
000898  203d              MOVS     r0,#0x3d
00089a  f7fffffe          BL       ReadDigit
00089e  eb060186          ADD      r1,r6,r6,LSL #2
0008a2  eb000641          ADD      r6,r0,r1,LSL #1
;;;664        /* Read year */
;;;665        Tmp_year = ReadDigit(DateY_1000, (sDate.year / 1000), 0x2, 0x1) * 1000;
0008a6  4818              LDR      r0,|L1.2312|
0008a8  8840              LDRH     r0,[r0,#2]  ; sDate
0008aa  f44f717a          MOV      r1,#0x3e8
0008ae  fb90f0f1          SDIV     r0,r0,r1
0008b2  f00008ff          AND      r8,r0,#0xff
0008b6  2301              MOVS     r3,#1
0008b8  2202              MOVS     r2,#2
0008ba  4641              MOV      r1,r8
0008bc  2049              MOVS     r0,#0x49
0008be  f7fffffe          BL       ReadDigit
0008c2  f44f717a          MOV      r1,#0x3e8
0008c6  fb00f401          MUL      r4,r0,r1
;;;666        Tmp_year = Tmp_year + (ReadDigit(DateY_100, ((sDate.year / 100) % 10), 0x9, 0x0) * 100);
0008ca  480f              LDR      r0,|L1.2312|
0008cc  8840              LDRH     r0,[r0,#2]  ; sDate
0008ce  2164              MOVS     r1,#0x64
0008d0  fb90f0f1          SDIV     r0,r0,r1
0008d4  210a              MOVS     r1,#0xa
0008d6  fb90f2f1          SDIV     r2,r0,r1
0008da  fb010012          MLS      r0,r1,r2,r0
0008de  f00008ff          AND      r8,r0,#0xff
0008e2  2300              MOVS     r3,#0
0008e4  2209              MOVS     r2,#9
0008e6  4641              MOV      r1,r8
0008e8  204f              MOVS     r0,#0x4f
0008ea  f7fffffe          BL       ReadDigit
0008ee  eb0001c0          ADD      r1,r0,r0,LSL #3
0008f2  eb011000          ADD      r0,r1,r0,LSL #4
0008f6  eb040480          ADD      r4,r4,r0,LSL #2
;;;667        Tmp_year = Tmp_year + (ReadDigit(DateY_10, ((sDate.year / 10) % 10), 0x9, 0x0) * 10);
0008fa  4803              LDR      r0,|L1.2312|
0008fc  8840              LDRH     r0,[r0,#2]  ; sDate
0008fe  e007              B        |L1.2320|
                  |L1.2304|
                          DCD      CurrentMethod
                  |L1.2308|
                          DCD      CurrentFont
                  |L1.2312|
                          DCD      sDate
                  |L1.2316|
                          DCD      0x400d8000
                  |L1.2320|
000910  210a              MOVS     r1,#0xa
000912  fb90f0f1          SDIV     r0,r0,r1
000916  fb90f2f1          SDIV     r2,r0,r1
00091a  fb010012          MLS      r0,r1,r2,r0
00091e  f00008ff          AND      r8,r0,#0xff
000922  2300              MOVS     r3,#0
000924  2209              MOVS     r2,#9
000926  4641              MOV      r1,r8
000928  2055              MOVS     r0,#0x55
00092a  f7fffffe          BL       ReadDigit
00092e  eb000080          ADD      r0,r0,r0,LSL #2
000932  eb040440          ADD      r4,r4,r0,LSL #1
;;;668        Tmp_year = Tmp_year + ReadDigit(DateY_1, (sDate.year % 10), 0x9, 0x0);
000936  48fe              LDR      r0,|L1.3376|
000938  8840              LDRH     r0,[r0,#2]  ; sDate
00093a  210a              MOVS     r1,#0xa
00093c  fb90f2f1          SDIV     r2,r0,r1
000940  fb010012          MLS      r0,r1,r2,r0
000944  f00008ff          AND      r8,r0,#0xff
000948  2300              MOVS     r3,#0
00094a  2209              MOVS     r2,#9
00094c  4641              MOV      r1,r8
00094e  205b              MOVS     r0,#0x5b
000950  f7fffffe          BL       ReadDigit
000954  4404              ADD      r4,r4,r0
;;;669        if (!IsValidDate(Tmp_day, Tmp_month, Tmp_year))
000956  4622              MOV      r2,r4
000958  4631              MOV      r1,r6
00095a  4628              MOV      r0,r5
00095c  f7fffffe          BL       IsValidDate
000960  2800              CMP      r0,#0
000962  d11b              BNE      |L1.2460|
;;;670        {
;;;671          ValidDateFlag = RESET;
000964  2700              MOVS     r7,#0
;;;672          LCD_PUTS(0, LineMessage1, "   Invalid date." );
000966  a2f3              ADR      r2,|L1.3380|
000968  210c              MOVS     r1,#0xc
00096a  f7fffffe          BL       LCD_PUTS
;;;673          LCD_PUTS(0, LineMessage2, "   Repeat, please.");
00096e  a2f6              ADR      r2,|L1.3400|
000970  2116              MOVS     r1,#0x16
000972  2000              MOVS     r0,#0
000974  f7fffffe          BL       LCD_PUTS
;;;674          SysTickDelay(2500);
000978  f64010c4          MOV      r0,#0x9c4
00097c  f7fffffe          BL       SysTickDelay
;;;675          LCD_PUTS(0, LineMessage1, "                " );
000980  a2f6              ADR      r2,|L1.3420|
000982  210c              MOVS     r1,#0xc
000984  2000              MOVS     r0,#0
000986  f7fffffe          BL       LCD_PUTS
;;;676          LCD_PUTS(0, LineMessage2, "                  ");
00098a  a2f9              ADR      r2,|L1.3440|
00098c  2116              MOVS     r1,#0x16
00098e  2000              MOVS     r0,#0
000990  f7fffffe          BL       LCD_PUTS
;;;677          sDate.day   = Tmp_day;
000994  49e6              LDR      r1,|L1.3376|
000996  700d              STRB     r5,[r1,#0]
;;;678          sDate.month = Tmp_month;
000998  704e              STRB     r6,[r1,#1]
;;;679          sDate.year  = Tmp_year;
00099a  804c              STRH     r4,[r1,#2]
                  |L1.2460|
;;;680        }
;;;681      } while (ValidDateFlag == RESET);
00099c  2f00              CMP      r7,#0
00099e  f43faf36          BEQ      |L1.2062|
;;;682      MDR_BKP->REG_01 = Tmp_year + (Tmp_month << 16) + (Tmp_day << 24);
0009a2  eb044006          ADD      r0,r4,r6,LSL #16
0009a6  eb006005          ADD      r0,r0,r5,LSL #24
0009aa  49f6              LDR      r1,|L1.3460|
0009ac  6048              STR      r0,[r1,#4]
;;;683      /* Wait until last write operation on RTC registers has finished */
;;;684      BKP_RTC_WaitForUpdate();
0009ae  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;685    }
0009b2  e8bd81f0          POP      {r4-r8,pc}
;;;686    
                          ENDP

                  DatePreAdjustFunc PROC
;;;693    *******************************************************************************/
;;;694    void DatePreAdjustFunc(void)
0009b6  b570              PUSH     {r4-r6,lr}
;;;695    {
;;;696      sFONT *OldFont = CurrentFont;
0009b8  48f3              LDR      r0,|L1.3464|
0009ba  6804              LDR      r4,[r0,#0]  ; CurrentFont
;;;697      LCD_Method OldMethod = CurrentMethod;
0009bc  48f3              LDR      r0,|L1.3468|
0009be  7805              LDRB     r5,[r0,#0]  ; CurrentMethod
;;;698    
;;;699      /* Print the header */
;;;700      LCD_CLS();
0009c0  f7fffffe          BL       LCD_CLS
;;;701      CurrentMethod = MET_AND;
0009c4  2004              MOVS     r0,#4
0009c6  49f1              LDR      r1,|L1.3468|
0009c8  7008              STRB     r0,[r1,#0]
;;;702      CurrentFont = &Font_6x8;
0009ca  48f1              LDR      r0,|L1.3472|
0009cc  49ee              LDR      r1,|L1.3464|
0009ce  6008              STR      r0,[r1,#0]  ; CurrentFont
;;;703      DisplayMenuTitle("Date adjust");
0009d0  a0f0              ADR      r0,|L1.3476|
0009d2  f7fffffe          BL       DisplayMenuTitle
;;;704      WAIT_UNTIL_KEY_RELEASED(SEL);
0009d6  bf00              NOP      
                  |L1.2520|
0009d8  f7fffffe          BL       GetKey
0009dc  2800              CMP      r0,#0
0009de  d0fb              BEQ      |L1.2520|
;;;705    
;;;706      if((MDR_BKP->REG_00 != 0x1234) || (MDR_BKP->RTC_PRL != RTC_PRESCALER_VALUE))
0009e0  48e8              LDR      r0,|L1.3460|
0009e2  6800              LDR      r0,[r0,#0]
0009e4  f5a05190          SUB      r1,r0,#0x1200
0009e8  3934              SUBS     r1,r1,#0x34
0009ea  d104              BNE      |L1.2550|
0009ec  48e5              LDR      r0,|L1.3460|
0009ee  6c80              LDR      r0,[r0,#0x48]
0009f0  f5b04f00          CMP      r0,#0x8000
0009f4  d002              BEQ      |L1.2556|
                  |L1.2550|
;;;707      {
;;;708        RTCHelp();
0009f6  f7fffffe          BL       RTCHelp
0009fa  e008              B        |L1.2574|
                  |L1.2556|
;;;709      }
;;;710      else
;;;711      {
;;;712        LCD_PUTS(0, LineTitle, "DATE  DD.MM.YYYY");
0009fc  a2e8              ADR      r2,|L1.3488|
0009fe  212a              MOVS     r1,#0x2a
000a00  2000              MOVS     r0,#0
000a02  f7fffffe          BL       LCD_PUTS
;;;713    
;;;714        /* Display the current Date */
;;;715        Date_Display();
000a06  f7fffffe          BL       Date_Display
;;;716        /* Change the current Date */
;;;717        Date_Regulate();
000a0a  f7fffffe          BL       Date_Regulate
                  |L1.2574|
;;;718      }
;;;719    
;;;720      CurrentMethod = OldMethod;
000a0e  48df              LDR      r0,|L1.3468|
000a10  7005              STRB     r5,[r0,#0]
;;;721      CurrentFont = OldFont;
000a12  48dd              LDR      r0,|L1.3464|
000a14  6004              STR      r4,[r0,#0]  ; CurrentFont
;;;722    }
000a16  bd70              POP      {r4-r6,pc}
;;;723    
                          ENDP

                  DateAdjustFunc PROC
;;;730    *******************************************************************************/
;;;731    void DateAdjustFunc(void)
000a18  b510              PUSH     {r4,lr}
;;;732    {
;;;733      DatePreAdjustFunc();
000a1a  f7fffffe          BL       DatePreAdjustFunc
;;;734      /* Display the menu */
;;;735      DisplayMenu();
000a1e  f7fffffe          BL       DisplayMenu
;;;736    }
000a22  bd10              POP      {r4,pc}
;;;737    
                          ENDP

                  DateShowFunc PROC
;;;744    *******************************************************************************/
;;;745    void DateShowFunc(void)
000a24  b570              PUSH     {r4-r6,lr}
;;;746    {
;;;747      sFONT *OldFont = CurrentFont;
000a26  48d8              LDR      r0,|L1.3464|
000a28  6804              LDR      r4,[r0,#0]  ; CurrentFont
;;;748      LCD_Method OldMethod = CurrentMethod;
000a2a  48d8              LDR      r0,|L1.3468|
000a2c  7805              LDRB     r5,[r0,#0]  ; CurrentMethod
;;;749    
;;;750      /* Print header */
;;;751      LCD_CLS();
000a2e  f7fffffe          BL       LCD_CLS
;;;752      CurrentMethod = MET_AND;
000a32  2004              MOVS     r0,#4
000a34  49d5              LDR      r1,|L1.3468|
000a36  7008              STRB     r0,[r1,#0]
;;;753      CurrentFont = &Font_6x8;
000a38  48d5              LDR      r0,|L1.3472|
000a3a  49d3              LDR      r1,|L1.3464|
000a3c  6008              STR      r0,[r1,#0]  ; CurrentFont
;;;754      DisplayMenuTitle("Date show");
000a3e  a0dd              ADR      r0,|L1.3508|
000a40  f7fffffe          BL       DisplayMenuTitle
;;;755      WAIT_UNTIL_KEY_RELEASED(SEL);
000a44  bf00              NOP      
                  |L1.2630|
000a46  f7fffffe          BL       GetKey
000a4a  2800              CMP      r0,#0
000a4c  d0fb              BEQ      |L1.2630|
;;;756    
;;;757      if((MDR_BKP->REG_00 != 0x1234) || (MDR_BKP->RTC_PRL != RTC_PRESCALER_VALUE))
000a4e  48cd              LDR      r0,|L1.3460|
000a50  6800              LDR      r0,[r0,#0]
000a52  f5a05190          SUB      r1,r0,#0x1200
000a56  3934              SUBS     r1,r1,#0x34
000a58  d104              BNE      |L1.2660|
000a5a  48ca              LDR      r0,|L1.3460|
000a5c  6c80              LDR      r0,[r0,#0x48]
000a5e  f5b04f00          CMP      r0,#0x8000
000a62  d002              BEQ      |L1.2666|
                  |L1.2660|
;;;758      {
;;;759        RTCHelp();
000a64  f7fffffe          BL       RTCHelp
000a68  e010              B        |L1.2700|
                  |L1.2666|
;;;760      }
;;;761      else
;;;762      {
;;;763        LCD_PUTS(0, LineTitle, "DATE  DD.MM.YYYY");
000a6a  a2cd              ADR      r2,|L1.3488|
000a6c  212a              MOVS     r1,#0x2a
000a6e  2000              MOVS     r0,#0
000a70  f7fffffe          BL       LCD_PUTS
;;;764    
;;;765        while (GetKey() != SEL)
000a74  e001              B        |L1.2682|
                  |L1.2678|
;;;766        {
;;;767          /* Display the current Date */
;;;768          Date_Display();
000a76  f7fffffe          BL       Date_Display
                  |L1.2682|
000a7a  f7fffffe          BL       GetKey
000a7e  2800              CMP      r0,#0                 ;765
000a80  d1f9              BNE      |L1.2678|
;;;769        }
;;;770        WAIT_UNTIL_KEY_RELEASED(SEL);
000a82  bf00              NOP      
                  |L1.2692|
000a84  f7fffffe          BL       GetKey
000a88  2800              CMP      r0,#0
000a8a  d0fb              BEQ      |L1.2692|
                  |L1.2700|
;;;771      }
;;;772    
;;;773      CurrentMethod = OldMethod;
000a8c  48bf              LDR      r0,|L1.3468|
000a8e  7005              STRB     r5,[r0,#0]
;;;774      CurrentFont = OldFont;
000a90  48bd              LDR      r0,|L1.3464|
000a92  6004              STR      r4,[r0,#0]  ; CurrentFont
;;;775    
;;;776      /* Display menu */
;;;777      DisplayMenu();
000a94  f7fffffe          BL       DisplayMenu
;;;778    }
000a98  bd70              POP      {r4-r6,pc}
;;;779    
                          ENDP

                  Alarm_Display PROC
;;;786    *******************************************************************************/
;;;787    void Alarm_Display()
000a9a  b510              PUSH     {r4,lr}
;;;788    {
;;;789      uint32_t AlarmVar = MDR_BKP->RTC_ALRM;
000a9c  48b9              LDR      r0,|L1.3460|
000a9e  6cc4              LDR      r4,[r0,#0x4c]
;;;790    
;;;791      /* Display time separators ":" */
;;;792      LCD_PUTS(Time_Display_Column, LineDigits, "  :  :");
000aa0  a2c7              ADR      r2,|L1.3520|
000aa2  2134              MOVS     r1,#0x34
000aa4  2021              MOVS     r0,#0x21
000aa6  f7fffffe          BL       LCD_PUTS
;;;793    
;;;794      /* Display alarm hours */
;;;795      sAlarm.hour_h = (uint8_t)(AlarmVar / 3600) / 10;
000aaa  f44f6061          MOV      r0,#0xe10
000aae  fbb4f0f0          UDIV     r0,r4,r0
000ab2  b2c0              UXTB     r0,r0
000ab4  210a              MOVS     r1,#0xa
000ab6  fb90f0f1          SDIV     r0,r0,r1
000aba  49c3              LDR      r1,|L1.3528|
000abc  7148              STRB     r0,[r1,#5]
;;;796      LCD_PUTC(TimeH_h, LineDigits, (sAlarm.hour_h + 0x30));
000abe  4608              MOV      r0,r1
000ac0  7940              LDRB     r0,[r0,#5]  ; sAlarm
000ac2  3030              ADDS     r0,r0,#0x30
000ac4  b2c2              UXTB     r2,r0
000ac6  2134              MOVS     r1,#0x34
000ac8  2021              MOVS     r0,#0x21
000aca  f7fffffe          BL       LCD_PUTC
;;;797      sAlarm.hour_l = (uint8_t)(((AlarmVar) / 3600) % 10);
000ace  f44f6061          MOV      r0,#0xe10
000ad2  fbb4f0f0          UDIV     r0,r4,r0
000ad6  210a              MOVS     r1,#0xa
000ad8  fbb0f2f1          UDIV     r2,r0,r1
000adc  fb010012          MLS      r0,r1,r2,r0
000ae0  49b9              LDR      r1,|L1.3528|
000ae2  7108              STRB     r0,[r1,#4]
;;;798      LCD_PUTC(TimeH_l, LineDigits, (sAlarm.hour_l + 0x30));
000ae4  4608              MOV      r0,r1
000ae6  7900              LDRB     r0,[r0,#4]  ; sAlarm
000ae8  3030              ADDS     r0,r0,#0x30
000aea  b2c2              UXTB     r2,r0
000aec  2134              MOVS     r1,#0x34
000aee  2027              MOVS     r0,#0x27
000af0  f7fffffe          BL       LCD_PUTC
;;;799    
;;;800      /* Display alarm minutes */
;;;801      sAlarm.min_h = (uint8_t)(((AlarmVar) % 3600) / 60) / 10;
000af4  f44f6061          MOV      r0,#0xe10
000af8  fbb4f1f0          UDIV     r1,r4,r0
000afc  fb004011          MLS      r0,r0,r1,r4
000b00  213c              MOVS     r1,#0x3c
000b02  fbb0f0f1          UDIV     r0,r0,r1
000b06  b2c0              UXTB     r0,r0
000b08  210a              MOVS     r1,#0xa
000b0a  fb90f0f1          SDIV     r0,r0,r1
000b0e  49ae              LDR      r1,|L1.3528|
000b10  70c8              STRB     r0,[r1,#3]
;;;802      LCD_PUTC(TimeM_h, LineDigits, (sAlarm.min_h + 0x30));
000b12  4608              MOV      r0,r1
000b14  78c0              LDRB     r0,[r0,#3]  ; sAlarm
000b16  3030              ADDS     r0,r0,#0x30
000b18  b2c2              UXTB     r2,r0
000b1a  2134              MOVS     r1,#0x34
000b1c  2033              MOVS     r0,#0x33
000b1e  f7fffffe          BL       LCD_PUTC
;;;803      sAlarm.min_l = (uint8_t)(((AlarmVar) % 3600) / 60) % 10;
000b22  f44f6061          MOV      r0,#0xe10
000b26  fbb4f1f0          UDIV     r1,r4,r0
000b2a  fb004011          MLS      r0,r0,r1,r4
000b2e  213c              MOVS     r1,#0x3c
000b30  fbb0f0f1          UDIV     r0,r0,r1
000b34  b2c0              UXTB     r0,r0
000b36  210a              MOVS     r1,#0xa
000b38  fb90f2f1          SDIV     r2,r0,r1
000b3c  fb010012          MLS      r0,r1,r2,r0
000b40  49a1              LDR      r1,|L1.3528|
000b42  7088              STRB     r0,[r1,#2]
;;;804      LCD_PUTC(TimeM_l, LineDigits, (sAlarm.min_l + 0x30));
000b44  4608              MOV      r0,r1
000b46  7880              LDRB     r0,[r0,#2]  ; sAlarm
000b48  3030              ADDS     r0,r0,#0x30
000b4a  b2c2              UXTB     r2,r0
000b4c  2134              MOVS     r1,#0x34
000b4e  2039              MOVS     r0,#0x39
000b50  f7fffffe          BL       LCD_PUTC
;;;805    
;;;806      /* Display alarm seconds */
;;;807      sAlarm.sec_h = (uint8_t)(((AlarmVar) % 3600) % 60) / 10;
000b54  f44f6061          MOV      r0,#0xe10
000b58  fbb4f1f0          UDIV     r1,r4,r0
000b5c  fb004011          MLS      r0,r0,r1,r4
000b60  213c              MOVS     r1,#0x3c
000b62  fbb0f2f1          UDIV     r2,r0,r1
000b66  fb010012          MLS      r0,r1,r2,r0
000b6a  210a              MOVS     r1,#0xa
000b6c  fb90f0f1          SDIV     r0,r0,r1
000b70  4995              LDR      r1,|L1.3528|
000b72  7048              STRB     r0,[r1,#1]
;;;808      LCD_PUTC(TimeS_h, LineDigits, (sAlarm.sec_h + 0x30));
000b74  4608              MOV      r0,r1
000b76  7840              LDRB     r0,[r0,#1]  ; sAlarm
000b78  3030              ADDS     r0,r0,#0x30
000b7a  b2c2              UXTB     r2,r0
000b7c  2134              MOVS     r1,#0x34
000b7e  2045              MOVS     r0,#0x45
000b80  f7fffffe          BL       LCD_PUTC
;;;809      sAlarm.sec_l = (uint8_t)(((AlarmVar) % 3600) % 60) % 10;
000b84  f44f6061          MOV      r0,#0xe10
000b88  fbb4f1f0          UDIV     r1,r4,r0
000b8c  fb004011          MLS      r0,r0,r1,r4
000b90  213c              MOVS     r1,#0x3c
000b92  fbb0f2f1          UDIV     r2,r0,r1
000b96  fb010012          MLS      r0,r1,r2,r0
000b9a  210a              MOVS     r1,#0xa
000b9c  fb90f2f1          SDIV     r2,r0,r1
000ba0  fb010012          MLS      r0,r1,r2,r0
000ba4  4988              LDR      r1,|L1.3528|
000ba6  7008              STRB     r0,[r1,#0]
;;;810      LCD_PUTC(TimeS_l, LineDigits, (sAlarm.sec_l + 0x30));
000ba8  4608              MOV      r0,r1
000baa  7800              LDRB     r0,[r0,#0]  ; sAlarm
000bac  3030              ADDS     r0,r0,#0x30
000bae  b2c2              UXTB     r2,r0
000bb0  2134              MOVS     r1,#0x34
000bb2  204b              MOVS     r0,#0x4b
000bb4  f7fffffe          BL       LCD_PUTC
;;;811    }
000bb8  bd10              POP      {r4,pc}
;;;812    
                          ENDP

                  Alarm_Regulate PROC
;;;819    *******************************************************************************/
;;;820    uint32_t Alarm_Regulate(void)
000bba  b570              PUSH     {r4-r6,lr}
;;;821    {
;;;822      uint32_t Alarm_HH, Alarm_MM, Alarm_SS;
;;;823    
;;;824      /* Read alarm hours */
;;;825      Alarm_HH = ReadDigit(TimeH_h, sAlarm.hour_h, 0x2, 0x0);
000bbc  4882              LDR      r0,|L1.3528|
000bbe  7941              LDRB     r1,[r0,#5]  ; sAlarm
000bc0  2300              MOVS     r3,#0
000bc2  2202              MOVS     r2,#2
000bc4  2021              MOVS     r0,#0x21
000bc6  f7fffffe          BL       ReadDigit
000bca  4604              MOV      r4,r0
;;;826      if(Alarm_HH == 2)
000bcc  2c02              CMP      r4,#2
000bce  d112              BNE      |L1.3062|
;;;827      {
;;;828        if(sAlarm.hour_l > 3)
000bd0  487d              LDR      r0,|L1.3528|
000bd2  7900              LDRB     r0,[r0,#4]  ; sAlarm
000bd4  2803              CMP      r0,#3
000bd6  dd02              BLE      |L1.3038|
;;;829        {
;;;830          sAlarm.hour_l = 0;
000bd8  2000              MOVS     r0,#0
000bda  497b              LDR      r1,|L1.3528|
000bdc  7108              STRB     r0,[r1,#4]
                  |L1.3038|
;;;831        }
;;;832        Alarm_HH = Alarm_HH*10 + ReadDigit(TimeH_l, sAlarm.hour_l, 0x3, 0x0);
000bde  487a              LDR      r0,|L1.3528|
000be0  7901              LDRB     r1,[r0,#4]  ; sAlarm
000be2  2300              MOVS     r3,#0
000be4  2203              MOVS     r2,#3
000be6  2027              MOVS     r0,#0x27
000be8  f7fffffe          BL       ReadDigit
000bec  eb040184          ADD      r1,r4,r4,LSL #2
000bf0  eb000441          ADD      r4,r0,r1,LSL #1
000bf4  e00a              B        |L1.3084|
                  |L1.3062|
;;;833      }
;;;834      else
;;;835      {
;;;836        Alarm_HH = Alarm_HH*10 + ReadDigit(TimeH_l, sAlarm.hour_l, 0x9, 0x0);
000bf6  4874              LDR      r0,|L1.3528|
000bf8  7901              LDRB     r1,[r0,#4]  ; sAlarm
000bfa  2300              MOVS     r3,#0
000bfc  2209              MOVS     r2,#9
000bfe  2027              MOVS     r0,#0x27
000c00  f7fffffe          BL       ReadDigit
000c04  eb040184          ADD      r1,r4,r4,LSL #2
000c08  eb000441          ADD      r4,r0,r1,LSL #1
                  |L1.3084|
;;;837      }
;;;838      /* Read time minutes */
;;;839      Alarm_MM = ReadDigit(TimeM_h, sAlarm.min_h, 0x5, 0x0);
000c0c  486e              LDR      r0,|L1.3528|
000c0e  78c1              LDRB     r1,[r0,#3]  ; sAlarm
000c10  2300              MOVS     r3,#0
000c12  2205              MOVS     r2,#5
000c14  2033              MOVS     r0,#0x33
000c16  f7fffffe          BL       ReadDigit
000c1a  4605              MOV      r5,r0
;;;840      Alarm_MM = Alarm_MM*10 + ReadDigit(TimeM_l, sAlarm.min_l, 0x9, 0x0);
000c1c  486a              LDR      r0,|L1.3528|
000c1e  7881              LDRB     r1,[r0,#2]  ; sAlarm
000c20  2300              MOVS     r3,#0
000c22  2209              MOVS     r2,#9
000c24  2039              MOVS     r0,#0x39
000c26  f7fffffe          BL       ReadDigit
000c2a  eb050185          ADD      r1,r5,r5,LSL #2
000c2e  eb000541          ADD      r5,r0,r1,LSL #1
;;;841      /* Read time seconds */
;;;842      Alarm_SS = ReadDigit(TimeS_h, sAlarm.sec_h, 0x5, 0x0);
000c32  4865              LDR      r0,|L1.3528|
000c34  7841              LDRB     r1,[r0,#1]  ; sAlarm
000c36  2300              MOVS     r3,#0
000c38  2205              MOVS     r2,#5
000c3a  2045              MOVS     r0,#0x45
000c3c  f7fffffe          BL       ReadDigit
000c40  4606              MOV      r6,r0
;;;843      Alarm_SS = Alarm_SS*10 + ReadDigit(TimeS_l, sAlarm.sec_l, 0x9, 0x0);
000c42  4861              LDR      r0,|L1.3528|
000c44  7801              LDRB     r1,[r0,#0]  ; sAlarm
000c46  2300              MOVS     r3,#0
000c48  2209              MOVS     r2,#9
000c4a  204b              MOVS     r0,#0x4b
000c4c  f7fffffe          BL       ReadDigit
000c50  eb060186          ADD      r1,r6,r6,LSL #2
000c54  eb000641          ADD      r6,r0,r1,LSL #1
;;;844    
;;;845      /* Save the Alarm value in the Backup register REG_02 */
;;;846      MDR_BKP->REG_02 = Alarm_HH*3600 + Alarm_MM*60 + Alarm_SS;
000c58  f44f6061          MOV      r0,#0xe10
000c5c  4360              MULS     r0,r4,r0
000c5e  ebc51105          RSB      r1,r5,r5,LSL #4
000c62  eb000081          ADD      r0,r0,r1,LSL #2
000c66  4430              ADD      r0,r0,r6
000c68  4946              LDR      r1,|L1.3460|
000c6a  6088              STR      r0,[r1,#8]
;;;847    
;;;848      /* Return the value to store in RTC alarm register */
;;;849      return((Alarm_HH*3600 + Alarm_MM*60 + Alarm_SS));
000c6c  f44f6061          MOV      r0,#0xe10
000c70  4360              MULS     r0,r4,r0
000c72  ebc51105          RSB      r1,r5,r5,LSL #4
000c76  eb000081          ADD      r0,r0,r1,LSL #2
000c7a  4430              ADD      r0,r0,r6
;;;850    }
000c7c  bd70              POP      {r4-r6,pc}
;;;851    
                          ENDP

                  AlarmAdjustFunc PROC
;;;858    *******************************************************************************/
;;;859    void AlarmAdjustFunc(void)
000c7e  b570              PUSH     {r4-r6,lr}
;;;860    {
;;;861      sFONT *OldFont = CurrentFont;
000c80  4841              LDR      r0,|L1.3464|
000c82  6804              LDR      r4,[r0,#0]  ; CurrentFont
;;;862      LCD_Method OldMethod = CurrentMethod;
000c84  4841              LDR      r0,|L1.3468|
000c86  7805              LDRB     r5,[r0,#0]  ; CurrentMethod
;;;863    
;;;864      /* Print header */
;;;865      LCD_CLS();
000c88  f7fffffe          BL       LCD_CLS
;;;866      CurrentMethod = MET_AND;
000c8c  2004              MOVS     r0,#4
000c8e  493f              LDR      r1,|L1.3468|
000c90  7008              STRB     r0,[r1,#0]
;;;867      CurrentFont = &Font_6x8;
000c92  483f              LDR      r0,|L1.3472|
000c94  493c              LDR      r1,|L1.3464|
000c96  6008              STR      r0,[r1,#0]  ; CurrentFont
;;;868      DisplayMenuTitle("Alarm adjust");
000c98  a04c              ADR      r0,|L1.3532|
000c9a  f7fffffe          BL       DisplayMenuTitle
;;;869      WAIT_UNTIL_KEY_RELEASED(SEL);
000c9e  bf00              NOP      
                  |L1.3232|
000ca0  f7fffffe          BL       GetKey
000ca4  2800              CMP      r0,#0
000ca6  d0fb              BEQ      |L1.3232|
;;;870    
;;;871      if((MDR_BKP->REG_00 != 0x1234) || (MDR_BKP->RTC_PRL != RTC_PRESCALER_VALUE))
000ca8  4836              LDR      r0,|L1.3460|
000caa  6800              LDR      r0,[r0,#0]
000cac  f5a05190          SUB      r1,r0,#0x1200
000cb0  3934              SUBS     r1,r1,#0x34
000cb2  d104              BNE      |L1.3262|
000cb4  4833              LDR      r0,|L1.3460|
000cb6  6c80              LDR      r0,[r0,#0x48]
000cb8  f5b04f00          CMP      r0,#0x8000
000cbc  d002              BEQ      |L1.3268|
                  |L1.3262|
;;;872      {
;;;873        RTCHelp();
000cbe  f7fffffe          BL       RTCHelp
000cc2  e018              B        |L1.3318|
                  |L1.3268|
;;;874      }
;;;875      else
;;;876      {
;;;877        LCD_PUTS(Time_Display_Column - DefaultFontWidth, LineTitle, "ALARM TIME");
000cc4  a245              ADR      r2,|L1.3548|
000cc6  212a              MOVS     r1,#0x2a
000cc8  201b              MOVS     r0,#0x1b
000cca  f7fffffe          BL       LCD_PUTS
;;;878    
;;;879        /* Initialize the RTC Alarm register */
;;;880        BKP_RTC_SetAlarm(MDR_BKP->REG_02);
000cce  492d              LDR      r1,|L1.3460|
000cd0  6888              LDR      r0,[r1,#8]
000cd2  f7fffffe          BL       BKP_RTC_SetAlarm
;;;881    
;;;882        /* Display the Alarm time */
;;;883        Alarm_Display();
000cd6  f7fffffe          BL       Alarm_Display
;;;884    
;;;885        /* Change the current alarm time */
;;;886        BKP_RTC_SetAlarm(Alarm_Regulate());
000cda  f7fffffe          BL       Alarm_Regulate
000cde  4606              MOV      r6,r0
000ce0  f7fffffe          BL       BKP_RTC_SetAlarm
;;;887        /* Wait until last write operation on RTC registers has finished */
;;;888        BKP_RTC_WaitForUpdate();
000ce4  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;889        /* Enable the Alarm interrupt  */
;;;890        BKP_RTC_ITConfig(BKP_RTC_IT_ALRF, ENABLE);
000ce8  2101              MOVS     r1,#1
000cea  2020              MOVS     r0,#0x20
000cec  f7fffffe          BL       BKP_RTC_ITConfig
;;;891        AlarmSetStatus = 1;
000cf0  2001              MOVS     r0,#1
000cf2  493d              LDR      r1,|L1.3560|
000cf4  6008              STR      r0,[r1,#0]  ; AlarmSetStatus
                  |L1.3318|
;;;892      }
;;;893      CurrentMethod = OldMethod;
000cf6  4825              LDR      r0,|L1.3468|
000cf8  7005              STRB     r5,[r0,#0]
;;;894      CurrentFont = OldFont;
000cfa  4823              LDR      r0,|L1.3464|
000cfc  6004              STR      r4,[r0,#0]  ; CurrentFont
;;;895    
;;;896      /* Display the menu */
;;;897      DisplayMenu();
000cfe  f7fffffe          BL       DisplayMenu
;;;898    }
000d02  bd70              POP      {r4-r6,pc}
;;;899    
                          ENDP

                  AlarmShowFunc PROC
;;;906    *******************************************************************************/
;;;907    void AlarmShowFunc(void)
000d04  b570              PUSH     {r4-r6,lr}
;;;908    {
;;;909      sFONT *OldFont = CurrentFont;
000d06  4820              LDR      r0,|L1.3464|
000d08  6804              LDR      r4,[r0,#0]  ; CurrentFont
;;;910      LCD_Method OldMethod = CurrentMethod;
000d0a  4820              LDR      r0,|L1.3468|
000d0c  7805              LDRB     r5,[r0,#0]  ; CurrentMethod
;;;911    
;;;912      /* Print header */
;;;913      LCD_CLS();
000d0e  f7fffffe          BL       LCD_CLS
;;;914      CurrentMethod = MET_AND;
000d12  2004              MOVS     r0,#4
000d14  491d              LDR      r1,|L1.3468|
000d16  7008              STRB     r0,[r1,#0]
;;;915      CurrentFont = &Font_6x8;
000d18  481d              LDR      r0,|L1.3472|
000d1a  491b              LDR      r1,|L1.3464|
000d1c  6008              STR      r0,[r1,#0]  ; CurrentFont
;;;916      DisplayMenuTitle("Alarm show");
000d1e  a033              ADR      r0,|L1.3564|
000d20  f7fffffe          BL       DisplayMenuTitle
;;;917      WAIT_UNTIL_KEY_RELEASED(SEL);
000d24  bf00              NOP      
                  |L1.3366|
000d26  f7fffffe          BL       GetKey
000d2a  2800              CMP      r0,#0
000d2c  d0fb              BEQ      |L1.3366|
;;;918    
;;;919      if((MDR_BKP->REG_00 != 0x1234) || (MDR_BKP->RTC_PRL != RTC_PRESCALER_VALUE))
000d2e  e063              B        |L1.3576|
                  |L1.3376|
                          DCD      sDate
                  |L1.3380|
000d34  20202049          DCB      "   Invalid date.",0
000d38  6e76616c
000d3c  69642064
000d40  6174652e
000d44  00      
000d45  00                DCB      0
000d46  00                DCB      0
000d47  00                DCB      0
                  |L1.3400|
000d48  20202052          DCB      "   Repeat, please.",0
000d4c  65706561
000d50  742c2070
000d54  6c656173
000d58  652e00  
000d5b  00                DCB      0
                  |L1.3420|
000d5c  20202020          DCB      "                ",0
000d60  20202020
000d64  20202020
000d68  20202020
000d6c  00      
000d6d  00                DCB      0
000d6e  00                DCB      0
000d6f  00                DCB      0
                  |L1.3440|
000d70  20202020          DCB      "                  ",0
000d74  20202020
000d78  20202020
000d7c  20202020
000d80  202000  
000d83  00                DCB      0
                  |L1.3460|
                          DCD      0x400d8000
                  |L1.3464|
                          DCD      CurrentFont
                  |L1.3468|
                          DCD      CurrentMethod
                  |L1.3472|
                          DCD      Font_6x8
                  |L1.3476|
000d94  44617465          DCB      "Date adjust",0
000d98  2061646a
000d9c  75737400
                  |L1.3488|
000da0  44415445          DCB      "DATE  DD.MM.YYYY",0
000da4  20204444
000da8  2e4d4d2e
000dac  59595959
000db0  00      
000db1  00                DCB      0
000db2  00                DCB      0
000db3  00                DCB      0
                  |L1.3508|
000db4  44617465          DCB      "Date show",0
000db8  2073686f
000dbc  7700    
000dbe  00                DCB      0
000dbf  00                DCB      0
                  |L1.3520|
000dc0  20203a20          DCB      "  :  :",0
000dc4  203a00  
000dc7  00                DCB      0
                  |L1.3528|
                          DCD      sAlarm
                  |L1.3532|
000dcc  416c6172          DCB      "Alarm adjust",0
000dd0  6d206164
000dd4  6a757374
000dd8  00      
000dd9  00                DCB      0
000dda  00                DCB      0
000ddb  00                DCB      0
                  |L1.3548|
000ddc  414c4152          DCB      "ALARM TIME",0
000de0  4d205449
000de4  4d4500  
000de7  00                DCB      0
                  |L1.3560|
                          DCD      AlarmSetStatus
                  |L1.3564|
000dec  416c6172          DCB      "Alarm show",0
000df0  6d207368
000df4  6f7700  
000df7  00                DCB      0
                  |L1.3576|
000df8  484c              LDR      r0,|L1.3884|
000dfa  6800              LDR      r0,[r0,#0]
000dfc  f5a05190          SUB      r1,r0,#0x1200
000e00  3934              SUBS     r1,r1,#0x34
000e02  d104              BNE      |L1.3598|
000e04  4849              LDR      r0,|L1.3884|
000e06  6c80              LDR      r0,[r0,#0x48]
000e08  f5b04f00          CMP      r0,#0x8000
000e0c  d002              BEQ      |L1.3604|
                  |L1.3598|
;;;920      {
;;;921        RTCHelp();
000e0e  f7fffffe          BL       RTCHelp
000e12  e011              B        |L1.3640|
                  |L1.3604|
;;;922      }
;;;923      else
;;;924      {
;;;925        LCD_PUTS(Time_Display_Column - DefaultFontWidth, LineTitle, "ALARM TIME");
000e14  f2af023c          ADR      r2,|L1.3548|
000e18  212a              MOVS     r1,#0x2a
000e1a  201b              MOVS     r0,#0x1b
000e1c  f7fffffe          BL       LCD_PUTS
;;;926        /* Display the current alarm time */
;;;927        Alarm_Display();
000e20  f7fffffe          BL       Alarm_Display
;;;928        WAIT_UNTIL_KEY_PRESSED(SEL);
000e24  bf00              NOP      
                  |L1.3622|
000e26  f7fffffe          BL       GetKey
000e2a  2800              CMP      r0,#0
000e2c  d1fb              BNE      |L1.3622|
;;;929        WAIT_UNTIL_KEY_RELEASED(SEL);
000e2e  bf00              NOP      
                  |L1.3632|
000e30  f7fffffe          BL       GetKey
000e34  2800              CMP      r0,#0
000e36  d0fb              BEQ      |L1.3632|
                  |L1.3640|
;;;930      }
;;;931    
;;;932      CurrentMethod = OldMethod;
000e38  483d              LDR      r0,|L1.3888|
000e3a  7005              STRB     r5,[r0,#0]
;;;933      CurrentFont = OldFont;
000e3c  483d              LDR      r0,|L1.3892|
000e3e  6004              STR      r4,[r0,#0]  ; CurrentFont
;;;934    
;;;935      /* Display the menu */
;;;936      DisplayMenu();
000e40  f7fffffe          BL       DisplayMenu
;;;937    }
000e44  bd70              POP      {r4-r6,pc}
;;;938    
                          ENDP

                  Calendar_Init PROC
;;;945    *******************************************************************************/
;;;946    void Calendar_Init(void)
000e46  e92d41f0          PUSH     {r4-r8,lr}
;;;947    {
;;;948      uint32_t tmp, i;
;;;949      KeyCode key;
;;;950    
;;;951      /* Enables the HSE clock for BKP control */
;;;952      RST_CLK_PCLKcmd(RST_CLK_PCLK_BKP,ENABLE);
000e4a  2101              MOVS     r1,#1
000e4c  06c8              LSLS     r0,r1,#27
000e4e  f7fffffe          BL       RST_CLK_PCLKcmd
;;;953    
;;;954      RTC_Configuration();
000e52  f7fffffe          BL       RTC_Configuration
;;;955    
;;;956      if(MDR_BKP->REG_00 != 0x1234)
000e56  4835              LDR      r0,|L1.3884|
000e58  6800              LDR      r0,[r0,#0]
000e5a  f5a05190          SUB      r1,r0,#0x1200
000e5e  3934              SUBS     r1,r1,#0x34
000e60  d041              BEQ      |L1.3814|
;;;957      {
;;;958        LCD_CLS();
000e62  f7fffffe          BL       LCD_CLS
;;;959        LCD_PUTS(0, LineMessage1, " To configuring Time ");
000e66  a234              ADR      r2,|L1.3896|
000e68  210c              MOVS     r1,#0xc
000e6a  2000              MOVS     r0,#0
000e6c  f7fffffe          BL       LCD_PUTS
;;;960        LCD_PUTS(0, LineMessage2, " and Date press SEL, ");
000e70  a237              ADR      r2,|L1.3920|
000e72  2116              MOVS     r1,#0x16
000e74  2000              MOVS     r0,#0
000e76  f7fffffe          BL       LCD_PUTS
;;;961        LCD_PUTS(0, LineMessage3, " else press any key. ");
000e7a  a23b              ADR      r2,|L1.3944|
000e7c  2120              MOVS     r1,#0x20
000e7e  2000              MOVS     r0,#0
000e80  f7fffffe          BL       LCD_PUTS
;;;962    
;;;963        for (key = NOKEY; key == NOKEY; key = GetKey())
000e84  2505              MOVS     r5,#5
000e86  e002              B        |L1.3726|
                  |L1.3720|
000e88  f7fffffe          BL       GetKey
000e8c  4605              MOV      r5,r0
                  |L1.3726|
000e8e  2d05              CMP      r5,#5
000e90  d0fa              BEQ      |L1.3720|
;;;964        {
;;;965        }
;;;966        if (key == SEL)
000e92  b94d              CBNZ     r5,|L1.3752|
;;;967        {
;;;968          WAIT_UNTIL_KEY_RELEASED(key);
000e94  bf00              NOP      
                  |L1.3734|
000e96  f7fffffe          BL       GetKey
000e9a  42a8              CMP      r0,r5
000e9c  d0fb              BEQ      |L1.3734|
;;;969          TimePreAdjustFunc();
000e9e  f7fffffe          BL       TimePreAdjustFunc
;;;970          DatePreAdjustFunc();
000ea2  f7fffffe          BL       DatePreAdjustFunc
000ea6  e018              B        |L1.3802|
                  |L1.3752|
;;;971        }
;;;972        else
;;;973        {
;;;974          /* Initialize Date structure with default values */
;;;975          sDate.day   = 1;
000ea8  2001              MOVS     r0,#1
000eaa  4935              LDR      r1,|L1.3968|
000eac  7008              STRB     r0,[r1,#0]
;;;976          sDate.month = 1;
000eae  7048              STRB     r0,[r1,#1]
;;;977          sDate.year  = 2010;
000eb0  f24070da          MOV      r0,#0x7da
000eb4  8048              STRH     r0,[r1,#2]
;;;978          MDR_BKP->REG_01 = sDate.year + (sDate.month << 16) + (sDate.day << 24);
000eb6  4608              MOV      r0,r1
000eb8  8840              LDRH     r0,[r0,#2]  ; sDate
000eba  7849              LDRB     r1,[r1,#1]  ; sDate
000ebc  eb004001          ADD      r0,r0,r1,LSL #16
000ec0  492f              LDR      r1,|L1.3968|
000ec2  7809              LDRB     r1,[r1,#0]  ; sDate
000ec4  eb006001          ADD      r0,r0,r1,LSL #24
000ec8  4918              LDR      r1,|L1.3884|
000eca  6048              STR      r0,[r1,#4]
;;;979          /* Wait until last write operation on RTC registers has finished */
;;;980          BKP_RTC_WaitForUpdate();
000ecc  f7fffffe          BL       BKP_RTC_WaitForUpdate
;;;981          /* Initialize Alarm backup register */
;;;982          MDR_BKP->REG_02 = 0;
000ed0  2000              MOVS     r0,#0
000ed2  4916              LDR      r1,|L1.3884|
000ed4  6088              STR      r0,[r1,#8]
;;;983          /* Wait until last write operation on RTC registers has finished */
;;;984          BKP_RTC_WaitForUpdate();
000ed6  f7fffffe          BL       BKP_RTC_WaitForUpdate
                  |L1.3802|
;;;985        }
;;;986        WAIT_UNTIL_KEY_RELEASED(key);
000eda  bf00              NOP      
                  |L1.3804|
000edc  f7fffffe          BL       GetKey
000ee0  42a8              CMP      r0,r5
000ee2  d0fb              BEQ      |L1.3804|
000ee4  e020              B        |L1.3880|
                  |L1.3814|
;;;987      }
;;;988      else
;;;989      {
;;;990        /* Initialize Date structure */
;;;991        tmp = MDR_BKP->REG_01;
000ee6  4811              LDR      r0,|L1.3884|
000ee8  6844              LDR      r4,[r0,#4]
;;;992        sDate.day   = tmp >> 24;
000eea  0e20              LSRS     r0,r4,#24
000eec  4924              LDR      r1,|L1.3968|
000eee  7008              STRB     r0,[r1,#0]
;;;993        sDate.month = (tmp >> 16) & 0xFF;
000ef0  0c20              LSRS     r0,r4,#16
000ef2  7048              STRB     r0,[r1,#1]
;;;994        sDate.year  = tmp & 0xFFFF;
000ef4  804c              STRH     r4,[r1,#2]
;;;995    
;;;996        tmp = BKP_RTC_GetCounter();
000ef6  f7fffffe          BL       BKP_RTC_GetCounter
000efa  4604              MOV      r4,r0
;;;997        if(tmp / 86399 != 0)
000efc  4821              LDR      r0,|L1.3972|
000efe  fbb4f0f0          UDIV     r0,r4,r0
000f02  b188              CBZ      r0,|L1.3880|
;;;998        {
;;;999          for(i = 0; i < (tmp / 86399); i++)
000f04  2600              MOVS     r6,#0
000f06  e002              B        |L1.3854|
                  |L1.3848|
;;;1000         {
;;;1001           Date_Update();
000f08  f7fffffe          BL       Date_Update
000f0c  1c76              ADDS     r6,r6,#1              ;999
                  |L1.3854|
000f0e  481d              LDR      r0,|L1.3972|
000f10  fbb4f0f0          UDIV     r0,r4,r0              ;999
000f14  42b0              CMP      r0,r6                 ;999
000f16  d8f7              BHI      |L1.3848|
;;;1002         }
;;;1003         BKP_RTC_SetCounter(tmp % 86399);
000f18  481a              LDR      r0,|L1.3972|
000f1a  fbb4f1f0          UDIV     r1,r4,r0
000f1e  fb004711          MLS      r7,r0,r1,r4
000f22  4638              MOV      r0,r7
000f24  f7fffffe          BL       BKP_RTC_SetCounter
                  |L1.3880|
;;;1004       }
;;;1005     }
;;;1006   }
000f28  e8bd81f0          POP      {r4-r8,pc}
;;;1007   
                          ENDP

                  |L1.3884|
                          DCD      0x400d8000
                  |L1.3888|
                          DCD      CurrentMethod
                  |L1.3892|
                          DCD      CurrentFont
                  |L1.3896|
000f38  20546f20          DCB      " To configuring Time ",0
000f3c  636f6e66
000f40  69677572
000f44  696e6720
000f48  54696d65
000f4c  2000    
000f4e  00                DCB      0
000f4f  00                DCB      0
                  |L1.3920|
000f50  20616e64          DCB      " and Date press SEL, ",0
000f54  20446174
000f58  65207072
000f5c  65737320
000f60  53454c2c
000f64  2000    
000f66  00                DCB      0
000f67  00                DCB      0
                  |L1.3944|
000f68  20656c73          DCB      " else press any key. ",0
000f6c  65207072
000f70  65737320
000f74  616e7920
000f78  6b65792e
000f7c  2000    
000f7e  00                DCB      0
000f7f  00                DCB      0
                  |L1.3968|
                          DCD      sDate
                  |L1.3972|
                          DCD      0x0001517f

                          AREA ||.data||, DATA, ALIGN=1

                  sTime
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00
                  sAlarm
000006  0000              DCB      0x00,0x00
                          DCDU     0x00000000
                  sDate
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\src\\Menu_time.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_Menu_time_c_f85ddfdf____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___11_Menu_time_c_f85ddfdf____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_Menu_time_c_f85ddfdf____REVSH|
#line 144
|__asm___11_Menu_time_c_f85ddfdf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
