; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\mdr32f9qx_comp.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\mdr32f9qx_comp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\mdr32f9qx_comp.crf ..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_comp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  COMP_DeInit PROC
;;;48       */
;;;49     void COMP_DeInit(void)
000000  2000              MOVS     r0,#0
;;;50     {
;;;51       MDR_COMP->CFG = 0;
000002  494b              LDR      r1,|L1.304|
000004  6008              STR      r0,[r1,#0]
;;;52       MDR_COMP->RESULT_LATCH;
000006  4608              MOV      r0,r1
000008  6880              LDR      r0,[r0,#8]
;;;53     }
00000a  4770              BX       lr
;;;54     
                          ENDP

                  COMP_Init PROC
;;;62       */
;;;63     void COMP_Init(const COMP_InitTypeDef* COMP_InitStruct)
00000c  4a48              LDR      r2,|L1.304|
;;;64     {
;;;65       uint32_t tmpreg_CFG;
;;;66     
;;;67       /* Check the parameters */
;;;68       assert_param(IS_COMP_PLUS_INPUT_CONFIG(COMP_InitStruct->COMP_PlusInputSource));
;;;69       assert_param(IS_COMP_MINUS_INPUT_CONFIG(COMP_InitStruct->COMP_MinusInputSource));
;;;70       assert_param(IS_COMP_OUT_INV_CONFIG(COMP_InitStruct->COMP_OutInversion));
;;;71     
;;;72       tmpreg_CFG = MDR_COMP->CFG;
00000e  6811              LDR      r1,[r2,#0]
;;;73       tmpreg_CFG &= ~(COMP_CFG_CREF | COMP_CFG_CCH_Msk | COMP_CFG_INV);
000010  f4216170          BIC      r1,r1,#0xf00
;;;74       tmpreg_CFG += COMP_InitStruct->COMP_PlusInputSource
000014  e9d02300          LDRD     r2,r3,[r0,#0]
000018  441a              ADD      r2,r2,r3
00001a  6883              LDR      r3,[r0,#8]
00001c  441a              ADD      r2,r2,r3
00001e  4411              ADD      r1,r1,r2
;;;75                   + COMP_InitStruct->COMP_MinusInputSource
;;;76                   + COMP_InitStruct->COMP_OutInversion;
;;;77       MDR_COMP->CFG = tmpreg_CFG;
000020  4a43              LDR      r2,|L1.304|
000022  6011              STR      r1,[r2,#0]
;;;78     }
000024  4770              BX       lr
;;;79     
                          ENDP

                  COMP_StructInit PROC
;;;85       */
;;;86     void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct)
000026  2100              MOVS     r1,#0
;;;87     {
;;;88       COMP_InitStruct->COMP_PlusInputSource  = COMP_PlusInput_IN1;
000028  6001              STR      r1,[r0,#0]
;;;89       COMP_InitStruct->COMP_MinusInputSource = COMP_MinusInput_IN2;
00002a  6041              STR      r1,[r0,#4]
;;;90       COMP_InitStruct->COMP_OutInversion     = COMP_OUT_INV_Disable;
00002c  6081              STR      r1,[r0,#8]
;;;91     }
00002e  4770              BX       lr
;;;92     
                          ENDP

                  COMP_Cmd PROC
;;;98       */
;;;99     void COMP_Cmd(FunctionalState NewState)
000030  4601              MOV      r1,r0
;;;100    {
;;;101      uint32_t tmpreg_CFG;
;;;102    
;;;103      /* Check the parameters */
;;;104      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;105    
;;;106      tmpreg_CFG = MDR_COMP->CFG;
000032  4a3f              LDR      r2,|L1.304|
000034  6810              LDR      r0,[r2,#0]
;;;107    
;;;108      /* Form new value */
;;;109      if (NewState != DISABLE)
000036  b111              CBZ      r1,|L1.62|
;;;110      {
;;;111        /* Enable COMP by setting the COMP_CFG_ON bit in the COMP_CFG register */
;;;112        tmpreg_CFG |= COMP_CFG_ON;
000038  f0400001          ORR      r0,r0,#1
00003c  e001              B        |L1.66|
                  |L1.62|
;;;113      }
;;;114      else
;;;115      {
;;;116        /* Disable COMP by resetting the COMP_CFG_ON bit in the COMP_CFG register */
;;;117        tmpreg_CFG &= ~COMP_CFG_ON;
00003e  f0200001          BIC      r0,r0,#1
                  |L1.66|
;;;118      }
;;;119    
;;;120      /* Configure COMP_CFG register with new value */
;;;121      MDR_COMP->CFG = tmpreg_CFG;
000042  4a3b              LDR      r2,|L1.304|
000044  6010              STR      r0,[r2,#0]
;;;122    }
000046  4770              BX       lr
;;;123    
                          ENDP

                  COMP_GetCfgFlagStatus PROC
;;;131      */
;;;132    FlagStatus COMP_GetCfgFlagStatus(uint32_t Flag)
000048  4601              MOV      r1,r0
;;;133    {
;;;134      FlagStatus bitstatus;
;;;135    
;;;136      /* Check the parameters */
;;;137      assert_param(IS_COMP_CFG_FLAG(Flag));
;;;138    
;;;139      if ((MDR_COMP->CFG & Flag) == 0)
00004a  4a39              LDR      r2,|L1.304|
00004c  6812              LDR      r2,[r2,#0]
00004e  420a              TST      r2,r1
000050  d101              BNE      |L1.86|
;;;140      {
;;;141        bitstatus = RESET;
000052  2000              MOVS     r0,#0
000054  e000              B        |L1.88|
                  |L1.86|
;;;142      }
;;;143      else
;;;144      {
;;;145        bitstatus = SET;
000056  2001              MOVS     r0,#1
                  |L1.88|
;;;146      }
;;;147    
;;;148      return bitstatus;
;;;149    }
000058  4770              BX       lr
;;;150    
                          ENDP

                  COMP_PInpSourceConfig PROC
;;;158      */
;;;159    void COMP_PInpSourceConfig(uint32_t Source)
00005a  4601              MOV      r1,r0
;;;160    {
;;;161      uint32_t tmpreg_CFG;
;;;162    
;;;163      /* Check the parameters */
;;;164      assert_param(IS_COMP_PLUS_INPUT_CONFIG(Source));
;;;165    
;;;166      tmpreg_CFG = MDR_COMP->CFG;
00005c  4a34              LDR      r2,|L1.304|
00005e  6810              LDR      r0,[r2,#0]
;;;167      tmpreg_CFG &= ~COMP_CFG_CREF;
000060  f4207080          BIC      r0,r0,#0x100
;;;168      tmpreg_CFG += Source;
000064  4408              ADD      r0,r0,r1
;;;169      MDR_COMP->CFG = tmpreg_CFG;
000066  6010              STR      r0,[r2,#0]
;;;170    }
000068  4770              BX       lr
;;;171    
                          ENDP

                  COMP_MInpSourceConfig PROC
;;;181      */
;;;182    void COMP_MInpSourceConfig(uint32_t Source)
00006a  4601              MOV      r1,r0
;;;183    {
;;;184      uint32_t tmpreg_CFG;
;;;185    
;;;186      /* Check the parameters */
;;;187      assert_param(IS_COMP_MINUS_INPUT_CONFIG(Source));
;;;188    
;;;189      tmpreg_CFG = MDR_COMP->CFG;
00006c  4a30              LDR      r2,|L1.304|
00006e  6810              LDR      r0,[r2,#0]
;;;190      tmpreg_CFG &= ~COMP_CFG_CCH_Msk;
000070  f42060c0          BIC      r0,r0,#0x600
;;;191      tmpreg_CFG += Source;
000074  4408              ADD      r0,r0,r1
;;;192      MDR_COMP->CFG = tmpreg_CFG;
000076  6010              STR      r0,[r2,#0]
;;;193    }
000078  4770              BX       lr
;;;194    
                          ENDP

                  COMP_OutInversionConfig PROC
;;;202      */
;;;203    void COMP_OutInversionConfig(uint32_t Inversion)
00007a  4601              MOV      r1,r0
;;;204    {
;;;205      uint32_t tmpreg_CFG;
;;;206    
;;;207      /* Check the parameters */
;;;208      assert_param(IS_COMP_OUT_INV_CONFIG(Inversion));
;;;209    
;;;210      tmpreg_CFG = MDR_COMP->CFG;
00007c  4a2c              LDR      r2,|L1.304|
00007e  6810              LDR      r0,[r2,#0]
;;;211      tmpreg_CFG &= ~COMP_CFG_INV;
000080  f4206000          BIC      r0,r0,#0x800
;;;212      tmpreg_CFG += Inversion;
000084  4408              ADD      r0,r0,r1
;;;213      MDR_COMP->CFG = tmpreg_CFG;
000086  6010              STR      r0,[r2,#0]
;;;214    }
000088  4770              BX       lr
;;;215    
                          ENDP

                  COMP_CVRefInit PROC
;;;223      */
;;;224    void COMP_CVRefInit(const COMP_CVRefInitTypeDef* COMP_CVRefInitStruct)
00008a  4a29              LDR      r2,|L1.304|
;;;225    {
;;;226      uint32_t tmpreg_CFG;
;;;227    
;;;228      /* Check the parameters */
;;;229      assert_param(IS_COMP_CVREF_SOURCE_CONFIG(COMP_CVRefInitStruct->COMP_CVRefSource));
;;;230      assert_param(IS_COMP_CVREF_RANGE_CONFIG(COMP_CVRefInitStruct->COMP_CVRefRange));
;;;231      assert_param(IS_COMP_CVREF_SCALE_CONFIG(COMP_CVRefInitStruct->COMP_CVRefScale));
;;;232    
;;;233      tmpreg_CFG = MDR_COMP->CFG;
00008c  6811              LDR      r1,[r2,#0]
;;;234      tmpreg_CFG &= ~(COMP_CFG_CVRSS | COMP_CFG_CVRR | COMP_CFG_CVR_Msk);
00008e  f02101f6          BIC      r1,r1,#0xf6
;;;235      tmpreg_CFG += COMP_CVRefInitStruct->COMP_CVRefSource
000092  e9d02300          LDRD     r2,r3,[r0,#0]
000096  441a              ADD      r2,r2,r3
000098  6883              LDR      r3,[r0,#8]
00009a  441a              ADD      r2,r2,r3
00009c  4411              ADD      r1,r1,r2
;;;236                  + COMP_CVRefInitStruct->COMP_CVRefRange
;;;237                  + COMP_CVRefInitStruct->COMP_CVRefScale;
;;;238      MDR_COMP->CFG = tmpreg_CFG;
00009e  4a24              LDR      r2,|L1.304|
0000a0  6011              STR      r1,[r2,#0]
;;;239    }
0000a2  4770              BX       lr
;;;240    
                          ENDP

                  COMP_CVRefStructInit PROC
;;;246      */
;;;247    void COMP_CVRefStructInit(COMP_CVRefInitTypeDef* COMP_CVRefInitStruct)
0000a4  2100              MOVS     r1,#0
;;;248    {
;;;249      COMP_CVRefInitStruct->COMP_CVRefSource = COMP_CVREF_SOURCE_AVdd;
0000a6  6001              STR      r1,[r0,#0]
;;;250      COMP_CVRefInitStruct->COMP_CVRefRange  = COMP_CVREF_RANGE_Up;
0000a8  6041              STR      r1,[r0,#4]
;;;251      COMP_CVRefInitStruct->COMP_CVRefScale  = COMP_CVREF_SCALE_0_div_24;
0000aa  6081              STR      r1,[r0,#8]
;;;252    }
0000ac  4770              BX       lr
;;;253    
                          ENDP

                  COMP_CVRefCmd PROC
;;;259      */
;;;260    void COMP_CVRefCmd(FunctionalState NewState)
0000ae  4601              MOV      r1,r0
;;;261    {
;;;262      uint32_t tmpreg_CFG;
;;;263    
;;;264      /* Check the parameters */
;;;265      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;266    
;;;267      tmpreg_CFG = MDR_COMP->CFG;
0000b0  4a1f              LDR      r2,|L1.304|
0000b2  6810              LDR      r0,[r2,#0]
;;;268    
;;;269      /* Form new value */
;;;270      if (NewState != DISABLE)
0000b4  b111              CBZ      r1,|L1.188|
;;;271      {
;;;272        /* Enable COMP reference by setting the COMP_CFG_CVREN bit in the COMP_CFG register */
;;;273        tmpreg_CFG |= COMP_CFG_CVREN;
0000b6  f0400008          ORR      r0,r0,#8
0000ba  e001              B        |L1.192|
                  |L1.188|
;;;274      }
;;;275      else
;;;276      {
;;;277        /* Disable COMP reference by resetting the COMP_CFG_CVREN bit in the COMP_CFG register */
;;;278        tmpreg_CFG &= ~COMP_CFG_CVREN;
0000bc  f0200008          BIC      r0,r0,#8
                  |L1.192|
;;;279      }
;;;280    
;;;281      /* Configure COMP_CFG register with new value */
;;;282      MDR_COMP->CFG = tmpreg_CFG;
0000c0  4a1b              LDR      r2,|L1.304|
0000c2  6010              STR      r0,[r2,#0]
;;;283    }
0000c4  4770              BX       lr
;;;284    
                          ENDP

                  COMP_CVRefSourceConfig PROC
;;;292      */
;;;293    void COMP_CVRefSourceConfig(uint32_t Source)
0000c6  4601              MOV      r1,r0
;;;294    {
;;;295      uint32_t tmpreg_CFG;
;;;296    
;;;297      /* Check the parameters */
;;;298      assert_param(IS_COMP_CVREF_SOURCE_CONFIG(Source));
;;;299    
;;;300      tmpreg_CFG = MDR_COMP->CFG;
0000c8  4a19              LDR      r2,|L1.304|
0000ca  6810              LDR      r0,[r2,#0]
;;;301      tmpreg_CFG &= ~COMP_CFG_CVRSS;
0000cc  f0200004          BIC      r0,r0,#4
;;;302      tmpreg_CFG += Source;
0000d0  4408              ADD      r0,r0,r1
;;;303      MDR_COMP->CFG = tmpreg_CFG;
0000d2  6010              STR      r0,[r2,#0]
;;;304    }
0000d4  4770              BX       lr
;;;305    
                          ENDP

                  COMP_CVRefRangeConfig PROC
;;;313      */
;;;314    void COMP_CVRefRangeConfig(uint32_t Range)
0000d6  4601              MOV      r1,r0
;;;315    {
;;;316      uint32_t tmpreg_CFG;
;;;317    
;;;318      /* Check the parameters */
;;;319      assert_param(IS_COMP_CVREF_RANGE_CONFIG(Range));
;;;320    
;;;321      tmpreg_CFG = MDR_COMP->CFG;
0000d8  4a15              LDR      r2,|L1.304|
0000da  6810              LDR      r0,[r2,#0]
;;;322      tmpreg_CFG &= ~COMP_CFG_CVRR;
0000dc  f0200002          BIC      r0,r0,#2
;;;323      tmpreg_CFG += Range;
0000e0  4408              ADD      r0,r0,r1
;;;324      MDR_COMP->CFG = tmpreg_CFG;
0000e2  6010              STR      r0,[r2,#0]
;;;325    }
0000e4  4770              BX       lr
;;;326    
                          ENDP

                  COMP_CVRefScaleConfig PROC
;;;365      */
;;;366    void COMP_CVRefScaleConfig(uint32_t Scale)
0000e6  4601              MOV      r1,r0
;;;367    {
;;;368      uint32_t tmpreg_CFG;
;;;369    
;;;370      /* Check the parameters */
;;;371      assert_param(IS_COMP_CVREF_SCALE_CONFIG(Scale));
;;;372    
;;;373      tmpreg_CFG = MDR_COMP->CFG;
0000e8  4a11              LDR      r2,|L1.304|
0000ea  6810              LDR      r0,[r2,#0]
;;;374      tmpreg_CFG &= ~COMP_CFG_CVR_Msk;
0000ec  f02000f0          BIC      r0,r0,#0xf0
;;;375      tmpreg_CFG += Scale;
0000f0  4408              ADD      r0,r0,r1
;;;376      MDR_COMP->CFG = tmpreg_CFG;
0000f2  6010              STR      r0,[r2,#0]
;;;377    }
0000f4  4770              BX       lr
;;;378    
                          ENDP

                  COMP_GetResultLatch PROC
;;;383      */
;;;384    uint32_t COMP_GetResultLatch(void)
0000f6  480e              LDR      r0,|L1.304|
;;;385    {
;;;386      return MDR_COMP->RESULT_LATCH;
0000f8  6880              LDR      r0,[r0,#8]
;;;387    }
0000fa  4770              BX       lr
;;;388    
                          ENDP

                  COMP_GetStatus PROC
;;;393      */
;;;394    uint32_t COMP_GetStatus(void)
0000fc  480c              LDR      r0,|L1.304|
;;;395    {
;;;396      return MDR_COMP->RESULT;
0000fe  6840              LDR      r0,[r0,#4]
;;;397    }
000100  4770              BX       lr
;;;398    
                          ENDP

                  COMP_GetFlagStatus PROC
;;;407      */
;;;408    FlagStatus COMP_GetFlagStatus(uint32_t Flag)
000102  b500              PUSH     {lr}
;;;409    {
000104  4602              MOV      r2,r0
;;;410      FlagStatus bitstatus;
;;;411    
;;;412      /* Check the parameters */
;;;413      assert_param(IS_COMP_STATUS_FLAG(Flag));
;;;414    
;;;415      if ((COMP_GetStatus() & Flag) == 0)
000106  f7fffffe          BL       COMP_GetStatus
00010a  4210              TST      r0,r2
00010c  d101              BNE      |L1.274|
;;;416      {
;;;417        bitstatus = RESET;
00010e  2100              MOVS     r1,#0
000110  e000              B        |L1.276|
                  |L1.274|
;;;418      }
;;;419      else
;;;420      {
;;;421        bitstatus = SET;
000112  2101              MOVS     r1,#1
                  |L1.276|
;;;422      }
;;;423    
;;;424      return bitstatus;
000114  4608              MOV      r0,r1
;;;425    }
000116  bd00              POP      {pc}
;;;426    
                          ENDP

                  COMP_ITConfig PROC
;;;432      */
;;;433    void COMP_ITConfig(FunctionalState NewState)
000118  4601              MOV      r1,r0
;;;434    {
;;;435      uint32_t tmpreg_CFG;
;;;436    
;;;437      /* Check the parameters */
;;;438      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;439    
;;;440      tmpreg_CFG = MDR_COMP->CFG;
00011a  4a05              LDR      r2,|L1.304|
00011c  6810              LDR      r0,[r2,#0]
;;;441    
;;;442      /* Form new value */
;;;443      if (NewState != DISABLE)
00011e  b111              CBZ      r1,|L1.294|
;;;444      {
;;;445        /* Enable the COMP Interrupt requests by setting bits in the CFG registers */
;;;446        tmpreg_CFG |= COMP_CFG_CMPIE;
000120  f4405000          ORR      r0,r0,#0x2000
000124  e001              B        |L1.298|
                  |L1.294|
;;;447      }
;;;448      else
;;;449      {
;;;450        /* Disable the COMP Interrupt requests by clearing bits in the CFG registers */
;;;451        tmpreg_CFG &= ~COMP_CFG_CMPIE;
000126  f4205000          BIC      r0,r0,#0x2000
                  |L1.298|
;;;452      }
;;;453    
;;;454      /* Configure CFG registers with new value */
;;;455      MDR_COMP->CFG = tmpreg_CFG;
00012a  4a01              LDR      r2,|L1.304|
00012c  6010              STR      r0,[r2,#0]
;;;456    }
00012e  4770              BX       lr
;;;457    
                          ENDP

                  |L1.304|
                          DCD      0x40098000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_comp.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_comp_c_66e338f6____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___16_MDR32F9Qx_comp_c_66e338f6____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_comp_c_66e338f6____REVSH|
#line 144
|__asm___16_MDR32F9Qx_comp_c_66e338f6____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
