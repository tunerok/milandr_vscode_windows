; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\mdr32f9qx_i2c.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\mdr32f9qx_i2c.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\mdr32f9qx_i2c.crf ..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_i2c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  I2C_DeInit PROC
;;;48       */
;;;49     void I2C_DeInit(void)
000000  4840              LDR      r0,|L1.260|
;;;50     {
;;;51       MDR_I2C_TypeDef *I2Cx;
;;;52     
;;;53       I2Cx = MDR_I2C;
;;;54     
;;;55       I2Cx->CTR = 0;
000002  2100              MOVS     r1,#0
000004  6081              STR      r1,[r0,#8]
;;;56       I2Cx->STA = 0;
000006  6101              STR      r1,[r0,#0x10]
;;;57       I2Cx->CMD = I2C_CMD_CLRINT;
000008  2101              MOVS     r1,#1
00000a  6181              STR      r1,[r0,#0x18]
;;;58       I2Cx->PRL = 0;
00000c  2100              MOVS     r1,#0
00000e  6001              STR      r1,[r0,#0]
;;;59       I2Cx->PRH = 0;
000010  6041              STR      r1,[r0,#4]
;;;60     }
000012  4770              BX       lr
;;;61     
                          ENDP

                  I2C_Init PROC
;;;68       */
;;;69     void I2C_Init(const I2C_InitTypeDef* I2C_InitStruct)
000014  b510              PUSH     {r4,lr}
;;;70     {
000016  4601              MOV      r1,r0
;;;71       MDR_I2C_TypeDef *I2Cx;
;;;72       uint32_t tmpreg_CTR;
;;;73       uint32_t tmpreg_PR;
;;;74     
;;;75       /* Check the parameters */
;;;76       assert_param(IS_I2C_SPEED(I2C_InitStruct->I2C_Speed));
;;;77       assert_param(IS_I2C_CLKDIV(I2C_InitStruct->I2C_ClkDiv));
;;;78     
;;;79       I2Cx = MDR_I2C;
000018  483a              LDR      r0,|L1.260|
;;;80     
;;;81       /* Form new values */
;;;82       tmpreg_CTR = I2Cx->CTR;
00001a  6882              LDR      r2,[r0,#8]
;;;83     
;;;84       if ((I2C_InitStruct->I2C_Speed & I2C_SPEED_Msk) != I2C_SPEED_UP_TO_400KHz)
00001c  790c              LDRB     r4,[r1,#4]
00001e  f0140f20          TST      r4,#0x20
000022  d002              BEQ      |L1.42|
;;;85       {
;;;86         tmpreg_CTR |= I2C_CTR_S_I2C;
000024  f0420220          ORR      r2,r2,#0x20
000028  e001              B        |L1.46|
                  |L1.42|
;;;87       }
;;;88       else
;;;89       {
;;;90         tmpreg_CTR &= ~I2C_CTR_S_I2C;
00002a  f0220220          BIC      r2,r2,#0x20
                  |L1.46|
;;;91       }
;;;92     
;;;93       /* Configure I2C registers with new values */
;;;94       I2Cx->CTR = tmpreg_CTR;
00002e  6082              STR      r2,[r0,#8]
;;;95     
;;;96       tmpreg_PR = I2C_InitStruct->I2C_ClkDiv;
000030  680b              LDR      r3,[r1,#0]
;;;97       I2Cx->PRL = tmpreg_PR;
000032  6003              STR      r3,[r0,#0]
;;;98       I2Cx->PRH = tmpreg_PR >> 8;
000034  0a1c              LSRS     r4,r3,#8
000036  6044              STR      r4,[r0,#4]
;;;99     }
000038  bd10              POP      {r4,pc}
;;;100    
                          ENDP

                  I2C_StructInit PROC
;;;106      */
;;;107    void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
00003a  2100              MOVS     r1,#0
;;;108    {
;;;109      /* Reset I2C initialization structure parameters values */
;;;110      I2C_InitStruct->I2C_Speed  = I2C_SPEED_UP_TO_400KHz;
00003c  6041              STR      r1,[r0,#4]
;;;111      I2C_InitStruct->I2C_ClkDiv = 1;
00003e  2101              MOVS     r1,#1
000040  6001              STR      r1,[r0,#0]
;;;112    }
000042  4770              BX       lr
;;;113    
                          ENDP

                  I2C_Cmd PROC
;;;119      */
;;;120    void I2C_Cmd(FunctionalState NewState)
000044  4601              MOV      r1,r0
;;;121    {
;;;122      MDR_I2C_TypeDef *I2Cx;
;;;123      uint32_t tmpreg_CTR;
;;;124    
;;;125      /* Check the parameters */
;;;126      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;127    
;;;128      I2Cx = MDR_I2C;
000046  4a2f              LDR      r2,|L1.260|
;;;129    
;;;130      tmpreg_CTR = I2Cx->CTR;
000048  6890              LDR      r0,[r2,#8]
;;;131    
;;;132      /* Form new value */
;;;133      if (NewState != DISABLE)
00004a  b111              CBZ      r1,|L1.82|
;;;134      {
;;;135        /* Enable I2C by setting the EN_I2C bit in the CTR register */
;;;136        tmpreg_CTR |= I2C_CTR_EN_I2C;
00004c  f0400080          ORR      r0,r0,#0x80
000050  e001              B        |L1.86|
                  |L1.82|
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable I2C by resetting the EN_I2C bit in the CTR register */
;;;141        tmpreg_CTR &= ~I2C_CTR_EN_I2C;
000052  f0200080          BIC      r0,r0,#0x80
                  |L1.86|
;;;142      }
;;;143    
;;;144      /* Configure CTR register with new value */
;;;145      I2Cx->CTR = tmpreg_CTR;
000056  6090              STR      r0,[r2,#8]
;;;146    }
000058  4770              BX       lr
;;;147    
                          ENDP

                  I2C_ITConfig PROC
;;;153      */
;;;154    void I2C_ITConfig(FunctionalState NewState)
00005a  4601              MOV      r1,r0
;;;155    {
;;;156      MDR_I2C_TypeDef *I2Cx;
;;;157      uint32_t tmpreg_CTR;
;;;158    
;;;159      /* Check the parameters */
;;;160      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;161    
;;;162      I2Cx = MDR_I2C;
00005c  4a29              LDR      r2,|L1.260|
;;;163    
;;;164      tmpreg_CTR = I2Cx->CTR;
00005e  6890              LDR      r0,[r2,#8]
;;;165    
;;;166      /* Form new value */
;;;167      if (NewState != DISABLE)
000060  b111              CBZ      r1,|L1.104|
;;;168      {
;;;169        /* Enable the I2C interrupts by setting the EN_INT bit in the CTR register */
;;;170        tmpreg_CTR |= I2C_CTR_EN_INT;
000062  f0400040          ORR      r0,r0,#0x40
000066  e001              B        |L1.108|
                  |L1.104|
;;;171      }
;;;172      else
;;;173      {
;;;174        /* Disable the I2C interrupts by resetting the EN_INT bit in the CTR register */
;;;175        tmpreg_CTR &= ~I2C_CTR_EN_INT;
000068  f0200040          BIC      r0,r0,#0x40
                  |L1.108|
;;;176      }
;;;177    
;;;178      /* Configure CTR register with new value */
;;;179      I2Cx->CTR = tmpreg_CTR;
00006c  6090              STR      r0,[r2,#8]
;;;180    }
00006e  4770              BX       lr
;;;181    
                          ENDP

                  I2C_GetITStatus PROC
;;;186      */
;;;187    ITStatus I2C_GetITStatus(void)
000070  4924              LDR      r1,|L1.260|
;;;188    {
;;;189      MDR_I2C_TypeDef *I2Cx;
;;;190      ITStatus bitstatus;
;;;191    
;;;192      I2Cx = MDR_I2C;
;;;193    
;;;194      if ((I2Cx->STA & I2C_STA_INT) == I2C_STA_INT)
000072  690a              LDR      r2,[r1,#0x10]
000074  f0120f01          TST      r2,#1
000078  d001              BEQ      |L1.126|
;;;195      {
;;;196        bitstatus = SET;
00007a  2001              MOVS     r0,#1
00007c  e000              B        |L1.128|
                  |L1.126|
;;;197      }
;;;198      else
;;;199      {
;;;200        bitstatus = RESET;
00007e  2000              MOVS     r0,#0
                  |L1.128|
;;;201      }
;;;202    
;;;203      return bitstatus;
;;;204    }
000080  4770              BX       lr
;;;205    
                          ENDP

                  I2C_ClearITPendingBit PROC
;;;210      */
;;;211    void I2C_ClearITPendingBit(void)
000082  4820              LDR      r0,|L1.260|
;;;212    {
;;;213      MDR_I2C_TypeDef *I2Cx;
;;;214    
;;;215      I2Cx = MDR_I2C;
;;;216    
;;;217      I2Cx->CMD |= I2C_CMD_CLRINT;
000084  6981              LDR      r1,[r0,#0x18]
000086  f0410101          ORR      r1,r1,#1
00008a  6181              STR      r1,[r0,#0x18]
;;;218    }
00008c  4770              BX       lr
;;;219    
                          ENDP

                  I2C_Send7bitAddress PROC
;;;231      */
;;;232    void I2C_Send7bitAddress(uint8_t Address, uint32_t Direction)
00008e  4a1d              LDR      r2,|L1.260|
;;;233    {
;;;234      MDR_I2C_TypeDef *I2Cx;
;;;235    
;;;236      assert_param(IS_I2C_DIRECTION(Direction));
;;;237    
;;;238      I2Cx = MDR_I2C;
;;;239    
;;;240      I2Cx->TXD = (Address & ~I2C_Direction_Msk) | Direction;
000090  f0200301          BIC      r3,r0,#1
000094  430b              ORRS     r3,r3,r1
000096  6153              STR      r3,[r2,#0x14]
;;;241      I2Cx->CMD = I2C_CMD_START | I2C_CMD_WR;
000098  2390              MOVS     r3,#0x90
00009a  6193              STR      r3,[r2,#0x18]
;;;242    }
00009c  4770              BX       lr
;;;243    
                          ENDP

                  I2C_SendByte PROC
;;;248      */
;;;249    void I2C_SendByte(uint8_t ByteToSend)
00009e  4601              MOV      r1,r0
;;;250    {
;;;251      MDR_I2C_TypeDef *I2Cx;
;;;252    
;;;253      I2Cx = MDR_I2C;
0000a0  4818              LDR      r0,|L1.260|
;;;254    
;;;255      I2Cx->TXD = ByteToSend;
0000a2  6141              STR      r1,[r0,#0x14]
;;;256      I2Cx->CMD = I2C_CMD_WR;
0000a4  2210              MOVS     r2,#0x10
0000a6  6182              STR      r2,[r0,#0x18]
;;;257    }
0000a8  4770              BX       lr
;;;258    
                          ENDP

                  I2C_SendSTOP PROC
;;;263      */
;;;264    void I2C_SendSTOP(void)
0000aa  4816              LDR      r0,|L1.260|
;;;265    {
;;;266      MDR_I2C_TypeDef *I2Cx;
;;;267    
;;;268      I2Cx = MDR_I2C;
;;;269    
;;;270      I2Cx->CMD = I2C_CMD_STOP;
0000ac  2140              MOVS     r1,#0x40
0000ae  6181              STR      r1,[r0,#0x18]
;;;271    }
0000b0  4770              BX       lr
;;;272    
                          ENDP

                  I2C_StartReceiveData PROC
;;;281      */
;;;282    void I2C_StartReceiveData(uint32_t Acknowlage)
0000b2  4914              LDR      r1,|L1.260|
;;;283    {
;;;284      MDR_I2C_TypeDef *I2Cx;
;;;285    
;;;286      assert_param(IS_I2C_SEND_ACKNOWLAGE(Acknowlage));
;;;287    
;;;288      I2Cx = MDR_I2C;
;;;289    
;;;290      I2Cx->CMD = I2C_CMD_RD | Acknowlage;
0000b4  f0400220          ORR      r2,r0,#0x20
0000b8  618a              STR      r2,[r1,#0x18]
;;;291    }
0000ba  4770              BX       lr
;;;292    
                          ENDP

                  I2C_GetReceivedData PROC
;;;297      */
;;;298    uint8_t I2C_GetReceivedData(void)
0000bc  4911              LDR      r1,|L1.260|
;;;299    {
;;;300      MDR_I2C_TypeDef *I2Cx;
;;;301    
;;;302      I2Cx = MDR_I2C;
;;;303    
;;;304      return I2Cx->RXD;
0000be  68c8              LDR      r0,[r1,#0xc]
0000c0  b2c0              UXTB     r0,r0
;;;305    }
0000c2  4770              BX       lr
;;;306    
                          ENDP

                  I2C_GetLastEvent PROC
;;;347      */
;;;348    uint32_t I2C_GetLastEvent(void)
0000c4  490f              LDR      r1,|L1.260|
;;;349    {
;;;350      MDR_I2C_TypeDef *I2Cx;
;;;351      uint32_t event;
;;;352    
;;;353      I2Cx = MDR_I2C;
;;;354    
;;;355      event = I2Cx->CMD | (I2Cx->STA << 8);
0000c6  698a              LDR      r2,[r1,#0x18]
0000c8  690b              LDR      r3,[r1,#0x10]
0000ca  ea422003          ORR      r0,r2,r3,LSL #8
;;;356      event |= ~event << 16;
0000ce  43c2              MVNS     r2,r0
0000d0  ea404002          ORR      r0,r0,r2,LSL #16
;;;357    
;;;358      return event;
;;;359    }
0000d4  4770              BX       lr
;;;360    
                          ENDP

                  I2C_CheckEvent PROC
;;;321      */
;;;322    ErrorStatus I2C_CheckEvent(uint32_t Event)
0000d6  b530              PUSH     {r4,r5,lr}
;;;323    {
0000d8  4604              MOV      r4,r0
;;;324      ErrorStatus errstatus;
;;;325    
;;;326      assert_param(IS_I2C_FLAGS(Event));
;;;327    
;;;328      if ((I2C_GetLastEvent() & Event) == Event)
0000da  f7fffffe          BL       I2C_GetLastEvent
0000de  4020              ANDS     r0,r0,r4
0000e0  42a0              CMP      r0,r4
0000e2  d101              BNE      |L1.232|
;;;329      {
;;;330        errstatus = SUCCESS;
0000e4  2501              MOVS     r5,#1
0000e6  e000              B        |L1.234|
                  |L1.232|
;;;331      }
;;;332      else
;;;333      {
;;;334        errstatus = ERROR;
0000e8  2500              MOVS     r5,#0
                  |L1.234|
;;;335      }
;;;336    
;;;337      return errstatus;
0000ea  4628              MOV      r0,r5
;;;338    }
0000ec  bd30              POP      {r4,r5,pc}
;;;339    
                          ENDP

                  I2C_GetFlagStatus PROC
;;;386      */
;;;387    FlagStatus I2C_GetFlagStatus(uint32_t Flag)
0000ee  b530              PUSH     {r4,r5,lr}
;;;388    {
0000f0  4605              MOV      r5,r0
;;;389      FlagStatus bitstatus;
;;;390    
;;;391      assert_param(IS_I2C_FLAG(Flag));
;;;392    
;;;393      if ((I2C_GetLastEvent() & Flag) != 0)
0000f2  f7fffffe          BL       I2C_GetLastEvent
0000f6  4228              TST      r0,r5
0000f8  d001              BEQ      |L1.254|
;;;394      {
;;;395        bitstatus = SET;
0000fa  2401              MOVS     r4,#1
0000fc  e000              B        |L1.256|
                  |L1.254|
;;;396      }
;;;397      else
;;;398      {
;;;399        bitstatus = RESET;
0000fe  2400              MOVS     r4,#0
                  |L1.256|
;;;400      }
;;;401    
;;;402      return bitstatus;
000100  4620              MOV      r0,r4
;;;403    }
000102  bd30              POP      {r4,r5,pc}
;;;404    
                          ENDP

                  |L1.260|
                          DCD      0x40050000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_i2c.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_i2c_c_7174d409____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___15_MDR32F9Qx_i2c_c_7174d409____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_i2c_c_7174d409____REVSH|
#line 144
|__asm___15_MDR32F9Qx_i2c_c_7174d409____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
