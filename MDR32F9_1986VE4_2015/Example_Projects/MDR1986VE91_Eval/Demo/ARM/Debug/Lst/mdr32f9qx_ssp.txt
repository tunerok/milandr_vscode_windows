; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\mdr32f9qx_ssp.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\mdr32f9qx_ssp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\mdr32f9qx_ssp.crf ..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_ssp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SSP_DeInit PROC
;;;56       */
;;;57     void SSP_DeInit(MDR_SSP_TypeDef* SSPx)
000000  2100              MOVS     r1,#0
;;;58     {
;;;59       /* Check the parameters */
;;;60       assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;61     
;;;62       SSPx->CR0   = 0;
000002  6001              STR      r1,[r0,#0]
;;;63       SSPx->CR1   = 0;
000004  6041              STR      r1,[r0,#4]
;;;64       SSPx->CPSR  = 0;
000006  6101              STR      r1,[r0,#0x10]
;;;65       SSPx->IMSC  = 0;
000008  6141              STR      r1,[r0,#0x14]
;;;66       SSPx->DMACR = 0;
00000a  6241              STR      r1,[r0,#0x24]
;;;67     
;;;68       /* Clear SSP ICR[RTIC] and SSP ICR[RORIC] bits */
;;;69       SSPx->ICR = SSP_IT_RT | SSP_IT_ROR;
00000c  2103              MOVS     r1,#3
00000e  6201              STR      r1,[r0,#0x20]
;;;70     
;;;71     }
000010  4770              BX       lr
;;;72     
                          ENDP

                  SSP_Init PROC
;;;82       */
;;;83     void SSP_Init(MDR_SSP_TypeDef* SSPx, const SSP_InitTypeDef* SSP_InitStruct)
000012  b510              PUSH     {r4,lr}
;;;84     {
;;;85       uint32_t tmpreg;
;;;86     
;;;87       /* Check the parameters */
;;;88       assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;89       assert_param(IS_SSP_SPEED_FACTOR(SSP_InitStruct->SSP_SCR));
;;;90       assert_param(IS_SSP_SPEED_DIVIDER(SSP_InitStruct->SSP_CPSDVSR));
;;;91       assert_param(IS_SSP_MODE(SSP_InitStruct->SSP_Mode));
;;;92       assert_param(IS_SSP_WORD_LENGTH(SSP_InitStruct->SSP_WordLength));
;;;93       assert_param(IS_SSP_SPH(SSP_InitStruct->SSP_SPH));
;;;94       assert_param(IS_SSP_SPO(SSP_InitStruct->SSP_SPO));
;;;95       assert_param(IS_SSP_FRF(SSP_InitStruct->SSP_FRF));
;;;96       assert_param(IS_SSP_HARDWARE_FLOW_CONTROL(SSP_InitStruct->SSP_HardwareFlowControl));
;;;97     
;;;98       /* SSPx CPSR Configuration */
;;;99       SSPx->CPSR = SSP_InitStruct->SSP_CPSDVSR;
000014  884b              LDRH     r3,[r1,#2]
000016  6103              STR      r3,[r0,#0x10]
;;;100    
;;;101      /* SSPx CR0 Configuration */
;;;102      tmpreg = (SSP_InitStruct->SSP_SCR << SSP_CR0_SCR_Pos)
000018  890b              LDRH     r3,[r1,#8]
00001a  880c              LDRH     r4,[r1,#0]
00001c  eb032304          ADD      r3,r3,r4,LSL #8
000020  894c              LDRH     r4,[r1,#0xa]
000022  4423              ADD      r3,r3,r4
000024  898c              LDRH     r4,[r1,#0xc]
000026  4423              ADD      r3,r3,r4
000028  88cc              LDRH     r4,[r1,#6]
00002a  191a              ADDS     r2,r3,r4
;;;103             + SSP_InitStruct->SSP_SPH
;;;104             + SSP_InitStruct->SSP_SPO
;;;105             + SSP_InitStruct->SSP_FRF
;;;106             + SSP_InitStruct->SSP_WordLength;
;;;107      SSPx->CR0 = tmpreg;
00002c  6002              STR      r2,[r0,#0]
;;;108    
;;;109      /* SSPx CR1 Configuration */
;;;110      tmpreg = SSP_InitStruct->SSP_HardwareFlowControl + SSP_InitStruct->SSP_Mode;
00002e  89cb              LDRH     r3,[r1,#0xe]
000030  888c              LDRH     r4,[r1,#4]
000032  191a              ADDS     r2,r3,r4
;;;111      SSPx->CR1 = tmpreg;
000034  6042              STR      r2,[r0,#4]
;;;112    }
000036  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  SSP_StructInit PROC
;;;119      */
;;;120    void SSP_StructInit(SSP_InitTypeDef* SSP_InitStruct)
000038  2100              MOVS     r1,#0
;;;121    {
;;;122      /* SSP_InitStruct members default value */
;;;123      /* Initialize the SPI_Mode member */
;;;124      SSP_InitStruct->SSP_Mode = SSP_ModeMaster;
00003a  8081              STRH     r1,[r0,#4]
;;;125      /* initialize the SSP_WordLength member */
;;;126      SSP_InitStruct->SSP_WordLength = SSP_WordLength8b;
00003c  2107              MOVS     r1,#7
00003e  80c1              STRH     r1,[r0,#6]
;;;127      /* Initialize the SSP_SPO member */
;;;128      SSP_InitStruct->SSP_SPO = SSP_SPO_Low;
000040  2100              MOVS     r1,#0
000042  8141              STRH     r1,[r0,#0xa]
;;;129      /* Initialize the SSP_SPH member */
;;;130      SSP_InitStruct->SSP_SPH = SSP_SPH_1Edge;
000044  8101              STRH     r1,[r0,#8]
;;;131      /* Initialize the SSP_FRF member */
;;;132      SSP_InitStruct->SSP_FRF = SSP_FRF_SPI_Motorola;
000046  8181              STRH     r1,[r0,#0xc]
;;;133      /* Initialize the SSP max speed */
;;;134      SSP_InitStruct->SSP_CPSDVSR = 2;
000048  2102              MOVS     r1,#2
00004a  8041              STRH     r1,[r0,#2]
;;;135      SSP_InitStruct->SSP_SCR = 0;
00004c  2100              MOVS     r1,#0
00004e  8001              STRH     r1,[r0,#0]
;;;136    
;;;137    }
000050  4770              BX       lr
;;;138    
                          ENDP

                  SSP_Cmd PROC
;;;147      */
;;;148    void SSP_Cmd(MDR_SSP_TypeDef* SSPx, FunctionalState NewState)
000052  b121              CBZ      r1,|L1.94|
;;;149    {
;;;150      /* Check the parameters */
;;;151      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;152      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;153    
;;;154      if (NewState != DISABLE)
;;;155      {
;;;156        /* Enable the selected SSP by setting the SSE bit in the CR1 register */
;;;157        SSPx->CR1 |= CR1_EN_Set;
000054  6842              LDR      r2,[r0,#4]
000056  f0420202          ORR      r2,r2,#2
00005a  6042              STR      r2,[r0,#4]
00005c  e004              B        |L1.104|
                  |L1.94|
;;;158      }
;;;159      else
;;;160      {
;;;161        /* Disable the selected SSP by clearing the SSE bit in the CR1 register */
;;;162        SSPx->CR1 &= CR1_EN_Reset;
00005e  6842              LDR      r2,[r0,#4]
000060  f64f73fd          MOV      r3,#0xfffd
000064  401a              ANDS     r2,r2,r3
000066  6042              STR      r2,[r0,#4]
                  |L1.104|
;;;163      }
;;;164    }
000068  4770              BX       lr
;;;165    
                          ENDP

                  SSP_ITConfig PROC
;;;180      */
;;;181    void SSP_ITConfig(MDR_SSP_TypeDef* SSPx, uint32_t SSP_IT, FunctionalState NewState)
00006a  b11a              CBZ      r2,|L1.116|
;;;182    {
;;;183      /* Check the parameters */
;;;184      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;185      assert_param(IS_SSP_CONFIG_IT(SSP_IT));
;;;186      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;187    
;;;188      if (NewState != DISABLE)
;;;189      {
;;;190        SSPx->IMSC |= SSP_IT;
00006c  6943              LDR      r3,[r0,#0x14]
00006e  430b              ORRS     r3,r3,r1
000070  6143              STR      r3,[r0,#0x14]
000072  e002              B        |L1.122|
                  |L1.116|
;;;191      }
;;;192      else
;;;193      {
;;;194        SSPx->IMSC &= ~SSP_IT;
000074  6943              LDR      r3,[r0,#0x14]
000076  438b              BICS     r3,r3,r1
000078  6143              STR      r3,[r0,#0x14]
                  |L1.122|
;;;195      }
;;;196    }
00007a  4770              BX       lr
;;;197    
                          ENDP

                  SSP_GetITStatus PROC
;;;210      */
;;;211    ITStatus SSP_GetITStatus(MDR_SSP_TypeDef* SSPx, uint32_t SSP_IT)
00007c  4602              MOV      r2,r0
;;;212    {
;;;213      ITStatus bitstatus;
;;;214    
;;;215      /* Check the parameters */
;;;216      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;217      assert_param(IS_SSP_CONFIG_IT(SSP_IT));
;;;218    
;;;219      if ((SSPx->RIS & SSP_IT) == SSP_IT)
00007e  6993              LDR      r3,[r2,#0x18]
000080  400b              ANDS     r3,r3,r1
000082  428b              CMP      r3,r1
000084  d101              BNE      |L1.138|
;;;220      {
;;;221        bitstatus = SET;
000086  2001              MOVS     r0,#1
000088  e000              B        |L1.140|
                  |L1.138|
;;;222      }
;;;223      else
;;;224      {
;;;225        bitstatus = RESET;
00008a  2000              MOVS     r0,#0
                  |L1.140|
;;;226      }
;;;227    
;;;228      return (bitstatus);
;;;229    }
00008c  4770              BX       lr
;;;230    
                          ENDP

                  SSP_GetITStatusMasked PROC
;;;243      */
;;;244    ITStatus SSP_GetITStatusMasked(MDR_SSP_TypeDef* SSPx, uint32_t SSP_IT)
00008e  4602              MOV      r2,r0
;;;245    {
;;;246      ITStatus bitstatus;
;;;247    
;;;248      /* Check the parameters */
;;;249      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;250      assert_param(IS_SSP_CONFIG_IT(SSP_IT));
;;;251    
;;;252      if (SSPx->MIS & SSP_IT)
000090  69d3              LDR      r3,[r2,#0x1c]
000092  420b              TST      r3,r1
000094  d001              BEQ      |L1.154|
;;;253      {
;;;254        bitstatus = SET;
000096  2001              MOVS     r0,#1
000098  e000              B        |L1.156|
                  |L1.154|
;;;255      }
;;;256      else
;;;257      {
;;;258        bitstatus = RESET;
00009a  2000              MOVS     r0,#0
                  |L1.156|
;;;259      }
;;;260    
;;;261      return (bitstatus);
;;;262    }
00009c  4770              BX       lr
;;;263    
                          ENDP

                  SSP_ClearITPendingBit PROC
;;;274      */
;;;275    void SSP_ClearITPendingBit(MDR_SSP_TypeDef* SSPx, uint32_t SSP_IT)
00009e  6a02              LDR      r2,[r0,#0x20]
;;;276    {
;;;277      /* Check the parameters */
;;;278      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;279      assert_param(IS_SSP_RESET_IT(SSP_IT));
;;;280    
;;;281      SSPx->ICR |= SSP_IT;
0000a0  430a              ORRS     r2,r2,r1
0000a2  6202              STR      r2,[r0,#0x20]
;;;282    }
0000a4  4770              BX       lr
;;;283    
                          ENDP

                  SSP_DMACmd PROC
;;;297      */
;;;298    void SSP_DMACmd(MDR_SSP_TypeDef* SSPx, uint32_t SSP_DMAReq, FunctionalState NewState)
0000a6  b510              PUSH     {r4,lr}
;;;299    {
;;;300      /* Check the parameters */
;;;301      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;302      assert_param(IS_SSP_DMAREQ(SSP_DMAReq));
;;;303      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;304    
;;;305      if (NewState != DISABLE)
0000a8  b11a              CBZ      r2,|L1.178|
;;;306      {
;;;307        /* Enable the DMA transfer for selected requests in the SSP DMACR register */
;;;308        SSPx->DMACR |= SSP_DMAReq;
0000aa  6a43              LDR      r3,[r0,#0x24]
0000ac  430b              ORRS     r3,r3,r1
0000ae  6243              STR      r3,[r0,#0x24]
0000b0  e004              B        |L1.188|
                  |L1.178|
;;;309      }
;;;310      else
;;;311      {
;;;312        /* Disable the DMA transfer for selected requests in the SSP DMACR register */
;;;313        SSPx->DMACR &= (uint16_t)~SSP_DMAReq;
0000b2  6a43              LDR      r3,[r0,#0x24]
0000b4  43cc              MVNS     r4,r1
0000b6  b2a4              UXTH     r4,r4
0000b8  4023              ANDS     r3,r3,r4
0000ba  6243              STR      r3,[r0,#0x24]
                  |L1.188|
;;;314      }
;;;315    }
0000bc  bd10              POP      {r4,pc}
;;;316    
                          ENDP

                  SSP_SendData PROC
;;;324      */
;;;325    void SSP_SendData(MDR_SSP_TypeDef* SSPx, uint16_t Data)
0000be  6081              STR      r1,[r0,#8]
;;;326    {
;;;327      /* Check the parameters */
;;;328      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;329    
;;;330      /* Transmit Data */
;;;331      SSPx->DR = Data;
;;;332    
;;;333    }
0000c0  4770              BX       lr
;;;334    
                          ENDP

                  SSP_ReceiveData PROC
;;;341      */
;;;342    uint16_t SSP_ReceiveData(MDR_SSP_TypeDef* SSPx)
0000c2  4601              MOV      r1,r0
;;;343    {
;;;344      /* Check the parameters */
;;;345      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;346    
;;;347      /* Receive Data */
;;;348      return ((uint16_t)(SSPx->DR));
0000c4  6888              LDR      r0,[r1,#8]
0000c6  b280              UXTH     r0,r0
;;;349    }
0000c8  4770              BX       lr
;;;350    
                          ENDP

                  SSP_GetFlagStatus PROC
;;;363      */
;;;364    FlagStatus SSP_GetFlagStatus(MDR_SSP_TypeDef* SSPx, uint32_t SSP_FLAG)
0000ca  4602              MOV      r2,r0
;;;365    {
;;;366      FlagStatus bitstatus;
;;;367    
;;;368      /* Check the parameters */
;;;369      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;370      assert_param(IS_SSP_FLAG(SSP_FLAG));
;;;371    
;;;372      if (SSPx->SR & SSP_FLAG)
0000cc  68d3              LDR      r3,[r2,#0xc]
0000ce  420b              TST      r3,r1
0000d0  d001              BEQ      |L1.214|
;;;373      {
;;;374        bitstatus = SET;
0000d2  2001              MOVS     r0,#1
0000d4  e000              B        |L1.216|
                  |L1.214|
;;;375      }
;;;376      else
;;;377      {
;;;378        bitstatus = RESET;
0000d6  2000              MOVS     r0,#0
                  |L1.216|
;;;379      }
;;;380    
;;;381      return (bitstatus);
;;;382    }
0000d8  4770              BX       lr
;;;383    
                          ENDP

                  SSP_BRGInit PROC
;;;401      */
;;;402    void SSP_BRGInit ( MDR_SSP_TypeDef* SSPx, uint32_t SSP_BRG ) {
0000da  4602              MOV      r2,r0
;;;403    	uint32_t tmpreg;
;;;404    
;;;405    	/* Check the parameters */
;;;406    	assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;407    	assert_param(IS_SSP_CLOCK_BRG(SSP_BRG));
;;;408    
;;;409    #ifdef USE_MDR1986VE3 /* For Cortex M1 */
;;;410    	if ( (SSPx != MDR_SSP1) && (SSPx != MDR_SSP2) && (SSPx != MDR_SSP3)) {
;;;411    		tmpreg = MDR_RST_CLK->UART_SSP_CLOCK;
;;;412    	}
;;;413    	else
;;;414    #endif	// #ifdef USE_MDR1986VE3 /* For Cortex M1 */
;;;415    		tmpreg = MDR_RST_CLK->SSP_CLOCK;
0000dc  4b0b              LDR      r3,|L1.268|
0000de  6ad8              LDR      r0,[r3,#0x2c]
;;;416    
;;;417    
;;;418    
;;;419    	if (SSPx == MDR_SSP1) {
0000e0  4b0b              LDR      r3,|L1.272|
0000e2  429a              CMP      r2,r3
0000e4  d105              BNE      |L1.242|
;;;420    		tmpreg |= RST_CLK_SSP_CLOCK_SSP1_CLK_EN;
0000e6  f0407080          ORR      r0,r0,#0x1000000
;;;421    		tmpreg &= ~RST_CLK_SSP_CLOCK_SSP1_BRG_Msk;
0000ea  f02000ff          BIC      r0,r0,#0xff
;;;422    		tmpreg |= SSP_BRG;
0000ee  4308              ORRS     r0,r0,r1
0000f0  e008              B        |L1.260|
                  |L1.242|
;;;423    	}
;;;424    	else{
;;;425    		if (SSPx == MDR_SSP2) {
0000f2  4b08              LDR      r3,|L1.276|
0000f4  429a              CMP      r2,r3
0000f6  d105              BNE      |L1.260|
;;;426    			tmpreg |= RST_CLK_SSP_CLOCK_SSP2_CLK_EN;
0000f8  f0407000          ORR      r0,r0,#0x2000000
;;;427    			tmpreg &= ~RST_CLK_SSP_CLOCK_SSP2_BRG_Msk;
0000fc  f420407f          BIC      r0,r0,#0xff00
;;;428    			tmpreg |= (SSP_BRG << 8);
000100  ea402001          ORR      r0,r0,r1,LSL #8
                  |L1.260|
;;;429    		}
;;;430    #ifdef USE_MDR1986VE3 /* For Cortex M1 */
;;;431    		else{
;;;432    			if(SSPx == MDR_SSP3) {
;;;433    				tmpreg |= RST_CLK_SSP_CLOCK_SSP3_CLK_EN;
;;;434    				tmpreg &= ~RST_CLK_SSP_CLOCK_SSP3_BRG_Msk;
;;;435    				tmpreg |= (SSP_BRG << 16);
;;;436    			}
;;;437    
;;;438    			else{
;;;439    				if(SSPx == MDR_SSP4) {
;;;440    					tmpreg |= RST_CLK_UART_SSP_CLOCK_SSP4_CLK_EN;
;;;441    					tmpreg &= ~RST_CLK_UART_SSP_CLOCK_SSP4_BRG_Msk;
;;;442    					tmpreg |= (SSP_BRG << 16);
;;;443    				}
;;;444    			}
;;;445    		}
;;;446    #endif // #ifdef USE_MDR1986VE3 /* For Cortex M1 */
;;;447    	}
;;;448    #ifdef USE_MDR1986VE3 /* For Cortex M1 */
;;;449    	if( (SSPx != MDR_SSP1) && (SSPx != MDR_SSP2) && (SSPx != MDR_SSP3) ){
;;;450    		MDR_RST_CLK->UART_SSP_CLOCK = tmpreg;
;;;451    	}
;;;452    	else
;;;453    #endif // #ifdef USE_MDR1986VE3 /* For Cortex M1 */
;;;454    		MDR_RST_CLK->SSP_CLOCK = tmpreg;
000104  4b01              LDR      r3,|L1.268|
000106  62d8              STR      r0,[r3,#0x2c]
;;;455    
;;;456    }
000108  4770              BX       lr
;;;457    
                          ENDP

00010a  0000              DCW      0x0000
                  |L1.268|
                          DCD      0x40020000
                  |L1.272|
                          DCD      0x40040000
                  |L1.276|
                          DCD      0x400a0000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_ssp.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_ssp_c_f8d46607____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___15_MDR32F9Qx_ssp_c_f8d46607____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_ssp_c_f8d46607____REVSH|
#line 144
|__asm___15_MDR32F9Qx_ssp_c_f8d46607____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
