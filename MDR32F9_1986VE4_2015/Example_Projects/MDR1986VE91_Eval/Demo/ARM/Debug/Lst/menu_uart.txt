; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Debug\Exe\menu_uart.o --asm_dir=.\Debug\Lst\ --list_dir=.\Debug\Lst\ --depend=.\Debug\Exe\menu_uart.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\..\..\..\Libraries\MDR32F9Qx_StdPeriph_Driver\inc\USB_Library -I..\..\inc -I..\..\Config -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\Debug\Exe\menu_uart.crf ..\..\src\Menu_uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UARTConfiguration PROC
;;;132    *******************************************************************************/
;;;133    void UARTConfiguration(ITState IT_Flag)
000000  b510              PUSH     {r4,lr}
;;;134    {
000002  4604              MOV      r4,r0
;;;135      /* Enable the RTCHSE clock on UART1 */
;;;136      RST_CLK_PCLKcmd(RST_CLK_PCLK_UART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2040              MOVS     r0,#0x40
000008  f7fffffe          BL       RST_CLK_PCLKcmd
;;;137    
;;;138      /* Set the UART1 HCLK division factor */
;;;139      UART_BRGInit(MDR_UART1, UART_HCLKdiv1);
00000c  2100              MOVS     r1,#0
00000e  48f9              LDR      r0,|L1.1012|
000010  f7fffffe          BL       UART_BRGInit
;;;140    
;;;141      UART_DeInit(MDR_UART1);
000014  48f7              LDR      r0,|L1.1012|
000016  f7fffffe          BL       UART_DeInit
;;;142    
;;;143      if (IT_Flag == IT_On)
00001a  b95c              CBNZ     r4,|L1.52|
;;;144      {
;;;145        /* Enable interrupt on UART1 */
;;;146        NVIC_EnableIRQ(UART1_IRQn);
00001c  2006              MOVS     r0,#6
00001e  2101              MOVS     r1,#1
000020  4081              LSLS     r1,r1,r0
000022  0942              LSRS     r2,r0,#5
000024  f04f23e0          MOV      r3,#0xe000e000
000028  eb030282          ADD      r2,r3,r2,LSL #2
00002c  f8c21100          STR      r1,[r2,#0x100]
000030  bf00              NOP      
000032  e008              B        |L1.70|
                  |L1.52|
;;;147      }
;;;148      else
;;;149      {
;;;150        /* Disable interrupt on UART1 */
;;;151        NVIC_DisableIRQ(UART1_IRQn);
000034  2006              MOVS     r0,#6
000036  2101              MOVS     r1,#1
000038  4081              LSLS     r1,r1,r0
00003a  4aef              LDR      r2,|L1.1016|
00003c  0943              LSRS     r3,r0,#5
00003e  f8421023          STR      r1,[r2,r3,LSL #2]
000042  bf00              NOP      
000044  bf00              NOP      
                  |L1.70|
;;;152      }
;;;153    }
000046  bd10              POP      {r4,pc}
;;;154    
                          ENDP

                  UARTHelp PROC
;;;161    *******************************************************************************/
;;;162    void UARTHelp(void)
000048  b510              PUSH     {r4,lr}
;;;163    {
;;;164      LCD_CLS();
00004a  f7fffffe          BL       LCD_CLS
;;;165      CurrentMethod = MET_AND;
00004e  2004              MOVS     r0,#4
000050  49ea              LDR      r1,|L1.1020|
000052  7008              STRB     r0,[r1,#0]
;;;166      CurrentFont = &Font_6x8;
000054  48ea              LDR      r0,|L1.1024|
000056  49eb              LDR      r1,|L1.1028|
000058  6008              STR      r0,[r1,#0]  ; CurrentFont
;;;167      LCD_PUTS(0, 0,                           "Press: DOWN, LEFT, UP");
00005a  a2eb              ADR      r2,|L1.1032|
00005c  2100              MOVS     r1,#0
00005e  4608              MOV      r0,r1
000060  f7fffffe          BL       LCD_PUTS
;;;168      LCD_PUTS(0, CurrentFont->Height + 2,     "or RIGHT keys, for   ");
000064  48e7              LDR      r0,|L1.1028|
000066  6800              LDR      r0,[r0,#0]  ; CurrentFont
000068  7800              LDRB     r0,[r0,#0]
00006a  1c80              ADDS     r0,r0,#2
00006c  b2c1              UXTB     r1,r0
00006e  a2ec              ADR      r2,|L1.1056|
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       LCD_PUTS
;;;169      LCD_PUTS(0, CurrentFont->Height * 2 + 4, "start sending.       ");
000076  48e3              LDR      r0,|L1.1028|
000078  6800              LDR      r0,[r0,#0]  ; CurrentFont
00007a  7800              LDRB     r0,[r0,#0]
00007c  2204              MOVS     r2,#4
00007e  eb020040          ADD      r0,r2,r0,LSL #1
000082  b2c1              UXTB     r1,r0
000084  a2ec              ADR      r2,|L1.1080|
000086  2000              MOVS     r0,#0
000088  f7fffffe          BL       LCD_PUTS
;;;170      LCD_PUTS(0, CurrentFont->Height * 3 + 6, "Press SEL for return.");
00008c  48dd              LDR      r0,|L1.1028|
00008e  6800              LDR      r0,[r0,#0]  ; CurrentFont
000090  7800              LDRB     r0,[r0,#0]
000092  eb000040          ADD      r0,r0,r0,LSL #1
000096  1d80              ADDS     r0,r0,#6
000098  b2c1              UXTB     r1,r0
00009a  a2ed              ADR      r2,|L1.1104|
00009c  2000              MOVS     r0,#0
00009e  f7fffffe          BL       LCD_PUTS
;;;171    
;;;172      LCD_PUTS(0, CurrentFont->Height * 4 + 8, "Send:                ");
0000a2  48d8              LDR      r0,|L1.1028|
0000a4  6800              LDR      r0,[r0,#0]  ; CurrentFont
0000a6  7800              LDRB     r0,[r0,#0]
0000a8  2208              MOVS     r2,#8
0000aa  eb020080          ADD      r0,r2,r0,LSL #2
0000ae  b2c1              UXTB     r1,r0
0000b0  a2ed              ADR      r2,|L1.1128|
0000b2  2000              MOVS     r0,#0
0000b4  f7fffffe          BL       LCD_PUTS
;;;173      LCD_PUTS(0, CurrentFont->Height * 5 + 8, "Rec.:                ");
0000b8  48d2              LDR      r0,|L1.1028|
0000ba  6800              LDR      r0,[r0,#0]  ; CurrentFont
0000bc  7800              LDRB     r0,[r0,#0]
0000be  eb000080          ADD      r0,r0,r0,LSL #2
0000c2  3008              ADDS     r0,r0,#8
0000c4  b2c1              UXTB     r1,r0
0000c6  a2ee              ADR      r2,|L1.1152|
0000c8  2000              MOVS     r0,#0
0000ca  f7fffffe          BL       LCD_PUTS
;;;174    }
0000ce  bd10              POP      {r4,pc}
;;;175    
                          ENDP

                  UARTDisplayError PROC
;;;183    *******************************************************************************/
;;;184    void UARTDisplayError(uint8_t flags)
0000d0  b570              PUSH     {r4-r6,lr}
;;;185    {
0000d2  4605              MOV      r5,r0
;;;186      uint32_t i, j;
;;;187    
;;;188      for (i = flags, j = 0; i > 0; j++, i >>= 1)
0000d4  462c              MOV      r4,r5
0000d6  2600              MOVS     r6,#0
0000d8  e021              B        |L1.286|
                  |L1.218|
;;;189      {
;;;190        if ((i & 0x01) != 0)
0000da  f0140f01          TST      r4,#1
0000de  d01c              BEQ      |L1.282|
;;;191        {
;;;192          LCD_PUTS(CurrentFont->Width * RECEIVE_STRING_START_COLUMN,
0000e0  4bed              LDR      r3,|L1.1176|
0000e2  f8532026          LDR      r2,[r3,r6,LSL #2]
0000e6  4bc7              LDR      r3,|L1.1028|
0000e8  681b              LDR      r3,[r3,#0]  ; CurrentFont
0000ea  781b              LDRB     r3,[r3,#0]
0000ec  eb030383          ADD      r3,r3,r3,LSL #2
0000f0  330a              ADDS     r3,r3,#0xa
0000f2  b2d9              UXTB     r1,r3
0000f4  4bc3              LDR      r3,|L1.1028|
0000f6  681b              LDR      r3,[r3,#0]  ; CurrentFont
0000f8  791b              LDRB     r3,[r3,#4]
0000fa  eb030343          ADD      r3,r3,r3,LSL #1
0000fe  065b              LSLS     r3,r3,#25
000100  0e18              LSRS     r0,r3,#24
000102  f7fffffe          BL       LCD_PUTS
;;;193                   CurrentFont->Height * RECEIVE_STRING_LINE + RECEIVE_STRING_LINE_OFFS,
;;;194                   ErrorMessage[j]);
;;;195          while (!KEY_PRESSED(SEL));
000106  bf00              NOP      
                  |L1.264|
000108  f7fffffe          BL       GetKey
00010c  2800              CMP      r0,#0
00010e  d1fb              BNE      |L1.264|
;;;196          WAIT_UNTIL_KEY_RELEASED(SEL);
000110  bf00              NOP      
                  |L1.274|
000112  f7fffffe          BL       GetKey
000116  2800              CMP      r0,#0
000118  d0fb              BEQ      |L1.274|
                  |L1.282|
00011a  1c76              ADDS     r6,r6,#1              ;188
00011c  0864              LSRS     r4,r4,#1              ;188
                  |L1.286|
00011e  2c00              CMP      r4,#0                 ;188
000120  d1db              BNE      |L1.218|
;;;197        }
;;;198      }
;;;199    }
000122  bd70              POP      {r4-r6,pc}
;;;200    
                          ENDP

                  SenderFuncFIFODemo PROC
;;;207    *******************************************************************************/
;;;208    void SenderFuncFIFODemo(void)
000124  b510              PUSH     {r4,lr}
;;;209    {
;;;210      if (error_flag == 0)
000126  48dd              LDR      r0,|L1.1180|
000128  6800              LDR      r0,[r0,#0]  ; error_flag
00012a  b9a8              CBNZ     r0,|L1.344|
;;;211      {
;;;212        for (; ((UART_GetFlagStatus (MDR_UART1, UART_FLAG_TXFF) == RESET) && (send_buffer_pos < SEND_BUFFER_SIZE)); send_buffer_pos++)
00012c  e00b              B        |L1.326|
                  |L1.302|
;;;213        {
;;;214          UART_SendData(MDR_UART1, SendBuffer[send_buffer_pos]);
00012e  48dc              LDR      r0,|L1.1184|
000130  4adc              LDR      r2,|L1.1188|
000132  6812              LDR      r2,[r2,#0]  ; send_buffer_pos
000134  5c81              LDRB     r1,[r0,r2]
000136  48af              LDR      r0,|L1.1012|
000138  f7fffffe          BL       UART_SendData
00013c  48d9              LDR      r0,|L1.1188|
00013e  6800              LDR      r0,[r0,#0]            ;212  ; send_buffer_pos
000140  1c40              ADDS     r0,r0,#1              ;212
000142  49d8              LDR      r1,|L1.1188|
000144  6008              STR      r0,[r1,#0]            ;212  ; send_buffer_pos
                  |L1.326|
000146  2120              MOVS     r1,#0x20              ;212
000148  48aa              LDR      r0,|L1.1012|
00014a  f7fffffe          BL       UART_GetFlagStatus
00014e  b918              CBNZ     r0,|L1.344|
000150  48d4              LDR      r0,|L1.1188|
000152  6800              LDR      r0,[r0,#0]            ;212  ; send_buffer_pos
000154  28c4              CMP      r0,#0xc4              ;212
000156  d3ea              BCC      |L1.302|
                  |L1.344|
;;;215        }
;;;216      }
;;;217    }
000158  bd10              POP      {r4,pc}
;;;218    
                          ENDP

                  ReceiverFuncFIFODemo PROC
;;;225    *******************************************************************************/
;;;226    void ReceiverFuncFIFODemo(void)
00015a  b510              PUSH     {r4,lr}
;;;227    {
;;;228      uint16_t receive_data;
;;;229    
;;;230      if (error_flag == 0)
00015c  48cf              LDR      r0,|L1.1180|
00015e  6800              LDR      r0,[r0,#0]  ; error_flag
000160  bb18              CBNZ     r0,|L1.426|
;;;231      {
;;;232        for (; ((UART_GetFlagStatus(MDR_UART1, UART_FLAG_RXFE) == RESET) && (receive_buffer_pos < RECEIVE_BUFFER_SIZE) && (error_flag == 0));
000162  e015              B        |L1.400|
                  |L1.356|
;;;233                 receive_buffer_pos++)
;;;234        {
;;;235          receive_data = UART_ReceiveData(MDR_UART1);
000164  48a3              LDR      r0,|L1.1012|
000166  f7fffffe          BL       UART_ReceiveData
00016a  4604              MOV      r4,r0
;;;236    
;;;237          /* Check for errors */
;;;238          if (UART_Flags(receive_data) != 0)
00016c  1220              ASRS     r0,r4,#8
00016e  d006              BEQ      |L1.382|
;;;239          {
;;;240            /* Print appropriate messages on LCD in case of errors */
;;;241            UARTDisplayError(UART_Flags(receive_data));
000170  1220              ASRS     r0,r4,#8
000172  f7fffffe          BL       UARTDisplayError
;;;242            error_flag = 1;
000176  2001              MOVS     r0,#1
000178  49c8              LDR      r1,|L1.1180|
00017a  6008              STR      r0,[r1,#0]  ; error_flag
00017c  e003              B        |L1.390|
                  |L1.382|
;;;243          }
;;;244          else
;;;245          {
;;;246            ReceiveBuffer[receive_buffer_pos] = UART_Data(receive_data);
00017e  49ca              LDR      r1,|L1.1192|
000180  4aca              LDR      r2,|L1.1196|
000182  6812              LDR      r2,[r2,#0]  ; receive_buffer_pos
000184  548c              STRB     r4,[r1,r2]
                  |L1.390|
000186  48c9              LDR      r0,|L1.1196|
000188  6800              LDR      r0,[r0,#0]            ;233  ; receive_buffer_pos
00018a  1c40              ADDS     r0,r0,#1              ;233
00018c  49c7              LDR      r1,|L1.1196|
00018e  6008              STR      r0,[r1,#0]            ;233  ; receive_buffer_pos
                  |L1.400|
000190  2110              MOVS     r1,#0x10              ;232
000192  4898              LDR      r0,|L1.1012|
000194  f7fffffe          BL       UART_GetFlagStatus
000198  b938              CBNZ     r0,|L1.426|
00019a  48c4              LDR      r0,|L1.1196|
00019c  6800              LDR      r0,[r0,#0]            ;232  ; receive_buffer_pos
00019e  28c4              CMP      r0,#0xc4              ;232
0001a0  d203              BCS      |L1.426|
0001a2  48be              LDR      r0,|L1.1180|
0001a4  6800              LDR      r0,[r0,#0]            ;232  ; error_flag
0001a6  2800              CMP      r0,#0                 ;232
0001a8  d0dc              BEQ      |L1.356|
                  |L1.426|
;;;247          }
;;;248        }
;;;249      }
;;;250    }
0001aa  bd10              POP      {r4,pc}
;;;251    
                          ENDP

                  UARTwFIFOFunc PROC
;;;261    *******************************************************************************/
;;;262    void UARTwFIFOFunc(void) {
0001ac  e92d47ff          PUSH     {r0-r10,lr}
;;;263      uint8_t *pdata;
;;;264      uint8_t  lcd_string[SEND_STRING_SIZE + 1];
;;;265      uint32_t key, i, data_size;
;;;266      uint32_t send_string_pos, receive_string_pos;
;;;267    
;;;268      UARTConfiguration(IT_On);
0001b0  2000              MOVS     r0,#0
0001b2  f7fffffe          BL       UARTConfiguration
;;;269    
;;;270      /* UART1 configuration */
;;;271      UARTInitStructure.UART_BaudRate                = 115200;
0001b6  f44f30e1          MOV      r0,#0x1c200
0001ba  49bd              LDR      r1,|L1.1200|
0001bc  6008              STR      r0,[r1,#0]  ; UARTInitStructure
;;;272      UARTInitStructure.UART_WordLength              = UART_WordLength8b;
0001be  2060              MOVS     r0,#0x60
0001c0  8088              STRH     r0,[r1,#4]
;;;273      UARTInitStructure.UART_StopBits                = UART_StopBits2;
0001c2  2008              MOVS     r0,#8
0001c4  80c8              STRH     r0,[r1,#6]
;;;274      UARTInitStructure.UART_Parity                  = UART_Parity_Even;
0001c6  2006              MOVS     r0,#6
0001c8  8108              STRH     r0,[r1,#8]
;;;275      UARTInitStructure.UART_FIFOMode                = UART_FIFO_ON;
0001ca  2010              MOVS     r0,#0x10
0001cc  8148              STRH     r0,[r1,#0xa]
;;;276      /* With LBE bit set, output line of UARTTXD transmitter becomes to be bound to
;;;277       * UARTRXD receiver input */
;;;278      UARTInitStructure.UART_HardwareFlowControl     = UART_HardwareFlowControl_RXE | \
0001ce  f44f7060          MOV      r0,#0x380
0001d2  8188              STRH     r0,[r1,#0xc]
;;;279                                                       UART_HardwareFlowControl_TXE | \
;;;280                                                       UART_HardwareFlowControl_LBE;
;;;281    
;;;282      UART_Init (MDR_UART1,&UARTInitStructure);
0001d4  4887              LDR      r0,|L1.1012|
0001d6  f7fffffe          BL       UART_Init
;;;283    
;;;284      /* Set interrupt handlers */
;;;285      pfUARTReceiverFunc = ReceiverFuncFIFODemo;
0001da  f2af0081          ADR      r0,ReceiverFuncFIFODemo + 1
0001de  49b5              LDR      r1,|L1.1204|
0001e0  6008              STR      r0,[r1,#0]  ; pfUARTReceiverFunc
;;;286      pfUARTSenderFunc = SenderFuncFIFODemo;
0001e2  f2af00bf          ADR      r0,SenderFuncFIFODemo + 1
0001e6  49b4              LDR      r1,|L1.1208|
0001e8  6008              STR      r0,[r1,#0]  ; pfUARTSenderFunc
;;;287    
;;;288      /* Enable sender and receiver interrupts */
;;;289      UART_ITConfig (MDR_UART1, UART_IT_TX | UART_IT_RX, ENABLE);
0001ea  2201              MOVS     r2,#1
0001ec  2130              MOVS     r1,#0x30
0001ee  4881              LDR      r0,|L1.1012|
0001f0  f7fffffe          BL       UART_ITConfig
;;;290    
;;;291      /* Adjust sender and receiver interrupt levels */
;;;292      UART_DMAConfig (MDR_UART1, FIFO_IT_LVL_TO_UART_IT_CONST(RECEIVE_FIFO_LVL),
0001f4  2201              MOVS     r2,#1
0001f6  2103              MOVS     r1,#3
0001f8  487e              LDR      r0,|L1.1012|
0001fa  f7fffffe          BL       UART_DMAConfig
;;;293                             FIFO_IT_LVL_TO_UART_IT_CONST(SEND_FIFO_LVL));
;;;294      /* Enable DMA interrupts */
;;;295      UART_DMACmd(MDR_UART1, UART_DMA_TXE | UART_DMA_RXE, ENABLE);
0001fe  2201              MOVS     r2,#1
000200  2103              MOVS     r1,#3
000202  487c              LDR      r0,|L1.1012|
000204  f7fffffe          BL       UART_DMACmd
;;;296    
;;;297      UART_Cmd(MDR_UART1,ENABLE);
000208  2101              MOVS     r1,#1
00020a  487a              LDR      r0,|L1.1012|
00020c  f7fffffe          BL       UART_Cmd
;;;298    
;;;299      UARTHelp();
000210  f7fffffe          BL       UARTHelp
;;;300    
;;;301      key = GetKey();
000214  f7fffffe          BL       GetKey
000218  4607              MOV      r7,r0
;;;302      for (; key != SEL; key = GetKey())
00021a  e0e0              B        |L1.990|
                  |L1.540|
;;;303      {
;;;304        if ((key != NOKEY) && (key != MULTIPLE))
00021c  2f05              CMP      r7,#5
                  |L1.542|
00021e  d07c              BEQ      |L1.794|
000220  2f06              CMP      r7,#6
000222  d0fc              BEQ      |L1.542|
;;;305        {
;;;306          /* Form strings to be transmitted in the buffer.
;;;307           * An algorithm is the following: copy data_size symbols
;;;308           * from the corresponding SendData array element;
;;;309           * fill the rest with '#' symbols. */
;;;310          pdata = SendData[key - 1];
000224  1e78              SUBS     r0,r7,#1
000226  49a5              LDR      r1,|L1.1212|
000228  f8518020          LDR      r8,[r1,r0,LSL #2]
;;;311          for (send_string_pos = 0, data_size = 1; send_string_pos < SEND_BUFFER_SIZE; data_size++)
00022c  2500              MOVS     r5,#0
00022e  f04f0901          MOV      r9,#1
000232  e015              B        |L1.608|
                  |L1.564|
;;;312          {
;;;313            for (i = 0; i < data_size; send_string_pos++, i++)
000234  2400              MOVS     r4,#0
000236  e005              B        |L1.580|
                  |L1.568|
;;;314            {
;;;315              SendBuffer[send_string_pos] = pdata[i];
000238  f8180004          LDRB     r0,[r8,r4]
00023c  4998              LDR      r1,|L1.1184|
00023e  5548              STRB     r0,[r1,r5]
000240  1c6d              ADDS     r5,r5,#1              ;313
000242  1c64              ADDS     r4,r4,#1              ;313
                  |L1.580|
000244  454c              CMP      r4,r9                 ;313
000246  d3f7              BCC      |L1.568|
;;;316            }
;;;317            for (; ((i < SEND_STRING_SIZE) && (send_string_pos < SEND_BUFFER_SIZE)); send_string_pos++, i++)
000248  e004              B        |L1.596|
                  |L1.586|
;;;318            {
;;;319              SendBuffer[send_string_pos] = '#';
00024a  2023              MOVS     r0,#0x23
00024c  4994              LDR      r1,|L1.1184|
00024e  5548              STRB     r0,[r1,r5]
000250  1c6d              ADDS     r5,r5,#1              ;317
000252  1c64              ADDS     r4,r4,#1              ;317
                  |L1.596|
000254  2c0e              CMP      r4,#0xe               ;317
000256  d201              BCS      |L1.604|
000258  2dc4              CMP      r5,#0xc4              ;317
00025a  d3f6              BCC      |L1.586|
                  |L1.604|
00025c  f1090901          ADD      r9,r9,#1              ;311
                  |L1.608|
000260  2dc4              CMP      r5,#0xc4              ;311
000262  d3e7              BCC      |L1.564|
;;;320            }
;;;321          }
;;;322    
;;;323          error_flag = 0;
000264  2000              MOVS     r0,#0
000266  498d              LDR      r1,|L1.1180|
000268  6008              STR      r0,[r1,#0]  ; error_flag
;;;324    
;;;325          receive_string_pos = 0;
00026a  2600              MOVS     r6,#0
;;;326          receive_buffer_pos = 0;
00026c  498f              LDR      r1,|L1.1196|
00026e  6008              STR      r0,[r1,#0]  ; receive_buffer_pos
;;;327          send_string_pos = 0;
000270  2500              MOVS     r5,#0
;;;328          send_buffer_pos = 0;
000272  498c              LDR      r1,|L1.1188|
000274  6008              STR      r0,[r1,#0]  ; send_buffer_pos
;;;329    
;;;330          /* Initiate transmit */
;;;331          SenderFuncFIFODemo();
000276  f7fffffe          BL       SenderFuncFIFODemo
;;;332    
;;;333          /* Interrupt-based processing */
;;;334          while ((receive_buffer_pos < (RECEIVE_BUFFER_SIZE - RECEIVE_FIFO_LVL)) && (error_flag == 0))
00027a  e045              B        |L1.776|
                  |L1.636|
;;;335          {
;;;336            /* Process send buffer to output transmitted strings to LCD */
;;;337            if ((send_buffer_pos - send_string_pos) >= SEND_STRING_SIZE)
00027c  4889              LDR      r0,|L1.1188|
00027e  6800              LDR      r0,[r0,#0]  ; send_buffer_pos
000280  1b40              SUBS     r0,r0,r5
000282  280e              CMP      r0,#0xe
000284  d31d              BCC      |L1.706|
;;;338            {
;;;339              for (i = 0; i < SEND_STRING_SIZE; i++, send_string_pos++)
000286  2400              MOVS     r4,#0
000288  e005              B        |L1.662|
                  |L1.650|
;;;340              {
;;;341                lcd_string[i] = SendBuffer[send_string_pos];
00028a  4885              LDR      r0,|L1.1184|
00028c  5d40              LDRB     r0,[r0,r5]
00028e  f80d0004          STRB     r0,[sp,r4]
000292  1c64              ADDS     r4,r4,#1              ;339
000294  1c6d              ADDS     r5,r5,#1              ;339
                  |L1.662|
000296  2c0e              CMP      r4,#0xe               ;339
000298  d3f7              BCC      |L1.650|
;;;342              }
;;;343              lcd_string[i] = 0x00;
00029a  2000              MOVS     r0,#0
00029c  f80d0004          STRB     r0,[sp,r4]
;;;344              /* Print string on LCD */
;;;345              LCD_PUTS(CurrentFont->Width * (SEND_STRING_START_COLUMN),
0002a0  4a58              LDR      r2,|L1.1028|
0002a2  6812              LDR      r2,[r2,#0]  ; CurrentFont
0002a4  7812              LDRB     r2,[r2,#0]
0002a6  2308              MOVS     r3,#8
0002a8  eb030282          ADD      r2,r3,r2,LSL #2
0002ac  b2d1              UXTB     r1,r2
0002ae  4a55              LDR      r2,|L1.1028|
0002b0  6812              LDR      r2,[r2,#0]  ; CurrentFont
0002b2  7912              LDRB     r2,[r2,#4]
0002b4  eb020242          ADD      r2,r2,r2,LSL #1
0002b8  0652              LSLS     r2,r2,#25
0002ba  0e10              LSRS     r0,r2,#24
0002bc  466a              MOV      r2,sp
0002be  f7fffffe          BL       LCD_PUTS
                  |L1.706|
;;;346                       CurrentFont->Height * SEND_STRING_LINE + SEND_STRING_LINE_OFFS,
;;;347                       lcd_string);
;;;348            }
;;;349    
;;;350            /* Process receiver buffer to output transmitted strings to LCD */
;;;351            if ((receive_buffer_pos - receive_string_pos) >= SEND_STRING_SIZE)
0002c2  487a              LDR      r0,|L1.1196|
0002c4  6800              LDR      r0,[r0,#0]  ; receive_buffer_pos
0002c6  1b80              SUBS     r0,r0,r6
0002c8  280e              CMP      r0,#0xe
0002ca  d31d              BCC      |L1.776|
;;;352            {
;;;353              for (i = 0; i < SEND_STRING_SIZE; i++, receive_string_pos++)
0002cc  2400              MOVS     r4,#0
0002ce  e005              B        |L1.732|
                  |L1.720|
;;;354              {
;;;355                lcd_string[i] = ReceiveBuffer[receive_string_pos];
0002d0  4875              LDR      r0,|L1.1192|
0002d2  5d80              LDRB     r0,[r0,r6]
0002d4  f80d0004          STRB     r0,[sp,r4]
0002d8  1c64              ADDS     r4,r4,#1              ;353
0002da  1c76              ADDS     r6,r6,#1              ;353
                  |L1.732|
0002dc  2c0e              CMP      r4,#0xe               ;353
0002de  d3f7              BCC      |L1.720|
;;;356              }
;;;357              lcd_string[i] = 0x00;
0002e0  2000              MOVS     r0,#0
0002e2  f80d0004          STRB     r0,[sp,r4]
;;;358              /* Print string on LCD */
;;;359              LCD_PUTS(CurrentFont->Width * (RECEIVE_STRING_START_COLUMN),
0002e6  4a47              LDR      r2,|L1.1028|
0002e8  6812              LDR      r2,[r2,#0]  ; CurrentFont
0002ea  7812              LDRB     r2,[r2,#0]
0002ec  eb020282          ADD      r2,r2,r2,LSL #2
0002f0  320a              ADDS     r2,r2,#0xa
0002f2  b2d1              UXTB     r1,r2
0002f4  4a43              LDR      r2,|L1.1028|
0002f6  6812              LDR      r2,[r2,#0]  ; CurrentFont
0002f8  7912              LDRB     r2,[r2,#4]
0002fa  eb020242          ADD      r2,r2,r2,LSL #1
0002fe  0652              LSLS     r2,r2,#25
000300  0e10              LSRS     r0,r2,#24
000302  466a              MOV      r2,sp
000304  f7fffffe          BL       LCD_PUTS
                  |L1.776|
000308  4868              LDR      r0,|L1.1196|
00030a  6800              LDR      r0,[r0,#0]            ;334  ; receive_buffer_pos
00030c  28b8              CMP      r0,#0xb8              ;334
00030e  d203              BCS      |L1.792|
000310  4862              LDR      r0,|L1.1180|
000312  6800              LDR      r0,[r0,#0]            ;334  ; error_flag
000314  2800              CMP      r0,#0                 ;334
000316  d0b1              BEQ      |L1.636|
                  |L1.792|
;;;360                       CurrentFont->Height * RECEIVE_STRING_LINE + RECEIVE_STRING_LINE_OFFS,
;;;361                       lcd_string);
;;;362            }
;;;363          }
;;;364          /* Print on LCD remaining strings (from send buffer) */
;;;365          while ((send_buffer_pos - send_string_pos) >= SEND_STRING_SIZE)
000318  e01e              B        |L1.856|
                  |L1.794|
00031a  e058              B        |L1.974|
                  |L1.796|
;;;366          {
;;;367            for (i = 0; i < SEND_STRING_SIZE; i++, send_string_pos++)
00031c  2400              MOVS     r4,#0
00031e  e005              B        |L1.812|
                  |L1.800|
;;;368            {
;;;369              lcd_string[i] = SendBuffer[send_string_pos];
000320  485f              LDR      r0,|L1.1184|
000322  5d40              LDRB     r0,[r0,r5]
000324  f80d0004          STRB     r0,[sp,r4]
000328  1c64              ADDS     r4,r4,#1              ;367
00032a  1c6d              ADDS     r5,r5,#1              ;367
                  |L1.812|
00032c  2c0e              CMP      r4,#0xe               ;367
00032e  d3f7              BCC      |L1.800|
;;;370            }
;;;371            lcd_string[i] = 0x00;
000330  2000              MOVS     r0,#0
000332  f80d0004          STRB     r0,[sp,r4]
;;;372            /* Print string on LCD */
;;;373            LCD_PUTS(CurrentFont->Width * (SEND_STRING_START_COLUMN),
000336  4a33              LDR      r2,|L1.1028|
000338  6812              LDR      r2,[r2,#0]  ; CurrentFont
00033a  7812              LDRB     r2,[r2,#0]
00033c  2308              MOVS     r3,#8
00033e  eb030282          ADD      r2,r3,r2,LSL #2
000342  b2d1              UXTB     r1,r2
000344  4a2f              LDR      r2,|L1.1028|
000346  6812              LDR      r2,[r2,#0]  ; CurrentFont
000348  7912              LDRB     r2,[r2,#4]
00034a  eb020242          ADD      r2,r2,r2,LSL #1
00034e  0652              LSLS     r2,r2,#25
000350  0e10              LSRS     r0,r2,#24
000352  466a              MOV      r2,sp
000354  f7fffffe          BL       LCD_PUTS
                  |L1.856|
000358  4852              LDR      r0,|L1.1188|
00035a  6800              LDR      r0,[r0,#0]            ;365  ; send_buffer_pos
00035c  1b40              SUBS     r0,r0,r5              ;365
00035e  280e              CMP      r0,#0xe               ;365
000360  d2dc              BCS      |L1.796|
;;;374                     CurrentFont->Height * SEND_STRING_LINE + SEND_STRING_LINE_OFFS,
;;;375                     lcd_string);
;;;376          }
;;;377          /* Read data not handled by interrupts */
;;;378          while ((receive_buffer_pos < RECEIVE_BUFFER_SIZE) && (error_flag == 0))
000362  e001              B        |L1.872|
                  |L1.868|
;;;379          {
;;;380            ReceiverFuncFIFODemo();
000364  f7fffffe          BL       ReceiverFuncFIFODemo
                  |L1.872|
000368  4850              LDR      r0,|L1.1196|
00036a  6800              LDR      r0,[r0,#0]            ;378  ; receive_buffer_pos
00036c  28c4              CMP      r0,#0xc4              ;378
00036e  d203              BCS      |L1.888|
000370  484a              LDR      r0,|L1.1180|
000372  6800              LDR      r0,[r0,#0]            ;378  ; error_flag
000374  2800              CMP      r0,#0                 ;378
000376  d0f5              BEQ      |L1.868|
                  |L1.888|
;;;381          }
;;;382          while ((receive_string_pos < receive_buffer_pos) && (error_flag == 0))
000378  e021              B        |L1.958|
                  |L1.890|
;;;383          {
;;;384              for (i = 0; ((i < SEND_STRING_SIZE) && (receive_string_pos < receive_buffer_pos)); i++, receive_string_pos++)
00037a  2400              MOVS     r4,#0
00037c  e005              B        |L1.906|
                  |L1.894|
;;;385              {
;;;386                lcd_string[i] = ReceiveBuffer[receive_string_pos];
00037e  484a              LDR      r0,|L1.1192|
000380  5d80              LDRB     r0,[r0,r6]
000382  f80d0004          STRB     r0,[sp,r4]
000386  1c64              ADDS     r4,r4,#1              ;384
000388  1c76              ADDS     r6,r6,#1              ;384
                  |L1.906|
00038a  2c0e              CMP      r4,#0xe               ;384
00038c  d203              BCS      |L1.918|
00038e  4847              LDR      r0,|L1.1196|
000390  6800              LDR      r0,[r0,#0]            ;384  ; receive_buffer_pos
000392  4286              CMP      r6,r0                 ;384
000394  d3f3              BCC      |L1.894|
                  |L1.918|
;;;387              }
;;;388              lcd_string[i] = 0x00;
000396  2000              MOVS     r0,#0
000398  f80d0004          STRB     r0,[sp,r4]
;;;389              /* Print string on LCD */
;;;390              LCD_PUTS(CurrentFont->Width * (RECEIVE_STRING_START_COLUMN),
00039c  4a19              LDR      r2,|L1.1028|
00039e  6812              LDR      r2,[r2,#0]  ; CurrentFont
0003a0  7812              LDRB     r2,[r2,#0]
0003a2  eb020282          ADD      r2,r2,r2,LSL #2
0003a6  320a              ADDS     r2,r2,#0xa
0003a8  b2d1              UXTB     r1,r2
0003aa  4a16              LDR      r2,|L1.1028|
0003ac  6812              LDR      r2,[r2,#0]  ; CurrentFont
0003ae  7912              LDRB     r2,[r2,#4]
0003b0  eb020242          ADD      r2,r2,r2,LSL #1
0003b4  0652              LSLS     r2,r2,#25
0003b6  0e10              LSRS     r0,r2,#24
0003b8  466a              MOV      r2,sp
0003ba  f7fffffe          BL       LCD_PUTS
                  |L1.958|
0003be  483b              LDR      r0,|L1.1196|
0003c0  6800              LDR      r0,[r0,#0]            ;382  ; receive_buffer_pos
0003c2  4286              CMP      r6,r0                 ;382
0003c4  d203              BCS      |L1.974|
0003c6  4835              LDR      r0,|L1.1180|
0003c8  6800              LDR      r0,[r0,#0]            ;382  ; error_flag
0003ca  2800              CMP      r0,#0                 ;382
0003cc  d0d5              BEQ      |L1.890|
                  |L1.974|
;;;391                       CurrentFont->Height * RECEIVE_STRING_LINE + RECEIVE_STRING_LINE_OFFS,
;;;392                       lcd_string);
;;;393          }
;;;394    
;;;395        }
;;;396        WAIT_UNTIL_KEY_RELEASED(key);
0003ce  bf00              NOP      
                  |L1.976|
0003d0  f7fffffe          BL       GetKey
0003d4  42b8              CMP      r0,r7
0003d6  d0fb              BEQ      |L1.976|
0003d8  f7fffffe          BL       GetKey
0003dc  4607              MOV      r7,r0                 ;302
                  |L1.990|
0003de  2f00              CMP      r7,#0                 ;302
0003e0  f47faf1c          BNE      |L1.540|
;;;397      }
;;;398    
;;;399      UART_Cmd(MDR_UART1,DISABLE);
0003e4  2100              MOVS     r1,#0
0003e6  4803              LDR      r0,|L1.1012|
0003e8  f7fffffe          BL       UART_Cmd
;;;400      DisplayMenu();
0003ec  f7fffffe          BL       DisplayMenu
;;;401    }
0003f0  e8bd87ff          POP      {r0-r10,pc}
                  |L1.1012|
                          DCD      0x40030000
                  |L1.1016|
                          DCD      0xe000e180
                  |L1.1020|
                          DCD      CurrentMethod
                  |L1.1024|
                          DCD      Font_6x8
                  |L1.1028|
                          DCD      CurrentFont
                  |L1.1032|
000408  50726573          DCB      "Press: DOWN, LEFT, UP",0
00040c  733a2044
000410  4f574e2c
000414  204c4546
000418  542c2055
00041c  5000    
00041e  00                DCB      0
00041f  00                DCB      0
                  |L1.1056|
000420  6f722052          DCB      "or RIGHT keys, for   ",0
000424  49474854
000428  206b6579
00042c  732c2066
000430  6f722020
000434  2000    
000436  00                DCB      0
000437  00                DCB      0
                  |L1.1080|
000438  73746172          DCB      "start sending.       ",0
00043c  74207365
000440  6e64696e
000444  672e2020
000448  20202020
00044c  2000    
00044e  00                DCB      0
00044f  00                DCB      0
                  |L1.1104|
000450  50726573          DCB      "Press SEL for return.",0
000454  73205345
000458  4c20666f
00045c  72207265
000460  7475726e
000464  2e00    
000466  00                DCB      0
000467  00                DCB      0
                  |L1.1128|
000468  53656e64          DCB      "Send:                ",0
00046c  3a202020
000470  20202020
000474  20202020
000478  20202020
00047c  2000    
00047e  00                DCB      0
00047f  00                DCB      0
                  |L1.1152|
000480  5265632e          DCB      "Rec.:                ",0
000484  3a202020
000488  20202020
00048c  20202020
000490  20202020
000494  2000    
000496  00                DCB      0
000497  00                DCB      0
                  |L1.1176|
                          DCD      ErrorMessage
                  |L1.1180|
                          DCD      error_flag
                  |L1.1184|
                          DCD      SendBuffer
                  |L1.1188|
                          DCD      send_buffer_pos
                  |L1.1192|
                          DCD      ReceiveBuffer
                  |L1.1196|
                          DCD      receive_buffer_pos
                  |L1.1200|
                          DCD      UARTInitStructure
                  |L1.1204|
                          DCD      pfUARTReceiverFunc
                  |L1.1208|
                          DCD      pfUARTSenderFunc
                  |L1.1212|
                          DCD      SendData
                          ENDP

                  UARTFunc PROC
;;;413    *******************************************************************************/
;;;414    void UARTFunc(void) {
0004c0  e92d41f0          PUSH     {r4-r8,lr}
;;;415      uint32_t key, i;
;;;416      uint8_t * pdata;
;;;417      uint16_t receive_data;
;;;418    
;;;419      UARTConfiguration(IT_Off);
0004c4  2001              MOVS     r0,#1
0004c6  f7fffffe          BL       UARTConfiguration
;;;420    
;;;421      /* UART1 configuration */
;;;422      UARTInitStructure.UART_BaudRate                = 220;
0004ca  20dc              MOVS     r0,#0xdc
0004cc  4949              LDR      r1,|L1.1524|
0004ce  6008              STR      r0,[r1,#0]  ; UARTInitStructure
;;;423      UARTInitStructure.UART_WordLength              = UART_WordLength8b;
0004d0  2060              MOVS     r0,#0x60
0004d2  8088              STRH     r0,[r1,#4]
;;;424      UARTInitStructure.UART_StopBits                = UART_StopBits1;
0004d4  2000              MOVS     r0,#0
0004d6  80c8              STRH     r0,[r1,#6]
;;;425      UARTInitStructure.UART_Parity                  = UART_Parity_No;
0004d8  8108              STRH     r0,[r1,#8]
;;;426      UARTInitStructure.UART_FIFOMode                = UART_FIFO_OFF;
0004da  8148              STRH     r0,[r1,#0xa]
;;;427      /* With LBE bit set, output line of UARTTXD transmitter becomes to be bound to
;;;428       * UARTRXD receiver input */
;;;429      UARTInitStructure.UART_HardwareFlowControl     = UART_HardwareFlowControl_RXE | \
0004dc  f44f7060          MOV      r0,#0x380
0004e0  8188              STRH     r0,[r1,#0xc]
;;;430                                                       UART_HardwareFlowControl_TXE | \
;;;431                                                       UART_HardwareFlowControl_LBE;
;;;432    
;;;433      UART_Init (MDR_UART1,&UARTInitStructure);
0004e2  4845              LDR      r0,|L1.1528|
0004e4  f7fffffe          BL       UART_Init
;;;434      UART_Cmd(MDR_UART1,ENABLE);
0004e8  2101              MOVS     r1,#1
0004ea  4843              LDR      r0,|L1.1528|
0004ec  f7fffffe          BL       UART_Cmd
;;;435    
;;;436      UARTHelp();
0004f0  f7fffffe          BL       UARTHelp
;;;437    
;;;438      key = GetKey();
0004f4  f7fffffe          BL       GetKey
0004f8  4604              MOV      r4,r0
;;;439      for (; key != SEL; key = GetKey())
0004fa  e071              B        |L1.1504|
                  |L1.1276|
;;;440      {
;;;441        if ((key != NOKEY) && (key != MULTIPLE))
0004fc  2c05              CMP      r4,#5
0004fe  d067              BEQ      |L1.1488|
000500  2c06              CMP      r4,#6
000502  d065              BEQ      |L1.1488|
;;;442        {
;;;443          /* The receiver buffer may be non-empty, so clean it */
;;;444          while (UART_GetFlagStatus (MDR_UART1, UART_FLAG_RXFF) == SET)
000504  e002              B        |L1.1292|
                  |L1.1286|
;;;445          {
;;;446            UART_ReceiveData (MDR_UART1);
000506  483c              LDR      r0,|L1.1528|
000508  f7fffffe          BL       UART_ReceiveData
                  |L1.1292|
00050c  2140              MOVS     r1,#0x40              ;444
00050e  483a              LDR      r0,|L1.1528|
000510  f7fffffe          BL       UART_GetFlagStatus
000514  2801              CMP      r0,#1                 ;444
000516  d0f6              BEQ      |L1.1286|
;;;447          }
;;;448    
;;;449          error_flag = 0;
000518  2000              MOVS     r0,#0
00051a  4938              LDR      r1,|L1.1532|
00051c  6008              STR      r0,[r1,#0]  ; error_flag
;;;450          for (pdata = SendData[key - 1], i = 0; ((*pdata != 0) && (error_flag == 0)); pdata++, i++)
00051e  1e60              SUBS     r0,r4,#1
000520  4937              LDR      r1,|L1.1536|
000522  f8516020          LDR      r6,[r1,r0,LSL #2]
000526  2700              MOVS     r7,#0
000528  e04c              B        |L1.1476|
                  |L1.1322|
;;;451          {
;;;452            LCD_PUTC(CurrentFont->Width * (SEND_STRING_START_COLUMN + i),
00052a  4b36              LDR      r3,|L1.1540|
00052c  681b              LDR      r3,[r3,#0]  ; CurrentFont
00052e  791b              LDRB     r3,[r3,#4]
000530  f1070c06          ADD      r12,r7,#6
000534  fb03f30c          MUL      r3,r3,r12
000538  b2d8              UXTB     r0,r3
00053a  7832              LDRB     r2,[r6,#0]
00053c  4b31              LDR      r3,|L1.1540|
00053e  681b              LDR      r3,[r3,#0]  ; CurrentFont
000540  781b              LDRB     r3,[r3,#0]
000542  f04f0c08          MOV      r12,#8
000546  eb0c0383          ADD      r3,r12,r3,LSL #2
00054a  b2d9              UXTB     r1,r3
00054c  f7fffffe          BL       LCD_PUTC
;;;453                     CurrentFont->Height * SEND_STRING_LINE + SEND_STRING_LINE_OFFS,
;;;454                     *pdata);
;;;455            UART_SendData (MDR_UART1, *pdata);
000550  7831              LDRB     r1,[r6,#0]
000552  4829              LDR      r0,|L1.1528|
000554  f7fffffe          BL       UART_SendData
;;;456            /* Wait for transmition end */
;;;457            while (UART_GetFlagStatus (MDR_UART1, UART_FLAG_TXFF) == SET);
000558  bf00              NOP      
                  |L1.1370|
00055a  2120              MOVS     r1,#0x20
00055c  4826              LDR      r0,|L1.1528|
00055e  f7fffffe          BL       UART_GetFlagStatus
000562  2801              CMP      r0,#1
000564  d0f9              BEQ      |L1.1370|
;;;458            while (UART_GetFlagStatus (MDR_UART1, UART_FLAG_BUSY) == SET);
000566  bf00              NOP      
                  |L1.1384|
000568  2108              MOVS     r1,#8
00056a  4823              LDR      r0,|L1.1528|
00056c  f7fffffe          BL       UART_GetFlagStatus
000570  2801              CMP      r0,#1
000572  d0f9              BEQ      |L1.1384|
;;;459            /* Wait for any data in the receiver buffer */
;;;460            while (UART_GetFlagStatus (MDR_UART1, UART_FLAG_RXFE) == SET);
000574  bf00              NOP      
                  |L1.1398|
000576  2110              MOVS     r1,#0x10
000578  481f              LDR      r0,|L1.1528|
00057a  f7fffffe          BL       UART_GetFlagStatus
00057e  2801              CMP      r0,#1
000580  d0f9              BEQ      |L1.1398|
;;;461            receive_data = UART_ReceiveData (MDR_UART1);
000582  481d              LDR      r0,|L1.1528|
000584  f7fffffe          BL       UART_ReceiveData
000588  4605              MOV      r5,r0
;;;462    
;;;463            /* Check for errors */
;;;464            if (UART_Flags(receive_data) != 0)
00058a  1228              ASRS     r0,r5,#8
00058c  d006              BEQ      |L1.1436|
;;;465            {
;;;466              /* If there are an error, print error message on LCD */
;;;467              UARTDisplayError(UART_Flags(receive_data));
00058e  1228              ASRS     r0,r5,#8
000590  f7fffffe          BL       UARTDisplayError
;;;468              error_flag = 1;
000594  2001              MOVS     r0,#1
000596  4919              LDR      r1,|L1.1532|
000598  6008              STR      r0,[r1,#0]  ; error_flag
00059a  e011              B        |L1.1472|
                  |L1.1436|
;;;469            }
;;;470            else
;;;471            {
;;;472              /* If there are no errors, print the symbol */
;;;473              LCD_PUTC(CurrentFont->Width * (RECEIVE_STRING_START_COLUMN + i),
00059c  4b19              LDR      r3,|L1.1540|
00059e  681b              LDR      r3,[r3,#0]  ; CurrentFont
0005a0  791b              LDRB     r3,[r3,#4]
0005a2  f1070c06          ADD      r12,r7,#6
0005a6  fb03f30c          MUL      r3,r3,r12
0005aa  b2d8              UXTB     r0,r3
0005ac  b2ea              UXTB     r2,r5
0005ae  4b15              LDR      r3,|L1.1540|
0005b0  681b              LDR      r3,[r3,#0]  ; CurrentFont
0005b2  781b              LDRB     r3,[r3,#0]
0005b4  eb030383          ADD      r3,r3,r3,LSL #2
0005b8  330a              ADDS     r3,r3,#0xa
0005ba  b2d9              UXTB     r1,r3
0005bc  f7fffffe          BL       LCD_PUTC
                  |L1.1472|
0005c0  1c76              ADDS     r6,r6,#1              ;450
0005c2  1c7f              ADDS     r7,r7,#1              ;450
                  |L1.1476|
0005c4  7830              LDRB     r0,[r6,#0]            ;450
0005c6  b118              CBZ      r0,|L1.1488|
0005c8  480c              LDR      r0,|L1.1532|
0005ca  6800              LDR      r0,[r0,#0]            ;450  ; error_flag
0005cc  2800              CMP      r0,#0                 ;450
0005ce  d0ac              BEQ      |L1.1322|
                  |L1.1488|
;;;474                       CurrentFont->Height * RECEIVE_STRING_LINE + RECEIVE_STRING_LINE_OFFS,
;;;475                       UART_Data(receive_data));
;;;476            }
;;;477          }
;;;478        }
;;;479        WAIT_UNTIL_KEY_RELEASED(key);
0005d0  bf00              NOP      
                  |L1.1490|
0005d2  f7fffffe          BL       GetKey
0005d6  42a0              CMP      r0,r4
0005d8  d0fb              BEQ      |L1.1490|
0005da  f7fffffe          BL       GetKey
0005de  4604              MOV      r4,r0                 ;439
                  |L1.1504|
0005e0  2c00              CMP      r4,#0                 ;439
0005e2  d18b              BNE      |L1.1276|
;;;480      }
;;;481    
;;;482      UART_Cmd(MDR_UART1,DISABLE);
0005e4  2100              MOVS     r1,#0
0005e6  4804              LDR      r0,|L1.1528|
0005e8  f7fffffe          BL       UART_Cmd
;;;483      DisplayMenu();
0005ec  f7fffffe          BL       DisplayMenu
;;;484    }
0005f0  e8bd81f0          POP      {r4-r8,pc}
;;;485    
                          ENDP

                  |L1.1524|
                          DCD      UARTInitStructure
                  |L1.1528|
                          DCD      0x40030000
                  |L1.1532|
                          DCD      error_flag
                  |L1.1536|
                          DCD      SendData
                  |L1.1540|
                          DCD      CurrentFont

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  SendBuffer
                          %        196
                  ReceiveBuffer
                          %        196
                  UARTInitStructure
                          %        16

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  55502070          DCB      "UP pressed    ",0
000004  72657373
000008  65642020
00000c  202000  
00000f  444f574e          DCB      "DOWN pressed  ",0
000013  20707265
000017  73736564
00001b  202000  
00001e  4c454654          DCB      "LEFT pressed  ",0
000022  20707265
000026  73736564
00002a  202000  
00002d  52494748          DCB      "RIGHT pressed ",0
000031  54207072
000035  65737365
000039  642000  
00003c  4672616d          DCB      "Frame error   ",0
000040  65206572
000044  726f7220
000048  202000  
00004b  50617269          DCB      "Parity error  ",0
00004f  74792065
000053  72726f72
000057  202000  
00005a  42726561          DCB      "Break line    ",0
00005e  6b206c69
000062  6e652020
000066  202000  
000069  4f766572          DCB      "Overflow error",0
00006d  666c6f77
000071  20657272
000075  6f7200  

                          AREA ||.data||, DATA, ALIGN=2

                  send_buffer_pos
                          DCD      0x00000000
                  receive_buffer_pos
                          DCD      0x00000000
                  error_flag
                          DCD      0x00000000
                  SendData
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0xf
                          DCD      ||.conststring||+0x1e
                          DCD      ||.conststring||+0x2d
                  ErrorMessage
                          DCD      ||.conststring||+0x3c
                          DCD      ||.conststring||+0x4b
                          DCD      ||.conststring||+0x5a
                          DCD      ||.conststring||+0x69

;*** Start embedded assembler ***

#line 1 "..\\..\\src\\Menu_uart.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_Menu_uart_c_f6103f56____REV16|
#line 129 "..\\..\\..\\..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___11_Menu_uart_c_f6103f56____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_Menu_uart_c_f6103f56____REVSH|
#line 144
|__asm___11_Menu_uart_c_f6103f56____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
