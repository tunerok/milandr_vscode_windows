###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:25:57 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Libraries\MDR32F9Qx_St #
#                    dPeriph_Driver\src\MDR32F9Qx_port.c                      #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Libraries\MDR32F9Qx_St #
#                    dPeriph_Driver\src\MDR32F9Qx_port.c --preprocess         #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\MDR32F9Qx_port.l #
#                    st                                                       #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\MDR32F9Qx_port.o  #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_port.c
      1          /**
      2            ******************************************************************************
      3            * @file    MDR32F9Qx_port.c
      4            * @author  Phyton Application Team
      5            * @version V1.4.0
      6            * @date    22/06/2010
      7            * @brief   This file provides all the PORT firmware functions.
      8            ******************************************************************************
      9            * <br><br>
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
     14            * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
     19            ******************************************************************************
     20            * FILE MDR32F9Qx_port.c
     21            */
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "MDR32F9Qx_config.h"
     25          #include "MDR32F9Qx_port.h"
     26          
     27          #define ASSERT_INFO_FILE_ID FILEID__MDR32F9X_PORT_C
     28          
     29          /** @addtogroup __MDR32F9Qx_StdPeriph_Driver MDR32F9Qx Standard Peripherial Driver
     30            * @{
     31            */
     32          
     33          /** @defgroup PORT PORT
     34            * @{
     35            */
     36          
     37          /** @defgroup PORT_Private_Functions PORT Private Functions
     38            * @{
     39            */
     40          
     41          /**
     42            * @brief  Resets the PORTx peripheral registers to their default reset values.
     43            * @param  PORTx: where x can be (A..F) to select the PORT peripheral.
     44            * @retval None
     45            */

   \                                 In section .text, align 2, keep-with-next
     46          void PORT_DeInit(MDR_PORT_TypeDef* PORTx)
     47          {
     48            /* Check the parameters */
     49            assert_param(IS_PORT_ALL_PERIPH(PORTx));
     50          
     51            PORTx->ANALOG = 0;
   \                     PORT_DeInit:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x60C1             STR      R1,[R0, #+12]
     52            PORTx->PULL = 0;
   \   00000004   0x6101             STR      R1,[R0, #+16]
     53            PORTx->OE = 0;
   \   00000006   0x6041             STR      R1,[R0, #+4]
     54            PORTx->RXTX = 0;
   \   00000008   0x6001             STR      R1,[R0, #+0]
     55            PORTx->FUNC = 0;
   \   0000000A   0x6081             STR      R1,[R0, #+8]
     56            PORTx->PD = 0;
   \   0000000C   0x6141             STR      R1,[R0, #+20]
     57            PORTx->PWR = 0;
   \   0000000E   0x6181             STR      R1,[R0, #+24]
     58            PORTx->GFEN = 0;
   \   00000010   0x61C1             STR      R1,[R0, #+28]
     59          }
   \   00000012   0x4770             BX       LR               ;; return
     60          
     61          
     62          /**
     63            * @brief  Initializes the PORTx peripheral according to the specified
     64            *         parameters in the PORT_InitStruct.
     65            * @param  PORTx: where x can be (A..F) to select the PORT peripheral.
     66            * @param  PORT_InitStruct: pointer to a PORT_InitTypeDef structure that
     67            *         contains the configuration information for the specified PORT peripheral.
     68            * @retval None
     69            */

   \                                 In section .text, align 2, keep-with-next
     70          void PORT_Init(MDR_PORT_TypeDef* PORTx, const PORT_InitTypeDef* PORT_InitStruct)
     71          {
   \                     PORT_Init:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
     72            uint32_t tmpreg_OE;
     73            uint32_t tmpreg_FUNC;
     74            uint32_t tmpreg_ANALOG;
     75            uint32_t tmpreg_PULL;
     76            uint32_t tmpreg_PD;
     77            uint32_t tmpreg_PWR;
     78            uint32_t tmpreg_GFEN;
     79            uint32_t portpin, pos, mask_s, mask_l, mask_d;
     80          
     81            /* Check the parameters */
     82            assert_param(IS_PORT_ALL_PERIPH(PORTx));
     83            assert_param(IS_PORT_PIN(PORT_InitStruct->PORT_Pin));
     84            assert_param(IS_PORT_OE(PORT_InitStruct->PORT_OE));
     85            assert_param(IS_PORT_PULL_UP(PORT_InitStruct->PORT_PULL_UP));
     86            assert_param(IS_PORT_PULL_DOWN(PORT_InitStruct->PORT_PULL_DOWN));
     87            assert_param(IS_PORT_PD_SHM(PORT_InitStruct->PORT_PD_SHM));
     88            assert_param(IS_PORT_PD(PORT_InitStruct->PORT_PD));
     89            assert_param(IS_PORT_GFEN(PORT_InitStruct->PORT_GFEN));
     90            assert_param(IS_PORT_FUNC(PORT_InitStruct->PORT_FUNC));
     91            assert_param(IS_PORT_SPEED(PORT_InitStruct->PORT_SPEED));
     92            assert_param(IS_PORT_MODE(PORT_InitStruct->PORT_MODE));
     93          
     94            /* Get current PORT register values */
     95            tmpreg_OE     = PORTx->OE;
   \   00000006   0xF8D0 0xB004      LDR      R11,[R0, #+4]
     96            tmpreg_FUNC   = PORTx->FUNC;
   \   0000000A   0xF8D0 0xC008      LDR      R12,[R0, #+8]
     97            tmpreg_ANALOG = PORTx->ANALOG;
   \   0000000E   0xF8D0 0xE00C      LDR      LR,[R0, #+12]
     98            tmpreg_PULL   = PORTx->PULL;
   \   00000012   0x6904             LDR      R4,[R0, #+16]
     99            tmpreg_PD     = PORTx->PD;
   \   00000014   0x6945             LDR      R5,[R0, #+20]
    100            tmpreg_PWR    = PORTx->PWR;
   \   00000016   0xF8D0 0xA018      LDR      R10,[R0, #+24]
    101            tmpreg_GFEN   = PORTx->GFEN;
   \   0000001A   0x69C0             LDR      R0,[R0, #+28]
    102          
    103            /* Form new values */
    104            pos = 0;
   \   0000001C   0x2200             MOVS     R2,#+0
    105            mask_s = 0x0001;
   \   0000001E   0x2301             MOVS     R3,#+1
    106            mask_l = 0x00000003;
   \   00000020   0xF04F 0x0803      MOV      R8,#+3
    107            mask_d = 0x00010001;
   \   00000024   0xF04F 0x1901      MOV      R9,#+65537
    108            for (portpin = PORT_InitStruct->PORT_Pin; portpin; portpin >>= 1)
   \   00000028   0x880E             LDRH     R6,[R1, #+0]
   \   0000002A   0x2E00             CMP      R6,#+0
   \   0000002C   0xE04F             B.N      ??PORT_Init_0
    109            {
    110              if (portpin & 0x1)
   \                     ??PORT_Init_1:
   \   0000002E   0x07F7             LSLS     R7,R6,#+31
   \   00000030   0xD546             BPL.N    ??PORT_Init_2
   \   00000032   0xEA2B 0x0B03      BIC      R11,R11,R3
   \   00000036   0x788F             LDRB     R7,[R1, #+2]
   \   00000038   0x4097             LSLS     R7,R7,R2
   \   0000003A   0xEA47 0x0B0B      ORR      R11,R7,R11
    111              {
    112                tmpreg_OE     = (tmpreg_OE     & ~mask_s) | (PORT_InitStruct->PORT_OE        <<  pos);
    113                tmpreg_FUNC   = (tmpreg_FUNC   & ~mask_l) | (PORT_InitStruct->PORT_FUNC      << (pos*2));
   \   0000003E   0x0057             LSLS     R7,R2,#+1
   \   00000040   0xF88D 0x7005      STRB     R7,[SP, #+5]
   \   00000044   0xEA2C 0x0708      BIC      R7,R12,R8
   \   00000048   0x9700             STR      R7,[SP, #+0]
   \   0000004A   0x7A0F             LDRB     R7,[R1, #+8]
   \   0000004C   0xF99D 0xC005      LDRSB    R12,[SP, #+5]
   \   00000050   0xFA07 0xFC0C      LSL      R12,R7,R12
   \   00000054   0x9F00             LDR      R7,[SP, #+0]
   \   00000056   0xEA4C 0x0C07      ORR      R12,R12,R7
    114                tmpreg_ANALOG = (tmpreg_ANALOG & ~mask_s) | (PORT_InitStruct->PORT_MODE      <<  pos);
   \   0000005A   0xEA2E 0x0E03      BIC      LR,LR,R3
   \   0000005E   0x7A8F             LDRB     R7,[R1, #+10]
   \   00000060   0x4097             LSLS     R7,R7,R2
   \   00000062   0xEA47 0x0E0E      ORR      LR,R7,LR
    115                tmpreg_PULL   = (tmpreg_PULL   & ~mask_d) | (PORT_InitStruct->PORT_PULL_UP   << (pos + 16))
    116                                                          | (PORT_InitStruct->PORT_PULL_DOWN <<  pos);
   \   00000066   0xF102 0x0710      ADD      R7,R2,#+16
   \   0000006A   0xF88D 0x7004      STRB     R7,[SP, #+4]
   \   0000006E   0xEA24 0x0409      BIC      R4,R4,R9
   \   00000072   0x9400             STR      R4,[SP, #+0]
   \   00000074   0x78CF             LDRB     R7,[R1, #+3]
   \   00000076   0xF99D 0x4004      LDRSB    R4,[SP, #+4]
   \   0000007A   0xFA07 0xF404      LSL      R4,R7,R4
   \   0000007E   0x9F00             LDR      R7,[SP, #+0]
   \   00000080   0x433C             ORRS     R4,R4,R7
   \   00000082   0x790F             LDRB     R7,[R1, #+4]
   \   00000084   0x4097             LSLS     R7,R7,R2
   \   00000086   0x433C             ORRS     R4,R7,R4
    117                tmpreg_PD     = (tmpreg_PD     & ~mask_d) | (PORT_InitStruct->PORT_PD_SHM    << (pos + 16))
    118                                                          | (PORT_InitStruct->PORT_PD        <<  pos);
   \   00000088   0xEA25 0x0509      BIC      R5,R5,R9
   \   0000008C   0x9500             STR      R5,[SP, #+0]
   \   0000008E   0x794F             LDRB     R7,[R1, #+5]
   \   00000090   0xF99D 0x5004      LDRSB    R5,[SP, #+4]
   \   00000094   0xFA07 0xF505      LSL      R5,R7,R5
   \   00000098   0x9F00             LDR      R7,[SP, #+0]
   \   0000009A   0x433D             ORRS     R5,R5,R7
   \   0000009C   0x798F             LDRB     R7,[R1, #+6]
   \   0000009E   0x4097             LSLS     R7,R7,R2
   \   000000A0   0x433D             ORRS     R5,R7,R5
    119                tmpreg_PWR    = (tmpreg_PWR    & ~mask_l) | (PORT_InitStruct->PORT_SPEED     << (pos*2));
   \   000000A2   0xEA2A 0x0708      BIC      R7,R10,R8
   \   000000A6   0x9700             STR      R7,[SP, #+0]
   \   000000A8   0x7A4F             LDRB     R7,[R1, #+9]
   \   000000AA   0xF99D 0xA005      LDRSB    R10,[SP, #+5]
   \   000000AE   0xFA07 0xFA0A      LSL      R10,R7,R10
   \   000000B2   0x9F00             LDR      R7,[SP, #+0]
   \   000000B4   0xEA4A 0x0A07      ORR      R10,R10,R7
    120                tmpreg_GFEN   = (tmpreg_GFEN   & ~mask_s) | (PORT_InitStruct->PORT_GFEN      <<  pos);
   \   000000B8   0x4398             BICS     R0,R0,R3
   \   000000BA   0x79CF             LDRB     R7,[R1, #+7]
   \   000000BC   0x4097             LSLS     R7,R7,R2
   \   000000BE   0x4338             ORRS     R0,R7,R0
    121              }
    122              mask_s <<= 1;
   \                     ??PORT_Init_2:
   \   000000C0   0x005B             LSLS     R3,R3,#+1
    123              mask_l <<= 2;
   \   000000C2   0xEA4F 0x0888      LSL      R8,R8,#+2
    124              mask_d <<= 1;
   \   000000C6   0xEA4F 0x0949      LSL      R9,R9,#+1
    125              pos++;
   \   000000CA   0x1C52             ADDS     R2,R2,#+1
    126            }
   \   000000CC   0x0876             LSRS     R6,R6,#+1
   \                     ??PORT_Init_0:
   \   000000CE   0xD1AE             BNE.N    ??PORT_Init_1
    127          #if defined  (USE_MDR1986VE9x)
    128            /* Configure PORT registers with new values */
    129            PORTx->OE     = tmpreg_OE & (~JTAG_PINS(PORTx));
   \   000000D0   0x9902             LDR      R1,[SP, #+8]
   \   000000D2   0x....             LDR.N    R2,??DataTable4  ;; 0x400b0000
   \   000000D4   0x4291             CMP      R1,R2
   \   000000D6   0xBF0C             ITE      EQ 
   \   000000D8   0x211F             MOVEQ    R1,#+31
   \   000000DA   0x2100             MOVNE    R1,#+0
   \   000000DC   0xEA2B 0x0201      BIC      R2,R11,R1
   \   000000E0   0x9B02             LDR      R3,[SP, #+8]
   \   000000E2   0x605A             STR      R2,[R3, #+4]
    130            PORTx->FUNC   = tmpreg_FUNC & (~JTAG_PINS(PORTx));
   \   000000E4   0xEA2C 0x0201      BIC      R2,R12,R1
   \   000000E8   0x9B02             LDR      R3,[SP, #+8]
   \   000000EA   0x609A             STR      R2,[R3, #+8]
    131            PORTx->ANALOG = tmpreg_ANALOG & (~JTAG_PINS(PORTx));
   \   000000EC   0xEA2E 0x0201      BIC      R2,LR,R1
   \   000000F0   0x9B02             LDR      R3,[SP, #+8]
   \   000000F2   0x60DA             STR      R2,[R3, #+12]
    132            PORTx->PULL   = tmpreg_PULL & (~JTAG_PINS(PORTx));
   \   000000F4   0xEA24 0x0201      BIC      R2,R4,R1
   \   000000F8   0x9B02             LDR      R3,[SP, #+8]
   \   000000FA   0x611A             STR      R2,[R3, #+16]
    133            PORTx->PD     = tmpreg_PD & (~JTAG_PINS(PORTx));
   \   000000FC   0xEA25 0x0201      BIC      R2,R5,R1
   \   00000100   0x9B02             LDR      R3,[SP, #+8]
   \   00000102   0x615A             STR      R2,[R3, #+20]
    134            PORTx->PWR    = tmpreg_PWR & (~JTAG_PINS(PORTx));
   \   00000104   0xEA2A 0x0201      BIC      R2,R10,R1
   \   00000108   0x9B02             LDR      R3,[SP, #+8]
   \   0000010A   0x619A             STR      R2,[R3, #+24]
    135            PORTx->GFEN   = tmpreg_GFEN & (~JTAG_PINS(PORTx));
   \   0000010C   0x4388             BICS     R0,R0,R1
   \   0000010E   0x9902             LDR      R1,[SP, #+8]
   \   00000110   0x61C8             STR      R0,[R1, #+28]
    136          #elif defined ( USE_MDR1986VE3 ) || defined (USE_MDR1986VE1T)
    137            /* Configure PORT registers with new values */
    138            PORTx->OE     = tmpreg_OE;
    139            PORTx->FUNC   = tmpreg_FUNC;
    140            PORTx->ANALOG = tmpreg_ANALOG;
    141            PORTx->PULL   = tmpreg_PULL;
    142            PORTx->PD     = tmpreg_PD;
    143            PORTx->PWR    = tmpreg_PWR;
    144            PORTx->GFEN   = tmpreg_GFEN;
    145          
    146          #endif
    147          
    148          }
   \   00000112   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    149          
    150          /**
    151            * @brief  Fills each PORT_InitStruct member with its default value.
    152            * @param  PORT_InitStruct: pointer to a PORT_InitTypeDef structure which will
    153            *         be initialized.
    154            * @retval None
    155            */

   \                                 In section .text, align 2, keep-with-next
    156          void PORT_StructInit(PORT_InitTypeDef* PORT_InitStruct)
    157          {
    158            /* Reset PORT initialization structure parameters values */
    159            PORT_InitStruct->PORT_Pin        = PORT_Pin_All;
   \                     PORT_StructInit:
   \   00000000   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000004   0x8001             STRH     R1,[R0, #+0]
    160            PORT_InitStruct->PORT_OE         = PORT_OE_IN;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x7081             STRB     R1,[R0, #+2]
    161            PORT_InitStruct->PORT_PULL_UP    = PORT_PULL_UP_OFF;
   \   0000000A   0x70C1             STRB     R1,[R0, #+3]
    162            PORT_InitStruct->PORT_PULL_DOWN  = PORT_PULL_DOWN_OFF;
   \   0000000C   0x7101             STRB     R1,[R0, #+4]
    163            PORT_InitStruct->PORT_PD_SHM     = PORT_PD_SHM_OFF;
   \   0000000E   0x7141             STRB     R1,[R0, #+5]
    164            PORT_InitStruct->PORT_PD         = PORT_PD_DRIVER;
   \   00000010   0x7181             STRB     R1,[R0, #+6]
    165            PORT_InitStruct->PORT_GFEN       = PORT_GFEN_OFF;
   \   00000012   0x71C1             STRB     R1,[R0, #+7]
    166            PORT_InitStruct->PORT_FUNC       = PORT_FUNC_PORT;
   \   00000014   0x7201             STRB     R1,[R0, #+8]
    167            PORT_InitStruct->PORT_SPEED      = PORT_OUTPUT_OFF;
   \   00000016   0x7241             STRB     R1,[R0, #+9]
    168            PORT_InitStruct->PORT_MODE       = PORT_MODE_ANALOG;
   \   00000018   0x7281             STRB     R1,[R0, #+10]
    169          }
   \   0000001A   0x4770             BX       LR               ;; return
    170          
    171          /**
    172            * @brief  Reads the specified input port pin.
    173            * @param  PORTx: where x can be (A..F) to select the PORT peripheral.
    174            * @param  PORT_Pin: specifies the port bit to read.
    175            *         This parameter can be PORT_Pin_x where x can be (0..15).
    176            * @retval The input port pin value.
    177            */

   \                                 In section .text, align 2, keep-with-next
    178          uint8_t PORT_ReadInputDataBit(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
    179          {
    180            uint8_t bitstatus;
    181          
    182            /* Check the parameters */
    183            assert_param(IS_PORT_ALL_PERIPH(PORTx));
    184            assert_param(IS_GET_PORT_PIN(PORT_Pin));
    185          
    186            if ((PORTx->RXTX & PORT_Pin) != Bit_RESET)
   \                     PORT_ReadInputDataBit:
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x4008             ANDS     R0,R1,R0
   \   00000004   0xBF18             IT       NE 
   \   00000006   0x2001             MOVNE    R0,#+1
    187            {
    188              bitstatus = (uint8_t)Bit_SET;
    189            }
    190            else
    191            {
    192              bitstatus = (uint8_t)Bit_RESET;
    193            }
    194            return bitstatus;
   \   00000008   0xB2C0             UXTB     R0,R0
   \   0000000A   0x4770             BX       LR               ;; return
    195          }
    196          
    197          /**
    198            * @brief  Reads the specified PORT input data port.
    199            * @param  PORTx: where x can be (A..F) to select the PORT peripheral.
    200            * @retval PORT input data port value. Bits (16..31) are always 0.
    201            */

   \                                 In section .text, align 2, keep-with-next
    202          uint32_t PORT_ReadInputData(MDR_PORT_TypeDef* PORTx)
    203          {
    204            /* Check the parameters */
    205            assert_param(IS_PORT_ALL_PERIPH(PORTx));
    206          
    207            return (PORTx->RXTX);
   \                     PORT_ReadInputData:
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x4770             BX       LR               ;; return
    208          }
    209          
    210          /**
    211            * @brief  Sets the selected data port bits.
    212            * @param  PORTx: where x can be (A..F) to select the PORT peripheral.
    213            * @param  PORT_Pin: specifies the port bits to be written.
    214            *         This parameter can be any combination of PORT_Pin_x where x can be (0..15).
    215            * @retval None
    216            */

   \                                 In section .text, align 2, keep-with-next
    217          void PORT_SetBits ( MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin )
    218          {
    219          	/* Check the parameters */
    220          	assert_param(IS_PORT_ALL_PERIPH(PORTx));
    221          	assert_param(IS_PORT_PIN(PORT_Pin));
    222          	assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
    223          
    224          #if defined  (USE_MDR1986VE9x)
    225          	PORTx->RXTX = PORT_Pin | (PORTx->RXTX & (~JTAG_PINS(PORTx)));
   \                     PORT_SetBits:
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0x....             LDR.N    R3,??DataTable4  ;; 0x400b0000
   \   00000004   0x4298             CMP      R0,R3
   \   00000006   0xBF0C             ITE      EQ 
   \   00000008   0x231F             MOVEQ    R3,#+31
   \   0000000A   0x2300             MOVNE    R3,#+0
   \   0000000C   0x439A             BICS     R2,R2,R3
   \   0000000E   0x4311             ORRS     R1,R2,R1
   \   00000010   0x6001             STR      R1,[R0, #+0]
    226          #endif
    227          
    228          #if defined ( USE_MDR1986VE3 ) || defined (USE_MDR1986VE1T)
    229          	PORTx->SETTX = PORT_Pin;
    230          #endif
    231          }
   \   00000012   0x4770             BX       LR               ;; return
    232          
    233          /**
    234            * @brief  Clears the selected data port bits.
    235            * @param  PORTx: where x can be (A..F) to select the PORT peripheral.
    236            * @param  PORT_Pin: specifies the port bits to be written.
    237            *         This parameter can be any combination of PORT_Pin_x where x can be (0..15).
    238            * @retval None
    239            */

   \                                 In section .text, align 2, keep-with-next
    240          void PORT_ResetBits(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
    241          {
    242            /* Check the parameters */
    243            assert_param(IS_PORT_ALL_PERIPH(PORTx));
    244            assert_param(IS_PORT_PIN(PORT_Pin));
    245            assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
    246          
    247          #if defined  (USE_MDR1986VE9x)
    248            PORTx->RXTX &= ~(PORT_Pin | JTAG_PINS(PORTx));
   \                     PORT_ResetBits:
   \   00000000   0x....             LDR.N    R2,??DataTable4  ;; 0x400b0000
   \   00000002   0x4290             CMP      R0,R2
   \   00000004   0xBF0C             ITE      EQ 
   \   00000006   0x221F             MOVEQ    R2,#+31
   \   00000008   0x2200             MOVNE    R2,#+0
   \   0000000A   0x6803             LDR      R3,[R0, #+0]
   \   0000000C   0x4311             ORRS     R1,R2,R1
   \   0000000E   0xEA23 0x0101      BIC      R1,R3,R1
   \   00000012   0x6001             STR      R1,[R0, #+0]
    249          #endif
    250          
    251          #if defined ( USE_MDR1986VE3 ) || defined (USE_MDR1986VE1T)
    252            PORTx->CLRTX = PORT_Pin;
    253          #endif
    254          }
   \   00000014   0x4770             BX       LR               ;; return
    255          
    256          /**
    257            * @brief  Sets or clears the selected data port bit.
    258            * @param  PORTx: where x can be (A..G) to select the PORT peripheral.
    259            * @param  PORT_Pin: specifies the port bit to be written.
    260            *         This parameter can be one of PORT_Pin_x where x can be (0..15).
    261            * @param  BitVal: specifies the value to be written to the selected bit.
    262            *         This parameter can be one of the BitAction enum values:
    263            *           @arg Bit_RESET: to clear the port pin
    264            *           @arg Bit_SET: to set the port pin
    265            * @retval None
    266            */

   \                                 In section .text, align 2, keep-with-next
    267          void PORT_WriteBit(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin, BitAction BitVal)
    268          {
   \                     PORT_WriteBit:
   \   00000000   0xB510             PUSH     {R4,LR}
    269            uint32_t portdata;
    270            /* Check the parameters */
    271            assert_param(IS_PORT_ALL_PERIPH(PORTx));
    272            assert_param(IS_GET_PORT_PIN(PORT_Pin));
    273            assert_param(IS_PORT_BIT_ACTION(BitVal));
    274            assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
    275          
    276            portdata = PORTx->RXTX & (~JTAG_PINS(PORTx));
   \   00000002   0x6803             LDR      R3,[R0, #+0]
   \   00000004   0x....             LDR.N    R4,??DataTable4  ;; 0x400b0000
   \   00000006   0x42A0             CMP      R0,R4
   \   00000008   0xBF0C             ITE      EQ 
   \   0000000A   0x241F             MOVEQ    R4,#+31
   \   0000000C   0x2400             MOVNE    R4,#+0
   \   0000000E   0x43A3             BICS     R3,R3,R4
    277            if (BitVal != Bit_RESET)
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xBF14             ITE      NE 
   \   00000014   0x4319             ORRNE    R1,R1,R3
   \   00000016   0xEA23 0x0101      BICEQ    R1,R3,R1
    278            {
    279              PORTx->RXTX = portdata | PORT_Pin;
    280            }
    281            else
    282            {
    283              PORTx->RXTX = portdata & (~PORT_Pin);
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    284            }
    285          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    286          
    287          /**
    288            * @brief  Writes data to the specified PORT data port.
    289            * @param  PORTx: where x can be (A..F) to select the PORT peripheral.
    290            * @param  PortVal: specifies the value to be written to the port output data register.
    291            *                  Bits (16..31) are ignored.
    292            * @retval None
    293            */

   \                                 In section .text, align 2, keep-with-next
    294          void PORT_Write(MDR_PORT_TypeDef* PORTx, uint32_t PortVal)
    295          {
    296            /* Check the parameters */
    297            assert_param(IS_PORT_ALL_PERIPH(PORTx));
    298            assert_param(IS_NOT_JTAG_PIN(PORTx, PortVal));
    299          
    300            PORTx->RXTX = PortVal & (~JTAG_PINS(PORTx));
   \                     PORT_Write:
   \   00000000   0x....             LDR.N    R2,??DataTable4  ;; 0x400b0000
   \   00000002   0x4290             CMP      R0,R2
   \   00000004   0xBF0C             ITE      EQ 
   \   00000006   0x221F             MOVEQ    R2,#+31
   \   00000008   0x2200             MOVNE    R2,#+0
   \   0000000A   0x4391             BICS     R1,R1,R2
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    301          }
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x400B0000         DC32     0x400b0000
    302          
    303          /** @} */ /* End of group PORT_Private_Functions */
    304          
    305          /** @} */ /* End of group PORT */
    306          
    307          /** @} */ /* End of group __MDR32F9Qx_StdPeriph_Driver */
    308          
    309          /******************* (C) COPYRIGHT 2010 Phyton *********************************
    310          *
    311          * END OF FILE MDR32F9Qx_port.c */
    312          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  PORT_DeInit
       48  PORT_Init
        0  PORT_ReadInputData
        0  PORT_ReadInputDataBit
        0  PORT_ResetBits
        0  PORT_SetBits
        0  PORT_StructInit
        0  PORT_Write
        8  PORT_WriteBit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
      20  PORT_DeInit
     278  PORT_Init
       4  PORT_ReadInputData
      12  PORT_ReadInputDataBit
      22  PORT_ResetBits
      20  PORT_SetBits
      28  PORT_StructInit
      16  PORT_Write
      30  PORT_WriteBit

 
 434 bytes in section .text
 
 434 bytes of CODE memory

Errors: none
Warnings: none
