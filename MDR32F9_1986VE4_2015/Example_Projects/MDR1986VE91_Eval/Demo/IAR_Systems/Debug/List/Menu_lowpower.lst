###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:26:00 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu_lowpower.c                          #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu_lowpower.c --preprocess             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\Menu_lowpower.ls #
#                    t                                                        #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\Menu_lowpower.o   #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR1986VE91_Eval\src\Menu_lowpower.c
      1          /**
      2            ******************************************************************************
      3            * @file    Menu_lowpower.c
      4            * @author  Phyton Application Team
      5            * @version V1.2.0
      6            * @date    05.12.2011
      7            * @brief   This file contains all the "Low Power" menu handlers.
      8            ******************************************************************************
      9            * <br><br>
     10            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     11            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     12            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY
     13            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     14            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     15            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     16            *
     17            * <h2><center>&copy; COPYRIGHT 2011 Phyton</center></h2>
     18            */
     19          /* Includes ------------------------------------------------------------------*/
     20          #include "MDR32F9Qx_config.h"
     21          #include <MDR32Fx.h>
     22          #include <MDR32F9Qx_port.h>
     23          #include <MDR32F9Qx_power.h>
     24          #include <MDR32F9Qx_rst_clk.h>
     25          #include <MDR32F9Qx_bkp.h>
     26          #include "systick.h"
     27          #include "Menu.h"
     28          #include "Menu_items.h"
     29          #include "leds.h"
     30          #include "lcd.h"
     31          #include "text.h"
     32          #include "joystick.h"
     33          #include "time.h"
     34          #include "demo_init.h"
     35          #include "MDR32F9Qx_it.h"
     36          
     37          /** @addtogroup __MDR32F9Qx_Eval_Demo MDR32F9Qx Demonstration Example
     38            * @{
     39            */
     40          
     41          /** @addtogroup Menu Menu
     42            * @{
     43            */
     44          
     45          /** @addtogroup Menu_LowPower Menu Low Power
     46            * @{
     47            */
     48          
     49          /** @defgroup Menu_LowPower_Private_Constants Menu Low Power Private Constants
     50            * @{
     51            */
     52          
     53          /** @} */ /* End of group Menu_LowPower_Private_Constants */
     54          
     55          /** @defgroup Menu_LowPower_Private_Types Menu Low Power Private Types
     56            * @{
     57            */
     58          
     59          typedef struct
     60          {
     61            uint32_t OE;
     62            uint32_t FUNC;
     63            uint32_t ANALOG;
     64            uint32_t PULL;
     65            uint32_t PD;
     66            uint32_t PWR;
     67            uint32_t GFEN;
     68          }PORTConfigData;
     69          
     70          typedef struct
     71          {
     72            uint32_t PVDCS;
     73            uint32_t CPU_CLOCK;
     74            uint32_t PER_CLOCK;
     75          #if defined (USE_MDR32F9Q1_Rev0) || defined (USE_MDR32F9Q1_Rev1)
     76            uint32_t EBC_CONTROL;
     77          #endif
     78          }ClockConfigData;
     79          
     80          /** @} */ /* End of group Menu_LowPower_Private_Types */
     81          
     82          /** @defgroup Menu_LowPower_Private_Macros Menu Low Power Private Macros
     83            * @{
     84            */
     85          
     86          /** @} */ /* End of group Menu_LowPower_Private_Macros */
     87          
     88          /** @defgroup Menu_LowPower_Private_Variables Menu Low Power Private Variables
     89            * @{
     90            */

   \                                 In section .bss, align 4
     91          static PORTConfigData PORTA_Data, PORTB_Data, PORTC_Data, PORTD_Data, PORTE_Data,
   \                     PORTA_Data:
   \   00000000                      DS8 28
   \   0000001C                      DS8 28
   \   00000038                      DS8 28

   \                                 In section .bss, align 4
   \                     PORTD_Data:
   \   00000000                      DS8 28
   \   0000001C                      DS8 28
   \   00000038                      DS8 28
     92                                PORTF_Data;
     93          

   \                                 In section .bss, align 4
     94          static ClockConfigData ClockData;
   \                     ClockData:
   \   00000000                      DS8 16
     95          
     96          /** @} */ /* End of group Menu_LowPower_Private_Variables */
     97          
     98          /** @defgroup Menu_LowPower_Private_Functions Menu Low Power Private Functions
     99            * @{
    100            */
    101          
    102          /*******************************************************************************
    103          * Function Name  : LowPower_Init
    104          * Description    : Initializes Low Power application.
    105          * Input          : None
    106          * Output         : None
    107          * Return         : None
    108          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    109          void LowPower_Init(void)
    110          {
    111            RST_CLK_PCLKcmd(RST_CLK_PCLK_POWER, ENABLE);
   \                     LowPower_Init:
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF44F 0x6000      MOV      R0,#+2048
   \   00000006   0x.... 0x....      B.W      RST_CLK_PCLKcmd
    112          }
    113          
    114          /*******************************************************************************
    115          * Function Name  : PORT_SaveConfig
    116          * Description    : Save all PORTs Configurations.
    117          * Input          : None
    118          * Output         : PORTA_Data, PORTB_Data, PORTC_Data, PORTD_Data, PORTE_Data,
    119          *                : PORTF_Data.
    120          * Return         : None
    121          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    122          static void PORT_SaveConfig(void)
    123          {
   \                     PORT_SaveConfig:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    124            PORTA_Data.ANALOG = MDR_PORTA->ANALOG;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x400a8000
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable24_1
   \   0000000C   0x68C2             LDR      R2,[R0, #+12]
   \   0000000E   0x608A             STR      R2,[R1, #+8]
    125            PORTA_Data.FUNC   = MDR_PORTA->FUNC;
   \   00000010   0x6882             LDR      R2,[R0, #+8]
   \   00000012   0x604A             STR      R2,[R1, #+4]
    126            PORTA_Data.GFEN   = MDR_PORTA->GFEN;
   \   00000014   0x69C2             LDR      R2,[R0, #+28]
   \   00000016   0x618A             STR      R2,[R1, #+24]
    127            PORTA_Data.OE     = MDR_PORTA->OE;
   \   00000018   0x6842             LDR      R2,[R0, #+4]
   \   0000001A   0x600A             STR      R2,[R1, #+0]
    128            PORTA_Data.PD     = MDR_PORTA->PD;
   \   0000001C   0x6942             LDR      R2,[R0, #+20]
   \   0000001E   0x610A             STR      R2,[R1, #+16]
    129            PORTA_Data.PULL   = MDR_PORTA->PULL;
   \   00000020   0x6902             LDR      R2,[R0, #+16]
   \   00000022   0x60CA             STR      R2,[R1, #+12]
    130            PORTA_Data.PWR    = MDR_PORTA->PWR;
   \   00000024   0x6982             LDR      R2,[R0, #+24]
   \   00000026   0x614A             STR      R2,[R1, #+20]
    131          
    132            PORTB_Data.ANALOG = MDR_PORTB->ANALOG;
   \   00000028   0x.... 0x....      LDR.W    R4,??DataTable24_2  ;; 0x400b0000
   \   0000002C   0x68E2             LDR      R2,[R4, #+12]
   \   0000002E   0x624A             STR      R2,[R1, #+36]
    133            PORTB_Data.FUNC   = MDR_PORTB->FUNC;
   \   00000030   0x68A2             LDR      R2,[R4, #+8]
   \   00000032   0x620A             STR      R2,[R1, #+32]
    134            PORTB_Data.GFEN   = MDR_PORTB->GFEN;
   \   00000034   0x69E2             LDR      R2,[R4, #+28]
   \   00000036   0x634A             STR      R2,[R1, #+52]
    135            PORTB_Data.OE     = MDR_PORTB->OE;
   \   00000038   0x6862             LDR      R2,[R4, #+4]
   \   0000003A   0x61CA             STR      R2,[R1, #+28]
    136            PORTB_Data.PD     = MDR_PORTB->PD;
   \   0000003C   0x6962             LDR      R2,[R4, #+20]
   \   0000003E   0x62CA             STR      R2,[R1, #+44]
    137            PORTB_Data.PULL   = MDR_PORTB->PULL;
   \   00000040   0x6922             LDR      R2,[R4, #+16]
   \   00000042   0x628A             STR      R2,[R1, #+40]
    138            PORTB_Data.PWR    = MDR_PORTB->PWR;
   \   00000044   0x69A2             LDR      R2,[R4, #+24]
   \   00000046   0x630A             STR      R2,[R1, #+48]
    139          
    140            PORTC_Data.ANALOG = MDR_PORTC->ANALOG;
   \   00000048   0x.... 0x....      LDR.W    R5,??DataTable24_3  ;; 0x400b8000
   \   0000004C   0x68EA             LDR      R2,[R5, #+12]
   \   0000004E   0x640A             STR      R2,[R1, #+64]
    141            PORTC_Data.FUNC   = MDR_PORTC->FUNC;
   \   00000050   0x68AA             LDR      R2,[R5, #+8]
   \   00000052   0x63CA             STR      R2,[R1, #+60]
    142            PORTC_Data.GFEN   = MDR_PORTC->GFEN;
   \   00000054   0x69EA             LDR      R2,[R5, #+28]
   \   00000056   0x650A             STR      R2,[R1, #+80]
    143            PORTC_Data.OE     = MDR_PORTC->OE;
   \   00000058   0x686A             LDR      R2,[R5, #+4]
   \   0000005A   0x638A             STR      R2,[R1, #+56]
    144            PORTC_Data.PD     = MDR_PORTC->PD;
   \   0000005C   0x696A             LDR      R2,[R5, #+20]
   \   0000005E   0x648A             STR      R2,[R1, #+72]
    145            PORTC_Data.PULL   = MDR_PORTC->PULL;
   \   00000060   0x692A             LDR      R2,[R5, #+16]
   \   00000062   0x644A             STR      R2,[R1, #+68]
    146            PORTC_Data.PWR    = MDR_PORTC->PWR;
   \   00000064   0x69AA             LDR      R2,[R5, #+24]
   \   00000066   0x64CA             STR      R2,[R1, #+76]
    147          
    148            PORTD_Data.ANALOG = MDR_PORTD->ANALOG;
   \   00000068   0x....             LDR.N    R6,??DataTable24_4  ;; 0x400c0000
   \   0000006A   0x....             LDR.N    R1,??DataTable24_5
   \   0000006C   0x68F2             LDR      R2,[R6, #+12]
   \   0000006E   0x608A             STR      R2,[R1, #+8]
    149            PORTD_Data.FUNC   = MDR_PORTD->FUNC;
   \   00000070   0x68B2             LDR      R2,[R6, #+8]
   \   00000072   0x604A             STR      R2,[R1, #+4]
    150            PORTD_Data.GFEN   = MDR_PORTD->GFEN;
   \   00000074   0x69F2             LDR      R2,[R6, #+28]
   \   00000076   0x618A             STR      R2,[R1, #+24]
    151            PORTD_Data.OE     = MDR_PORTD->OE;
   \   00000078   0x6872             LDR      R2,[R6, #+4]
   \   0000007A   0x600A             STR      R2,[R1, #+0]
    152            PORTD_Data.PD     = MDR_PORTD->PD;
   \   0000007C   0x6972             LDR      R2,[R6, #+20]
   \   0000007E   0x610A             STR      R2,[R1, #+16]
    153            PORTD_Data.PULL   = MDR_PORTD->PULL;
   \   00000080   0x6932             LDR      R2,[R6, #+16]
   \   00000082   0x60CA             STR      R2,[R1, #+12]
    154            PORTD_Data.PWR    = MDR_PORTD->PWR;
   \   00000084   0x69B2             LDR      R2,[R6, #+24]
   \   00000086   0x614A             STR      R2,[R1, #+20]
    155          
    156            PORTE_Data.ANALOG = MDR_PORTE->ANALOG;
   \   00000088   0x....             LDR.N    R7,??DataTable24_6  ;; 0x400c8000
   \   0000008A   0x68FA             LDR      R2,[R7, #+12]
   \   0000008C   0x624A             STR      R2,[R1, #+36]
    157            PORTE_Data.FUNC   = MDR_PORTE->FUNC;
   \   0000008E   0x68BA             LDR      R2,[R7, #+8]
   \   00000090   0x620A             STR      R2,[R1, #+32]
    158            PORTE_Data.GFEN   = MDR_PORTE->GFEN;
   \   00000092   0x69FA             LDR      R2,[R7, #+28]
   \   00000094   0x634A             STR      R2,[R1, #+52]
    159            PORTE_Data.OE     = MDR_PORTE->OE;
   \   00000096   0x687A             LDR      R2,[R7, #+4]
   \   00000098   0x61CA             STR      R2,[R1, #+28]
    160            PORTE_Data.PD     = MDR_PORTE->PD;
   \   0000009A   0x697A             LDR      R2,[R7, #+20]
   \   0000009C   0x62CA             STR      R2,[R1, #+44]
    161            PORTE_Data.PULL   = MDR_PORTE->PULL;
   \   0000009E   0x693A             LDR      R2,[R7, #+16]
   \   000000A0   0x628A             STR      R2,[R1, #+40]
    162            PORTE_Data.PWR    = MDR_PORTE->PWR;
   \   000000A2   0x69BA             LDR      R2,[R7, #+24]
   \   000000A4   0x630A             STR      R2,[R1, #+48]
    163          
    164            PORTF_Data.ANALOG = MDR_PORTF->ANALOG;
   \   000000A6   0x.... 0x....      LDR.W    R8,??DataTable24_7  ;; 0x400e8000
   \   000000AA   0xF8D8 0x200C      LDR      R2,[R8, #+12]
   \   000000AE   0x640A             STR      R2,[R1, #+64]
    165            PORTF_Data.FUNC   = MDR_PORTF->FUNC;
   \   000000B0   0xF8D8 0x2008      LDR      R2,[R8, #+8]
   \   000000B4   0x63CA             STR      R2,[R1, #+60]
    166            PORTF_Data.GFEN   = MDR_PORTF->GFEN;
   \   000000B6   0xF8D8 0x201C      LDR      R2,[R8, #+28]
   \   000000BA   0x650A             STR      R2,[R1, #+80]
    167            PORTF_Data.OE     = MDR_PORTF->OE;
   \   000000BC   0xF8D8 0x2004      LDR      R2,[R8, #+4]
   \   000000C0   0x638A             STR      R2,[R1, #+56]
    168            PORTF_Data.PD     = MDR_PORTF->PD;
   \   000000C2   0xF8D8 0x2014      LDR      R2,[R8, #+20]
   \   000000C6   0x648A             STR      R2,[R1, #+72]
    169            PORTF_Data.PULL   = MDR_PORTF->PULL;
   \   000000C8   0xF8D8 0x2010      LDR      R2,[R8, #+16]
   \   000000CC   0x644A             STR      R2,[R1, #+68]
    170            PORTF_Data.PWR    = MDR_PORTF->PWR;
   \   000000CE   0xF8D8 0x2018      LDR      R2,[R8, #+24]
   \   000000D2   0x64CA             STR      R2,[R1, #+76]
    171          
    172            /* Configure all PORTs for low power consumption */
    173            PORT_DeInit(MDR_PORTA);
   \   000000D4   0x.... 0x....      BL       PORT_DeInit
    174            PORT_DeInit(MDR_PORTB);
   \   000000D8   0x4620             MOV      R0,R4
   \   000000DA   0x.... 0x....      BL       PORT_DeInit
    175            PORT_DeInit(MDR_PORTC);
   \   000000DE   0x4628             MOV      R0,R5
   \   000000E0   0x.... 0x....      BL       PORT_DeInit
    176            PORT_DeInit(MDR_PORTD);
   \   000000E4   0x4630             MOV      R0,R6
   \   000000E6   0x.... 0x....      BL       PORT_DeInit
    177            PORT_DeInit(MDR_PORTE);
   \   000000EA   0x4638             MOV      R0,R7
   \   000000EC   0x.... 0x....      BL       PORT_DeInit
    178            PORT_DeInit(MDR_PORTF);
   \   000000F0   0x4640             MOV      R0,R8
   \   000000F2   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   000000F6   0x.... 0x....      B.W      PORT_DeInit
    179          }
    180          
    181          /*******************************************************************************
    182          * Function Name  : PORT_RestoreConfig
    183          * Description    : Restores all PORTs Configurations.
    184          * Input          : None
    185          * Output         : None
    186          * Return         : None
    187          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    188          static void PORT_RestoreConfig(void)
    189          {
    190            MDR_PORTA->ANALOG = PORTA_Data.ANALOG;
   \                     PORT_RestoreConfig:
   \   00000000   0x....             LDR.N    R1,??DataTable24_8  ;; 0x400a8004
   \   00000002   0x....             LDR.N    R0,??DataTable24_1
   \   00000004   0x6882             LDR      R2,[R0, #+8]
   \   00000006   0x608A             STR      R2,[R1, #+8]
    191            MDR_PORTA->FUNC   = PORTA_Data.FUNC;
   \   00000008   0x6842             LDR      R2,[R0, #+4]
   \   0000000A   0x604A             STR      R2,[R1, #+4]
    192            MDR_PORTA->GFEN   = PORTA_Data.GFEN;
   \   0000000C   0x6982             LDR      R2,[R0, #+24]
   \   0000000E   0x618A             STR      R2,[R1, #+24]
    193            MDR_PORTA->OE     = PORTA_Data.OE;
   \   00000010   0x6802             LDR      R2,[R0, #+0]
   \   00000012   0x600A             STR      R2,[R1, #+0]
    194            MDR_PORTA->PD     = PORTA_Data.PD;
   \   00000014   0x6902             LDR      R2,[R0, #+16]
   \   00000016   0x610A             STR      R2,[R1, #+16]
    195            MDR_PORTA->PULL   = PORTA_Data.PULL;
   \   00000018   0x68C2             LDR      R2,[R0, #+12]
   \   0000001A   0x60CA             STR      R2,[R1, #+12]
    196            MDR_PORTA->PWR    = PORTA_Data.PWR;
   \   0000001C   0x6942             LDR      R2,[R0, #+20]
   \   0000001E   0x614A             STR      R2,[R1, #+20]
    197          
    198            MDR_PORTB->ANALOG = PORTB_Data.ANALOG;
   \   00000020   0x....             LDR.N    R1,??DataTable24_9  ;; 0x400b0004
   \   00000022   0x6A42             LDR      R2,[R0, #+36]
   \   00000024   0x608A             STR      R2,[R1, #+8]
    199            MDR_PORTB->FUNC   = PORTB_Data.FUNC;
   \   00000026   0x6A02             LDR      R2,[R0, #+32]
   \   00000028   0x604A             STR      R2,[R1, #+4]
    200            MDR_PORTB->GFEN   = PORTB_Data.GFEN;
   \   0000002A   0x6B42             LDR      R2,[R0, #+52]
   \   0000002C   0x618A             STR      R2,[R1, #+24]
    201            MDR_PORTB->OE     = PORTB_Data.OE;
   \   0000002E   0x69C2             LDR      R2,[R0, #+28]
   \   00000030   0x600A             STR      R2,[R1, #+0]
    202            MDR_PORTB->PD     = PORTB_Data.PD;
   \   00000032   0x6AC2             LDR      R2,[R0, #+44]
   \   00000034   0x610A             STR      R2,[R1, #+16]
    203            MDR_PORTB->PULL   = PORTB_Data.PULL;
   \   00000036   0x6A82             LDR      R2,[R0, #+40]
   \   00000038   0x60CA             STR      R2,[R1, #+12]
    204            MDR_PORTB->PWR    = PORTB_Data.PWR;
   \   0000003A   0x6B02             LDR      R2,[R0, #+48]
   \   0000003C   0x614A             STR      R2,[R1, #+20]
    205          
    206            MDR_PORTC->ANALOG = PORTC_Data.ANALOG;
   \   0000003E   0x....             LDR.N    R1,??DataTable24_10  ;; 0x400b8004
   \   00000040   0x6C02             LDR      R2,[R0, #+64]
   \   00000042   0x608A             STR      R2,[R1, #+8]
    207            MDR_PORTC->FUNC   = PORTC_Data.FUNC;
   \   00000044   0x6BC2             LDR      R2,[R0, #+60]
   \   00000046   0x604A             STR      R2,[R1, #+4]
    208            MDR_PORTC->GFEN   = PORTC_Data.GFEN;
   \   00000048   0x6D02             LDR      R2,[R0, #+80]
   \   0000004A   0x618A             STR      R2,[R1, #+24]
    209            MDR_PORTC->OE     = PORTC_Data.OE;
   \   0000004C   0x6B82             LDR      R2,[R0, #+56]
   \   0000004E   0x600A             STR      R2,[R1, #+0]
    210            MDR_PORTC->PD     = PORTC_Data.PD;
   \   00000050   0x6C82             LDR      R2,[R0, #+72]
   \   00000052   0x610A             STR      R2,[R1, #+16]
    211            MDR_PORTC->PULL   = PORTC_Data.PULL;
   \   00000054   0x6C42             LDR      R2,[R0, #+68]
   \   00000056   0x60CA             STR      R2,[R1, #+12]
    212            MDR_PORTC->PWR    = PORTC_Data.PWR;
   \   00000058   0x6CC0             LDR      R0,[R0, #+76]
   \   0000005A   0x6148             STR      R0,[R1, #+20]
    213          
    214            MDR_PORTD->ANALOG = PORTD_Data.ANALOG;
   \   0000005C   0x....             LDR.N    R1,??DataTable24_11  ;; 0x400c0004
   \   0000005E   0x....             LDR.N    R0,??DataTable24_5
   \   00000060   0x6882             LDR      R2,[R0, #+8]
   \   00000062   0x608A             STR      R2,[R1, #+8]
    215            MDR_PORTD->FUNC   = PORTD_Data.FUNC;
   \   00000064   0x6842             LDR      R2,[R0, #+4]
   \   00000066   0x604A             STR      R2,[R1, #+4]
    216            MDR_PORTD->GFEN   = PORTD_Data.GFEN;
   \   00000068   0x6982             LDR      R2,[R0, #+24]
   \   0000006A   0x618A             STR      R2,[R1, #+24]
    217            MDR_PORTD->OE     = PORTD_Data.OE;
   \   0000006C   0x6802             LDR      R2,[R0, #+0]
   \   0000006E   0x600A             STR      R2,[R1, #+0]
    218            MDR_PORTD->PD     = PORTD_Data.PD;
   \   00000070   0x6902             LDR      R2,[R0, #+16]
   \   00000072   0x610A             STR      R2,[R1, #+16]
    219            MDR_PORTD->PULL   = PORTD_Data.PULL;
   \   00000074   0x68C2             LDR      R2,[R0, #+12]
   \   00000076   0x60CA             STR      R2,[R1, #+12]
    220            MDR_PORTD->PWR    = PORTD_Data.PWR;
   \   00000078   0x6942             LDR      R2,[R0, #+20]
   \   0000007A   0x614A             STR      R2,[R1, #+20]
    221          
    222            MDR_PORTE->ANALOG = PORTE_Data.ANALOG;
   \   0000007C   0x....             LDR.N    R1,??DataTable24_12  ;; 0x400c8004
   \   0000007E   0x6A42             LDR      R2,[R0, #+36]
   \   00000080   0x608A             STR      R2,[R1, #+8]
    223            MDR_PORTE->FUNC   = PORTE_Data.FUNC;
   \   00000082   0x6A02             LDR      R2,[R0, #+32]
   \   00000084   0x604A             STR      R2,[R1, #+4]
    224            MDR_PORTE->GFEN   = PORTE_Data.GFEN;
   \   00000086   0x6B42             LDR      R2,[R0, #+52]
   \   00000088   0x618A             STR      R2,[R1, #+24]
    225            MDR_PORTE->OE     = PORTE_Data.OE;
   \   0000008A   0x69C2             LDR      R2,[R0, #+28]
   \   0000008C   0x600A             STR      R2,[R1, #+0]
    226            MDR_PORTE->PD     = PORTE_Data.PD;
   \   0000008E   0x6AC2             LDR      R2,[R0, #+44]
   \   00000090   0x610A             STR      R2,[R1, #+16]
    227            MDR_PORTE->PULL   = PORTE_Data.PULL;
   \   00000092   0x6A82             LDR      R2,[R0, #+40]
   \   00000094   0x60CA             STR      R2,[R1, #+12]
    228            MDR_PORTE->PWR    = PORTE_Data.PWR;
   \   00000096   0x6B02             LDR      R2,[R0, #+48]
   \   00000098   0x614A             STR      R2,[R1, #+20]
    229          
    230            MDR_PORTF->ANALOG = PORTF_Data.ANALOG;
   \   0000009A   0x....             LDR.N    R1,??DataTable24_13  ;; 0x400e8004
   \   0000009C   0x6C02             LDR      R2,[R0, #+64]
   \   0000009E   0x608A             STR      R2,[R1, #+8]
    231            MDR_PORTF->FUNC   = PORTF_Data.FUNC;
   \   000000A0   0x6BC2             LDR      R2,[R0, #+60]
   \   000000A2   0x604A             STR      R2,[R1, #+4]
    232            MDR_PORTF->GFEN   = PORTF_Data.GFEN;
   \   000000A4   0x6D02             LDR      R2,[R0, #+80]
   \   000000A6   0x618A             STR      R2,[R1, #+24]
    233            MDR_PORTF->OE     = PORTF_Data.OE;
   \   000000A8   0x6B82             LDR      R2,[R0, #+56]
   \   000000AA   0x600A             STR      R2,[R1, #+0]
    234            MDR_PORTF->PD     = PORTF_Data.PD;
   \   000000AC   0x6C82             LDR      R2,[R0, #+72]
   \   000000AE   0x610A             STR      R2,[R1, #+16]
    235            MDR_PORTF->PULL   = PORTF_Data.PULL;
   \   000000B0   0x6C42             LDR      R2,[R0, #+68]
   \   000000B2   0x60CA             STR      R2,[R1, #+12]
    236            MDR_PORTF->PWR    = PORTF_Data.PWR;
   \   000000B4   0x6CC0             LDR      R0,[R0, #+76]
   \   000000B6   0x6148             STR      R0,[R1, #+20]
    237          }
   \   000000B8   0x4770             BX       LR               ;; return
    238          
    239          /*******************************************************************************
    240          * Function Name  : Clock_SaveConfig
    241          * Description    : Save the Power and Clock configuration.
    242          * Input          : None
    243          * Output         : None
    244          * Return         : None
    245          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    246          void Clock_SaveConfig(void)
    247          {
    248            ClockData.PVDCS           = MDR_POWER->PVDCS;
   \                     Clock_SaveConfig:
   \   00000000   0x....             LDR.N    R0,??DataTable24_14
   \   00000002   0x....             LDR.N    R1,??DataTable24_15  ;; 0x40058000
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x6001             STR      R1,[R0, #+0]
    249            ClockData.CPU_CLOCK       = MDR_RST_CLK->CPU_CLOCK;
   \   00000008   0x....             LDR.N    R1,??DataTable24_16  ;; 0x4002000c
   \   0000000A   0x680A             LDR      R2,[R1, #+0]
   \   0000000C   0x6042             STR      R2,[R0, #+4]
    250            ClockData.PER_CLOCK       = MDR_RST_CLK->PER_CLOCK;
   \   0000000E   0x6909             LDR      R1,[R1, #+16]
   \   00000010   0x6081             STR      R1,[R0, #+8]
    251          #if defined (USE_MDR32F9Q1_Rev0) || defined (USE_MDR32F9Q1_Rev1)
    252            ClockData.EBC_CONTROL = MDR_EBC->CONTROL;
   \   00000012   0x....             LDR.N    R1,??DataTable24_17  ;; 0x400f0054
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x60C1             STR      R1,[R0, #+12]
    253          #endif
    254          }
   \   00000018   0x4770             BX       LR               ;; return
    255          
    256          /*******************************************************************************
    257          * Function Name  : Clock_RestoreConfig
    258          * Description    : Restore the Power and Clock configuration.
    259          * Input          : None
    260          * Output         : None
    261          * Return         : None
    262          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    263          void Clock_RestoreConfig(void)
    264          {
    265            MDR_POWER->PVDCS       = ClockData.PVDCS;
   \                     Clock_RestoreConfig:
   \   00000000   0x....             LDR.N    R0,??DataTable24_14
   \   00000002   0x....             LDR.N    R1,??DataTable24_15  ;; 0x40058000
   \   00000004   0x6802             LDR      R2,[R0, #+0]
   \   00000006   0x600A             STR      R2,[R1, #+0]
    266            MDR_RST_CLK->CPU_CLOCK = ClockData.CPU_CLOCK;
   \   00000008   0x....             LDR.N    R1,??DataTable24_16  ;; 0x4002000c
   \   0000000A   0x6842             LDR      R2,[R0, #+4]
   \   0000000C   0x600A             STR      R2,[R1, #+0]
    267            MDR_RST_CLK->PER_CLOCK = ClockData.PER_CLOCK;
   \   0000000E   0x6882             LDR      R2,[R0, #+8]
   \   00000010   0x610A             STR      R2,[R1, #+16]
    268          #if defined (USE_MDR32F9Q1_Rev0) || defined (USE_MDR32F9Q1_Rev1)
    269            MDR_EBC->CONTROL   = ClockData.EBC_CONTROL;
   \   00000012   0x68C0             LDR      R0,[R0, #+12]
   \   00000014   0x....             LDR.N    R1,??DataTable24_17  ;; 0x400f0054
   \   00000016   0x6008             STR      R0,[R1, #+0]
    270          #endif
    271          }
   \   00000018   0x4770             BX       LR               ;; return
    272          
    273          /*******************************************************************************
    274          * Function Name  : STANDBYMode_WAKEUP
    275          * Description    : Enters MCU in STANDBY mode.
    276          *                : Attention: the wake-up from STANDBY mode is performed on
    277          *                : WAKEUP pin low level. After STANDBY mode exiting, power on
    278          *                : reset is occurred.
    279          * Input          : None
    280          * Output         : None
    281          * Return         : None
    282          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    283          void STANDBYMode_WAKEUP(void)
    284          {
   \                     STANDBYMode_WAKEUP:
   \   00000000   0xB510             PUSH     {R4,LR}
    285            /* Print the header */
    286            LCD_CLS();
   \   00000002   0x.... 0x....      BL       LCD_CLS
    287            CurrentMethod = MET_AND;
   \   00000006   0x.... 0x....      BL       ?Subroutine2
    288            CurrentFont = &Font_6x8;
    289            DisplayMenuTitle("STANDBY. Exit: WAKEUP");
   \                     ??CrossCallReturnLabel_0:
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant "STANDBY. Exit: WAKEUP">`
   \   0000000E   0x.... 0x....      BL       DisplayMenuTitle
    290            WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??STANDBYMode_WAKEUP_0:
   \   00000012   0x.... 0x....      BL       GetKey
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD0FB             BEQ.N    ??STANDBYMode_WAKEUP_0
    291          
    292            LCD_PUTS(0, LineMessage1, "                    ");
   \   0000001A   0x.... 0x....      BL       ?Subroutine3
    293            LCD_PUTS(0, LineMessage2, "                    ");
   \                     ??CrossCallReturnLabel_29:
   \   0000001E   0x4622             MOV      R2,R4
   \   00000020   0x2116             MOVS     R1,#+22
   \   00000022   0x.... 0x....      BL       ??Subroutine5_0
    294            LCD_PUTS(0, LineMessage3, "MCU in STANDBY Mode ");
   \                     ??CrossCallReturnLabel_24:
   \   00000026   0x.... 0x....      ADR.W    R2,`?<Constant "MCU in STANDBY Mode ">`
   \   0000002A   0x2120             MOVS     R1,#+32
   \   0000002C   0x.... 0x....      BL       ??Subroutine5_0
    295            LCD_PUTS(0, LineMessage4, "To exit press Wakeup");
   \                     ??CrossCallReturnLabel_23:
   \   00000030   0x.... 0x....      ADR.W    R2,`?<Constant "To exit press Wakeup">`
   \   00000034   0x....             B.N      ?Subroutine0
    296            LCD_PUTS(0, LineMessage5, "                     ");
    297          
    298            /* Request to enter STANDBY mode */
    299            POWER_EnterSTANDBYMode();
    300          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x212A             MOVS     R1,#+42
   \   00000002   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_16:
   \   00000006   0x.... 0x....      ADR.W    R2,`?<Constant "                     ">`
   \   0000000A   0x2134             MOVS     R1,#+52
   \   0000000C   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_15:
   \   00000010   0xE8BD 0x4010      POP      {R4,LR}
   \   00000014   0x.... 0x....      B.W      POWER_EnterSTANDBYMode

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x.... 0x....      ADR.W    R4,`?<Constant "                    ">`
   \                     ??Subroutine3_0:
   \   00000004   0x4622             MOV      R2,R4
   \                     ??Subroutine3_1:
   \   00000006   0x210C             MOVS     R1,#+12
   \   00000008                      REQUIRE ??Subroutine5_0
   \   00000008                      ;; // Fall through to label ??Subroutine5_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine5_0:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      B.W      LCD_PUTS

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x....             LDR.N    R0,??DataTable24_18
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x7001             STRB     R1,[R0, #+0]
   \   00000006   0x....             LDR.N    R0,??DataTable24_19
   \   00000008   0x....             LDR.N    R1,??DataTable24_20
   \   0000000A   0x6001             STR      R1,[R0, #+0]
   \   0000000C   0x4770             BX       LR
    301          
    302          /*******************************************************************************
    303          * Function Name  : STANDBYMode_RTCAlarm
    304          * Description    : Enters MCU in STANDBY mode.
    305          *                : Attention: the wake-up from STANDBY mode is performed on
    306          *                : RTC Alarm event. After STANDBY mode exiting, power on
    307          *                : reset is occurred.
    308          * Input          : None
    309          * Output         : None
    310          * Return         : None
    311          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    312          void STANDBYMode_RTCAlarm(void)
    313          {
   \                     STANDBYMode_RTCAlarm:
   \   00000000   0xB510             PUSH     {R4,LR}
    314            /* Print the header */
    315            LCD_CLS();
   \   00000002   0x.... 0x....      BL       LCD_CLS
    316            CurrentMethod = MET_AND;
   \   00000006   0x.... 0x....      BL       ?Subroutine2
    317            CurrentFont = &Font_6x8;
    318            DisplayMenuTitle("STANDBY. Exit: Alarm");
   \                     ??CrossCallReturnLabel_1:
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant "STANDBY. Exit: Alarm">`
   \   0000000E   0x.... 0x....      BL       DisplayMenuTitle
    319            WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??STANDBYMode_RTCAlarm_0:
   \   00000012   0x.... 0x....      BL       GetKey
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD0FB             BEQ.N    ??STANDBYMode_RTCAlarm_0
    320          
    321            if((MDR_BKP->REG_00 != 0x1234) || (MDR_BKP->RTC_PRL != RTC_PRESCALER_VALUE))
   \   0000001A   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_3:
   \   0000001E   0xBF04             ITT      EQ 
   \   00000020   0x6C80             LDREQ    R0,[R0, #+72]
   \   00000022   0xF5B0 0x4F00      CMPEQ    R0,#+32768
   \   00000026   0xD020             BEQ.N    ??STANDBYMode_RTCAlarm_1
    322            {
    323              LCD_PUTS(0, LineMessage1, "RTC is not configured");
   \   00000028   0x.... 0x....      ADR.W    R2,`?<Constant "RTC is not configured">`
   \   0000002C   0x.... 0x....      BL       ??Subroutine3_1
    324              LCD_PUTS(0, LineMessage2, "Please, use the ");
   \                     ??CrossCallReturnLabel_26:
   \   00000030   0x.... 0x....      ADR.W    R2,`?<Constant "Please, use the ">`
   \   00000034   0x2116             MOVS     R1,#+22
   \   00000036   0x.... 0x....      BL       ??Subroutine5_0
    325              LCD_PUTS(0, LineMessage3, "Time Adjust menu and ");
   \                     ??CrossCallReturnLabel_22:
   \   0000003A   0x.... 0x....      ADR.W    R2,`?<Constant "Time Adjust menu and ">`
   \   0000003E   0x2120             MOVS     R1,#+32
   \   00000040   0x.... 0x....      BL       ??Subroutine5_0
    326              LCD_PUTS(0, LineMessage4, "Alarm Adjust menu to ");
   \                     ??CrossCallReturnLabel_21:
   \   00000044   0x.... 0x....      ADR.W    R2,`?<Constant "Alarm Adjust menu to ">`
   \   00000048   0x212A             MOVS     R1,#+42
   \   0000004A   0x.... 0x....      BL       ??Subroutine5_0
    327              LCD_PUTS(0, LineMessage5, "set the Alarm time. ");
   \                     ??CrossCallReturnLabel_20:
   \   0000004E   0x.... 0x....      ADR.W    R2,`?<Constant "set the Alarm time. ">`
   \   00000052   0x2134             MOVS     R1,#+52
   \   00000054   0x.... 0x....      BL       ??Subroutine5_0
    328              WAIT_UNTIL_KEY_PRESSED(SEL);
   \                     ??CrossCallReturnLabel_19:
   \   00000058   0x.... 0x....      BL       GetKey
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD1FB             BNE.N    ??CrossCallReturnLabel_19
    329              WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??STANDBYMode_RTCAlarm_2:
   \   00000060   0x.... 0x....      BL       GetKey
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD0FB             BEQ.N    ??STANDBYMode_RTCAlarm_2
    330          
    331              /* Display the menu */
    332              DisplayMenu();
   \   00000068   0x....             B.N      ?Subroutine1
    333              return;
    334            }
    335          
    336            LCD_PUTS(0, LineMessage1, "                    ");
   \                     ??STANDBYMode_RTCAlarm_1:
   \   0000006A   0x.... 0x....      BL       ?Subroutine3
    337            LCD_PUTS(0, LineMessage2, "                    ");
   \                     ??CrossCallReturnLabel_28:
   \   0000006E   0x4622             MOV      R2,R4
   \   00000070   0x2116             MOVS     R1,#+22
   \   00000072   0x.... 0x....      BL       ??Subroutine5_0
    338            LCD_PUTS(0, LineMessage3, " MCU in STANDBY Mode");
   \                     ??CrossCallReturnLabel_18:
   \   00000076   0x.... 0x....      ADR.W    R2,`?<Constant " MCU in STANDBY Mode">`
   \   0000007A   0x2120             MOVS     R1,#+32
   \   0000007C   0x.... 0x....      BL       ??Subroutine5_0
    339            LCD_PUTS(0, LineMessage4, " Wait For RTC Alarm ");
   \                     ??CrossCallReturnLabel_17:
   \   00000080   0x.... 0x....      ADR.W    R2,`?<Constant " Wait For RTC Alarm ">`
   \   00000084                      REQUIRE ?Subroutine0
   \   00000084                      ;; // Fall through to label ?Subroutine0
    340            LCD_PUTS(0, LineMessage5, "                     ");
    341          
    342            /* Request to enter STANDBY mode */
    343            POWER_EnterSTANDBYMode();
    344          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0xE8BD 0x4010      POP      {R4,LR}
   \   00000004   0x.... 0x....      B.W      DisplayMenu

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x....             LDR.N    R0,??DataTable24_23  ;; 0x400d8000
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xF241 0x2234      MOVW     R2,#+4660
   \   00000008   0x4291             CMP      R1,R2
   \   0000000A   0x4770             BX       LR
    345          
    346          /*******************************************************************************
    347          * Function Name  : STOPMode_RTCAlarm
    348          * Description    : Enters MCU in STOP mode. The wake-up from STOP mode is
    349          *                  performed by RTC Alarm.
    350          * Input          : None
    351          * Output         : None
    352          * Return         : None
    353          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    354          void STOPMode_RTCAlarm(void)
    355          {
   \                     STOPMode_RTCAlarm:
   \   00000000   0xB510             PUSH     {R4,LR}
    356            uint32_t tmp;
    357          
    358            /* Print the header */
    359            LCD_CLS();
   \   00000002   0x.... 0x....      BL       LCD_CLS
    360            CurrentMethod = MET_AND;
   \   00000006   0x.... 0x....      BL       ?Subroutine2
    361            CurrentFont = &Font_6x8;
    362            DisplayMenuTitle("STOP. Exit: Alarm");
   \                     ??CrossCallReturnLabel_2:
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant "STOP. Exit: Alarm">`
   \   0000000E   0x.... 0x....      BL       DisplayMenuTitle
    363            WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??STOPMode_RTCAlarm_0:
   \   00000012   0x.... 0x....      BL       GetKey
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD0FB             BEQ.N    ??STOPMode_RTCAlarm_0
    364          
    365            if((MDR_BKP->REG_00 != 0x1234) || (MDR_BKP->RTC_PRL != RTC_PRESCALER_VALUE))
   \   0000001A   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_4:
   \   0000001E   0xBF04             ITT      EQ 
   \   00000020   0x6C80             LDREQ    R0,[R0, #+72]
   \   00000022   0xF5B0 0x4F00      CMPEQ    R0,#+32768
   \   00000026   0xD020             BEQ.N    ??STOPMode_RTCAlarm_1
    366            {
    367              LCD_PUTS(0, LineMessage1, "RTC is not configured");
   \   00000028   0x.... 0x....      ADR.W    R2,`?<Constant "RTC is not configured">`
   \   0000002C   0x.... 0x....      BL       ??Subroutine3_1
    368              LCD_PUTS(0, LineMessage2, "Please, use the ");
   \                     ??CrossCallReturnLabel_25:
   \   00000030   0x.... 0x....      ADR.W    R2,`?<Constant "Please, use the ">`
   \   00000034   0x2116             MOVS     R1,#+22
   \   00000036   0x.... 0x....      BL       ??Subroutine5_0
    369              LCD_PUTS(0, LineMessage3, "Time Adjust menu and ");
   \                     ??CrossCallReturnLabel_14:
   \   0000003A   0x.... 0x....      ADR.W    R2,`?<Constant "Time Adjust menu and ">`
   \   0000003E   0x2120             MOVS     R1,#+32
   \   00000040   0x.... 0x....      BL       ??Subroutine5_0
    370              LCD_PUTS(0, LineMessage4, "Alarm Adjust menu to ");
   \                     ??CrossCallReturnLabel_13:
   \   00000044   0x.... 0x....      ADR.W    R2,`?<Constant "Alarm Adjust menu to ">`
   \   00000048   0x212A             MOVS     R1,#+42
   \   0000004A   0x.... 0x....      BL       ??Subroutine5_0
    371              LCD_PUTS(0, LineMessage5, "set the Alarm time.");
   \                     ??CrossCallReturnLabel_12:
   \   0000004E   0x.... 0x....      ADR.W    R2,`?<Constant "set the Alarm time.">`
   \   00000052   0x2134             MOVS     R1,#+52
   \   00000054   0x.... 0x....      BL       ??Subroutine5_0
    372              WAIT_UNTIL_KEY_PRESSED(SEL);
   \                     ??CrossCallReturnLabel_11:
   \   00000058   0x.... 0x....      BL       GetKey
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD1FB             BNE.N    ??CrossCallReturnLabel_11
    373              WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??STOPMode_RTCAlarm_2:
   \   00000060   0x.... 0x....      BL       GetKey
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD0FB             BEQ.N    ??STOPMode_RTCAlarm_2
   \   00000068   0xE03B             B.N      ??STOPMode_RTCAlarm_3
    374          
    375              /* Display the menu */
    376              DisplayMenu();
    377              return;
    378            }
    379          
    380            STOPModeStatus = 1;
   \                     ??STOPMode_RTCAlarm_1:
   \   0000006A   0x....             LDR.N    R0,??DataTable24_21
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x6001             STR      R1,[R0, #+0]
    381          
    382            LCD_PUTS(0, LineMessage1, "                     ");
   \   00000070   0x.... 0x....      ADR.W    R4,`?<Constant "                     ">`
   \   00000074   0x.... 0x....      BL       ??Subroutine3_0
    383            LCD_PUTS(0, LineMessage2, "                     ");
   \                     ??CrossCallReturnLabel_27:
   \   00000078   0x4622             MOV      R2,R4
   \   0000007A   0x2116             MOVS     R1,#+22
   \   0000007C   0x.... 0x....      BL       ??Subroutine5_0
    384            LCD_PUTS(0, LineMessage3, "  MCU in STOP Mode   ");
   \                     ??CrossCallReturnLabel_10:
   \   00000080   0x.... 0x....      ADR.W    R2,`?<Constant "  MCU in STOP Mode   ">`
   \   00000084   0x2120             MOVS     R1,#+32
   \   00000086   0x.... 0x....      BL       ??Subroutine5_0
    385            LCD_PUTS(0, LineMessage4, " Wait For RTC Alarm  ");
   \                     ??CrossCallReturnLabel_9:
   \   0000008A   0x.... 0x....      ADR.W    R2,`?<Constant " Wait For RTC Alarm  ">`
   \   0000008E   0x212A             MOVS     R1,#+42
   \   00000090   0x.... 0x....      BL       ??Subroutine5_0
    386            LCD_PUTS(0, LineMessage5, "                     ");
   \                     ??CrossCallReturnLabel_8:
   \   00000094   0x4622             MOV      R2,R4
   \   00000096   0x2134             MOVS     R1,#+52
   \   00000098   0x.... 0x....      BL       ??Subroutine5_0
    387          
    388            /* Save the all PORTs current configuration, then
    389             * configure all PORTs for low power consumption */
    390            PORT_SaveConfig();
   \                     ??CrossCallReturnLabel_7:
   \   0000009C   0x.... 0x....      BL       PORT_SaveConfig
    391          
    392            /* Save the Power and Clock current configuration */
    393            Clock_SaveConfig();
   \   000000A0   0x.... 0x....      BL       Clock_SaveConfig
    394          
    395            /* Enable SLEEPONEXIT mode */
    396            tmp = SCB->SCR;
   \   000000A4   0x....             LDR.N    R0,??DataTable24_22  ;; 0xe000ed10
   \   000000A6   0x6801             LDR      R1,[R0, #+0]
    397            tmp |= SCB_SCR_SLEEPONEXIT_Msk;
    398            SCB->SCR = tmp;
   \   000000A8   0xF041 0x0102      ORR      R1,R1,#0x2
   \   000000AC   0x6001             STR      R1,[R0, #+0]
    399          
    400            /* Request to enter STOP mode with regulator ON */
    401            POWER_EnterSTOPMode(ENABLE, POWER_STOPentry_WFI);
   \   000000AE   0x2101             MOVS     R1,#+1
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x.... 0x....      BL       POWER_EnterSTOPMode
    402          
    403            /* Restore the Power and Clock */
    404            Clock_RestoreConfig();
   \   000000B6   0x.... 0x....      BL       Clock_RestoreConfig
    405          
    406            /* Restore the PORTs Configurations*/
    407            PORT_RestoreConfig();
   \   000000BA   0x.... 0x....      BL       PORT_RestoreConfig
    408          
    409            LCD_PUTS(0, LineMessage3, "Wake-Up by RTC Alarm");
   \   000000BE   0x.... 0x....      ADR.W    R2,`?<Constant "Wake-Up by RTC Alarm">`
   \   000000C2   0x2120             MOVS     R1,#+32
   \   000000C4   0x.... 0x....      BL       ??Subroutine5_0
    410            LCD_PUTS(0, LineMessage4, "Press SEL to continue");
   \                     ??CrossCallReturnLabel_6:
   \   000000C8   0x.... 0x....      ADR.W    R2,`?<Constant "Press SEL to continue">`
   \   000000CC   0x212A             MOVS     R1,#+42
   \   000000CE   0x.... 0x....      BL       ??Subroutine5_0
    411          
    412            /* Wait for SEL to continue */
    413            WAIT_UNTIL_KEY_PRESSED(SEL);
   \                     ??CrossCallReturnLabel_5:
   \   000000D2   0x.... 0x....      BL       GetKey
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xD1FB             BNE.N    ??CrossCallReturnLabel_5
    414            WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??STOPMode_RTCAlarm_4:
   \   000000DA   0x.... 0x....      BL       GetKey
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD0FB             BEQ.N    ??STOPMode_RTCAlarm_4
    415          
    416            /* Display the previous menu */
    417            DisplayMenu();
   \                     ??STOPMode_RTCAlarm_3:
   \   000000E2                      REQUIRE ?Subroutine1
   \   000000E2                      ;; // Fall through to label ?Subroutine1
    418          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x400A8000         DC32     0x400a8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x........         DC32     PORTA_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x400B0000         DC32     0x400b0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   0x400C0000         DC32     0x400c0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   0x........         DC32     PORTD_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \   00000000   0x400C8000         DC32     0x400c8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_7:
   \   00000000   0x400E8000         DC32     0x400e8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_8:
   \   00000000   0x400A8004         DC32     0x400a8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_9:
   \   00000000   0x400B0004         DC32     0x400b0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_10:
   \   00000000   0x400B8004         DC32     0x400b8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_11:
   \   00000000   0x400C0004         DC32     0x400c0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_12:
   \   00000000   0x400C8004         DC32     0x400c8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_13:
   \   00000000   0x400E8004         DC32     0x400e8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_14:
   \   00000000   0x........         DC32     ClockData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_15:
   \   00000000   0x40058000         DC32     0x40058000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_16:
   \   00000000   0x4002000C         DC32     0x4002000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_17:
   \   00000000   0x400F0054         DC32     0x400f0054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_18:
   \   00000000   0x........         DC32     CurrentMethod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_19:
   \   00000000   0x........         DC32     CurrentFont

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_20:
   \   00000000   0x........         DC32     Font_6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_21:
   \   00000000   0x........         DC32     STOPModeStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_22:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_23:
   \   00000000   0x400D8000         DC32     0x400d8000

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "STANDBY. Exit: WAKEUP">`:
   \   00000000   0x53 0x54          DC8 "STANDBY. Exit: WAKEUP"
   \              0x41 0x4E    
   \              0x44 0x42    
   \              0x59 0x2E    
   \              0x20 0x45    
   \              0x78 0x69    
   \              0x74 0x3A    
   \              0x20 0x57    
   \              0x41 0x4B    
   \              0x45 0x55    
   \              0x50 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "                    ">`:
   \   00000000   0x20 0x20          DC8 "                    "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MCU in STANDBY Mode ">`:
   \   00000000   0x4D 0x43          DC8 "MCU in STANDBY Mode "
   \              0x55 0x20    
   \              0x69 0x6E    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x4E 0x44    
   \              0x42 0x59    
   \              0x20 0x4D    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "To exit press Wakeup">`:
   \   00000000   0x54 0x6F          DC8 "To exit press Wakeup"
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x70 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x57 0x61    
   \              0x6B 0x65    
   \              0x75 0x70    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "                     ">`:
   \   00000000   0x20 0x20          DC8 "                     "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "STANDBY. Exit: Alarm">`:
   \   00000000   0x53 0x54          DC8 "STANDBY. Exit: Alarm"
   \              0x41 0x4E    
   \              0x44 0x42    
   \              0x59 0x2E    
   \              0x20 0x45    
   \              0x78 0x69    
   \              0x74 0x3A    
   \              0x20 0x41    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RTC is not configured">`:
   \   00000000   0x52 0x54          DC8 "RTC is not configured"
   \              0x43 0x20    
   \              0x69 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x67 0x75    
   \              0x72 0x65    
   \              0x64 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Please, use the ">`:
   \   00000000   0x50 0x6C          DC8 "Please, use the "
   \              0x65 0x61    
   \              0x73 0x65    
   \              0x2C 0x20    
   \              0x75 0x73    
   \              0x65 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Time Adjust menu and ">`:
   \   00000000   0x54 0x69          DC8 "Time Adjust menu and "
   \              0x6D 0x65    
   \              0x20 0x41    
   \              0x64 0x6A    
   \              0x75 0x73    
   \              0x74 0x20    
   \              0x6D 0x65    
   \              0x6E 0x75    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Alarm Adjust menu to ">`:
   \   00000000   0x41 0x6C          DC8 "Alarm Adjust menu to "
   \              0x61 0x72    
   \              0x6D 0x20    
   \              0x41 0x64    
   \              0x6A 0x75    
   \              0x73 0x74    
   \              0x20 0x6D    
   \              0x65 0x6E    
   \              0x75 0x20    
   \              0x74 0x6F    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "set the Alarm time. ">`:
   \   00000000   0x73 0x65          DC8 "set the Alarm time. "
   \              0x74 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x41 0x6C    
   \              0x61 0x72    
   \              0x6D 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x2E 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " MCU in STANDBY Mode">`:
   \   00000000   0x20 0x4D          DC8 " MCU in STANDBY Mode"
   \              0x43 0x55    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x53 0x54    
   \              0x41 0x4E    
   \              0x44 0x42    
   \              0x59 0x20    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Wait For RTC Alarm ">`:
   \   00000000   0x20 0x57          DC8 " Wait For RTC Alarm "
   \              0x61 0x69    
   \              0x74 0x20    
   \              0x46 0x6F    
   \              0x72 0x20    
   \              0x52 0x54    
   \              0x43 0x20    
   \              0x41 0x6C    
   \              0x61 0x72    
   \              0x6D 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "STOP. Exit: Alarm">`:
   \   00000000   0x53 0x54          DC8 "STOP. Exit: Alarm"
   \              0x4F 0x50    
   \              0x2E 0x20    
   \              0x45 0x78    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x41 0x6C    
   \              0x61 0x72    
   \              0x6D 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "set the Alarm time.">`:
   \   00000000   0x73 0x65          DC8 "set the Alarm time."
   \              0x74 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x41 0x6C    
   \              0x61 0x72    
   \              0x6D 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  MCU in STOP Mode   ">`:
   \   00000000   0x20 0x20          DC8 "  MCU in STOP Mode   "
   \              0x4D 0x43    
   \              0x55 0x20    
   \              0x69 0x6E    
   \              0x20 0x53    
   \              0x54 0x4F    
   \              0x50 0x20    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Wait For RTC Alarm  ">`:
   \   00000000   0x20 0x57          DC8 " Wait For RTC Alarm  "
   \              0x61 0x69    
   \              0x74 0x20    
   \              0x46 0x6F    
   \              0x72 0x20    
   \              0x52 0x54    
   \              0x43 0x20    
   \              0x41 0x6C    
   \              0x61 0x72    
   \              0x6D 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Wake-Up by RTC Alarm">`:
   \   00000000   0x57 0x61          DC8 "Wake-Up by RTC Alarm"
   \              0x6B 0x65    
   \              0x2D 0x55    
   \              0x70 0x20    
   \              0x62 0x79    
   \              0x20 0x52    
   \              0x54 0x43    
   \              0x20 0x41    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Press SEL to continue">`:
   \   00000000   0x50 0x72          DC8 "Press SEL to continue"
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x53 0x45    
   \              0x4C 0x20    
   \              0x74 0x6F    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x69    
   \              0x6E 0x75    
   \              0x65 0x00    
   \   00000016   0x00 0x00          DC8 0, 0
    419          
    420          /** @} */ /* End of group Menu_LowPower_Private_Functions */
    421          
    422          /** @} */ /* End of group Menu_LowPower */
    423          
    424          /** @} */ /* End of group Menu */
    425          
    426          /** @} */ /* End of group __MDR32F9Qx_Eval_Demo */
    427          
    428          /******************* (C) COPYRIGHT 2011 Phyton *******************
    429          *
    430          * END OF FILE Menu_lowpower.c */
    431          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  Clock_RestoreConfig
        0  Clock_SaveConfig
        0  LowPower_Init
              0 -> RST_CLK_PCLKcmd
        0  PORT_RestoreConfig
       24  PORT_SaveConfig
              0 -> PORT_DeInit
             24 -> PORT_DeInit
        8  STANDBYMode_RTCAlarm
              0 -> DisplayMenu
              8 -> DisplayMenuTitle
              8 -> GetKey
              8 -> LCD_CLS
              8 -> LCD_PUTS
              0 -> POWER_EnterSTANDBYMode
        8  STANDBYMode_WAKEUP
              8 -> DisplayMenuTitle
              8 -> GetKey
              8 -> LCD_CLS
              8 -> LCD_PUTS
              0 -> POWER_EnterSTANDBYMode
        8  STOPMode_RTCAlarm
              8 -> Clock_RestoreConfig
              8 -> Clock_SaveConfig
              0 -> DisplayMenu
              8 -> DisplayMenuTitle
              8 -> GetKey
              8 -> LCD_CLS
              8 -> LCD_PUTS
              8 -> PORT_RestoreConfig
              8 -> PORT_SaveConfig
              8 -> POWER_EnterSTOPMode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "                     ">
      24  ?<Constant "                    ">
      24  ?<Constant "  MCU in STOP Mode   ">
      24  ?<Constant " MCU in STANDBY Mode">
      24  ?<Constant " Wait For RTC Alarm  ">
      24  ?<Constant " Wait For RTC Alarm ">
      24  ?<Constant "Alarm Adjust menu to ">
      24  ?<Constant "MCU in STANDBY Mode ">
      20  ?<Constant "Please, use the ">
      24  ?<Constant "Press SEL to continue">
      24  ?<Constant "RTC is not configured">
      24  ?<Constant "STANDBY. Exit: Alarm">
      24  ?<Constant "STANDBY. Exit: WAKEUP">
      20  ?<Constant "STOP. Exit: Alarm">
      24  ?<Constant "Time Adjust menu and ">
      24  ?<Constant "To exit press Wakeup">
      24  ?<Constant "Wake-Up by RTC Alarm">
      24  ?<Constant "set the Alarm time. ">
      20  ?<Constant "set the Alarm time.">
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_10
       4  ??DataTable24_11
       4  ??DataTable24_12
       4  ??DataTable24_13
       4  ??DataTable24_14
       4  ??DataTable24_15
       4  ??DataTable24_16
       4  ??DataTable24_17
       4  ??DataTable24_18
       4  ??DataTable24_19
       4  ??DataTable24_2
       4  ??DataTable24_20
       4  ??DataTable24_21
       4  ??DataTable24_22
       4  ??DataTable24_23
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
       4  ??DataTable24_6
       4  ??DataTable24_7
       4  ??DataTable24_8
       4  ??DataTable24_9
       6  ??Subroutine5_0
      24  ?Subroutine0
       8  ?Subroutine1
      14  ?Subroutine2
       8  ?Subroutine3
      12  ?Subroutine4
      16  ClockData
      26  Clock_RestoreConfig
      26  Clock_SaveConfig
      10  LowPower_Init
      84  PORTA_Data
          PORTB_Data
          PORTC_Data
      84  PORTD_Data
          PORTE_Data
          PORTF_Data
     186  PORT_RestoreConfig
     250  PORT_SaveConfig
     132  STANDBYMode_RTCAlarm
      54  STANDBYMode_WAKEUP
     226  STOPMode_RTCAlarm

 
   184 bytes in section .bss
 1 522 bytes in section .text
 
 1 522 bytes of CODE memory
   184 bytes of DATA memory

Errors: none
Warnings: none
