###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:26:04 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\text.c                                   #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\text.c --preprocess                      #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\text.lst         #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\text.o            #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR1986VE91_Eval\src\text.c
      1          /**
      2            ******************************************************************************
      3            * @file    text.c
      4            * @author  Phyton Application Team
      5            * @version V3.0.0
      6            * @date    10.09.2011
      7            * @brief   This file provides all the functions for the symbol  and text
      8            *          output to LCD.
      9            ******************************************************************************
     10            * <br><br>
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 Phyton</center></h2>
     19            */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include <string.h>
     23          #include <MDR32F9Qx_adc.h>
     24          #include "lcd.h"
     25          #include "text.h"
     26          #include "joystick.h"
     27          #include "systick.h"
     28          #include "menu.h"
     29          
     30          /** @addtogroup __MDR32F9Qx_Eval_Demo MDR32F9Qx Demonstration Example
     31            * @{
     32            */
     33          
     34          /** @addtogroup LCD_Text LCD Text
     35            * @{
     36            */
     37          
     38          /** @defgroup LCD_Text_Private_Constants LCD Text Private Constants
     39            * @{
     40            */
     41          
     42          /** @} */ /* End of group LCD_Text_Private_Constants */
     43          
     44          /** @defgroup LCD_Text_Variables LCD Text Variables
     45            * @{
     46            */
     47          
     48          /* The selected font for text output */

   \                                 In section .data, align 4
     49          sFONT *CurrentFont = &Font_6x8;
   \                     CurrentFont:
   \   00000000   0x........         DC32 Font_6x8
     50          
     51          /** @} */ /* End of group LCD_Text_Variables */
     52          
     53          /** @defgroup LCD_Text_Private_Functions LCD Text Private Functions
     54            * @{
     55            */
     56          
     57          /*******************************************************************************
     58          * Function Name  : LCD_PUT_BYTE
     59          * Description    : Outputs one byte to the given screen coordinates.
     60          * Input          : õ    - x-coordinate
     61          *                : y    - y-coordinate
     62          *                : data - byte to output
     63          * Output         : None
     64          * Return         : None
     65          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     66          void LCD_PUT_BYTE(uint8_t x, uint8_t y, uint8_t data)
     67          {
   \                     LCD_PUT_BYTE:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4691             MOV      R9,R2
     68            uint32_t tmp_data, page, shift_num, shift_num_ex;
     69          
     70            if ((x>MAX_X)|(y>MAX_Y))
   \   0000000A   0x2D80             CMP      R5,#+128
   \   0000000C   0x4180             SBCS     R0,R0,R0
   \   0000000E   0x43C0             MVNS     R0,R0
   \   00000010   0x2E40             CMP      R6,#+64
   \   00000012   0x4189             SBCS     R1,R1,R1
   \   00000014   0x43C9             MVNS     R1,R1
   \   00000016   0x0FC9             LSRS     R1,R1,#+31
   \   00000018   0xEA51 0x70D0      ORRS     R0,R1,R0, LSR #+31
   \   0000001C   0xD16C             BNE.N    ??LCD_PUT_BYTE_0
     71            {
     72              return;
     73            }
     74          
     75            /* Select crystal and x offset */
     76            SetCrystal((LCD_Crystal)(x/64));
   \   0000001E   0x09A8             LSRS     R0,R5,#+6
   \   00000020   0x.... 0x....      BL       SetCrystal
     77            x %= 64;
   \   00000024   0xF005 0x043F      AND      R4,R5,#0x3F
     78            /* Determine first page and y offset */
     79            page = y/8;
   \   00000028   0x08F5             LSRS     R5,R6,#+3
     80            shift_num = y%8;
   \   0000002A   0xF006 0x0607      AND      R6,R6,#0x7
     81            shift_num_ex = 8 - shift_num;
   \   0000002E   0xF1C6 0x0B08      RSB      R11,R6,#+8
     82          
     83            /* First page */
     84          
     85            /* Read current value */
     86            LCD_SET_PAGE(page);
   \   00000032   0xF045 0x07B8      ORR      R7,R5,#0xB8
   \   00000036   0x4638             MOV      R0,R7
   \   00000038   0x.... 0x....      BL       WriteLCD_Cmd
     87            LCD_SET_ADDRESS(x);
   \   0000003C   0xF044 0x0840      ORR      R8,R4,#0x40
   \   00000040   0x.... 0x....      BL       ?Subroutine1
     88            tmp_data = ReadLCD_Data();
   \                     ??CrossCallReturnLabel_9:
   \   00000044   0x.... 0x....      BL       ReadLCD_Data
   \   00000048   0x4604             MOV      R4,R0
     89            /* Write modified value */
     90            LCD_SET_PAGE(page);
   \   0000004A   0x4638             MOV      R0,R7
   \   0000004C   0x.... 0x....      BL       WriteLCD_Cmd
     91            LCD_SET_ADDRESS(x);
   \   00000050   0x.... 0x....      BL       ?Subroutine1
     92            switch (CurrentMethod)
   \                     ??CrossCallReturnLabel_8:
   \   00000054   0xF089 0x0AFF      EOR      R10,R9,#0xFF
   \   00000058   0xFA0A 0xF006      LSL      R0,R10,R6
   \   0000005C   0xFA09 0xF106      LSL      R1,R9,R6
   \   00000060   0x27FF             MOVS     R7,#+255
   \   00000062   0x....             LDR.N    R2,??DataTable3
   \   00000064   0x7812             LDRB     R2,[R2, #+0]
   \   00000066   0xB132             CBZ.N    R2,??LCD_PUT_BYTE_1
   \   00000068   0x2A02             CMP      R2,#+2
   \   0000006A   0xD00A             BEQ.N    ??LCD_PUT_BYTE_2
   \   0000006C   0xD306             BCC.N    ??LCD_PUT_BYTE_3
   \   0000006E   0x2A04             CMP      R2,#+4
   \   00000070   0xD00B             BEQ.N    ??LCD_PUT_BYTE_4
   \   00000072   0xD308             BCC.N    ??LCD_PUT_BYTE_5
   \   00000074   0xE00F             B.N      ??LCD_PUT_BYTE_6
     93            {
     94              case MET_OR:
     95                WriteLCD_Data(tmp_data | (data << shift_num));
   \                     ??LCD_PUT_BYTE_1:
   \   00000076   0xEA41 0x0004      ORR      R0,R1,R4
   \   0000007A   0xE00A             B.N      ??LCD_PUT_BYTE_7
     96                break;
     97              case MET_XOR:
     98                WriteLCD_Data(tmp_data ^ (data << shift_num));
   \                     ??LCD_PUT_BYTE_3:
   \   0000007C   0xEA81 0x0004      EOR      R0,R1,R4
   \   00000080   0xE007             B.N      ??LCD_PUT_BYTE_7
     99                break;
    100              case MET_NOT_OR:
    101                WriteLCD_Data(tmp_data | ((data ^ 0xFF) << shift_num));
   \                     ??LCD_PUT_BYTE_2:
   \   00000082   0x4320             ORRS     R0,R0,R4
   \   00000084   0xE005             B.N      ??LCD_PUT_BYTE_7
    102                break;
    103              case MET_NOT_XOR:
    104                WriteLCD_Data(tmp_data ^ ((data ^ 0xFF) << shift_num));
   \                     ??LCD_PUT_BYTE_5:
   \   00000086   0x4060             EORS     R0,R0,R4
   \   00000088   0xE003             B.N      ??LCD_PUT_BYTE_7
    105                break;
    106              case MET_AND:
    107                WriteLCD_Data(tmp_data & (0xFF >> shift_num_ex) | (data << shift_num));
   \                     ??LCD_PUT_BYTE_4:
   \   0000008A   0xFA47 0xF00B      ASR      R0,R7,R11
   \   0000008E   0x4020             ANDS     R0,R0,R4
   \   00000090   0x4308             ORRS     R0,R1,R0
   \                     ??LCD_PUT_BYTE_7:
   \   00000092   0x.... 0x....      BL       WriteLCD_Data
    108                break;
    109            }
    110          
    111            /* Second page (if any) */
    112            if (shift_num > 0)
   \                     ??LCD_PUT_BYTE_6:
   \   00000096   0xB37E             CBZ.N    R6,??LCD_PUT_BYTE_0
    113            {
    114              /* Read current value */
    115              LCD_SET_PAGE(page+1);
   \   00000098   0x1C68             ADDS     R0,R5,#+1
   \   0000009A   0xF040 0x05B8      ORR      R5,R0,#0xB8
   \   0000009E   0x4628             MOV      R0,R5
   \   000000A0   0x.... 0x....      BL       WriteLCD_Cmd
    116              LCD_SET_ADDRESS(x);
   \   000000A4   0x.... 0x....      BL       ?Subroutine1
    117              tmp_data = ReadLCD_Data();
   \                     ??CrossCallReturnLabel_7:
   \   000000A8   0x.... 0x....      BL       ReadLCD_Data
   \   000000AC   0x4604             MOV      R4,R0
    118              /* Write modified value */
    119              LCD_SET_PAGE(page+1);
   \   000000AE   0x4628             MOV      R0,R5
   \   000000B0   0x.... 0x....      BL       WriteLCD_Cmd
    120              LCD_SET_ADDRESS(x);
   \   000000B4   0x.... 0x....      BL       ?Subroutine1
    121              switch (CurrentMethod)
   \                     ??CrossCallReturnLabel_6:
   \   000000B8   0xFA4A 0xF00B      ASR      R0,R10,R11
   \   000000BC   0xFA49 0xF10B      ASR      R1,R9,R11
   \   000000C0   0x....             LDR.N    R2,??DataTable3
   \   000000C2   0x7812             LDRB     R2,[R2, #+0]
   \   000000C4   0xB132             CBZ.N    R2,??LCD_PUT_BYTE_8
   \   000000C6   0x2A02             CMP      R2,#+2
   \   000000C8   0xD00A             BEQ.N    ??LCD_PUT_BYTE_9
   \   000000CA   0xD306             BCC.N    ??LCD_PUT_BYTE_10
   \   000000CC   0x2A04             CMP      R2,#+4
   \   000000CE   0xD00B             BEQ.N    ??LCD_PUT_BYTE_11
   \   000000D0   0xD308             BCC.N    ??LCD_PUT_BYTE_12
   \   000000D2   0xE011             B.N      ??LCD_PUT_BYTE_0
    122              {
    123                case MET_OR:
    124                  WriteLCD_Data(tmp_data | (data >> shift_num_ex));
   \                     ??LCD_PUT_BYTE_8:
   \   000000D4   0xEA41 0x0004      ORR      R0,R1,R4
   \   000000D8   0xE00A             B.N      ??LCD_PUT_BYTE_13
    125                  break;
    126                case MET_XOR:
    127                  WriteLCD_Data(tmp_data ^ (data >> shift_num_ex));
   \                     ??LCD_PUT_BYTE_10:
   \   000000DA   0xEA81 0x0004      EOR      R0,R1,R4
   \   000000DE   0xE007             B.N      ??LCD_PUT_BYTE_13
    128                  break;
    129                case MET_NOT_OR:
    130                  WriteLCD_Data(tmp_data | ((data ^ 0xFF) >> shift_num_ex));
   \                     ??LCD_PUT_BYTE_9:
   \   000000E0   0x4320             ORRS     R0,R0,R4
   \   000000E2   0xE005             B.N      ??LCD_PUT_BYTE_13
    131                  break;
    132                case MET_NOT_XOR:
    133                  WriteLCD_Data(tmp_data ^ ((data ^ 0xFF)>> shift_num_ex));
   \                     ??LCD_PUT_BYTE_12:
   \   000000E4   0x4060             EORS     R0,R0,R4
   \   000000E6   0xE003             B.N      ??LCD_PUT_BYTE_13
    134                  break;
    135                case MET_AND:
    136                  WriteLCD_Data(tmp_data & (0xFF << shift_num) | (data >> shift_num_ex));
   \                     ??LCD_PUT_BYTE_11:
   \   000000E8   0xFA07 0xF006      LSL      R0,R7,R6
   \   000000EC   0x4020             ANDS     R0,R0,R4
   \   000000EE   0x4308             ORRS     R0,R1,R0
   \                     ??LCD_PUT_BYTE_13:
   \   000000F0   0xE8BD 0x4FF2      POP      {R1,R4-R11,LR}
   \   000000F4   0x.... 0x....      B.W      WriteLCD_Data
    137                  break;
    138              }
    139            }
   \                     ??LCD_PUT_BYTE_0:
   \   000000F8   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    140          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x4640             MOV      R0,R8
   \   00000002   0x.... 0x....      B.W      WriteLCD_Cmd
    141          
    142          /*----------------- Printing of symbols and strings using current font -----------------*/
    143          
    144          /*******************************************************************************
    145          * Function Name  : LCD_PUTC
    146          * Description    : Prints one symbol to the given screen coordinates.
    147          * Input          : õ  - x-coordinate
    148          *                : y  - y-coordinate
    149          *                : ch - symbol to print
    150          * Output         : None
    151          * Return         : None
    152          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    153          void LCD_PUTC(uint8_t x, uint8_t y, uint8_t ch)
    154          {
   \                     LCD_PUTC:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x4689             MOV      R9,R1
    155            uint32_t i, j, line;
    156            ucint8_t *sym;
    157          
    158            sym = Get_Char_Data_Addr(ch);
   \   00000008   0x....             LDR.N    R6,??DataTable3_1
   \   0000000A   0x6830             LDR      R0,[R6, #+0]
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF011 0x0F07      TST      R1,#0x7
   \   00000012   0xBF1A             ITTE     NE 
   \   00000014   0x08CB             LSRNE    R3,R1,#+3
   \   00000016   0x1C5B             ADDNE    R3,R3,#+1
   \   00000018   0x08CB             LSREQ    R3,R1,#+3
   \   0000001A   0x6847             LDR      R7,[R0, #+4]
   \   0000001C   0x437A             MULS     R2,R7,R2
   \   0000001E   0x68C0             LDR      R0,[R0, #+12]
   \   00000020   0xFB03 0x0702      MLA      R7,R3,R2,R0
    159            line = CurrentFont->Height / 8;
   \   00000024   0x08CC             LSRS     R4,R1,#+3
    160            if (CurrentFont->Height % 8)
   \   00000026   0xF011 0x0F07      TST      R1,#0x7
   \   0000002A   0xBF18             IT       NE 
   \   0000002C   0x1C64             ADDNE    R4,R4,#+1
    161            {
    162              line++;
    163            }
    164          
    165            for (j = 0; j < line; j++)
   \   0000002E   0x2500             MOVS     R5,#+0
   \   00000030   0xE011             B.N      ??LCD_PUTC_0
    166            {
    167              for( i = 0; i < CurrentFont->Width; i++)
    168              {
    169                LCD_PUT_BYTE(x + i, y + j*8, sym[i + CurrentFont->Width*j]);
   \                     ??LCD_PUTC_1:
   \   00000032   0xFB05 0xA000      MLA      R0,R5,R0,R10
   \   00000036   0x5DC2             LDRB     R2,[R0, R7]
   \   00000038   0xEB09 0x01C5      ADD      R1,R9,R5, LSL #+3
   \   0000003C   0xB2C9             UXTB     R1,R1
   \   0000003E   0xEB0A 0x0008      ADD      R0,R10,R8
   \   00000042   0xB2C0             UXTB     R0,R0
   \   00000044   0x.... 0x....      BL       LCD_PUT_BYTE
    170              }
   \   00000048   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??LCD_PUTC_2:
   \   0000004C   0x6830             LDR      R0,[R6, #+0]
   \   0000004E   0x6840             LDR      R0,[R0, #+4]
   \   00000050   0x4582             CMP      R10,R0
   \   00000052   0xD3EE             BCC.N    ??LCD_PUTC_1
   \   00000054   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_PUTC_0:
   \   00000056   0x42A5             CMP      R5,R4
   \   00000058   0xBF38             IT       CC 
   \   0000005A   0xF04F 0x0A00      MOVCC    R10,#+0
   \   0000005E   0xD3F5             BCC.N    ??LCD_PUTC_2
    171            }
    172          }
   \   00000060   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    173          
    174          /*******************************************************************************
    175          * Function Name  : LCD_PUTS
    176          * Description    : Prints the string to the given screen coordinates.
    177          * Input          : õ  - x-coordinate
    178          *                : y  - y-coordinate
    179          *                : str - pointer to string
    180          * Output         : None
    181          * Return         : None
    182          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    183          void LCD_PUTS(uint8_t x, uint8_t y, ucint8_t* str)
    184          {
   \                     LCD_PUTS:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4688             MOV      R8,R1
   \   00000008   0x4616             MOV      R6,R2
    185            uint32_t i;
    186          
    187            for (i=0; str[i]; i++)
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0x....             LDR.N    R5,??DataTable3_1
   \   0000000E   0xE008             B.N      ??LCD_PUTS_0
    188            {
    189              LCD_PUTC(x + i*CurrentFont->Width, y, str[i]);
   \                     ??LCD_PUTS_1:
   \   00000010   0x4641             MOV      R1,R8
   \   00000012   0x6828             LDR      R0,[R5, #+0]
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0xFB00 0x4007      MLA      R0,R0,R7,R4
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x.... 0x....      BL       LCD_PUTC
    190            }
   \   00000020   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_PUTS_0:
   \   00000022   0x5DBA             LDRB     R2,[R7, R6]
   \   00000024   0x2A00             CMP      R2,#+0
   \   00000026   0xD1F3             BNE.N    ??LCD_PUTS_1
    191          }
   \   00000028   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    192          
    193          /*******************************************************************************
    194          * Function Name  : LCD_PUTS_Ex
    195          * Description    : Prints the string using the dedicated style.
    196          * Input          : õ  - x-coordinate
    197          *                : y  - y-coordinate
    198          *                : str - pointer to string
    199          *                : style - style
    200          * Output         : None
    201          * Return         : None
    202          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    203          void LCD_PUTS_Ex(uint8_t x, uint8_t y, ucint8_t* str, uint8_t style)
    204          {
   \                     LCD_PUTS_Ex:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x4689             MOV      R9,R1
   \   00000008   0x4692             MOV      R10,R2
   \   0000000A   0x461E             MOV      R6,R3
    205            uint32_t i, DelayCount;
    206          
    207            LCD_Method OldMethod = CurrentMethod;
   \   0000000C   0x....             LDR.N    R7,??DataTable3
   \   0000000E   0x783C             LDRB     R4,[R7, #+0]
    208          
    209            /* Trimming results in animation speed changes */
    210            DelayCount = (ADC1_GetResult() & ADC_RESULT_Msk) + 51;
   \   00000010   0x.... 0x....      BL       ADC1_GetResult
   \   00000014   0x0500             LSLS     R0,R0,#+20
   \   00000016   0x0D00             LSRS     R0,R0,#+20
   \   00000018   0xF100 0x0533      ADD      R5,R0,#+51
    211          
    212            switch (style)
   \   0000001C   0xB12E             CBZ.N    R6,??LCD_PUTS_Ex_0
   \   0000001E   0x2E02             CMP      R6,#+2
   \   00000020   0xD020             BEQ.N    ??LCD_PUTS_Ex_1
   \   00000022   0xD308             BCC.N    ??LCD_PUTS_Ex_2
   \   00000024   0x2E03             CMP      R6,#+3
   \   00000026   0xD02E             BEQ.N    ??LCD_PUTS_Ex_3
   \   00000028   0xE03B             B.N      ??LCD_PUTS_Ex_4
    213            {
    214              /* Simple string */
    215              case StyleSimple:
    216                CurrentMethod = MET_AND;
   \                     ??LCD_PUTS_Ex_0:
   \   0000002A   0x2004             MOVS     R0,#+4
   \   0000002C   0x7038             STRB     R0,[R7, #+0]
    217                LCD_PUTS(x, y, str);
   \   0000002E   0x4652             MOV      R2,R10
   \   00000030   0x4649             MOV      R1,R9
   \   00000032   0x4640             MOV      R0,R8
   \   00000034   0xE033             B.N      ??LCD_PUTS_Ex_5
    218                break;
    219              /* Blinking strings */
    220              case StyleBlink:
    221                CurrentMethod = MET_AND;
   \                     ??LCD_PUTS_Ex_2:
   \   00000036   0x.... 0x....      BL       ?Subroutine0
    222                LCD_PUTS(x, y, str);
    223                SysTickDelay(DelayCount);
   \                     ??CrossCallReturnLabel_5:
   \   0000003A   0x4628             MOV      R0,R5
   \   0000003C   0x.... 0x....      BL       SysTickDelay
    224                for (i = 0; i < strlen((const char *)str); i++)
   \   00000040   0x2500             MOVS     R5,#+0
   \   00000042   0x....             LDR.N    R6,??DataTable3_1
   \                     ??LCD_PUTS_Ex_6:
   \   00000044   0x4650             MOV      R0,R10
   \   00000046   0x.... 0x....      BL       strlen
   \   0000004A   0x4285             CMP      R5,R0
   \   0000004C   0xD229             BCS.N    ??LCD_PUTS_Ex_4
    225                  LCD_PUTC(x + ((CurrentFont->Width) * i), y, 0x20);
   \   0000004E   0x2220             MOVS     R2,#+32
   \   00000050   0x4649             MOV      R1,R9
   \   00000052   0x6830             LDR      R0,[R6, #+0]
   \   00000054   0x6840             LDR      R0,[R0, #+4]
   \   00000056   0xFB05 0x8000      MLA      R0,R5,R0,R8
   \   0000005A   0xB2C0             UXTB     R0,R0
   \   0000005C   0x.... 0x....      BL       LCD_PUTC
   \   00000060   0x1C6D             ADDS     R5,R5,#+1
   \   00000062   0xE7EF             B.N      ??LCD_PUTS_Ex_6
    226                break;
    227              /* String with modified background */
    228              case StyleFlipFlop:
    229                CurrentMethod = MET_AND;
   \                     ??LCD_PUTS_Ex_1:
   \   00000064   0x.... 0x....      BL       ?Subroutine0
    230                LCD_PUTS(x, y, str);
    231                CurrentMethod = MET_XOR;
   \                     ??CrossCallReturnLabel_4:
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x.... 0x....      BL       ??Subroutine0_0
    232                LCD_PUTS(x, y, str);
    233                CurrentMethod = MET_NOT_XOR;
   \                     ??CrossCallReturnLabel_1:
   \   0000006E   0x2003             MOVS     R0,#+3
   \   00000070   0x.... 0x....      BL       ??Subroutine0_0
    234                LCD_PUTS(x, y, str);
    235                SysTickDelay(DelayCount * 2);
   \                     ??CrossCallReturnLabel_0:
   \   00000074   0x0068             LSLS     R0,R5,#+1
   \   00000076   0x.... 0x....      BL       SysTickDelay
    236                CurrentMethod = MET_AND;
   \   0000007A   0x.... 0x....      BL       ?Subroutine0
    237                LCD_PUTS(x, y, str);
    238                SysTickDelay(DelayCount);
   \                     ??CrossCallReturnLabel_3:
   \   0000007E   0x4628             MOV      R0,R5
   \   00000080   0x.... 0x....      BL       SysTickDelay
    239                break;
   \   00000084   0xE00D             B.N      ??LCD_PUTS_Ex_4
    240              /* Shiver string */
    241              case StyleVibratory:
    242                CurrentMethod = MET_AND;
   \                     ??LCD_PUTS_Ex_3:
   \   00000086   0x.... 0x....      BL       ?Subroutine0
    243                LCD_PUTS(x, y, str);
    244                SysTickDelay(DelayCount);
   \                     ??CrossCallReturnLabel_2:
   \   0000008A   0x4628             MOV      R0,R5
   \   0000008C   0x.... 0x....      BL       SysTickDelay
    245                LCD_PUTS(x+1, y+1, str);
   \   00000090   0x4652             MOV      R2,R10
   \   00000092   0xF109 0x0101      ADD      R1,R9,#+1
   \   00000096   0xB2C9             UXTB     R1,R1
   \   00000098   0xF108 0x0001      ADD      R0,R8,#+1
   \   0000009C   0xB2C0             UXTB     R0,R0
   \                     ??LCD_PUTS_Ex_5:
   \   0000009E   0x.... 0x....      BL       LCD_PUTS
    246                break;
    247            }
    248            CurrentMethod = OldMethod;
   \                     ??LCD_PUTS_Ex_4:
   \   000000A2   0x703C             STRB     R4,[R7, #+0]
    249          }
   \   000000A4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x2004             MOVS     R0,#+4
   \                     ??Subroutine0_0:
   \   00000002   0x7038             STRB     R0,[R7, #+0]
   \   00000004   0x4652             MOV      R2,R10
   \   00000006   0x4649             MOV      R1,R9
   \   00000008   0x4640             MOV      R0,R8
   \   0000000A   0x....             B.N      LCD_PUTS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     CurrentMethod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     CurrentFont
    250          
    251          /** @} */ /* End of group LCD_Text_Private_Functions */
    252          
    253          /** @} */ /* End of group LCD_Text */
    254          
    255          /** @} */ /* End of group __MDR32F9Qx_Eval_Demo */
    256          
    257          /******************* (C) COPYRIGHT 2011 Phyton *********************************
    258          *
    259          * END OF FILE text.c */
    260          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       32  LCD_PUTC
             32 -> LCD_PUT_BYTE
       24  LCD_PUTS
             24 -> LCD_PUTC
       32  LCD_PUTS_Ex
             32 -> ADC1_GetResult
             32 -> LCD_PUTC
             32 -> LCD_PUTS
             32 -> SysTickDelay
             32 -> strlen
       40  LCD_PUT_BYTE
             40 -> ReadLCD_Data
             40 -> SetCrystal
             40 -> WriteLCD_Cmd
              0 -> WriteLCD_Data
             40 -> WriteLCD_Data


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
      12  ?Subroutine0
       6  ?Subroutine1
       4  CurrentFont
     100  LCD_PUTC
      44  LCD_PUTS
     168  LCD_PUTS_Ex
     252  LCD_PUT_BYTE

 
   4 bytes in section .data
 590 bytes in section .text
 
 590 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
