###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:25:57 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Libraries\MDR32F9Qx_St #
#                    dPeriph_Driver\src\MDR32F9Qx_i2c.c                       #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Libraries\MDR32F9Qx_St #
#                    dPeriph_Driver\src\MDR32F9Qx_i2c.c --preprocess          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\MDR32F9Qx_i2c.ls #
#                    t                                                        #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\MDR32F9Qx_i2c.o   #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_i2c.c
      1          /**
      2            ******************************************************************************
      3            * @file    MDR32F9Qx_i2c.c
      4            * @author  Phyton Application Team
      5            * @version V1.4.0
      6            * @date    22/02/2011
      7            * @brief   This file provides all the I2C firmware functions.
      8            ******************************************************************************
      9            * <br><br>
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
     14            * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
     19            ******************************************************************************
     20            * FILE MDR32F9Qx_i2c.c
     21            */
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "MDR32F9Qx_i2c.h"
     25          #include "MDR32F9Qx_config.h"
     26          
     27          #define ASSERT_INFO_FILE_ID FILEID__MDR32F9X_I2C_C
     28          
     29          /** @addtogroup __MDR32F9Qx_StdPeriph_Driver MDR32F9Qx Standard Peripherial Driver
     30            * @{
     31            */
     32          
     33          /** @defgroup I2C I2C
     34            * @warning  This module can be used only for microcontroller series MDR1986VE9x.
     35            * @{
     36            */
     37          
     38          #if defined (USE_MDR1986VE9x)
     39          
     40          /** @defgroup I2C_Private_Functions I2C Private Functions
     41            * @{
     42            */
     43          
     44          /**
     45            * @brief  Resets the I2C peripheral registers to their default reset values.
     46            * @param  None.
     47            * @retval None.
     48            */

   \                                 In section .text, align 2, keep-with-next
     49          void I2C_DeInit(void)
     50          {
     51            MDR_I2C_TypeDef *I2Cx;
     52          
     53            I2Cx = MDR_I2C;
     54          
     55            I2Cx->CTR = 0;
   \                     I2C_DeInit:
   \   00000000   0x....             LDR.N    R0,??DataTable11  ;; 0x40050000
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6081             STR      R1,[R0, #+8]
     56            I2Cx->STA = 0;
   \   00000006   0x6101             STR      R1,[R0, #+16]
     57            I2Cx->CMD = I2C_CMD_CLRINT;
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x6181             STR      R1,[R0, #+24]
     58            I2Cx->PRL = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6001             STR      R1,[R0, #+0]
     59            I2Cx->PRH = 0;
   \   00000010   0x6041             STR      R1,[R0, #+4]
     60          }
   \   00000012   0x4770             BX       LR               ;; return
     61          
     62          /**
     63            * @brief  Initializes the I2C peripheral according to the specified
     64            *         parameters in the I2C_InitStruct.
     65            * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
     66            *         contains the configuration information for the specified I2C peripheral.
     67            * @retval None.
     68            */

   \                                 In section .text, align 2, keep-with-next
     69          void I2C_Init(const I2C_InitTypeDef* I2C_InitStruct)
     70          {
     71            MDR_I2C_TypeDef *I2Cx;
     72            uint32_t tmpreg_CTR;
     73            uint32_t tmpreg_PR;
     74          
     75            /* Check the parameters */
     76            assert_param(IS_I2C_SPEED(I2C_InitStruct->I2C_Speed));
     77            assert_param(IS_I2C_CLKDIV(I2C_InitStruct->I2C_ClkDiv));
     78          
     79            I2Cx = MDR_I2C;
     80          
     81            /* Form new values */
     82            tmpreg_CTR = I2Cx->CTR;
   \                     I2C_Init:
   \   00000000   0x....             LDR.N    R1,??DataTable11  ;; 0x40050000
   \   00000002   0x688A             LDR      R2,[R1, #+8]
     83          
     84            if ((I2C_InitStruct->I2C_Speed & I2C_SPEED_Msk) != I2C_SPEED_UP_TO_400KHz)
   \   00000004   0x7903             LDRB     R3,[R0, #+4]
   \   00000006   0x069B             LSLS     R3,R3,#+26
   \   00000008   0xBF4C             ITE      MI 
   \   0000000A   0xF042 0x0220      ORRMI    R2,R2,#0x20
   \   0000000E   0xF022 0x0220      BICPL    R2,R2,#0x20
     85            {
     86              tmpreg_CTR |= I2C_CTR_S_I2C;
     87            }
     88            else
     89            {
     90              tmpreg_CTR &= ~I2C_CTR_S_I2C;
     91            }
     92          
     93            /* Configure I2C registers with new values */
     94            I2Cx->CTR = tmpreg_CTR;
   \   00000012   0x608A             STR      R2,[R1, #+8]
     95          
     96            tmpreg_PR = I2C_InitStruct->I2C_ClkDiv;
   \   00000014   0x6800             LDR      R0,[R0, #+0]
     97            I2Cx->PRL = tmpreg_PR;
   \   00000016   0x6008             STR      R0,[R1, #+0]
     98            I2Cx->PRH = tmpreg_PR >> 8;
   \   00000018   0x0A00             LSRS     R0,R0,#+8
   \   0000001A   0x6048             STR      R0,[R1, #+4]
     99          }
   \   0000001C   0x4770             BX       LR               ;; return
    100          
    101          /**
    102            * @brief  Fills each I2C_InitStruct member with its default value.
    103            * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure which will
    104            *         be initialized.
    105            * @retval None.
    106            */

   \                                 In section .text, align 2, keep-with-next
    107          void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
    108          {
    109            /* Reset I2C initialization structure parameters values */
    110            I2C_InitStruct->I2C_Speed  = I2C_SPEED_UP_TO_400KHz;
   \                     I2C_StructInit:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6041             STR      R1,[R0, #+4]
    111            I2C_InitStruct->I2C_ClkDiv = 1;
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x6001             STR      R1,[R0, #+0]
    112          }
   \   00000008   0x4770             BX       LR               ;; return
    113          
    114          /**
    115            * @brief  Enables or disables the I2C peripheral.
    116            * @param  NewState: new state of the I2C peripheral.
    117            *         This parameter can be: ENABLE or DISABLE.
    118            * @retval None.
    119            */

   \                                 In section .text, align 2, keep-with-next
    120          void I2C_Cmd(FunctionalState NewState)
    121          {
    122            MDR_I2C_TypeDef *I2Cx;
    123            uint32_t tmpreg_CTR;
    124          
    125            /* Check the parameters */
    126            assert_param(IS_FUNCTIONAL_STATE(NewState));
    127          
    128            I2Cx = MDR_I2C;
    129          
    130            tmpreg_CTR = I2Cx->CTR;
   \                     I2C_Cmd:
   \   00000000   0x....             LDR.N    R1,??DataTable11_1  ;; 0x40050008
   \   00000002   0x680A             LDR      R2,[R1, #+0]
    131          
    132            /* Form new value */
    133            if (NewState != DISABLE)
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xBF14             ITE      NE 
   \   00000008   0xF042 0x0080      ORRNE    R0,R2,#0x80
   \   0000000C   0xF022 0x0080      BICEQ    R0,R2,#0x80
    134            {
    135              /* Enable I2C by setting the EN_I2C bit in the CTR register */
    136              tmpreg_CTR |= I2C_CTR_EN_I2C;
    137            }
    138            else
    139            {
    140              /* Disable I2C by resetting the EN_I2C bit in the CTR register */
    141              tmpreg_CTR &= ~I2C_CTR_EN_I2C;
    142            }
    143          
    144            /* Configure CTR register with new value */
    145            I2Cx->CTR = tmpreg_CTR;
   \   00000010   0x6008             STR      R0,[R1, #+0]
    146          }
   \   00000012   0x4770             BX       LR               ;; return
    147          
    148          /**
    149            * @brief  Enables or disables the I2C interrupts.
    150            * @param  NewState: new state of the I2C interrupts.
    151            *         This parameter can be: ENABLE or DISABLE.
    152            * @retval None.
    153            */

   \                                 In section .text, align 2, keep-with-next
    154          void I2C_ITConfig(FunctionalState NewState)
    155          {
    156            MDR_I2C_TypeDef *I2Cx;
    157            uint32_t tmpreg_CTR;
    158          
    159            /* Check the parameters */
    160            assert_param(IS_FUNCTIONAL_STATE(NewState));
    161          
    162            I2Cx = MDR_I2C;
    163          
    164            tmpreg_CTR = I2Cx->CTR;
   \                     I2C_ITConfig:
   \   00000000   0x....             LDR.N    R1,??DataTable11_1  ;; 0x40050008
   \   00000002   0x680A             LDR      R2,[R1, #+0]
    165          
    166            /* Form new value */
    167            if (NewState != DISABLE)
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xBF14             ITE      NE 
   \   00000008   0xF042 0x0040      ORRNE    R0,R2,#0x40
   \   0000000C   0xF022 0x0040      BICEQ    R0,R2,#0x40
    168            {
    169              /* Enable the I2C interrupts by setting the EN_INT bit in the CTR register */
    170              tmpreg_CTR |= I2C_CTR_EN_INT;
    171            }
    172            else
    173            {
    174              /* Disable the I2C interrupts by resetting the EN_INT bit in the CTR register */
    175              tmpreg_CTR &= ~I2C_CTR_EN_INT;
    176            }
    177          
    178            /* Configure CTR register with new value */
    179            I2Cx->CTR = tmpreg_CTR;
   \   00000010   0x6008             STR      R0,[R1, #+0]
    180          }
   \   00000012   0x4770             BX       LR               ;; return
    181          
    182          /**
    183            * @brief  Checks whether the I2C interrupt has occurred or not.
    184            * @param  None.
    185            * @retval The current state of I2C_STA_INT (SET or RESET).
    186            */

   \                                 In section .text, align 2, keep-with-next
    187          ITStatus I2C_GetITStatus(void)
    188          {
    189            MDR_I2C_TypeDef *I2Cx;
    190            ITStatus bitstatus;
    191          
    192            I2Cx = MDR_I2C;
    193          
    194            if ((I2Cx->STA & I2C_STA_INT) == I2C_STA_INT)
   \                     I2C_GetITStatus:
   \   00000000   0x....             LDR.N    R0,??DataTable11_2  ;; 0x40050010
   \   00000002   0x6800             LDR      R0,[R0, #+0]
    195            {
    196              bitstatus = SET;
    197            }
    198            else
    199            {
    200              bitstatus = RESET;
    201            }
    202          
    203            return bitstatus;
   \   00000004   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000008   0x4770             BX       LR               ;; return
    204          }
    205          
    206          /**
    207            * @brief  Clears the I2C_STA_INT interrupt pending bit.
    208            * @param  None.
    209            * @retval None.
    210            */

   \                                 In section .text, align 2, keep-with-next
    211          void I2C_ClearITPendingBit(void)
    212          {
    213            MDR_I2C_TypeDef *I2Cx;
    214          
    215            I2Cx = MDR_I2C;
    216          
    217            I2Cx->CMD |= I2C_CMD_CLRINT;
   \                     I2C_ClearITPendingBit:
   \   00000000   0x....             LDR.N    R0,??DataTable11_3  ;; 0x40050018
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000008   0x6001             STR      R1,[R0, #+0]
    218          }
   \   0000000A   0x4770             BX       LR               ;; return
    219          
    220          /**
    221            * @brief  Transmits the address byte to select the Slave device.
    222            * @param  Address: specifies the Slave address which will be transmitted.
    223            *         The Address[0] bit value is ignored. So only Address[7..1] bits
    224            *         are the seven-bit Slave address.
    225            * @param  Direction: specifies whether the I2C device will be a
    226            *         Transmitter or a Receiver. This parameter can be one of the
    227            *         following values:
    228            *           @arg I2C_Direction_Transmitter: Transmitter mode;
    229            *           @arg I2C_Direction_Receiver:    Receiver mode.
    230            * @retval None.
    231            */

   \                                 In section .text, align 2, keep-with-next
    232          void I2C_Send7bitAddress(uint8_t Address, uint32_t Direction)
    233          {
    234            MDR_I2C_TypeDef *I2Cx;
    235          
    236            assert_param(IS_I2C_DIRECTION(Direction));
    237          
    238            I2Cx = MDR_I2C;
    239          
    240            I2Cx->TXD = (Address & ~I2C_Direction_Msk) | Direction;
   \                     I2C_Send7bitAddress:
   \   00000000   0x....             LDR.N    R2,??DataTable11_4  ;; 0x40050014
   \   00000002   0x0840             LSRS     R0,R0,#+1
   \   00000004   0xEA51 0x0040      ORRS     R0,R1,R0, LSL #+1
   \   00000008   0x6010             STR      R0,[R2, #+0]
    241            I2Cx->CMD = I2C_CMD_START | I2C_CMD_WR;
   \   0000000A   0x2090             MOVS     R0,#+144
   \   0000000C   0x6050             STR      R0,[R2, #+4]
    242          }
   \   0000000E   0x4770             BX       LR               ;; return
    243          
    244          /**
    245            * @brief  Sends a byte through the I2C peripheral.
    246            * @param  ByteToSend: Byte to be transmitted.
    247            * @retval None.
    248            */

   \                                 In section .text, align 2, keep-with-next
    249          void I2C_SendByte(uint8_t ByteToSend)
    250          {
    251            MDR_I2C_TypeDef *I2Cx;
    252          
    253            I2Cx = MDR_I2C;
    254          
    255            I2Cx->TXD = ByteToSend;
   \                     I2C_SendByte:
   \   00000000   0x....             LDR.N    R1,??DataTable11_4  ;; 0x40050014
   \   00000002   0x6008             STR      R0,[R1, #+0]
    256            I2Cx->CMD = I2C_CMD_WR;
   \   00000004   0x2010             MOVS     R0,#+16
   \   00000006   0x6048             STR      R0,[R1, #+4]
    257          }
   \   00000008   0x4770             BX       LR               ;; return
    258          
    259          /**
    260            * @brief  Generates I2C communication STOP condition.
    261            * @param  None.
    262            * @retval None.
    263            */

   \                                 In section .text, align 2, keep-with-next
    264          void I2C_SendSTOP(void)
    265          {
    266            MDR_I2C_TypeDef *I2Cx;
    267          
    268            I2Cx = MDR_I2C;
    269          
    270            I2Cx->CMD = I2C_CMD_STOP;
   \                     I2C_SendSTOP:
   \   00000000   0x....             LDR.N    R0,??DataTable11_3  ;; 0x40050018
   \   00000002   0x2140             MOVS     R1,#+64
   \   00000004   0x6001             STR      R1,[R0, #+0]
    271          }
   \   00000006   0x4770             BX       LR               ;; return
    272          
    273          /**
    274            * @brief  Starts data receiving from Slave.
    275            * @param  Acknowlage: specifies the acknowlage state at end
    276            *         of data receiving. This parameter can be one of the
    277            *         following values:
    278            *           @arg I2C_Send_to_Slave_ACK:  Acknowlage (ACK);
    279            *           @arg I2C_Send_to_Slave_NACK: Not Acknowlage (NACK).
    280            * @retval None.
    281            */

   \                                 In section .text, align 2, keep-with-next
    282          void I2C_StartReceiveData(uint32_t Acknowlage)
    283          {
    284            MDR_I2C_TypeDef *I2Cx;
    285          
    286            assert_param(IS_I2C_SEND_ACKNOWLAGE(Acknowlage));
    287          
    288            I2Cx = MDR_I2C;
    289          
    290            I2Cx->CMD = I2C_CMD_RD | Acknowlage;
   \                     I2C_StartReceiveData:
   \   00000000   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000004   0x....             LDR.N    R1,??DataTable11_3  ;; 0x40050018
   \   00000006   0x6008             STR      R0,[R1, #+0]
    291          }
   \   00000008   0x4770             BX       LR               ;; return
    292          
    293          /**
    294            * @brief  Returns received from Slave data byte.
    295            * @param  None.
    296            * @retval Received from data byte.
    297            */

   \                                 In section .text, align 2, keep-with-next
    298          uint8_t I2C_GetReceivedData(void)
    299          {
    300            MDR_I2C_TypeDef *I2Cx;
    301          
    302            I2Cx = MDR_I2C;
    303          
    304            return I2Cx->RXD;
   \                     I2C_GetReceivedData:
   \   00000000   0x....             LDR.N    R0,??DataTable11_5  ;; 0x4005000c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x4770             BX       LR               ;; return
    305          }
    306          
    307          /**
    308            * @brief  Checks whether the last I2C Event is equal to the one passed
    309            *         as parameter.
    310            * @param  Event: specifies the event to be checked.
    311            *         This parameter can be one of the values discribed in
    312            *         @ref I2C_EVENTS or user specified combination of flags
    313            *         (@ref I2C_FLAGS).
    314            *
    315            * @note:  For detailed description of Events, please refer to section
    316            *         @ref I2C_EVENTS in MDR32F9Qx_i2c.h file.
    317            *
    318            * @retval An ErrorStatus enumuration value:
    319            *         - SUCCESS: Last event is equal to the Event;
    320            *         - ERROR: Last event is different from the Event.
    321            */

   \                                 In section .text, align 2, keep-with-next
    322          ErrorStatus I2C_CheckEvent(uint32_t Event)
    323          {
   \                     I2C_CheckEvent:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    324            ErrorStatus errstatus;
    325          
    326            assert_param(IS_I2C_FLAGS(Event));
    327          
    328            if ((I2C_GetLastEvent() & Event) == Event)
   \   00000004   0x.... 0x....      BL       I2C_GetLastEvent
   \   00000008   0x4020             ANDS     R0,R4,R0
   \   0000000A   0x42A0             CMP      R0,R4
   \   0000000C   0xD101             BNE.N    ??I2C_CheckEvent_0
    329            {
    330              errstatus = SUCCESS;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xBD10             POP      {R4,PC}
    331            }
    332            else
    333            {
    334              errstatus = ERROR;
   \                     ??I2C_CheckEvent_0:
   \   00000012   0x2000             MOVS     R0,#+0
    335            }
    336          
    337            return errstatus;
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    338          }
    339          
    340          /**
    341            * @brief  Returns the last I2C Event.
    342            * @param  None.
    343            * @retval The last event
    344           *
    345            * @note:  For detailed description of Events, please refer to section
    346            *         @ref I2C_EVENTS in MDR32F9Qx_i2c.h file.
    347            */

   \                                 In section .text, align 2, keep-with-next
    348          uint32_t I2C_GetLastEvent(void)
    349          {
    350            MDR_I2C_TypeDef *I2Cx;
    351            uint32_t event;
    352          
    353            I2Cx = MDR_I2C;
    354          
    355            event = I2Cx->CMD | (I2Cx->STA << 8);
   \                     I2C_GetLastEvent:
   \   00000000   0x....             LDR.N    R0,??DataTable11_2  ;; 0x40050010
   \   00000002   0x6881             LDR      R1,[R0, #+8]
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xEA41 0x2000      ORR      R0,R1,R0, LSL #+8
    356            event |= ~event << 16;
    357          
    358            return event;
   \   0000000A   0x43C1             MVNS     R1,R0
   \   0000000C   0xEA40 0x4001      ORR      R0,R0,R1, LSL #+16
   \   00000010   0x4770             BX       LR               ;; return
    359          }
    360          
    361          /**
    362            * @brief  Checks whether the specified I2C flag is set or not.
    363            * @param  Flag: specifies the flag to check.
    364            *         This parameter can be one of the values:
    365            *           @arg I2C_FLAG_CMD_NACK           Master will be send NACK after reading from Slave;
    366            *           @arg I2C_FLAG_CMD_ACK            Master will be send ACK after reading from Slave;
    367            *           @arg I2C_FLAG_CMD_WR             The Master to Slave transfer in progress;
    368            *           @arg I2C_FLAG_CMD_nWR            No the Master to Slave transfer;
    369            *           @arg I2C_FLAG_CMD_RD             The Slave to Master transfer in progress;
    370            *           @arg I2C_FLAG_CMD_nRD            No the Slave to Master transfer;
    371            *           @arg I2C_FLAG_STOP               STOP condition transfer is selected;
    372            *           @arg I2C_FLAG_nSTOP              STOP condition is resetted;
    373            *           @arg I2C_FLAG_START              START condition transfer is selected;
    374            *           @arg I2C_FLAG_nSTART             START condition is resetted;
    375            *           @arg I2C_FLAG_IRQ                The I2C interrupt pending flag is set;
    376            *           @arg I2C_FLAG_nIRQ               The I2C interrupt pending flag is cleared;
    377            *           @arg I2C_FLAG_TRANS              transfer in progress;
    378            *           @arg I2C_FLAG_nTRANS             No transfer;
    379            *           @arg I2C_FLAG_LOST_ARB           Arbitration is lost at last byte transfer;
    380            *           @arg I2C_FLAG_ARB_OK             Arbitration is Ok at last byte transfer;
    381            *           @arg I2C_FLAG_BUS_BUSY           Some device holds the I2C bus;
    382            *           @arg I2C_FLAG_BUS_FREE           I2C bus is free (SDA = SCL = 1);
    383            *           @arg I2C_FLAG_SLAVE_NACK         Not Acknowledge (NACK) received from Slave;
    384            *           @arg I2C_FLAG_SLAVE_ACK          Acknowledge (ACK) received from Slave.
    385            * @retval The new state of I2C_FLAG (SET or RESET).
    386            */

   \                                 In section .text, align 2, keep-with-next
    387          FlagStatus I2C_GetFlagStatus(uint32_t Flag)
    388          {
   \                     I2C_GetFlagStatus:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    389            FlagStatus bitstatus;
    390          
    391            assert_param(IS_I2C_FLAG(Flag));
    392          
    393            if ((I2C_GetLastEvent() & Flag) != 0)
   \   00000004   0x.... 0x....      BL       I2C_GetLastEvent
   \   00000008   0x4020             ANDS     R0,R4,R0
   \   0000000A   0xBF18             IT       NE 
   \   0000000C   0x2001             MOVNE    R0,#+1
    394            {
    395              bitstatus = SET;
    396            }
    397            else
    398            {
    399              bitstatus = RESET;
    400            }
    401          
    402            return bitstatus;
   \   0000000E   0xB2C0             UXTB     R0,R0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    403          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x40050000         DC32     0x40050000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x40050008         DC32     0x40050008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x40050010         DC32     0x40050010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x40050018         DC32     0x40050018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x40050014         DC32     0x40050014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x4005000C         DC32     0x4005000c
    404          
    405          /** @} */ /* End of group I2C_Private_Functions */
    406          
    407          #endif /* #if defined (USE_MDR1986VE9x) */
    408          
    409          /** @} */ /* End of group I2C */
    410          
    411          /** @} */ /* End of group __MDR32F9Qx_StdPeriph_Driver */
    412          
    413          /******************* (C) COPYRIGHT 2010 Phyton *********************************
    414          *
    415          * END OF FILE MDR32F9Qx_i2c.c */
    416          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  I2C_CheckEvent
             8 -> I2C_GetLastEvent
        0  I2C_ClearITPendingBit
        0  I2C_Cmd
        0  I2C_DeInit
        8  I2C_GetFlagStatus
             8 -> I2C_GetLastEvent
        0  I2C_GetITStatus
        0  I2C_GetLastEvent
        0  I2C_GetReceivedData
        0  I2C_ITConfig
        0  I2C_Init
        0  I2C_Send7bitAddress
        0  I2C_SendByte
        0  I2C_SendSTOP
        0  I2C_StartReceiveData
        0  I2C_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
      22  I2C_CheckEvent
      12  I2C_ClearITPendingBit
      20  I2C_Cmd
      20  I2C_DeInit
      18  I2C_GetFlagStatus
      10  I2C_GetITStatus
      18  I2C_GetLastEvent
       8  I2C_GetReceivedData
      20  I2C_ITConfig
      30  I2C_Init
      16  I2C_Send7bitAddress
      10  I2C_SendByte
       8  I2C_SendSTOP
      10  I2C_StartReceiveData
      10  I2C_StructInit

 
 256 bytes in section .text
 
 256 bytes of CODE memory

Errors: none
Warnings: 1
