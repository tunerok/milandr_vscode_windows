###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:25:57 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\MDR32F9Qx_it.c                           #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\MDR32F9Qx_it.c --preprocess              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\MDR32F9Qx_it.lst #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\MDR32F9Qx_it.o    #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR1986VE91_Eval\src\MDR32F9Qx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    MDR32F9Qx_it.c
      4            * @author  Phyton Application Team
      5            * @version V2.0.0
      6            * @date    22.07.2011
      7            * @brief   Main Interrupt Service Routines.
      8            ******************************************************************************
      9            * <br><br>
     10            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     11            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     12            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY
     13            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     14            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     15            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     16            *
     17            * <h2><center>&copy; COPYRIGHT 2011 Phyton</center></h2>
     18            */
     19          /* Includes ------------------------------------------------------------------*/
     20          #include "MDR32F9Qx_config.h"
     21          #include <MDR32F9Qx_uart.h>
     22          #include <MDR32F9Qx_adc.h>
     23          #include <MDR32F9Qx_bkp.h>
     24          #include <MDR32F9Qx_port.h>
     25          #include <MDR32F9Qx_it.h>
     26          #include <MDR32F9Qx_dma.h>
     27          #include <MDR32F9Qx_timer.h>
     28          #include "leds.h"
     29          #include "time.h"
     30          #include "lowpower.h"
     31          
     32          

   \                                 In section .bss, align 4
     33          int tmp ;
   \                     tmp:
   \   00000000                      DS8 4
     34          extern __IO uint32_t H_Level;
     35          
     36          extern DMA_ChannelInitTypeDef DMA_InitStr;
     37          extern DMA_CtrlDataInitTypeDef DMA_PriCtrlStr;
     38          extern DMA_CtrlDataInitTypeDef DMA_AltCtrlStr;
     39          
     40          extern uint32_t uart2_IT_TX_flag;
     41          
     42          /** @addtogroup __MDR32F9Qx_Eval_Demo MDR32F9Qx Demonstration Example
     43            * @{
     44            */
     45          
     46          /** @addtogroup Interrupt_Service_Routines Interrupt Service Routines
     47            * @{
     48            */
     49          
     50          /** @addtogroup Interrupt_Service_Private_Variables Interrupt Service Private Variables
     51            * @{
     52            */
     53          
     54          /* Timer counter */

   \                                 In section .bss, align 4
     55          vuint32_t TimerCounter = 0;
   \                     TimerCounter:
   \   00000000                      DS8 4
     56          
     57          /* Current value of the ADC1_RESULT register */

   \                                 In section .bss, align 4
     58          vuint32_t ADC1_Value = 0;
   \                     ADC1_Value:
   \   00000000                      DS8 4
     59          
     60          /* Pointers to UART send/receive interrupt handlers */

   \                                 In section .bss, align 4
     61          tUARTFunc pfUARTSenderFunc = 0;
   \                     pfUARTSenderFunc:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     62          tUARTFunc pfUARTReceiverFunc = 0;
   \                     pfUARTReceiverFunc:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     63          tUARTLineStateFunc pfUARTLineStateFunc = 0;
   \                     pfUARTLineStateFunc:
   \   00000000                      DS8 4
     64          
     65          /* Stop mode flag */

   \                                 In section .bss, align 4
     66          vuint32_t STOPModeStatus = 0;
   \                     STOPModeStatus:
   \   00000000                      DS8 4
     67          
     68          /* Alarm flag */
     69          vuint32_t AlarmSetStatus = 0;
   \                     AlarmSetStatus:
   \   00000004                      DS8 4
     70          
     71          /** @} */ /* End of group Interrupt_Service_Private_Variables */
     72          
     73          /** @defgroup Interrupt_Service_Private_Functions Interrupt Service Private Functions
     74            * @{
     75            */
     76          
     77          
     78          /*******************************************************************************
     79          * Function Name  : SysTick_Handler
     80          * Description    : This function handles SysTick Handler.
     81          * Input          : None
     82          * Output         : None
     83          * Return         : None
     84          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     85          void SysTick_Handler(void)
     86          {
     87            if (TimerCounter)
   \                     SysTick_Handler:
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xB111             CBZ.N    R1,??SysTick_Handler_0
     88            {
     89              TimerCounter--;
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x1E49             SUBS     R1,R1,#+1
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     90            }
     91          }
   \                     ??SysTick_Handler_0:
   \   0000000C   0x4770             BX       LR               ;; return
     92          
     93          /*******************************************************************************
     94          * Function Name  : UARTx_HandlerWork, UART1_IRQHandler, UART2_IRQHandler
     95          * Description    : These functions handle UARTx global interrupt requests.
     96          * Input          : None
     97          * Output         : None
     98          * Return         : None
     99          *******************************************************************************/
    100          static void UARTx_HandlerWork(MDR_UART_TypeDef* UARTx)
    101          {
    102            uint32_t tmp_ris = UARTx->RIS;
    103          
    104            /* Clear all pending bits except for UART_IT_RX */
    105            UARTx->ICR |= (tmp_ris & (~UART_IT_RX));
    106          
    107            /* Receive handler */
    108            if ((tmp_ris & UART_IT_RX) && pfUARTReceiverFunc != 0)
    109            {
    110              pfUARTReceiverFunc();
    111            }
    112          
    113            /* Transmit handler */
    114            if ((tmp_ris & UART_IT_TX) && pfUARTSenderFunc != 0)
    115            {
    116              pfUARTSenderFunc();
    117            }
    118          
    119            /* Break/error handler */
    120            if (pfUARTLineStateFunc != 0)
    121            {
    122              tmp_ris &= UART_LINE_STATE_EVENTS;
    123              if (tmp_ris)
    124              {
    125                pfUARTLineStateFunc(tmp_ris);
    126              }
    127            }
    128          }
    129          

   \                                 In section .text, align 2, keep-with-next
    130          void UART1_IRQHandler(void)
    131          {
    132            //UARTx_HandlerWork(MDR_UART1);
    133          }
   \                     UART1_IRQHandler:
   \   00000000   0x4770             BX       LR               ;; return
    134          

   \                                 In section .text, align 2, keep-with-next
    135          void UART2_IRQHandler(void)
    136          {
   \                     UART2_IRQHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    137          	uint32_t temp_1;
    138          	
    139            //UARTx_HandlerWork(MDR_UART2);
    140            if (UART_GetITStatusMasked(MDR_UART2, UART_IT_RX) == SET)
   \   00000002   0x....             LDR.N    R4,??DataTable5_1  ;; 0x40038000
   \   00000004   0x2110             MOVS     R1,#+16
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       UART_GetITStatusMasked
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD10A             BNE.N    ??UART2_IRQHandler_0
    141            {
    142          		temp_1 = MDR_UART2->DR;
   \   00000010   0x6820             LDR      R0,[R4, #+0]
    143          		
    144          		UART_ClearITPendingBit(MDR_UART2, UART_IT_RX);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       UART_ClearITPendingBit
    145          
    146          		while (UART_GetFlagStatus (MDR_UART2, UART_FLAG_TXFE)!= SET)
   \                     ??UART2_IRQHandler_1:
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       UART_GetFlagStatus
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD1F9             BNE.N    ??UART2_IRQHandler_1
    147              {
    148              }
    149          		//UART_SendData (MDR_UART2,0x44);
    150          		
    151            }
    152          }
   \                     ??UART2_IRQHandler_0:
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    153          
    154          
    155          /*******************************************************************************
    156          * Function Name  : ADC_IRQHandler
    157          * Description    : This function handles ADC global interrupt request.
    158          * Input          : None
    159          * Output         : None
    160          * Return         : None
    161          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    162          void ADC_IRQHandler(void)
    163          {
   \                     ADC_IRQHandler:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    164            if(ADC1_GetFlagStatus(ADCx_IT_OUT_OF_RANGE) == SET)
   \   00000002   0x....             LDR.N    R5,??DataTable5_2  ;; 0x400c0000
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       ADC1_GetFlagStatus
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xF44F 0x6180      MOV      R1,#+1024
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0xD102             BNE.N    ??ADC_IRQHandler_0
    165            {
    166              /* Turns LED1 On */
    167              PORT_SetBits(MDR_PORTD, PORT_Pin_10);
   \   00000014   0x.... 0x....      BL       PORT_SetBits
   \   00000018   0xE001             B.N      ??ADC_IRQHandler_1
    168            }
    169            else
    170            {
    171              /* Turns LED1 Off */
    172              PORT_ResetBits(MDR_PORTD, PORT_Pin_10);
   \                     ??ADC_IRQHandler_0:
   \   0000001A   0x.... 0x....      BL       PORT_ResetBits
    173            }
    174            tmp = MDR_ADC->ADC1_RESULT & 0x0FFF;
   \                     ??ADC_IRQHandler_1:
   \   0000001E   0x....             LDR.N    R0,??DataTable5_3
   \   00000020   0x....             LDR.N    R4,??DataTable5_4  ;; 0x40088018
   \   00000022   0x6821             LDR      R1,[R4, #+0]
   \   00000024   0x0509             LSLS     R1,R1,#+20
   \   00000026   0x0D09             LSRS     R1,R1,#+20
   \   00000028   0x6001             STR      R1,[R0, #+0]
    175            if(tmp > H_Level)
   \   0000002A   0x....             LDR.N    R1,??DataTable5_5
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x4281             CMP      R1,R0
   \   00000032   0xF44F 0x6100      MOV      R1,#+2048
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0xD202             BCS.N    ??ADC_IRQHandler_2
    176            {
    177              /* Turns LED2 On */
    178              PORT_SetBits(MDR_PORTD, PORT_Pin_11);
   \   0000003A   0x.... 0x....      BL       PORT_SetBits
   \   0000003E   0xE001             B.N      ??ADC_IRQHandler_3
    179            }
    180            else
    181            {
    182              /* Turns LED2 Off */
    183              PORT_ResetBits(MDR_PORTD, PORT_Pin_11);
   \                     ??ADC_IRQHandler_2:
   \   00000040   0x.... 0x....      BL       PORT_ResetBits
    184            }
    185            /* Clear ADC1 OUT_OF_RANGE interrupt bit */
    186            MDR_ADC->ADC1_STATUS = (ADCx_IT_END_OF_CONVERSION | ADCx_IT_OUT_OF_RANGE)<<2;
   \                     ??ADC_IRQHandler_3:
   \   00000044   0x2018             MOVS     R0,#+24
   \   00000046   0x60A0             STR      R0,[R4, #+8]
    187          }
   \   00000048   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    188          
    189          /*******************************************************************************
    190          * Function Name  : BACKUP_IRQHandler
    191          * Description    : This function handles BACKUP global interrupt request.
    192          * Input          : None
    193          * Output         : None
    194          * Return         : None
    195          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    196          void BACKUP_IRQHandler(void)
    197          {
   \                     BACKUP_IRQHandler:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    198            uint32_t tmp;
    199            vuint32_t i, j;
    200          
    201            if (BKP_RTC_GetFlagStatus(BKP_RTC_FLAG_ALRF) == SET)
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       BKP_RTC_GetFlagStatus
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD109             BNE.N    ??BACKUP_IRQHandler_0
    202            {
    203              if (STOPModeStatus)
   \   0000000E   0x....             LDR.N    R0,??DataTable5_6
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xB399             CBZ.N    R1,??BACKUP_IRQHandler_1
    204              {
    205                /* Wake-up from STOP mode is handled by an RTC Alarm */
    206                /* Disable SLEEPONEXIT mode */
    207                tmp = SCB->SCR;
   \   00000014   0x....             LDR.N    R1,??DataTable5_7  ;; 0xe000ed10
   \   00000016   0x680A             LDR      R2,[R1, #+0]
    208                tmp &= ~SCB_SCR_SLEEPONEXIT_Msk;
    209                SCB->SCR = tmp;
   \   00000018   0xF022 0x0202      BIC      R2,R2,#0x2
   \   0000001C   0x600A             STR      R2,[R1, #+0]
    210          
    211                STOPModeStatus = 0;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6001             STR      R1,[R0, #+0]
    212              }
    213              else
    214                /* RTC Alarm handling */
    215                if (AlarmSetStatus)
    216                {
    217                  for (i = 0; i < 5; i++)
    218                  {
    219                    PORT_SetBits(LEDs_PORT, LEDs_PINs);
    220                    for (j = 0; j < 300000; j++)
    221                    {
    222                    }
    223                    PORT_ResetBits(LEDs_PORT, LEDs_PINs);
    224                    for (j = 0; j < 300000; j++)
    225                    {
    226                    }
    227                  }
    228                }
    229            }
    230            if (BKP_RTC_GetFlagStatus(BKP_RTC_FLAG_SECF) == SET)
   \                     ??BACKUP_IRQHandler_0:
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x.... 0x....      BL       BKP_RTC_GetFlagStatus
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xD126             BNE.N    ??BACKUP_IRQHandler_2
    231            {
    232              BKP_RTC_ITConfig(BKP_RTC_IT_SECF, DISABLE);
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x2010             MOVS     R0,#+16
   \   00000030   0x.... 0x....      BL       BKP_RTC_ITConfig
    233          
    234              /* If counter is equal to 86339: one day was elapsed */
    235              tmp = BKP_RTC_GetCounter();
   \   00000034   0x.... 0x....      BL       BKP_RTC_GetCounter
    236              if ((tmp / 3600 == 23) &&
    237                  (((tmp % 3600) / 60) == 59) &&
    238                  (((tmp % 3600) % 60) == 59))
   \   00000038   0xF44F 0x6161      MOV      R1,#+3600
   \   0000003C   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000040   0x2A17             CMP      R2,#+23
   \   00000042   0xBF01             ITTTT    EQ 
   \   00000044   0xFB01 0x0012      MLSEQ    R0,R1,R2,R0
   \   00000048   0x213C             MOVEQ    R1,#+60
   \   0000004A   0xFBB0 0xF2F1      UDIVEQ   R2,R0,R1
   \   0000004E   0x2A3B             CMPEQ    R2,#+59
   \   00000050   0xD10C             BNE.N    ??BACKUP_IRQHandler_3
   \   00000052   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000056   0x283B             CMP      R0,#+59
   \   00000058   0xD108             BNE.N    ??BACKUP_IRQHandler_3
    239              {
    240                /* Wait until last write operation on RTC registers has finished */
    241                BKP_RTC_WaitForUpdate();
   \   0000005A   0x.... 0x....      BL       BKP_RTC_WaitForUpdate
    242                /* Reset counter value */
    243                BKP_RTC_SetCounter(0);
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      BL       BKP_RTC_SetCounter
    244                /* Wait until last write operation on RTC registers has finished */
    245                BKP_RTC_WaitForUpdate();
   \   00000064   0x.... 0x....      BL       BKP_RTC_WaitForUpdate
    246          
    247                /* Increment the date */
    248                Date_Update();
   \   00000068   0x.... 0x....      BL       Date_Update
    249              }
    250              BKP_RTC_ITConfig(BKP_RTC_IT_SECF, ENABLE);
   \                     ??BACKUP_IRQHandler_3:
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x2010             MOVS     R0,#+16
   \   00000070   0xB003             ADD      SP,SP,#+12
   \   00000072   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   00000076   0x.... 0x....      B.W      BKP_RTC_ITConfig
    251            }
    252          }
   \                     ??BACKUP_IRQHandler_2:
   \   0000007A   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
   \                     ??BACKUP_IRQHandler_1:
   \   0000007C   0x6840             LDR      R0,[R0, #+4]
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD0CF             BEQ.N    ??BACKUP_IRQHandler_0
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x9001             STR      R0,[SP, #+4]
   \   00000086   0x....             LDR.N    R4,??DataTable5_8  ;; 0x493e0
   \   00000088   0x....             LDR.N    R5,??DataTable5_2  ;; 0x400c0000
   \   0000008A   0xE008             B.N      ??BACKUP_IRQHandler_4
   \                     ??BACKUP_IRQHandler_5:
   \   0000008C   0x9800             LDR      R0,[SP, #+0]
   \   0000008E   0x1C40             ADDS     R0,R0,#+1
   \                     ??BACKUP_IRQHandler_6:
   \   00000090   0x9000             STR      R0,[SP, #+0]
   \   00000092   0x9800             LDR      R0,[SP, #+0]
   \   00000094   0x42A0             CMP      R0,R4
   \   00000096   0xD3F9             BCC.N    ??BACKUP_IRQHandler_5
   \   00000098   0x9801             LDR      R0,[SP, #+4]
   \   0000009A   0x1C40             ADDS     R0,R0,#+1
   \   0000009C   0x9001             STR      R0,[SP, #+4]
   \                     ??BACKUP_IRQHandler_4:
   \   0000009E   0x9801             LDR      R0,[SP, #+4]
   \   000000A0   0x2805             CMP      R0,#+5
   \   000000A2   0xD2BE             BCS.N    ??BACKUP_IRQHandler_0
   \   000000A4   0xF44F 0x41F8      MOV      R1,#+31744
   \   000000A8   0x4628             MOV      R0,R5
   \   000000AA   0x.... 0x....      BL       PORT_SetBits
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0xE001             B.N      ??BACKUP_IRQHandler_7
   \                     ??BACKUP_IRQHandler_8:
   \   000000B2   0x9800             LDR      R0,[SP, #+0]
   \   000000B4   0x1C40             ADDS     R0,R0,#+1
   \                     ??BACKUP_IRQHandler_7:
   \   000000B6   0x9000             STR      R0,[SP, #+0]
   \   000000B8   0x9800             LDR      R0,[SP, #+0]
   \   000000BA   0x42A0             CMP      R0,R4
   \   000000BC   0xD3F9             BCC.N    ??BACKUP_IRQHandler_8
   \   000000BE   0xF44F 0x41F8      MOV      R1,#+31744
   \   000000C2   0x4628             MOV      R0,R5
   \   000000C4   0x.... 0x....      BL       PORT_ResetBits
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0xE7E1             B.N      ??BACKUP_IRQHandler_6
    253          

   \                                 In section .text, align 2, keep-with-next
    254          void DMA_IRQHandler(void)
    255          {
   \                     DMA_IRQHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    256          	PORT_SetBits(MDR_PORTD, PORT_Pin_14);
   \   00000002   0x....             LDR.N    R4,??DataTable5_2  ;; 0x400c0000
   \   00000004   0xF44F 0x4180      MOV      R1,#+16384
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       PORT_SetBits
    257            /* Reconfigure the inactive DMA data structure*/
    258            if((MDR_DMA->CHNL_PRI_ALT_SET & (1<<DMA_Channel_TIM1)) == (0<<DMA_Channel_TIM1))
   \   0000000E   0x....             LDR.N    R1,??DataTable5_9
   \   00000010   0x....             LDR.N    R0,??DataTable5_10  ;; 0x40028030
   \   00000012   0x6802             LDR      R2,[R0, #+0]
   \   00000014   0x0552             LSLS     R2,R2,#+21
   \   00000016   0xBF58             IT       PL 
   \   00000018   0x....             LDRPL.N  R0,??DataTable5_11
    259            {
    260              DMA_AltCtrlStr.DMA_CycleSize = 32;
   \   0000001A   0xD503             BPL.N    ??DMA_IRQHandler_0
    261              DMA_Init(DMA_Channel_TIM1, &DMA_InitStr);
    262          		  // DMA_CtrlInit(DMA_Channel_TIM1, DMA_CTRL_DATA_ALTERNATE,  &DMA_AltCtrlStr);
    263          
    264            }
    265            else if((MDR_DMA->CHNL_PRI_ALT_SET & (1<<DMA_Channel_TIM1)) == (1<<DMA_Channel_TIM1))
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x0540             LSLS     R0,R0,#+21
   \   00000020   0xD505             BPL.N    ??DMA_IRQHandler_1
    266            {
    267              DMA_PriCtrlStr.DMA_CycleSize = 32;
   \   00000022   0x....             LDR.N    R0,??DataTable5_12
   \                     ??DMA_IRQHandler_0:
   \   00000024   0x2220             MOVS     R2,#+32
   \   00000026   0x6182             STR      R2,[R0, #+24]
    268              DMA_Init(DMA_Channel_TIM1, &DMA_InitStr);
   \   00000028   0x200A             MOVS     R0,#+10
   \   0000002A   0x.... 0x....      BL       DMA_Init
    269          		  // DMA_CtrlInit(DMA_Channel_TIM1, DMA_CTRL_DATA_PRIMARY, &DMA_PriCtrlStr);
    270          
    271            }
    272          			PORT_ResetBits(MDR_PORTD, PORT_Pin_14);
   \                     ??DMA_IRQHandler_1:
   \   0000002E   0xF44F 0x4180      MOV      R1,#+16384
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0xE8BD 0x4010      POP      {R4,LR}
   \   00000038   0x.... 0x....      B.W      PORT_ResetBits
    273          }
    274          

   \                                 In section .text, align 2, keep-with-next
    275          void Timer1_IRQHandler(void)
    276          {
   \                     Timer1_IRQHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    277          	  if (TIMER_GetITStatus(MDR_TIMER1, TIMER_STATUS_CNT_ARR) == SET)
   \   00000002   0x....             LDR.N    R4,??DataTable5_13  ;; 0x40070000
   \   00000004   0x2102             MOVS     R1,#+2
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       TIMER_GetITStatus
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD103             BNE.N    ??Timer1_IRQHandler_0
    278          		{		
    279          		//TIMER_ClearITPendingBit(MDR_TIMER1, TIMER_STATUS_CNT_ARR);
    280          			  MDR_TIMER1->STATUS &= ~TIMER_STATUS_CNT_ARR;
   \   00000010   0x6D60             LDR      R0,[R4, #+84]
   \   00000012   0xF020 0x0002      BIC      R0,R0,#0x2
   \   00000016   0x6560             STR      R0,[R4, #+84]
    281          			
    282          			/*while (UART_GetFlagStatus (MDR_UART2, UART_FLAG_TXFE)!= SET)
    283          			{
    284          			}
    285          			UART_SendData (MDR_UART2,0x35);*/
    286          		}
    287          }
   \                     ??Timer1_IRQHandler_0:
   \   00000018   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     TimerCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x400C0000         DC32     0x400c0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     tmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40088018         DC32     0x40088018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     H_Level

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     STOPModeStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x000493E0         DC32     0x493e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     DMA_InitStr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x40028030         DC32     0x40028030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     DMA_AltCtrlStr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     DMA_PriCtrlStr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x40070000         DC32     0x40070000
    288          
    289          /** @} */ /* End of group Interrupt_Service_Private_Functions */
    290          
    291          /** @} */ /* End of group Interrupt_Service_Routines */
    292          
    293          /** @} */ /* End of group __MDR32F9Qx_Eval_Demo */
    294          
    295          /******************* (C) COPYRIGHT 2011 Phyton *********************************
    296          *
    297          * END OF FILE MDR32F9Qx_it.c */
    298          
    299          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  ADC_IRQHandler
             16 -> ADC1_GetFlagStatus
             16 -> PORT_ResetBits
             16 -> PORT_SetBits
       24  BACKUP_IRQHandler
             24 -> BKP_RTC_GetCounter
             24 -> BKP_RTC_GetFlagStatus
              0 -> BKP_RTC_ITConfig
             24 -> BKP_RTC_ITConfig
             24 -> BKP_RTC_SetCounter
             24 -> BKP_RTC_WaitForUpdate
             24 -> Date_Update
             24 -> PORT_ResetBits
             24 -> PORT_SetBits
        8  DMA_IRQHandler
              8 -> DMA_Init
              0 -> PORT_ResetBits
              8 -> PORT_SetBits
        0  SysTick_Handler
        8  Timer1_IRQHandler
              8 -> TIMER_GetITStatus
        0  UART1_IRQHandler
        8  UART2_IRQHandler
              8 -> UART_ClearITPendingBit
              8 -> UART_GetFlagStatus
              8 -> UART_GetITStatusMasked


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ADC1_Value
      74  ADC_IRQHandler
     204  BACKUP_IRQHandler
      60  DMA_IRQHandler
       8  STOPModeStatus
          AlarmSetStatus
      14  SysTick_Handler
      26  Timer1_IRQHandler
       4  TimerCounter
       2  UART1_IRQHandler
      40  UART2_IRQHandler
       4  pfUARTLineStateFunc
       4  pfUARTReceiverFunc
       4  pfUARTSenderFunc
       4  tmp

 
  32 bytes in section .bss
 476 bytes in section .text
 
 476 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: 2
