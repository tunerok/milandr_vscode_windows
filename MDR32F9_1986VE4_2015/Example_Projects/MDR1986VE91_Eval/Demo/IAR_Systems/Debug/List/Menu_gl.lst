###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:26:00 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu_gl.c                                #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu_gl.c --preprocess                   #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\Menu_gl.lst      #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\Menu_gl.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR1986VE91_Eval\src\Menu_gl.c
      1          /**
      2            ******************************************************************************
      3            * @file    Menu_gl.c
      4            * @author  Phyton Application Team
      5            * @version V3.0.0
      6            * @date    10.09.2011
      7            * @brief   This file contains all the "Graphics" menu handlers
      8            ******************************************************************************
      9            * <br><br>
     10            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     11            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     12            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY
     13            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     14            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     15            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     16            *
     17            * <h2><center>&copy; COPYRIGHT 2011 Phyton</center></h2>
     18            */
     19          
     20          /* Includes ------------------------------------------------------------------*/
     21          #include <MDR32F9Qx_adc.h>
     22          #include "MDR32F9Qx_board.h"
     23          #include "Menu.h"
     24          #include "Menu_items.h"
     25          #include "gl.h"
     26          #include "lcd.h"
     27          #include "joystick.h"
     28          #include "systick.h"
     29          #include "text.h"
     30          #include "adc.h"
     31          
     32          /** @addtogroup __MDR32F9Qx_Eval_Demo MDR32F9Qx Demonstration Example
     33            * @{
     34            */
     35          
     36          /** @addtogroup Menu Menu
     37            * @{
     38            */
     39          
     40          /** @addtogroup Menu_Graphics Menu Graphics
     41            * @{
     42            */
     43          
     44          
     45          /** @defgroup Menu_Graphics_Private_Constants Menu Graphics Private Constants
     46            * @{
     47            */
     48          
     49          /** @} */ /* End of group Menu_Graphics_Private_Constants */
     50          
     51          /** @addtogroup Menu_Graphics_Private_Functions Menu Graphics Private Functions
     52            * @{
     53            */
     54          
     55          /** @addtogroup Menu_Graphics_Elements Menu Graphics Elements
     56            * @{
     57            */
     58          
     59          /*******************************************************************************
     60          * Function Name  : DisplayTriangle
     61          * Description    : Draws unfilled right triangle
     62          * Input          : up angle õ-coordinate
     63          *                : up angle y-coordinate
     64          *                : side - cathetus length, in pixels
     65          * Output         : None
     66          * Return         : None
     67          *******************************************************************************/
     68          static void DisplayTriangle (int32_t x, int32_t y, int32_t side)
     69          {
     70            LCD_Line(x, y, x + side, y);
     71            LCD_Line(x + side, y, x + side, y + side);
     72            LCD_Line(x, y, x + side, y + side);
     73          }
     74          
     75          /*******************************************************************************
     76          * Function Name  : DisplayFillingTriangle
     77          * Description    : Draws filled right triangle
     78          * Input          : up angle õ-coordinate
     79          *                : up angle y-coordinate
     80          *                : side - cathetus length, in pixels
     81          * Output         : None
     82          * Return         : None
     83          *******************************************************************************/
     84          static void DisplayFillingTriangle (int32_t x, int32_t y, int32_t side)
     85          {
     86            int32_t i;
     87          
     88            for (i = 0; i < side + 1; i++)
     89            {
     90              LCD_Line(x + i, y + i, x + side, y + i);
     91            }
     92          }
     93          
     94          /*******************************************************************************
     95          * Function Name  : DisplayFillingCircle
     96          * Description    : Draws circle
     97          * Input          : õ      - center x-coordinate
     98          *                : y      - center y-coordinate
     99          *                : radius - radius, in pixel
    100          * Output         : None
    101          * Return         : None
    102          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    103          void DisplayFillingCircle (int32_t x, int32_t y, int32_t radius)
    104          {
   \                     DisplayFillingCircle:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    105            int32_t i;
    106          
    107            for (i = 0; i < radius + 1; i++)
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xE005             B.N      ??DisplayFillingCircle_0
    108            {
    109              LCD_Circle(x, y, i);
   \                     ??DisplayFillingCircle_1:
   \   0000000C   0x463A             MOV      R2,R7
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       LCD_Circle
    110            }
   \   00000016   0x1C7F             ADDS     R7,R7,#+1
   \                     ??DisplayFillingCircle_0:
   \   00000018   0x1C70             ADDS     R0,R6,#+1
   \   0000001A   0x4287             CMP      R7,R0
   \   0000001C   0xDBF6             BLT.N    ??DisplayFillingCircle_1
    111          }
   \   0000001E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    112          
    113          /*******************************************************************************
    114          * Function Name  : DisplayRectangle
    115          * Description    : Draws rectangle
    116          * Input          : õ      - left up rectangle corner x-coordinate
    117          *                : y      - left up rectangle corner y-coordinate
    118          *                : side_x - horizontal side length, in pixels
    119          *                : side_y - vertical side length, in pixels
    120          * Output         : None
    121          * Return         : None
    122          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    123          void DisplayRectangle (int32_t x, int32_t y, int32_t side_x, int32_t side_y)
    124          {
   \                     DisplayRectangle:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x461E             MOV      R6,R3
   \   00000008   0x1917             ADDS     R7,R2,R4
   \   0000000A   0x462B             MOV      R3,R5
   \   0000000C   0x463A             MOV      R2,R7
    125            LCD_Line(x, y, x + side_x, y);
   \   0000000E   0x.... 0x....      BL       LCD_Line
   \   00000012   0x1976             ADDS     R6,R6,R5
   \   00000014   0x4633             MOV      R3,R6
   \   00000016   0x4622             MOV      R2,R4
   \   00000018   0x4629             MOV      R1,R5
   \   0000001A   0x4620             MOV      R0,R4
    126            LCD_Line(x, y, x, y + side_y);
   \   0000001C   0x.... 0x....      BL       LCD_Line
    127            LCD_Line(x + side_x, y, x + side_x, y + side_y);
   \   00000020   0x4633             MOV      R3,R6
   \   00000022   0x463A             MOV      R2,R7
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x4638             MOV      R0,R7
   \   00000028   0x.... 0x....      BL       LCD_Line
    128            LCD_Line(x, y + side_y, x + side_x, y + side_y);
   \   0000002C   0x4633             MOV      R3,R6
   \   0000002E   0x463A             MOV      R2,R7
   \   00000030   0x4631             MOV      R1,R6
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0xB001             ADD      SP,SP,#+4
   \   00000036   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   0000003A   0x.... 0x....      B.W      LCD_Line
    129          }
    130          
    131          /*******************************************************************************
    132          * Function Name  : DisplayFillingRectangle
    133          * Description    : Draws block (filled rectangle)
    134          * Input          : õ      - left up rectangle corner x-coordinate
    135          *                : y      - left up rectangle corner y-coordinate
    136          *                : side_x - horizontal side length, in pixels
    137          *                : side_y - vertical side length, in pixels
    138          * Output         : None
    139          * Return         : None
    140          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    141          void DisplayFillingRectangle (int32_t x, int32_t y, int32_t side_x, int32_t side_y)
    142          {
   \                     DisplayFillingRectangle:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x4698             MOV      R8,R3
    143            int32_t i;
    144            for (i = 0; i < side_y; i++)
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0xE006             B.N      ??DisplayFillingRectangle_0
   \                     ??DisplayFillingRectangle_1:
   \   00000010   0x1979             ADDS     R1,R7,R5
   \   00000012   0x460B             MOV      R3,R1
   \   00000014   0x1932             ADDS     R2,R6,R4
   \   00000016   0x4620             MOV      R0,R4
    145            {
    146              LCD_Line(x, y + i, x + side_x, y + i);
   \   00000018   0x.... 0x....      BL       LCD_Line
    147            }
   \   0000001C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??DisplayFillingRectangle_0:
   \   0000001E   0x4547             CMP      R7,R8
   \   00000020   0xDBF6             BLT.N    ??DisplayFillingRectangle_1
    148          }
   \   00000022   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    149          
    150          /** @} */ /* End of group Menu_Graphics_Elements */
    151          
    152          /** @addtogroup Menu_Graphics_Functions Menu Graphics Functions
    153            * @{
    154            */
    155          
    156          /*******************************************************************************
    157          * Function Name  : ElementsFunc
    158          * Description    : Graphical elements drawing
    159          * Input          : None
    160          * Output         : None
    161          * Return         : None
    162          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    163          void ElementsFunc(void)
    164          {
   \                     ElementsFunc:
   \   00000000   0xB510             PUSH     {R4,LR}
    165          #define base_x 25
    166          #define base_y 14
    167          #define side   16
    168          
    169          #define offs_x 8
    170          #define offs_y 5
    171          
    172          #define circle_radius side / 2
    173          #define circle_x base_x + side + offs_x + circle_radius
    174          #define circle_y base_y + circle_radius
    175          #define circle_filling_y circle_y + circle_radius * 2 + offs_y
    176          
    177          #define rectangle_x base_x + side * 2 + offs_x * 2
    178          #define block_y  base_y + side + offs_y
    179          
    180            /* Header output */
    181            LCD_CLS();
   \   00000002   0x.... 0x....      BL       LCD_CLS
    182            CurrentMethod = MET_OR;
   \   00000006   0x....             LDR.N    R0,??DataTable10_2
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
    183            DisplayMenuTitle("Elements");
   \   0000000C   0x.... 0x....      ADR.W    R0,`?<Constant "Elements">`
   \   00000010   0x.... 0x....      BL       DisplayMenuTitle
    184          
    185            /* Build primitives and wait for key up */
    186            DisplayTriangle (base_x, base_y, side);
   \   00000014   0x230E             MOVS     R3,#+14
   \   00000016   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_6:
   \   0000001A   0x231E             MOVS     R3,#+30
   \   0000001C   0x2229             MOVS     R2,#+41
   \   0000001E   0x210E             MOVS     R1,#+14
   \   00000020   0x4610             MOV      R0,R2
   \   00000022   0x.... 0x....      BL       LCD_Line
   \   00000026   0x231E             MOVS     R3,#+30
   \   00000028   0x.... 0x....      BL       ?Subroutine1
    187            DisplayFillingTriangle (base_x, base_y + side + offs_y, side);
   \                     ??CrossCallReturnLabel_5:
   \   0000002C   0x2400             MOVS     R4,#+0
   \                     ??ElementsFunc_0:
   \   0000002E   0xF104 0x0123      ADD      R1,R4,#+35
   \   00000032   0x460B             MOV      R3,R1
   \   00000034   0x2229             MOVS     R2,#+41
   \   00000036   0xF104 0x0019      ADD      R0,R4,#+25
   \   0000003A   0x.... 0x....      BL       LCD_Line
   \   0000003E   0x1C64             ADDS     R4,R4,#+1
   \   00000040   0x2C11             CMP      R4,#+17
   \   00000042   0xDBF4             BLT.N    ??ElementsFunc_0
    188          
    189            LCD_Circle(circle_x, circle_y, circle_radius);
   \   00000044   0x2208             MOVS     R2,#+8
   \   00000046   0x2116             MOVS     R1,#+22
   \   00000048   0x2039             MOVS     R0,#+57
   \   0000004A   0x.... 0x....      BL       LCD_Circle
    190            DisplayFillingCircle (circle_x, circle_filling_y, circle_radius);
   \   0000004E   0x2208             MOVS     R2,#+8
   \   00000050   0x212B             MOVS     R1,#+43
   \   00000052   0x2039             MOVS     R0,#+57
   \   00000054   0x.... 0x....      BL       DisplayFillingCircle
    191          
    192            DisplayRectangle (rectangle_x, base_y, side * 2, side);
   \   00000058   0x2310             MOVS     R3,#+16
   \   0000005A   0x2220             MOVS     R2,#+32
   \   0000005C   0x210E             MOVS     R1,#+14
   \   0000005E   0x2049             MOVS     R0,#+73
   \   00000060   0x.... 0x....      BL       DisplayRectangle
    193            DisplayFillingRectangle (rectangle_x, block_y, side * 2, side);
   \   00000064   0x2310             MOVS     R3,#+16
   \   00000066   0x2220             MOVS     R2,#+32
   \   00000068   0x2123             MOVS     R1,#+35
   \   0000006A   0x2049             MOVS     R0,#+73
   \   0000006C   0x.... 0x....      BL       DisplayFillingRectangle
    194          
    195            WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??ElementsFunc_1:
   \   00000070   0x.... 0x....      BL       GetKey
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD0FB             BEQ.N    ??ElementsFunc_1
    196          
    197            /* Wait for SEL pressed and return to main menu */
    198            BackToMenuOnSel();
   \   00000078   0xE8BD 0x4010      POP      {R4,LR}
   \   0000007C   0x.... 0x....      B.W      BackToMenuOnSel
    199          }
    200          
    201          /*******************************************************************************
    202          * Function Name  : IndicatorsFunc
    203          * Description    : Indicators drawing
    204          * Input          : None
    205          * Output         : None
    206          * Return         : None
    207          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    208          void IndicatorsFunc(void)
    209          {
   \                     IndicatorsFunc:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
    210          #define side_x 4
    211          
    212            int32_t i, sign, DelayCount;
    213          
    214            sFONT *OldFont = CurrentFont;
   \   00000004   0x....             LDR.N    R4,??DataTable10_3
   \   00000006   0x6825             LDR      R5,[R4, #+0]
    215          
    216            LCD_Method OldMethod = CurrentMethod;
   \   00000008   0x....             LDR.N    R6,??DataTable10_2
   \   0000000A   0x7837             LDRB     R7,[R6, #+0]
    217          
    218            LCD_CLS();
   \   0000000C   0x.... 0x....      BL       LCD_CLS
    219            CurrentMethod = MET_AND;
   \   00000010   0x2004             MOVS     R0,#+4
   \   00000012   0x7030             STRB     R0,[R6, #+0]
    220            CurrentFont = &Font_6x8;
   \   00000014   0x....             LDR.N    R0,??DataTable10_4
   \   00000016   0x6020             STR      R0,[R4, #+0]
    221          
    222            /* Print prompt and wait for key SEL pressed */
    223            LCD_PUTS(0, 12, "Turn the Trimmer TRIM");
   \   00000018   0x.... 0x....      ADR.W    R2,`?<Constant "Turn the Trimmer TRIM">`
   \   0000001C   0x210C             MOVS     R1,#+12
   \   0000001E   0x.... 0x....      BL       ?Subroutine0
    224            LCD_PUTS(0, 22, "to control the delay");
   \                     ??CrossCallReturnLabel_4:
   \   00000022   0x.... 0x....      ADR.W    R2,`?<Constant "to control the delay">`
   \   00000026   0x2116             MOVS     R1,#+22
   \   00000028   0x.... 0x....      BL       ?Subroutine0
    225            LCD_PUTS(0, 32, "between style frames.");
   \                     ??CrossCallReturnLabel_3:
   \   0000002C   0x.... 0x....      ADR.W    R2,`?<Constant "between style frames.">`
   \   00000030   0x2120             MOVS     R1,#+32
   \   00000032   0x.... 0x....      BL       ?Subroutine0
    226            LCD_PUTS(0, 42, "Push JoyStick SEL to");
   \                     ??CrossCallReturnLabel_2:
   \   00000036   0x.... 0x....      ADR.W    R2,`?<Constant "Push JoyStick SEL to">`
   \   0000003A   0x212A             MOVS     R1,#+42
   \   0000003C   0x.... 0x....      BL       ?Subroutine0
    227            LCD_PUTS(0, 52, "start or stop.");
   \                     ??CrossCallReturnLabel_1:
   \   00000040   0x.... 0x....      ADR.W    R2,`?<Constant "start or stop.">`
   \   00000044   0x2134             MOVS     R1,#+52
   \   00000046   0x.... 0x....      BL       ?Subroutine0
    228          
    229            while (!KEY_PRESSED(SEL))
   \                     ??CrossCallReturnLabel_0:
   \   0000004A   0x.... 0x....      BL       GetKey
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD1FB             BNE.N    ??CrossCallReturnLabel_0
    230            {
    231          
    232            }
    233          
    234            /* Configure ADC channel 7 */
    235            ADC_Config();
   \   00000052   0x.... 0x....      BL       ADC_Config
    236            /* ADC1 enable */
    237            ADC1_Cmd(ENABLE);
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x.... 0x....      BL       ADC1_Cmd
    238          
    239            /* Print header and wait for key up */
    240            LCD_CLS();
   \   0000005C   0x.... 0x....      BL       LCD_CLS
    241            CurrentMethod = MET_OR;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x7030             STRB     R0,[R6, #+0]
    242            DisplayMenuTitle("Indicators");
   \   00000064   0x.... 0x....      ADR.W    R0,`?<Constant "Indicators">`
   \   00000068   0x.... 0x....      BL       DisplayMenuTitle
    243            WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??IndicatorsFunc_0:
   \   0000006C   0x.... 0x....      BL       GetKey
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD0FB             BEQ.N    ??IndicatorsFunc_0
    244          
    245            /* Draw the progress bar */
    246            LCD_PUTS(24,18,"0");
   \   00000074   0x....             ADR.N    R2,??DataTable10  ;; "0"
   \   00000076   0x2112             MOVS     R1,#+18
   \   00000078   0x2018             MOVS     R0,#+24
   \   0000007A   0x.... 0x....      BL       LCD_PUTS
    247            DisplayRectangle (32, 14, 64, 14);
   \   0000007E   0x230E             MOVS     R3,#+14
   \   00000080   0x2240             MOVS     R2,#+64
   \   00000082   0x210E             MOVS     R1,#+14
   \   00000084   0x2020             MOVS     R0,#+32
   \   00000086   0x.... 0x....      BL       DisplayRectangle
    248            LCD_PUTS(97,18,"100");
   \   0000008A   0x....             ADR.N    R2,??DataTable10_1  ;; "100"
   \   0000008C   0x2112             MOVS     R1,#+18
   \   0000008E   0x2061             MOVS     R0,#+97
   \   00000090   0x.... 0x....      BL       LCD_PUTS
    249            /* Draw the scale */
    250            LCD_Circle(63, 63, 30);
   \   00000094   0x221E             MOVS     R2,#+30
   \   00000096   0x213F             MOVS     R1,#+63
   \   00000098   0x4608             MOV      R0,R1
   \   0000009A   0x.... 0x....      BL       LCD_Circle
    251            LCD_Line(63, 34, 63, 41);
   \   0000009E   0x2329             MOVS     R3,#+41
   \   000000A0   0x223F             MOVS     R2,#+63
   \   000000A2   0x2122             MOVS     R1,#+34
   \   000000A4   0x4610             MOV      R0,R2
   \   000000A6   0x.... 0x....      BL       LCD_Line
    252            LCD_Line(35, 53, 42, 56);
   \   000000AA   0x2338             MOVS     R3,#+56
   \   000000AC   0x222A             MOVS     R2,#+42
   \   000000AE   0x2135             MOVS     R1,#+53
   \   000000B0   0x2023             MOVS     R0,#+35
   \   000000B2   0x.... 0x....      BL       LCD_Line
    253            LCD_Line(91, 53, 84, 56);
   \   000000B6   0x2338             MOVS     R3,#+56
   \   000000B8   0x2254             MOVS     R2,#+84
   \   000000BA   0x2135             MOVS     R1,#+53
   \   000000BC   0x205B             MOVS     R0,#+91
   \   000000BE   0x.... 0x....      BL       LCD_Line
    254            LCD_Line(45, 39, 51, 45);
   \   000000C2   0x232D             MOVS     R3,#+45
   \   000000C4   0x2233             MOVS     R2,#+51
   \   000000C6   0x2127             MOVS     R1,#+39
   \   000000C8   0x4618             MOV      R0,R3
   \   000000CA   0x.... 0x....      BL       LCD_Line
    255            LCD_Line(81, 39, 75, 45);
   \   000000CE   0x232D             MOVS     R3,#+45
   \   000000D0   0x224B             MOVS     R2,#+75
   \   000000D2   0x2127             MOVS     R1,#+39
   \   000000D4   0x2051             MOVS     R0,#+81
   \   000000D6   0x.... 0x....      BL       LCD_Line
    256          
    257            /* Emulate progress - from 0 to 100% and back */
    258            /* Emulate scale bar trembling */
    259            CurrentMethod = MET_XOR;
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0x7030             STRB     R0,[R6, #+0]
    260            for (i = 0, sign = 1; !KEY_PRESSED(SEL); )
   \   000000DE   0xF04F 0x0900      MOV      R9,#+0
   \   000000E2   0x4680             MOV      R8,R0
   \   000000E4   0xE019             B.N      ??CrossCallReturnLabel_9
    261            {
    262              int32_t ni = i + side_x * sign;
    263          
    264              /* Trimming results in animation speed changes */
    265              DelayCount = (ADC1_GetResult() & ADC_RESULT_Msk) + 51;
    266          
    267              /* Draw the bar */
    268              DisplayFillingRectangle (i + 34, 16, side_x - 1, 11);
    269              if (ni > 60 || ni < 0)
    270              {
    271                sign = -sign;
    272              }
    273              else
    274              {
    275                i = ni;
    276              }
    277              SysTickDelay(DelayCount);
   \                     ??IndicatorsFunc_1:
   \   000000E6   0x.... 0x....      BL       ?Subroutine3
    278          
    279              /* Draw the arrow */
    280              LCD_Line(86, 46, 63, 63);
   \                     ??CrossCallReturnLabel_13:
   \   000000EA   0x233F             MOVS     R3,#+63
   \   000000EC   0x223F             MOVS     R2,#+63
   \   000000EE   0x212E             MOVS     R1,#+46
   \   000000F0   0x2056             MOVS     R0,#+86
   \   000000F2   0x.... 0x....      BL       LCD_Line
    281              SysTickDelay(DelayCount);
   \   000000F6   0x.... 0x....      BL       ?Subroutine3
    282              LCD_Line(86, 46, 63, 63);
   \                     ??CrossCallReturnLabel_12:
   \   000000FA   0x233F             MOVS     R3,#+63
   \   000000FC   0x461A             MOV      R2,R3
   \   000000FE   0x212E             MOVS     R1,#+46
   \   00000100   0x2056             MOVS     R0,#+86
   \   00000102   0x.... 0x....      BL       LCD_Line
    283              SysTickDelay(DelayCount);
   \   00000106   0x.... 0x....      BL       ?Subroutine3
    284              LCD_Line(84, 44, 63, 63);
   \                     ??CrossCallReturnLabel_11:
   \   0000010A   0x.... 0x....      BL       ?Subroutine2
    285              SysTickDelay(DelayCount);
   \                     ??CrossCallReturnLabel_8:
   \   0000010E   0x.... 0x....      BL       ?Subroutine3
    286              LCD_Line(84, 44, 63, 63);
   \                     ??CrossCallReturnLabel_10:
   \   00000112   0x.... 0x....      BL       ?Subroutine2
    287              SysTickDelay(DelayCount);
   \                     ??CrossCallReturnLabel_7:
   \   00000116   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   0000011A   0x.... 0x....      BL       GetKey
   \   0000011E   0xB1A8             CBZ.N    R0,??IndicatorsFunc_2
   \   00000120   0xEB09 0x0A88      ADD      R10,R9,R8, LSL #+2
   \   00000124   0x.... 0x....      BL       ADC1_GetResult
   \   00000128   0x0500             LSLS     R0,R0,#+20
   \   0000012A   0x0D00             LSRS     R0,R0,#+20
   \   0000012C   0xF100 0x0B33      ADD      R11,R0,#+51
   \   00000130   0x230B             MOVS     R3,#+11
   \   00000132   0x2203             MOVS     R2,#+3
   \   00000134   0x2110             MOVS     R1,#+16
   \   00000136   0xF109 0x0022      ADD      R0,R9,#+34
   \   0000013A   0x.... 0x....      BL       DisplayFillingRectangle
   \   0000013E   0xF1BA 0x0F3D      CMP      R10,#+61
   \   00000142   0xBF2C             ITE      CS 
   \   00000144   0xF1C8 0x0800      RSBCS    R8,R8,#+0
   \   00000148   0x46D1             MOVCC    R9,R10
   \   0000014A   0xE7CC             B.N      ??IndicatorsFunc_1
    288            }
    289          
    290            /* SEL is pressed - return to the main menu */
    291            CurrentFont = OldFont;
   \                     ??IndicatorsFunc_2:
   \   0000014C   0x6025             STR      R5,[R4, #+0]
    292            CurrentMethod = OldMethod;
   \   0000014E   0x7037             STRB     R7,[R6, #+0]
    293            /* ADC1 disable */
    294            ADC1_Cmd(DISABLE);
   \   00000150   0x.... 0x....      BL       ADC1_Cmd
    295            DisplayMenu();
   \   00000154   0xE8BD 0x4FF1      POP      {R0,R4-R11,LR}
   \   00000158   0x.... 0x....      B.W      DisplayMenu
    296          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x4658             MOV      R0,R11
   \   00000002   0x.... 0x....      B.W      SysTickDelay

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x233F             MOVS     R3,#+63
   \   00000002   0x461A             MOV      R2,R3
   \   00000004   0x212C             MOVS     R1,#+44
   \   00000006   0x2054             MOVS     R0,#+84
   \   00000008   0x.... 0x....      B.W      LCD_Line

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      B.W      LCD_PUTS

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x2229             MOVS     R2,#+41
   \   00000002   0x210E             MOVS     R1,#+14
   \   00000004   0x2019             MOVS     R0,#+25
   \   00000006   0x.... 0x....      B.W      LCD_Line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x30 0x00          DC8      "0",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x31 0x30          DC8      "100"
   \              0x30 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     CurrentMethod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     CurrentFont

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     Font_6x8

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "0">`:
   \   00000000   0x30 0x00          DC8 "0"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "100">`:
   \   00000000   0x31 0x30          DC8 "100"
   \              0x30 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Elements">`:
   \   00000000   0x45 0x6C          DC8 "Elements"
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Turn the Trimmer TRIM">`:
   \   00000000   0x54 0x75          DC8 "Turn the Trimmer TRIM"
   \              0x72 0x6E    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x54    
   \              0x72 0x69    
   \              0x6D 0x6D    
   \              0x65 0x72    
   \              0x20 0x54    
   \              0x52 0x49    
   \              0x4D 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "to control the delay">`:
   \   00000000   0x74 0x6F          DC8 "to control the delay"
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x64    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "between style frames.">`:
   \   00000000   0x62 0x65          DC8 "between style frames."
   \              0x74 0x77    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x73 0x74    
   \              0x79 0x6C    
   \              0x65 0x20    
   \              0x66 0x72    
   \              0x61 0x6D    
   \              0x65 0x73    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Push JoyStick SEL to">`:
   \   00000000   0x50 0x75          DC8 "Push JoyStick SEL to"
   \              0x73 0x68    
   \              0x20 0x4A    
   \              0x6F 0x79    
   \              0x53 0x74    
   \              0x69 0x63    
   \              0x6B 0x20    
   \              0x53 0x45    
   \              0x4C 0x20    
   \              0x74 0x6F    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "start or stop.">`:
   \   00000000   0x73 0x74          DC8 "start or stop."
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x6F 0x72    
   \              0x20 0x73    
   \              0x74 0x6F    
   \              0x70 0x2E    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Indicators">`:
   \   00000000   0x49 0x6E          DC8 "Indicators"
   \              0x64 0x69    
   \              0x63 0x61    
   \              0x74 0x6F    
   \              0x72 0x73    
   \              0x00         
   \   0000000B   0x00               DC8 0
    297          
    298          /** @} */ /* End of group Menu_Graphics_Functions */
    299          
    300          /** @} */ /* End of group Menu_Graphics_Private_Functions */
    301          
    302          /** @} */ /* End of group Menu_Graphics */
    303          
    304          /** @} */ /* End of group Menu */
    305          
    306          /** @} */ /* End of group __MDR32F9Qx_Eval_Demo */
    307          
    308          /******************* (C) COPYRIGHT 2011 Phyton *********************************
    309          *
    310          * END OF FILE Menu_gl.c */
    311          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  DisplayFillingCircle
             24 -> LCD_Circle
       24  DisplayFillingRectangle
             24 -> LCD_Line
       24  DisplayRectangle
              0 -> LCD_Line
             24 -> LCD_Line
        8  ElementsFunc
              0 -> BackToMenuOnSel
              8 -> DisplayFillingCircle
              8 -> DisplayFillingRectangle
              8 -> DisplayMenuTitle
              8 -> DisplayRectangle
              8 -> GetKey
              8 -> LCD_CLS
              8 -> LCD_Circle
              8 -> LCD_Line
       40  IndicatorsFunc
             40 -> ADC1_Cmd
             40 -> ADC1_GetResult
             40 -> ADC_Config
             40 -> DisplayFillingRectangle
              0 -> DisplayMenu
             40 -> DisplayMenuTitle
             40 -> DisplayRectangle
             40 -> GetKey
             40 -> LCD_CLS
             40 -> LCD_Circle
             40 -> LCD_Line
             40 -> LCD_PUTS
             40 -> SysTickDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "0">
       4  ?<Constant "100">
      12  ?<Constant "Elements">
      12  ?<Constant "Indicators">
      24  ?<Constant "Push JoyStick SEL to">
      24  ?<Constant "Turn the Trimmer TRIM">
      24  ?<Constant "between style frames.">
      16  ?<Constant "start or stop.">
      24  ?<Constant "to control the delay">
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       6  ?Subroutine0
      10  ?Subroutine1
      12  ?Subroutine2
       6  ?Subroutine3
      32  DisplayFillingCircle
      38  DisplayFillingRectangle
      62  DisplayRectangle
     128  ElementsFunc
     348  IndicatorsFunc

 
   6 bytes in section .rodata
 798 bytes in section .text
 
 798 bytes of CODE  memory
   6 bytes of CONST memory

Errors: none
Warnings: none
