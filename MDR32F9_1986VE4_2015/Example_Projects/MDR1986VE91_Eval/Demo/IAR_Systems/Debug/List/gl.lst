###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:26:03 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\gl.c                                     #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\gl.c --preprocess                        #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\gl.lst           #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\gl.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR1986VE91_Eval\src\gl.c
      1          /**
      2            ******************************************************************************
      3            * @file    gl.c
      4            * @author  Phyton Application Team
      5            * @version V3.0.0
      6            * @date    10.09.2011
      7            * @brief   This file provides all the functions for the graphic primitive
      8            *          output to LCD.
      9            ******************************************************************************
     10            * <br><br>
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 Phyton</center></h2>
     19            */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "lcd.h"
     23          #include "gl.h"
     24          #include "joystick.h"
     25          
     26          /** @addtogroup __MDR32F9Qx_Eval_Demo MDR32F9Qx Demonstration Example
     27            * @{
     28            */
     29          
     30          /** @addtogroup LCD_Graphics LCD Graphics
     31            * @{
     32            */
     33          
     34          /** @defgroup LCD_Graphics_Private_Functions LCD Graphics Private Functions
     35            * @{
     36            */
     37          
     38          /*******************************************************************************
     39          * Function Name  : LCD_PutPixel
     40          * Description    : Outputs one pixel to the given screen coordinates.
     41          * Input          : õ - x-coordinate
     42          *                : y - y-coordinate
     43          * Output         : None
     44          * Return         : None
     45          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     46          void LCD_PutPixel(uint32_t x, uint32_t y)
     47          {
   \                     LCD_PutPixel:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     48            uint32_t shifted, page;
     49            uint32_t data;
     50          
     51            if ((x>MAX_X)|(y>MAX_Y))
   \   00000006   0x2C80             CMP      R4,#+128
   \   00000008   0x4180             SBCS     R0,R0,R0
   \   0000000A   0x43C0             MVNS     R0,R0
   \   0000000C   0x2D40             CMP      R5,#+64
   \   0000000E   0x4189             SBCS     R1,R1,R1
   \   00000010   0x43C9             MVNS     R1,R1
   \   00000012   0x0FC9             LSRS     R1,R1,#+31
   \   00000014   0xEA51 0x70D0      ORRS     R0,R1,R0, LSR #+31
   \   00000018   0xD12B             BNE.N    ??LCD_PutPixel_0
     52            {
     53              return;
     54            }
     55          
     56            SetCrystal((LCD_Crystal)(x/64));
   \   0000001A   0x04A0             LSLS     R0,R4,#+18
   \   0000001C   0x0E00             LSRS     R0,R0,#+24
   \   0000001E   0x.... 0x....      BL       SetCrystal
     57            x %= 64;
   \   00000022   0xF004 0x043F      AND      R4,R4,#0x3F
     58          
     59            page = y/8;
     60            shifted = (1 << (y%8));
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xF005 0x0107      AND      R1,R5,#0x7
   \   0000002C   0xFA00 0xF601      LSL      R6,R0,R1
     61            LCD_SET_PAGE(page);
   \   00000030   0x08E8             LSRS     R0,R5,#+3
   \   00000032   0xF040 0x00B8      ORR      R0,R0,#0xB8
   \   00000036   0x.... 0x....      BL       WriteLCD_Cmd
     62            LCD_SET_ADDRESS(x);
   \   0000003A   0xF044 0x0440      ORR      R4,R4,#0x40
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       WriteLCD_Cmd
     63            data = ReadLCD_Data();
   \   00000044   0x.... 0x....      BL       ReadLCD_Data
   \   00000048   0x4605             MOV      R5,R0
     64            switch (CurrentMethod)
   \   0000004A   0x....             LDR.N    R0,??DataTable0
   \   0000004C   0x7800             LDRB     R0,[R0, #+0]
   \   0000004E   0xB128             CBZ.N    R0,??LCD_PutPixel_1
   \   00000050   0x2801             CMP      R0,#+1
   \   00000052   0xD005             BEQ.N    ??LCD_PutPixel_2
   \   00000054   0x2804             CMP      R0,#+4
   \   00000056   0xBF08             IT       EQ 
   \   00000058   0x43B5             BICEQ    R5,R5,R6
   \   0000005A   0xE002             B.N      ??LCD_PutPixel_3
     65            {
     66              case MET_OR :   data |= shifted;    break;
   \                     ??LCD_PutPixel_1:
   \   0000005C   0x4335             ORRS     R5,R6,R5
   \   0000005E   0xE000             B.N      ??LCD_PutPixel_3
     67              case MET_XOR :  data ^= shifted;    break;
   \                     ??LCD_PutPixel_2:
   \   00000060   0x4075             EORS     R5,R6,R5
     68              case MET_AND :  data &= ~shifted;  	break;
     69            }
     70            LCD_SET_ADDRESS(x);
   \                     ??LCD_PutPixel_3:
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       WriteLCD_Cmd
     71            WriteLCD_Data(data);
   \   00000068   0x4628             MOV      R0,R5
   \   0000006A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000006E   0x.... 0x....      B.W      WriteLCD_Data
   \                     ??LCD_PutPixel_0:
   \   00000072   0xBD70             POP      {R4-R6,PC}       ;; return
     72          }
     73          
     74          /*******************************************************************************
     75          * Function Name  : LCD_Line
     76          * Description    : Outputs line from (x1,y1) point to (x2,y2) point.
     77          * Input          : õ1 - start point x-coordinate
     78          *                : y1 - start point y-coordinate
     79          *                : x2 - end point x-coordinate
     80          *                : y2 - end point y-coordinate
     81          * Output         : None
     82          * Return         : None
     83          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     84          void LCD_Line(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2)
     85          {
   \                     LCD_Line:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4681             MOV      R9,R0
     86            int32_t dx, dy, i1, i2, i, kx, ky;
     87            int32_t d;
     88            int32_t x, y;
     89            int32_t flag;
     90          
     91            dy = y2 - y1;
   \   00000008   0x1A5B             SUBS     R3,R3,R1
     92            dx = x2 - x1;
   \   0000000A   0xEBA2 0x0509      SUB      R5,R2,R9
     93            if (dx == 0 && dy == 0)
   \   0000000E   0xEA53 0x0005      ORRS     R0,R3,R5
   \   00000012   0xD106             BNE.N    ??LCD_Line_0
     94            {
     95              LCD_PutPixel(x1, y1);
   \   00000014   0x4648             MOV      R0,R9
   \   00000016   0xB003             ADD      SP,SP,#+12
   \   00000018   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   0000001C   0x....             B.N      LCD_PutPixel
     96              return;
     97            }
     98          
     99            flag = kx = ky = 1;
    100          
    101            if (dx < 0)
    102            {
    103              dx = -dx;
    104              kx = -1;
    105            }
    106            else if (dx == 0)
    107            {
    108              kx = 0;
    109            }
    110          
    111            if (dy < 0)
    112            {
    113              dy = -dy;
    114              ky = -1;
    115            }
    116          
    117            if (dx < dy)
    118            {
    119              flag = 0;
    120              d = dx;
    121              dx = dy;
    122              dy = d;
    123            }
    124          
    125            i1 = dy + dy;
    126            d = i1 - dx;
    127            i2 = d - dx;
    128            x = x1;
    129            y = y1;
    130          
    131            for (i=0; ; i++)
    132            {
    133              LCD_PutPixel(x,y);
    134              if (i >= dx)
   \                     ??LCD_Line_1:
   \   0000001E   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
   \                     ??LCD_Line_0:
   \   00000022   0xF04F 0x0B01      MOV      R11,#+1
   \   00000026   0x46DA             MOV      R10,R11
   \   00000028   0x2401             MOVS     R4,#+1
   \   0000002A   0xF04F 0x30FF      MOV      R0,#-1
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD502             BPL.N    ??LCD_Line_2
   \   00000032   0x426D             RSBS     R5,R5,#+0
   \   00000034   0x4682             MOV      R10,R0
   \   00000036   0xE002             B.N      ??LCD_Line_3
   \                     ??LCD_Line_2:
   \   00000038   0xBF08             IT       EQ 
   \   0000003A   0xF04F 0x0A00      MOVEQ    R10,#+0
   \                     ??LCD_Line_3:
   \   0000003E   0x2B00             CMP      R3,#+0
   \   00000040   0xBF44             ITT      MI 
   \   00000042   0x425B             RSBMI    R3,R3,#+0
   \   00000044   0x4683             MOVMI    R11,R0
   \   00000046   0x429D             CMP      R5,R3
   \   00000048   0xDA03             BGE.N    ??LCD_Line_4
   \   0000004A   0x2400             MOVS     R4,#+0
   \   0000004C   0x4628             MOV      R0,R5
   \   0000004E   0x461D             MOV      R5,R3
   \   00000050   0x4603             MOV      R3,R0
   \                     ??LCD_Line_4:
   \   00000052   0x0058             LSLS     R0,R3,#+1
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x1B46             SUBS     R6,R0,R5
   \   00000058   0x1B70             SUBS     R0,R6,R5
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x4688             MOV      R8,R1
   \   0000005E   0x2700             MOVS     R7,#+0
   \   00000060   0xE000             B.N      ??LCD_Line_5
   \                     ??LCD_Line_6:
   \   00000062   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_Line_5:
   \   00000064   0x4641             MOV      R1,R8
   \   00000066   0x4648             MOV      R0,R9
   \   00000068   0x.... 0x....      BL       LCD_PutPixel
   \   0000006C   0x42AF             CMP      R7,R5
   \   0000006E   0xDAD6             BGE.N    ??LCD_Line_1
    135              {
    136                break;
    137              }
    138              if (flag)
   \   00000070   0x2C00             CMP      R4,#+0
   \   00000072   0xBF14             ITE      NE 
   \   00000074   0x44D1             ADDNE    R9,R10,R9
   \   00000076   0x44D8             ADDEQ    R8,R11,R8
    139              {
    140                x += kx;
    141              }
    142              else
    143              {
    144                y += ky;
    145              }
    146          
    147              if (d < 0)
   \   00000078   0x2E00             CMP      R6,#+0
   \   0000007A   0xD502             BPL.N    ??LCD_Line_7
    148              {
    149                d += i1;
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0x1986             ADDS     R6,R0,R6
   \   00000080   0xE7EF             B.N      ??LCD_Line_6
    150              }
    151              else
    152              {
    153                d += i2;
   \                     ??LCD_Line_7:
   \   00000082   0x9801             LDR      R0,[SP, #+4]
   \   00000084   0x1986             ADDS     R6,R0,R6
    154                if (flag)
   \   00000086   0x2C00             CMP      R4,#+0
   \   00000088   0xBF14             ITE      NE 
   \   0000008A   0x44D8             ADDNE    R8,R11,R8
   \   0000008C   0x44D1             ADDEQ    R9,R10,R9
    155                {
    156                  y += ky;
   \   0000008E   0xE7E8             B.N      ??LCD_Line_6
    157                }
    158                else
    159                {
    160                  x += kx;
    161                }
    162              }
    163            }
    164          }
    165          
    166          /*******************************************************************************
    167          * Function Name  : LCD_Circle
    168          * Description    : Draws circle with radius r and center in (x,y) point.
    169          * Input          : õ - center x-coordinate
    170          *                : y - center y-coordinate
    171          *                : r - radius (in pixels)s
    172          * Output         : None
    173          * Return         : None
    174          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    175          void LCD_Circle(uint32_t xc, uint32_t yc, uint32_t r)
    176          {
   \                     LCD_Circle:
   \   00000000   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
    177            int32_t d, x, y;
    178          
    179            for (x = 0, y = r, d = 3-2*r; ;)
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x4614             MOV      R4,R2
   \   0000000A   0x0050             LSLS     R0,R2,#+1
   \   0000000C   0xF1C0 0x0803      RSB      R8,R0,#+3
   \   00000010   0xE005             B.N      ??LCD_Circle_0
    180            {
    181              LCD_PutPixel(x+xc, y+yc);
    182              LCD_PutPixel(x+xc, -y+yc);
    183              LCD_PutPixel(-x+xc, -y+yc);
    184              LCD_PutPixel(-x+xc, y+yc);
    185              LCD_PutPixel(y+xc, x+yc);
    186              LCD_PutPixel(y+xc, -x+yc);
    187              LCD_PutPixel(-y+xc, -x+yc);
    188              LCD_PutPixel(-y+xc, x+yc);
    189          
    190              if (x >= y)
    191              {
    192                break;
    193              }
    194          
    195              if (d <= 0)
    196              {
    197                d += 4*x+6;
    198              }
    199              else
    200              {
    201                d += 4*(x-y)+10;
   \                     ??LCD_Circle_1:
   \   00000012   0x1B30             SUBS     R0,R6,R4
   \   00000014   0x0080             LSLS     R0,R0,#+2
   \   00000016   0x300A             ADDS     R0,R0,#+10
   \   00000018   0x4480             ADD      R8,R0,R8
    202                y--;
   \   0000001A   0x1E64             SUBS     R4,R4,#+1
    203              }
    204              x++;
   \                     ??LCD_Circle_2:
   \   0000001C   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_Circle_0:
   \   0000001E   0x9801             LDR      R0,[SP, #+4]
   \   00000020   0x1985             ADDS     R5,R0,R6
   \   00000022   0x9802             LDR      R0,[SP, #+8]
   \   00000024   0x1907             ADDS     R7,R0,R4
   \   00000026   0x4639             MOV      R1,R7
   \   00000028   0x4628             MOV      R0,R5
   \   0000002A   0x.... 0x....      BL       LCD_PutPixel
   \   0000002E   0xF1C4 0x0900      RSB      R9,R4,#+0
   \   00000032   0x9802             LDR      R0,[SP, #+8]
   \   00000034   0xEB00 0x0A09      ADD      R10,R0,R9
   \   00000038   0x4651             MOV      R1,R10
   \   0000003A   0x4628             MOV      R0,R5
   \   0000003C   0x.... 0x....      BL       LCD_PutPixel
   \   00000040   0x4275             RSBS     R5,R6,#+0
   \   00000042   0x9801             LDR      R0,[SP, #+4]
   \   00000044   0xEB00 0x0B05      ADD      R11,R0,R5
   \   00000048   0x4651             MOV      R1,R10
   \   0000004A   0x4658             MOV      R0,R11
   \   0000004C   0x.... 0x....      BL       LCD_PutPixel
   \   00000050   0x4639             MOV      R1,R7
   \   00000052   0x4658             MOV      R0,R11
   \   00000054   0x.... 0x....      BL       LCD_PutPixel
   \   00000058   0x9801             LDR      R0,[SP, #+4]
   \   0000005A   0xEB00 0x0A04      ADD      R10,R0,R4
   \   0000005E   0x9802             LDR      R0,[SP, #+8]
   \   00000060   0x1987             ADDS     R7,R0,R6
   \   00000062   0x4639             MOV      R1,R7
   \   00000064   0x4650             MOV      R0,R10
   \   00000066   0x.... 0x....      BL       LCD_PutPixel
   \   0000006A   0x9802             LDR      R0,[SP, #+8]
   \   0000006C   0x1945             ADDS     R5,R0,R5
   \   0000006E   0x4629             MOV      R1,R5
   \   00000070   0x4650             MOV      R0,R10
   \   00000072   0x.... 0x....      BL       LCD_PutPixel
   \   00000076   0x9801             LDR      R0,[SP, #+4]
   \   00000078   0x4481             ADD      R9,R0,R9
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0x4648             MOV      R0,R9
   \   0000007E   0x.... 0x....      BL       LCD_PutPixel
   \   00000082   0x4639             MOV      R1,R7
   \   00000084   0x4648             MOV      R0,R9
   \   00000086   0x.... 0x....      BL       LCD_PutPixel
   \   0000008A   0x42A6             CMP      R6,R4
   \   0000008C   0xDB01             BLT.N    ??LCD_Circle_3
    205            }
    206          }
   \   0000008E   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
   \                     ??LCD_Circle_3:
   \   00000092   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000096   0xDABC             BGE.N    ??LCD_Circle_1
   \   00000098   0x00B0             LSLS     R0,R6,#+2
   \   0000009A   0x1D80             ADDS     R0,R0,#+6
   \   0000009C   0x4480             ADD      R8,R0,R8
   \   0000009E   0xE7BD             B.N      ??LCD_Circle_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     CurrentMethod
    207          
    208          /** @} */ /* End of group LCD_Graphics_Private_Functions */
    209          
    210          /** @} */ /* End of group LCD_Graphics */
    211          
    212          /** @} */ /* End of group __MDR32F9Qx_Eval_Demo */
    213          
    214          /******************* (C) COPYRIGHT 2011 Phyton *********************************
    215          *
    216          * END OF FILE gl.c */
    217          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       48  LCD_Circle
             48 -> LCD_PutPixel
       48  LCD_Line
              0 -> LCD_PutPixel
             48 -> LCD_PutPixel
       16  LCD_PutPixel
             16 -> ReadLCD_Data
             16 -> SetCrystal
             16 -> WriteLCD_Cmd
              0 -> WriteLCD_Data


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
     160  LCD_Circle
     144  LCD_Line
     116  LCD_PutPixel

 
 424 bytes in section .text
 
 424 bytes of CODE memory

Errors: none
Warnings: none
