###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:26:01 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu_tsensor.c                           #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu_tsensor.c --preprocess              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\Menu_tsensor.lst #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\Menu_tsensor.o    #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR1986VE91_Eval\src\Menu_tsensor.c
      1          /**
      2            ******************************************************************************
      3            * @file    Menu_tsensor.c
      4            * @author  Phyton Application Team
      5            * @version V1.2.0
      6            * @date    21.10.2011
      7            * @brief   This file contains all the "Temperature" menu handlers.
      8            ******************************************************************************
      9            * <br><br>
     10            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     11            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     12            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY
     13            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     14            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     15            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     16            *
     17            * <h2><center>&copy; COPYRIGHT 2011 Phyton</center></h2>
     18            */
     19          /* Includes ------------------------------------------------------------------*/
     20          #include "MDR32F9Qx_config.h"
     21          #include <MDR32F9Qx_rst_clk.h>
     22          #include <MDR32F9Qx_adc.h>
     23          #include "adc.h"
     24          #include "Menu.h"
     25          #include "Menu_items.h"
     26          #include "lcd.h"
     27          #include "text.h"
     28          #include "joystick.h"
     29          #include "systick.h"
     30          #include "MDR32F9Qx_it.h"
     31          
     32          /** @addtogroup __MDR32F9Qx_Eval_Demo MDR32F9Qx Demonstration Example
     33            * @{
     34            */
     35          
     36          /** @addtogroup Menu Menu
     37            * @{
     38            */
     39          
     40          /** @addtogroup Menu_TSENSOR Menu TSENSOR
     41            * @{
     42            */
     43          
     44          /** @defgroup Menu_TSENSOR_Private_Constants Menu TSENSOR Private Constants
     45            * @{
     46            */
     47          
     48          /* Value ARC1_RESULT for 25° C */
     49          #define V_25                             1700
     50          /* Average Slope of the temperature curve */
     51          #define Average_Slope                    6
     52          
     53          #define Temp_Display_Column              33
     54          
     55          /** @} */ /* End of group Menu_TSENSOR_Private_Constants */
     56          
     57          /** @defgroup Menu_TSENSOR_Private_Types Menu TSENSOR Private Types
     58            * @{
     59            */
     60          
     61          /** @} */ /* End of group Menu_TSENSOR_Private_Types */
     62          
     63          /** @defgroup Menu_TSENSOR_Private_Macros Menu TSENSOR Private Macros
     64            * @{
     65            */
     66          
     67          
     68          /** @} */ /* End of group Menu_TSENSOR_Private_Macros */
     69          
     70          /** @defgroup Menu_TSENSOR_Private_Variables Menu TSENSOR Private Variables
     71            * @{
     72            */
     73          

   \                                 In section .data, align 4
     74          static uint8_t  TempCelsius_Display[] = "    .    C";
   \                     TempCelsius_Display:
   \   00000000   0x20 0x20          DC8 "    .    C"
   \              0x20 0x20    
   \              0x2E 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x00         
   \   0000000B   0x00               DC8 0
   \   0000000C   0x20 0x20          DC8 "    .    F"
   \              0x20 0x20    
   \              0x2E 0x20    
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x00         
   \   00000017   0x00               DC8 0
     75          static uint8_t  TempFahrenheit_Display[] = "    .    F";

   \                                 In section .bss, align 4
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   00000000                      DS8 4
     76          static int32_t  Temp_Decimal, TempCelsius_Value, Temp_Value_Fahrenheit;
     77          
     78          /** @} */ /* End of group Menu_TSENSOR_Private_Variables */
     79          
     80          /** @defgroup Menu_TSENSOR_Private_Functions Menu TSENSOR Private Functions
     81            * @{
     82            */
     83          
     84          /*******************************************************************************
     85          * Function Name  : TSENSORFunc
     86          * Description    : Demonstration of TSENSOR utilization.
     87          * Input          : None
     88          * Output         : None
     89          * Return         : None
     90          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     91          void TSENSORFunc(void)
     92          {
   \                     TSENSORFunc:
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
     93            uint32_t key;
     94            uint32_t curr_ADC1_Value = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
     95            int32_t V_Since;
     96          
     97            sFONT *OldFont = CurrentFont;
   \   00000008   0x....             LDR.N    R4,??DataTable1
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x9002             STR      R0,[SP, #+8]
     98            LCD_Method OldMethod = CurrentMethod;
   \   0000000E   0x....             LDR.N    R5,??DataTable1_1
   \   00000010   0x7828             LDRB     R0,[R5, #+0]
   \   00000012   0xF88D 0x0004      STRB     R0,[SP, #+4]
     99          
    100            /* Print header */
    101            LCD_CLS();
   \   00000016   0x.... 0x....      BL       LCD_CLS
    102            CurrentMethod = MET_AND;
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0x7028             STRB     R0,[R5, #+0]
    103            CurrentFont = &Font_6x8;
   \   0000001E   0x....             LDR.N    R0,??DataTable1_2
   \   00000020   0x6020             STR      R0,[R4, #+0]
    104            DisplayMenuTitle("Temperature");
   \   00000022   0x.... 0x....      ADR.W    R0,`?<Constant "Temperature">`
   \   00000026   0x.... 0x....      BL       DisplayMenuTitle
    105            WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??TSENSORFunc_0:
   \   0000002A   0x.... 0x....      BL       GetKey
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD0FB             BEQ.N    ??TSENSORFunc_0
    106          
    107            /* Configure the Temperature Sensor */
    108            ADC_Temp_Sensor_Config();
   \   00000032   0x.... 0x....      BL       ADC_Temp_Sensor_Config
   \   00000036   0x....             LDR.N    R0,??DataTable1_3  ;; 0xe000e100
   \   00000038   0xF44F 0x3100      MOV      R1,#+131072
   \   0000003C   0x6001             STR      R1,[R0, #+0]
    109          
    110            /* Enable interrupt on ADC */
    111            NVIC_EnableIRQ(ADC_IRQn);
    112            /* ADC1 enable */
    113            ADC1_Cmd(ENABLE);
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       ADC1_Cmd
    114          
    115            key = GetKey();
   \   00000044   0x.... 0x....      BL       GetKey
   \   00000048   0x4683             MOV      R11,R0
    116          
    117            /* Enable ADC1 end of conversion interrupt */
    118            ADC1_ITConfig(ADC1_FLAG_END_OF_CONVERSION, ENABLE);
   \   0000004A   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_2:
   \   0000004E   0xF04F 0x080A      MOV      R8,#+10
   \   00000052   0xF04F 0x0A64      MOV      R10,#+100
   \   00000056   0x....             LDR.N    R6,??DataTable1_4
   \   00000058   0xF44F 0x797A      MOV      R9,#+1000
   \   0000005C   0x....             LDR.N    R7,??DataTable1_5
   \   0000005E   0xE061             B.N      ??TSENSORFunc_1
    119          
    120            for (; key != SEL; key = GetKey())
    121            {
    122              ADC1_Value = ADC1_GetResult();
    123              if (!ADC1_Value)
    124              {
    125              	continue;
    126              }
    127          
    128              if (curr_ADC1_Value != ADC1_Value)
    129              {
    130          			curr_ADC1_Value = ADC1_Value;
    131          
    132          			/* Check that ADC1_Value contains data from TSENSOR measuring conversion */
    133          			if (((ADC1_Value & ADC_RESULT_CHANNEL_Msk) >> ADC_RESULT_CHANNEL_Pos) == ADC_CH_TEMP_SENSOR)
    134          			{
    135          				V_Since = ADC1_Value & ADC_RESULT_Msk;
    136          
    137          				TempCelsius_Value = (((V_Since - V_25) * 1000) / (Average_Slope * 1000)) + 25 * 1000;
    138          				if (TempCelsius_Value < 0)
    139          				{
    140          					/* Negative temperature measured */
    141          					TempCelsius_Display[0]='-';
    142          					TempCelsius_Value = -TempCelsius_Value;
    143          				}
    144          				else
    145          				{
    146          					/* Positive temperature measured */
    147          					TempCelsius_Display[0]='+';
    148          				}
    149          				Temp_Decimal = TempCelsius_Value % 1000;
    150          
    151          				/* Convert temperature in Celsius to Fahrenheit */
    152          				Temp_Value_Fahrenheit = (9 * TempCelsius_Value / 5) + 32000;
    153          				if (Temp_Value_Fahrenheit < 0)
    154          				{
    155          					/* Negative temperature measured */
    156          					TempFahrenheit_Display[0]='-';
    157          					Temp_Value_Fahrenheit = -Temp_Value_Fahrenheit;
    158          				}
    159          				else
    160          				{
    161          					/* Positive temperature measured */
    162          					TempFahrenheit_Display[0]='+';
   \                     ??TSENSORFunc_2:
   \   00000060   0x232B             MOVS     R3,#+43
   \   00000062   0x7333             STRB     R3,[R6, #+12]
    163          				}
    164          
    165          				TempCelsius_Value     = TempCelsius_Value / 1000;
    166          				/* Calculate temperature digits in Celsius */
    167          				TempCelsius_Display[1] = (TempCelsius_Value / 100) + 0x30;
   \                     ??TSENSORFunc_3:
   \   00000064   0xFB92 0xF3FA      SDIV     R3,R2,R10
   \   00000068   0xF103 0x0C30      ADD      R12,R3,#+48
   \   0000006C   0xF886 0xC001      STRB     R12,[R6, #+1]
    168          				TempCelsius_Display[2] = ((TempCelsius_Value % 100) / 10) + 0x30;
   \   00000070   0xFB0A 0x2213      MLS      R2,R10,R3,R2
   \   00000074   0xFB92 0xF3F8      SDIV     R3,R2,R8
   \   00000078   0xF103 0x0C30      ADD      R12,R3,#+48
   \   0000007C   0xF886 0xC002      STRB     R12,[R6, #+2]
    169          				TempCelsius_Display[3] = ((TempCelsius_Value % 100) % 10) + 0x30;
   \   00000080   0xFB08 0x2213      MLS      R2,R8,R3,R2
   \   00000084   0x3230             ADDS     R2,R2,#+48
   \   00000086   0x70F2             STRB     R2,[R6, #+3]
    170          				TempCelsius_Display[5] = (Temp_Decimal / 100) + 0x30;
   \   00000088   0xFB90 0xF2FA      SDIV     R2,R0,R10
   \   0000008C   0xF102 0x0330      ADD      R3,R2,#+48
   \   00000090   0x7173             STRB     R3,[R6, #+5]
    171          				TempCelsius_Display[6] = ((Temp_Decimal % 100) / 10) + 0x30;
   \   00000092   0xFB0A 0x0012      MLS      R0,R10,R2,R0
   \   00000096   0xFB90 0xF2F8      SDIV     R2,R0,R8
   \   0000009A   0xF102 0x0330      ADD      R3,R2,#+48
   \   0000009E   0x71B3             STRB     R3,[R6, #+6]
    172          				TempCelsius_Display[7] = ((Temp_Decimal % 100) % 10) + 0x30;
   \   000000A0   0xFB08 0x0012      MLS      R0,R8,R2,R0
   \   000000A4   0x3030             ADDS     R0,R0,#+48
   \   000000A6   0x71F0             STRB     R0,[R6, #+7]
    173          
    174          				Temp_Decimal = Temp_Value_Fahrenheit % 1000;
   \   000000A8   0xFB91 0xF2F9      SDIV     R2,R1,R9
   \   000000AC   0xFB09 0x1012      MLS      R0,R9,R2,R1
    175          				Temp_Value_Fahrenheit = Temp_Value_Fahrenheit / 1000;
    176          				/* Calculate temperature digits in Fahrenheit */
    177          				TempFahrenheit_Display[1] = (Temp_Value_Fahrenheit / 100) + 0x30;
   \   000000B0   0xFB92 0xF1FA      SDIV     R1,R2,R10
   \   000000B4   0xF101 0x0330      ADD      R3,R1,#+48
   \   000000B8   0x7373             STRB     R3,[R6, #+13]
    178          				TempFahrenheit_Display[2] = ((Temp_Value_Fahrenheit % 100) / 10) + 0x30;
   \   000000BA   0xFB0A 0x2111      MLS      R1,R10,R1,R2
   \   000000BE   0xFB91 0xF2F8      SDIV     R2,R1,R8
   \   000000C2   0xF102 0x0330      ADD      R3,R2,#+48
   \   000000C6   0x73B3             STRB     R3,[R6, #+14]
    179          				TempFahrenheit_Display[3] = ((Temp_Value_Fahrenheit % 100) % 10) + 0x30;
   \   000000C8   0xFB08 0x1112      MLS      R1,R8,R2,R1
   \   000000CC   0x3130             ADDS     R1,R1,#+48
   \   000000CE   0x73F1             STRB     R1,[R6, #+15]
    180          				TempFahrenheit_Display[5] = (Temp_Decimal / 100) + 0x30;
   \   000000D0   0xFB90 0xF1FA      SDIV     R1,R0,R10
   \   000000D4   0xF101 0x0230      ADD      R2,R1,#+48
   \   000000D8   0x7472             STRB     R2,[R6, #+17]
    181          				TempFahrenheit_Display[6] = ((Temp_Decimal % 100) / 10) + 0x30;
   \   000000DA   0xFB0A 0x0011      MLS      R0,R10,R1,R0
   \   000000DE   0xFB90 0xF1F8      SDIV     R1,R0,R8
   \   000000E2   0xF101 0x0230      ADD      R2,R1,#+48
   \   000000E6   0x74B2             STRB     R2,[R6, #+18]
    182          				TempFahrenheit_Display[7] = ((Temp_Decimal % 100) % 10) + 0x30;
   \   000000E8   0xFB08 0x0011      MLS      R0,R8,R1,R0
   \   000000EC   0x3030             ADDS     R0,R0,#+48
   \   000000EE   0x74F0             STRB     R0,[R6, #+19]
    183          
    184          				/* Display temperature value on LCD */
    185          				LCD_PUTS(Temp_Display_Column, CurrentFont->Height * 4, TempCelsius_Display);
   \   000000F0   0x4632             MOV      R2,R6
   \   000000F2   0x6820             LDR      R0,[R4, #+0]
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x0081             LSLS     R1,R0,#+2
   \   000000F8   0xB2C9             UXTB     R1,R1
   \   000000FA   0x2021             MOVS     R0,#+33
   \   000000FC   0x.... 0x....      BL       LCD_PUTS
    186          				LCD_PUTS(Temp_Display_Column, CurrentFont->Height * 5 + 2, TempFahrenheit_Display);
   \   00000100   0xF106 0x020C      ADD      R2,R6,#+12
   \   00000104   0x6820             LDR      R0,[R4, #+0]
   \   00000106   0x6800             LDR      R0,[R0, #+0]
   \   00000108   0xEB00 0x0080      ADD      R0,R0,R0, LSL #+2
   \   0000010C   0x1C81             ADDS     R1,R0,#+2
   \   0000010E   0xB2C9             UXTB     R1,R1
   \   00000110   0x2021             MOVS     R0,#+33
   \   00000112   0x.... 0x....      BL       LCD_PUTS
    187          			}
    188              }
    189          		ADC1_Value = 0;
   \                     ??TSENSORFunc_4:
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x6038             STR      R0,[R7, #+0]
    190          	  /* Re-enable ADC1 end of conversion interrupt */
    191          	  ADC1_ITConfig(ADC1_FLAG_END_OF_CONVERSION, ENABLE);
   \   0000011A   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   0000011E   0x.... 0x....      BL       GetKey
   \   00000122   0x4683             MOV      R11,R0
   \                     ??TSENSORFunc_1:
   \   00000124   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000128   0xD036             BEQ.N    ??TSENSORFunc_5
   \   0000012A   0x.... 0x....      BL       ADC1_GetResult
   \   0000012E   0x6038             STR      R0,[R7, #+0]
   \   00000130   0x6838             LDR      R0,[R7, #+0]
   \   00000132   0x2800             CMP      R0,#+0
   \   00000134   0xD0F3             BEQ.N    ??CrossCallReturnLabel_1
   \   00000136   0x9800             LDR      R0,[SP, #+0]
   \   00000138   0x6839             LDR      R1,[R7, #+0]
   \   0000013A   0x4288             CMP      R0,R1
   \   0000013C   0xD0EB             BEQ.N    ??TSENSORFunc_4
   \   0000013E   0x6838             LDR      R0,[R7, #+0]
   \   00000140   0x9000             STR      R0,[SP, #+0]
   \   00000142   0x6838             LDR      R0,[R7, #+0]
   \   00000144   0xF3C0 0x400B      UBFX     R0,R0,#+16,#+12
   \   00000148   0x281F             CMP      R0,#+31
   \   0000014A   0xD1E4             BNE.N    ??TSENSORFunc_4
   \   0000014C   0x6838             LDR      R0,[R7, #+0]
   \   0000014E   0x0500             LSLS     R0,R0,#+20
   \   00000150   0x0D00             LSRS     R0,R0,#+20
   \   00000152   0xF2A0 0x60A4      SUBW     R0,R0,#+1700
   \   00000156   0xFB09 0xF000      MUL      R0,R9,R0
   \   0000015A   0xF241 0x7170      MOVW     R1,#+6000
   \   0000015E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000162   0xF500 0x41C2      ADD      R1,R0,#+24832
   \   00000166   0x31A8             ADDS     R1,R1,#+168
   \   00000168   0xD503             BPL.N    ??TSENSORFunc_6
   \   0000016A   0x202D             MOVS     R0,#+45
   \   0000016C   0x7030             STRB     R0,[R6, #+0]
   \   0000016E   0x4249             RSBS     R1,R1,#+0
   \   00000170   0xE001             B.N      ??TSENSORFunc_7
   \                     ??TSENSORFunc_6:
   \   00000172   0x202B             MOVS     R0,#+43
   \   00000174   0x7030             STRB     R0,[R6, #+0]
   \                     ??TSENSORFunc_7:
   \   00000176   0xFB91 0xF2F9      SDIV     R2,R1,R9
   \   0000017A   0xFB09 0x1012      MLS      R0,R9,R2,R1
   \   0000017E   0xEB01 0x01C1      ADD      R1,R1,R1, LSL #+3
   \   00000182   0x2305             MOVS     R3,#+5
   \   00000184   0xFB91 0xF1F3      SDIV     R1,R1,R3
   \   00000188   0xF511 0x41FA      ADDS     R1,R1,#+32000
   \   0000018C   0xF57F 0xAF68      BPL.W    ??TSENSORFunc_2
   \   00000190   0x232D             MOVS     R3,#+45
   \   00000192   0x7333             STRB     R3,[R6, #+12]
   \   00000194   0x4249             RSBS     R1,R1,#+0
   \   00000196   0xE765             B.N      ??TSENSORFunc_3
    192            }
    193          
    194            CurrentFont = OldFont;
   \                     ??TSENSORFunc_5:
   \   00000198   0x9802             LDR      R0,[SP, #+8]
   \   0000019A   0x6020             STR      R0,[R4, #+0]
    195            CurrentMethod = OldMethod;
   \   0000019C   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000001A0   0x7028             STRB     R0,[R5, #+0]
    196          
    197            /* Disable interrupt on ADC */
    198            NVIC_DisableIRQ(ADC_IRQn);
   \   000001A2   0x....             LDR.N    R0,??DataTable1_6  ;; 0xe000e180
   \   000001A4   0xF44F 0x3100      MOV      R1,#+131072
   \   000001A8   0x6001             STR      R1,[R0, #+0]
    199            /* Disable ADC end of conversion interrupt */
    200            ADC1_ITConfig(ADC1_FLAG_END_OF_CONVERSION, DISABLE);
   \   000001AA   0x2100             MOVS     R1,#+0
   \   000001AC   0x.... 0x....      BL       ??Subroutine0_0
    201            /* ADC1 disable */
    202            ADC1_Cmd(DISABLE);
   \                     ??CrossCallReturnLabel_0:
   \   000001B0   0x2000             MOVS     R0,#+0
   \   000001B2   0x.... 0x....      BL       ADC1_Cmd
    203            DisplayMenu();
   \   000001B6   0xE8BD 0x4FF7      POP      {R0-R2,R4-R11,LR}
   \   000001BA   0x.... 0x....      B.W      DisplayMenu
    204          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x2101             MOVS     R1,#+1
   \                     ??Subroutine0_0:
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x.... 0x....      B.W      ADC1_ITConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     CurrentFont

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     CurrentMethod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     Font_6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     TempCelsius_Display

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     ADC1_Value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Temperature">`:
   \   00000000   0x54 0x65          DC8 "Temperature"
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x00    
    205          
    206          /** @} */ /* End of group Menu_TSENSOR_Private_Functions */
    207          
    208          /** @} */ /* End of group Menu_TSENSOR */
    209          
    210          /** @} */ /* End of group Menu */
    211          
    212          /** @} */ /* End of group __MDR32F9Qx_Eval_Demo */
    213          
    214          /******************* (C) COPYRIGHT 2010 Phyton *******************
    215          *
    216          * END OF FILE Menu_tsensor.c */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       48  TSENSORFunc
             48 -> ADC1_Cmd
             48 -> ADC1_GetResult
             48 -> ADC1_ITConfig
             48 -> ADC_Temp_Sensor_Config
              0 -> DisplayMenu
             48 -> DisplayMenuTitle
             48 -> GetKey
             48 -> LCD_CLS
             48 -> LCD_PUTS


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "Temperature">
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       8  ?Subroutine0
     446  TSENSORFunc
      24  TempCelsius_Display
          TempFahrenheit_Display
       4  TempCelsius_Value
       4  Temp_Decimal
       4  Temp_Value_Fahrenheit

 
  12 bytes in section .bss
  24 bytes in section .data
 494 bytes in section .text
 
 494 bytes of CODE memory
  36 bytes of DATA memory

Errors: none
Warnings: none
