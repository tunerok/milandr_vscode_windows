###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:26:00 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu_text.c                              #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu_text.c --preprocess                 #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\Menu_text.lst    #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\Menu_text.o       #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR1986VE91_Eval\src\Menu_text.c
      1          /**
      2            ******************************************************************************
      3            * @file    Menu_text.c
      4            * @author  Phyton Application Team
      5            * @version V3.0.0
      6            * @date    10.09.2011
      7            * @brief   This file contains all the "Text" menu handlers
      8            ******************************************************************************
      9            * <br><br>
     10            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     11            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     12            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY
     13            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     14            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     15            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     16            *
     17            * <h2><center>&copy; COPYRIGHT 2011 Phyton</center></h2>
     18            */
     19          
     20          /* Includes ------------------------------------------------------------------*/
     21          #include <string.h>
     22          #include <MDR32F9Qx_adc.h>
     23          #include "lcd.h"
     24          #include "Menu.h"
     25          #include "Menu_items.h"
     26          #include "text.h"
     27          #include "joystick.h"
     28          #include "adc.h"
     29          
     30          /** @addtogroup __MDR32F9Qx_Eval_Demo MDR32F9Qx Demonstration Example
     31            * @{
     32            */
     33          
     34          /** @addtogroup Menu Menu
     35            * @{
     36            */
     37          
     38          /** @addtogroup Menu_Text Menu Text
     39            * @{
     40            */
     41          
     42          /** @defgroup Menu_Text_Private_Functions Menu Text Private Functions
     43            * @{
     44            */
     45          
     46          /*******************************************************************************
     47          * Function Name  : FontFunc
     48          * Description    : Prints font samples
     49          * Input          : None
     50          * Output         : None
     51          * Return         : None
     52          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     53          void FontFunc(void)
     54          {
   \                     FontFunc:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     55            sFONT *OldFont = CurrentFont;
   \   00000002   0x.... 0x....      BL       ?Subroutine3
     56          
     57            /* Print the header and wait for key up */
     58            LCD_CLS();
     59            CurrentMethod = MET_AND;
   \                     ??CrossCallReturnLabel_20:
   \   00000006   0x.... 0x....      BL       ?Subroutine2
     60            CurrentFont = &Font_6x8;
     61            DisplayMenuTitle("Font examples");
   \                     ??CrossCallReturnLabel_17:
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant "Font examples">`
   \   0000000E   0x.... 0x....      BL       DisplayMenuTitle
     62            WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??FontFunc_0:
   \   00000012   0x.... 0x....      BL       GetKey
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD0FB             BEQ.N    ??FontFunc_0
     63          
     64            /* Font parameters */
     65            LCD_PUTS(0, 12, "Font6X8");
   \   0000001A   0x.... 0x....      ADR.W    R2,`?<Constant "Font6X8">`
   \   0000001E   0x210C             MOVS     R1,#+12
   \   00000020   0x.... 0x....      BL       ??Subroutine1_1
     66          
     67            CurrentFont = &Font_12x16;
   \                     ??CrossCallReturnLabel_9:
   \   00000024   0x....             LDR.N    R0,??DataTable23
   \   00000026   0x6020             STR      R0,[R4, #+0]
     68            LCD_PUTS(0, 20, "Font12X16");
   \   00000028   0x.... 0x....      ADR.W    R2,`?<Constant "Font12X16">`
   \   0000002C   0x2114             MOVS     R1,#+20
   \   0000002E   0x.... 0x....      BL       ??Subroutine1_1
     69          
     70            CurrentFont = &Font_7x10_thin;
   \                     ??CrossCallReturnLabel_8:
   \   00000032   0x....             LDR.N    R0,??DataTable23_1
   \   00000034   0x6020             STR      R0,[R4, #+0]
     71            LCD_PUTS(0, 36, "Font7X10");
   \   00000036   0x.... 0x....      ADR.W    R2,`?<Constant "Font7X10">`
   \   0000003A   0x2124             MOVS     R1,#+36
   \   0000003C   0x.... 0x....      BL       ??Subroutine1_1
     72          
     73            CurrentFont = &Font_7x10_bold;
   \                     ??CrossCallReturnLabel_7:
   \   00000040   0x....             LDR.N    R0,??DataTable23_2
   \   00000042   0x6020             STR      R0,[R4, #+0]
     74            LCD_PUTS(0, 47, "Font7X10 bold");
   \   00000044   0x.... 0x....      ADR.W    R2,`?<Constant "Font7X10 bold">`
   \   00000048   0x212F             MOVS     R1,#+47
   \   0000004A   0x.... 0x....      BL       ??Subroutine1_1
     75          
     76            /* Wait for SEL pressed and return to the main menu */
     77            CurrentFont = OldFont;
   \                     ??CrossCallReturnLabel_6:
   \   0000004E   0x6025             STR      R5,[R4, #+0]
     78            BackToMenuOnSel();
   \   00000050   0x....             B.N      ?Subroutine0
     79          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x....             LDR.N    R4,??DataTable23_3
   \   00000002   0x6825             LDR      R5,[R4, #+0]
   \   00000004   0x.... 0x....      B.W      LCD_CLS

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x....             LDR.N    R0,??DataTable23_4
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x7001             STRB     R1,[R0, #+0]
   \   00000006   0x....             LDR.N    R0,??DataTable23_5
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000004   0x.... 0x....      B.W      BackToMenuOnSel

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x1C81             ADDS     R1,R0,#+2
   \                     ??Subroutine1_0:
   \   00000002   0xB2C9             UXTB     R1,R1
   \                     ??Subroutine1_1:
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      B.W      LCD_PUTS
     80          
     81          /*******************************************************************************
     82          * Function Name  : StyleFunc
     83          * Description    : Prints style samples
     84          * Input          : None
     85          * Output         : None
     86          * Return         : None
     87          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     88          void StyleFunc(void)
     89          {
   \                     StyleFunc:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     90            sFONT *OldFont = CurrentFont;
   \   00000002   0x.... 0x....      BL       ?Subroutine3
     91          
     92            LCD_CLS();
     93            CurrentMethod = MET_AND;
   \                     ??CrossCallReturnLabel_19:
   \   00000006   0x.... 0x....      BL       ?Subroutine2
     94            CurrentFont = &Font_6x8;
     95          
     96            /* Print prompt and wait for key SEL pressed */
     97            LCD_PUTS(0, 12, "Turn the Trimmer TRIM");
   \                     ??CrossCallReturnLabel_18:
   \   0000000A   0x.... 0x....      ADR.W    R2,`?<Constant "Turn the Trimmer TRIM">`
   \   0000000E   0x210C             MOVS     R1,#+12
   \   00000010   0x.... 0x....      BL       ??Subroutine1_1
     98            LCD_PUTS(0, 22, "to control the delay");
   \                     ??CrossCallReturnLabel_5:
   \   00000014   0x.... 0x....      ADR.W    R2,`?<Constant "to control the delay">`
   \   00000018   0x2116             MOVS     R1,#+22
   \   0000001A   0x.... 0x....      BL       ??Subroutine1_1
     99            LCD_PUTS(0, 32, "between style frames.");
   \                     ??CrossCallReturnLabel_4:
   \   0000001E   0x.... 0x....      ADR.W    R2,`?<Constant "between style frames.">`
   \   00000022   0x2120             MOVS     R1,#+32
   \   00000024   0x.... 0x....      BL       ??Subroutine1_1
    100            LCD_PUTS(0, 42, "Push JoyStick SEL to");
   \                     ??CrossCallReturnLabel_3:
   \   00000028   0x.... 0x....      ADR.W    R2,`?<Constant "Push JoyStick SEL to">`
   \   0000002C   0x212A             MOVS     R1,#+42
   \   0000002E   0x.... 0x....      BL       ??Subroutine1_1
    101            LCD_PUTS(0, 52, "start or stop.");
   \                     ??CrossCallReturnLabel_2:
   \   00000032   0x.... 0x....      ADR.W    R2,`?<Constant "start or stop.">`
   \   00000036   0x2134             MOVS     R1,#+52
   \   00000038   0x.... 0x....      BL       ??Subroutine1_1
    102          
    103            while (!KEY_PRESSED(SEL))
   \                     ??CrossCallReturnLabel_1:
   \   0000003C   0x.... 0x....      BL       GetKey
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD1FB             BNE.N    ??CrossCallReturnLabel_1
    104            {
    105            }
    106          
    107            /* Configure ADC channel 7 */
    108            ADC_Config();
   \   00000044   0x.... 0x....      BL       ADC_Config
    109            /* ADC1 enable */
    110            ADC1_Cmd(ENABLE);
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x.... 0x....      BL       ADC1_Cmd
    111          
    112            /* Print the header and wait for key up */
    113            LCD_CLS();
   \   0000004E   0x.... 0x....      BL       LCD_CLS
    114            DisplayMenuTitle("Style examples");
   \   00000052   0x.... 0x....      ADR.W    R0,`?<Constant "Style examples">`
   \   00000056   0x.... 0x....      BL       DisplayMenuTitle
    115            WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??StyleFunc_0:
   \   0000005A   0x.... 0x....      BL       GetKey
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD0FB             BEQ.N    ??StyleFunc_0
    116          
    117            /* Style samples */
    118            do
    119            {
    120              LCD_PUTS_Ex(0, 12, "Blink     ", StyleBlink);
   \                     ??StyleFunc_1:
   \   00000062   0x2301             MOVS     R3,#+1
   \   00000064   0x.... 0x....      ADR.W    R2,`?<Constant "Blink     ">`
   \   00000068   0x210C             MOVS     R1,#+12
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       LCD_PUTS_Ex
    121              if (KEY_PRESSED(SEL)) break;
   \   00000070   0x.... 0x....      BL       GetKey
   \   00000074   0xB1A0             CBZ.N    R0,??StyleFunc_2
    122              LCD_PUTS_Ex(0, 32, "FlipFlop", StyleFlipFlop);
   \   00000076   0x2302             MOVS     R3,#+2
   \   00000078   0x.... 0x....      ADR.W    R2,`?<Constant "FlipFlop">`
   \   0000007C   0x2120             MOVS     R1,#+32
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x.... 0x....      BL       LCD_PUTS_Ex
    123              if (KEY_PRESSED(SEL)) break;
   \   00000084   0x.... 0x....      BL       GetKey
   \   00000088   0xB150             CBZ.N    R0,??StyleFunc_2
    124              LCD_PUTS_Ex(0, 52, "Vibratory", StyleVibratory);
   \   0000008A   0x2303             MOVS     R3,#+3
   \   0000008C   0x.... 0x....      ADR.W    R2,`?<Constant "Vibratory">`
   \   00000090   0x2134             MOVS     R1,#+52
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x.... 0x....      BL       LCD_PUTS_Ex
    125            } while (!KEY_PRESSED(SEL));
   \   00000098   0x.... 0x....      BL       GetKey
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD1E0             BNE.N    ??StyleFunc_1
    126          
    127            /* SEL is pressed - return to the main menu */
    128            CurrentFont = OldFont;
   \                     ??StyleFunc_2:
   \   000000A0   0x6025             STR      R5,[R4, #+0]
    129            /* ADC1 disable */
    130            ADC1_Cmd(DISABLE);
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x.... 0x....      BL       ADC1_Cmd
    131            DisplayMenu();
   \   000000A8   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   000000AC   0x.... 0x....      B.W      DisplayMenu
    132          }
    133          
    134          /** @defgroup Menu_Text_Private_Constants Menu Text Private Constants
    135            * @{
    136            */
    137          
    138          /* The text for "e-book" demonstration */

   \                                 In section .data, align 4
    139          static uint8_t Book[16][22] = {
   \                     Book:
   \   00000000   0x4D 0x69          DC8 "Microcontrollers of  "
   \              0x63 0x72    
   \              0x6F 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x6C 0x65    
   \              0x72 0x73    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x20 0x00    
   \   00000016   0x4D 0x44          DC8 "MDR32F9Qx series are "
   \              0x52 0x33    
   \              0x32 0x46    
   \              0x39 0x51    
   \              0x78 0x20    
   \              0x73 0x65    
   \              0x72 0x69    
   \              0x65 0x73    
   \              0x20 0x61    
   \              0x72 0x65    
   \              0x20 0x00    
   \   0000002C   0x6D 0x69          DC8 "microcontrollers     "
   \              0x63 0x72    
   \              0x6F 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x6C 0x65    
   \              0x72 0x73    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000042   0x77 0x69          DC8 "with embedded Flash  "
   \              0x74 0x68    
   \              0x20 0x65    
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x64 0x65    
   \              0x64 0x20    
   \              0x46 0x6C    
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x20 0x00    
   \   00000058   0x70 0x72          DC8 "program memory; they "
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x20    
   \              0x6D 0x65    
   \              0x6D 0x6F    
   \              0x72 0x79    
   \              0x3B 0x20    
   \              0x74 0x68    
   \              0x65 0x79    
   \              0x20 0x00    
   \   0000006E   0x61 0x72          DC8 "are built on the     "
   \              0x65 0x20    
   \              0x62 0x75    
   \              0x69 0x6C    
   \              0x74 0x20    
   \              0x6F 0x6E    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000084   0x62 0x61          DC8 "base of high perfo-  "
   \              0x73 0x65    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x68 0x69    
   \              0x67 0x68    
   \              0x20 0x70    
   \              0x65 0x72    
   \              0x66 0x6F    
   \              0x2D 0x20    
   \              0x20 0x00    
   \   0000009A   0x6D 0x61          DC8 "mance RISC processor "
   \              0x6E 0x63    
   \              0x65 0x20    
   \              0x52 0x49    
   \              0x53 0x43    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x6F 0x72    
   \              0x20 0x00    
   \   000000B0   0x63 0x6F          DC8 "core Cortex-M3.      "
   \              0x72 0x65    
   \              0x20 0x43    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x78 0x2D    
   \              0x4D 0x33    
   \              0x2E 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   000000C6   0x4D 0x69          DC8 "Microcontroller works"
   \              0x63 0x72    
   \              0x6F 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x6C 0x65    
   \              0x72 0x20    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x73 0x00    
   \   000000DC   0x6F 0x6E          DC8 "on the up to 80 Mhz  "
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x75    
   \              0x70 0x20    
   \              0x74 0x6F    
   \              0x20 0x38    
   \              0x30 0x20    
   \              0x4D 0x68    
   \              0x7A 0x20    
   \              0x20 0x00    
   \   000000F2   0x66 0x72          DC8 "frecuency and        "
   \              0x65 0x63    
   \              0x75 0x65    
   \              0x6E 0x63    
   \              0x79 0x20    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000108   0x63 0x6F          DC8 "contains 128 K Flash "
   \              0x6E 0x74    
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x20 0x31    
   \              0x32 0x38    
   \              0x20 0x4B    
   \              0x20 0x46    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x20 0x00    
   \   0000011E   0x70 0x72          DC8 "program memory and   "
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x20    
   \              0x6D 0x65    
   \              0x6D 0x6F    
   \              0x72 0x79    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000134   0x33 0x32          DC8 "32 K of RAM.         "
   \              0x20 0x4B    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x52 0x41    
   \              0x4D 0x2E    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   0000014A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    140              {"Microcontrollers of  "},
    141              {"MDR32F9Qx series are "},
    142              {"microcontrollers     "},
    143              {"with embedded Flash  "},
    144              {"program memory; they "},
    145              {"are built on the     "},
    146              {"base of high perfo-  "},
    147              {"mance RISC processor "},
    148              {"core Cortex-M3.      "},
    149              {"Microcontroller works"},
    150              {"on the up to 80 Mhz  "},
    151              {"frecuency and        "},
    152              {"contains 128 K Flash "},
    153              {"program memory and   "},
    154              {"32 K of RAM.         "}
    155          };
    156          
    157          /** @} */ /* End of group Menu_Text_Private_Constants */
    158          
    159          /*******************************************************************************
    160          * Function Name  : BookFunc
    161          * Description    : Prints "e-book" text
    162          * Input          : None
    163          * Output         : None
    164          * Return         : None
    165          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    166          void BookFunc(void)
    167          {
   \                     BookFunc:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    168            uint32_t top_ind, key, i;
    169          
    170            /* Clear screen and wait for key up */
    171            LCD_CLS();
   \   00000002   0x.... 0x....      BL       LCD_CLS
    172            CurrentMethod = MET_AND;
   \   00000006   0x....             LDR.N    R0,??DataTable23_4
   \   00000008   0x2104             MOVS     R1,#+4
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
    173            WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??BookFunc_0:
   \   0000000C   0x.... 0x....      BL       GetKey
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD0FB             BEQ.N    ??BookFunc_0
    174          
    175            /* Key handling loop */
    176            for (top_ind = 0, key = NOKEY; key != SEL; )
   \   00000014   0x2400             MOVS     R4,#+0
   \   00000016   0x....             LDR.N    R5,??DataTable23_3
   \   00000018   0x....             LDR.N    R6,??DataTable23_6
   \   0000001A   0xE000             B.N      ??BookFunc_1
   \                     ??BookFunc_2:
   \   0000001C   0xB30F             CBZ.N    R7,??BookFunc_3
    177            {
    178              /* Print the text and wait for key pressed */
    179              for (i = 0; i < 8; i++)
   \                     ??BookFunc_1:
   \   0000001E   0x2700             MOVS     R7,#+0
    180              {
    181                LCD_PUTS(0, (CurrentFont->Height) * i, Book[top_ind + i]);
   \                     ??BookFunc_4:
   \   00000020   0x1938             ADDS     R0,R7,R4
   \   00000022   0x2116             MOVS     R1,#+22
   \   00000024   0xFB01 0x6200      MLA      R2,R1,R0,R6
   \   00000028   0x6828             LDR      R0,[R5, #+0]
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xFB07 0xF100      MUL      R1,R7,R0
   \   00000030   0x.... 0x....      BL       ??Subroutine1_0
    182              }
   \                     ??CrossCallReturnLabel_14:
   \   00000034   0x1C7F             ADDS     R7,R7,#+1
   \   00000036   0x2F08             CMP      R7,#+8
   \   00000038   0xD3F2             BCC.N    ??BookFunc_4
    183              WAIT_UNTIL_ANY_KEY;
   \                     ??BookFunc_5:
   \   0000003A   0x.... 0x....      BL       GetKey
   \   0000003E   0x2805             CMP      R0,#+5
   \   00000040   0xD0FB             BEQ.N    ??BookFunc_5
    184          
    185              /* Key pressed handling */
    186              key = GetKey();
   \   00000042   0x.... 0x....      BL       GetKey
   \   00000046   0x4607             MOV      R7,R0
    187              switch (key)
   \   00000048   0x2801             CMP      R0,#+1
   \   0000004A   0xD002             BEQ.N    ??BookFunc_6
   \   0000004C   0x2802             CMP      R0,#+2
   \   0000004E   0xD004             BEQ.N    ??BookFunc_7
   \   00000050   0xE7E4             B.N      ??BookFunc_2
    188              {
    189                /* Scroll up */
    190                case UP:
    191                  if (top_ind > 0)
   \                     ??BookFunc_6:
   \   00000052   0x2C00             CMP      R4,#+0
   \   00000054   0xD0E3             BEQ.N    ??BookFunc_1
   \   00000056   0x1E64             SUBS     R4,R4,#+1
   \   00000058   0xE7E1             B.N      ??BookFunc_1
    192                  {
    193                    top_ind--;
    194                  }
    195                  break;
    196                /* Scroll down */
    197                case DOWN:
    198                  if (top_ind < 7)
   \                     ??BookFunc_7:
   \   0000005A   0x2C07             CMP      R4,#+7
   \   0000005C   0xD2DF             BCS.N    ??BookFunc_1
   \   0000005E   0x1C64             ADDS     R4,R4,#+1
   \   00000060   0xE7DD             B.N      ??BookFunc_1
    199                  {
    200                    top_ind++;
    201                  }
    202                  break;
    203              }
    204            }
    205          
    206            /* SEL is pressed - return to main menu */
    207            WAIT_UNTIL_KEY_RELEASED(key);
   \                     ??BookFunc_3:
   \   00000062   0x.... 0x....      BL       GetKey
   \   00000066   0x42B8             CMP      R0,R7
   \   00000068   0xD0FB             BEQ.N    ??BookFunc_3
    208            DisplayMenu();
   \   0000006A   0xE8BD 0x40F1      POP      {R0,R4-R7,LR}
   \   0000006E   0x.... 0x....      B.W      DisplayMenu
    209          }
    210          
    211          /*******************************************************************************
    212          * Function Name  : AboutFunc
    213          * Description    : Displays "About"
    214          * Input          : None
    215          * Output         : None
    216          * Return         : None
    217          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    218          void AboutFunc(void)
    219          {
   \                     AboutFunc:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    220          
    221          #if defined (USE_MDR32F9Q1_Rev0) || defined (USE_MDR32F9Q1_Rev1)
    222          #define EVAL_BOARD_NAME                "   Milandr MDR32F9Q1   "
    223          #elif defined (USE_MDR32F9Q2_Rev0) || defined (USE_MDR32F9Q2_Rev1)
    224          #define EVAL_BOARD_NAME                "   Milandr MDR32F9Q2  "
    225          #elif defined (USE_MDR32F9Q3_Rev0) || defined (USE_MDR32F9Q3_Rev1)
    226          #define EVAL_BOARD_NAME                "   Milandr MDR32F9Q3  "
    227          #endif
    228          
    229            /* Display About text */
    230            LCD_CLS();
   \   00000002   0x.... 0x....      BL       LCD_CLS
    231            CurrentMethod = MET_AND;
   \   00000006   0x4805             LDR.N    R0,??AboutFunc_0
   \   00000008   0x2104             MOVS     R1,#+4
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
    232          
    233            LCD_PUTS(0, 0, EVAL_BOARD_NAME);
   \   0000000C   0x.... 0x....      ADR.W    R2,`?<Constant "   Milandr MDR32F9Q1   ">`
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x.... 0x....      BL       ??Subroutine1_1
    234            LCD_PUTS(0, CurrentFont->Height + 1, "   Evaluation board  ");
   \                     ??CrossCallReturnLabel_0:
   \   00000016   0x4C02             LDR.N    R4,??AboutFunc_0+0x4
   \   00000018   0xE004             B.N      ??AboutFunc_1
   \   0000001A   0xBF00             Nop      
   \                     ??AboutFunc_0:
   \   0000001C   0x........         DC32     CurrentMethod
   \   00000020   0x........         DC32     CurrentFont
   \                     ??AboutFunc_1:
   \   00000024   0x.... 0x....      ADR.W    R2,`?<Constant "   Evaluation board  ">`
   \   00000028   0x6820             LDR      R0,[R4, #+0]
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x1C41             ADDS     R1,R0,#+1
   \   0000002E   0x.... 0x....      BL       ??Subroutine1_0
    235            LCD_PUTS(0, (CurrentFont->Height) * 2 + 2, "          ");
   \                     ??CrossCallReturnLabel_13:
   \   00000032   0x.... 0x....      ADR.W    R5,`?<Constant "          ">`
   \   00000036   0x462A             MOV      R2,R5
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x0040             LSLS     R0,R0,#+1
   \   0000003E   0x.... 0x....      BL       ?Subroutine1
    236            LCD_PUTS(0, (CurrentFont->Height) * 3 + 2, "          ");
   \                     ??CrossCallReturnLabel_16:
   \   00000042   0x462A             MOV      R2,R5
   \   00000044   0x6820             LDR      R0,[R4, #+0]
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xEB00 0x0040      ADD      R0,R0,R0, LSL #+1
   \   0000004C   0x.... 0x....      BL       ?Subroutine1
    237            LCD_PUTS(0, (CurrentFont->Height) * 4 + 3, " Appl. example v.3.0");
   \                     ??CrossCallReturnLabel_15:
   \   00000050   0x.... 0x....      ADR.W    R2,`?<Constant " Appl. example v.3.0">`
   \   00000054   0x6820             LDR      R0,[R4, #+0]
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x0080             LSLS     R0,R0,#+2
   \   0000005A   0x1CC1             ADDS     R1,R0,#+3
   \   0000005C   0x.... 0x....      BL       ??Subroutine1_0
    238            LCD_PUTS(0, (CurrentFont->Height) * 5 + 4, "     Phyton 2011   ");
   \                     ??CrossCallReturnLabel_12:
   \   00000060   0x.... 0x....      ADR.W    R2,`?<Constant "     Phyton 2011   ">`
   \   00000064   0x6820             LDR      R0,[R4, #+0]
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xEB00 0x0080      ADD      R0,R0,R0, LSL #+2
   \   0000006C   0x1D01             ADDS     R1,R0,#+4
   \   0000006E   0x.... 0x....      BL       ??Subroutine1_0
    239            LCD_PUTS(0, (CurrentFont->Height) * 6 + 5, "    www.phyton.ru  ");
   \                     ??CrossCallReturnLabel_11:
   \   00000072   0x.... 0x....      ADR.W    R2,`?<Constant "    www.phyton.ru  ">`
   \   00000076   0x6820             LDR      R0,[R4, #+0]
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x2106             MOVS     R1,#+6
   \   0000007C   0x4348             MULS     R0,R1,R0
   \   0000007E   0x1D41             ADDS     R1,R0,#+5
   \   00000080   0x.... 0x....      BL       ??Subroutine1_0
    240          
    241            /* Wait for SEL pressed and return to main menu */
    242            BackToMenuOnSel();
   \                     ??CrossCallReturnLabel_10:
   \   00000084                      REQUIRE ?Subroutine0
   \   00000084                      ;; // Fall through to label ?Subroutine0
    243          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     Font_12x16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0x........         DC32     Font_7x10_thin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0x........         DC32     Font_7x10_bold

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \   00000000   0x........         DC32     CurrentFont

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \   00000000   0x........         DC32     CurrentMethod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \   00000000   0x........         DC32     Font_6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \   00000000   0x........         DC32     Book

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Font examples">`:
   \   00000000   0x46 0x6F          DC8 "Font examples"
   \              0x6E 0x74    
   \              0x20 0x65    
   \              0x78 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x73 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Font6X8">`:
   \   00000000   0x46 0x6F          DC8 "Font6X8"
   \              0x6E 0x74    
   \              0x36 0x58    
   \              0x38 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Font12X16">`:
   \   00000000   0x46 0x6F          DC8 "Font12X16"
   \              0x6E 0x74    
   \              0x31 0x32    
   \              0x58 0x31    
   \              0x36 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Font7X10">`:
   \   00000000   0x46 0x6F          DC8 "Font7X10"
   \              0x6E 0x74    
   \              0x37 0x58    
   \              0x31 0x30    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Font7X10 bold">`:
   \   00000000   0x46 0x6F          DC8 "Font7X10 bold"
   \              0x6E 0x74    
   \              0x37 0x58    
   \              0x31 0x30    
   \              0x20 0x62    
   \              0x6F 0x6C    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Turn the Trimmer TRIM">`:
   \   00000000   0x54 0x75          DC8 "Turn the Trimmer TRIM"
   \              0x72 0x6E    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x54    
   \              0x72 0x69    
   \              0x6D 0x6D    
   \              0x65 0x72    
   \              0x20 0x54    
   \              0x52 0x49    
   \              0x4D 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "to control the delay">`:
   \   00000000   0x74 0x6F          DC8 "to control the delay"
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x64    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "between style frames.">`:
   \   00000000   0x62 0x65          DC8 "between style frames."
   \              0x74 0x77    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x73 0x74    
   \              0x79 0x6C    
   \              0x65 0x20    
   \              0x66 0x72    
   \              0x61 0x6D    
   \              0x65 0x73    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Push JoyStick SEL to">`:
   \   00000000   0x50 0x75          DC8 "Push JoyStick SEL to"
   \              0x73 0x68    
   \              0x20 0x4A    
   \              0x6F 0x79    
   \              0x53 0x74    
   \              0x69 0x63    
   \              0x6B 0x20    
   \              0x53 0x45    
   \              0x4C 0x20    
   \              0x74 0x6F    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "start or stop.">`:
   \   00000000   0x73 0x74          DC8 "start or stop."
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x6F 0x72    
   \              0x20 0x73    
   \              0x74 0x6F    
   \              0x70 0x2E    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Style examples">`:
   \   00000000   0x53 0x74          DC8 "Style examples"
   \              0x79 0x6C    
   \              0x65 0x20    
   \              0x65 0x78    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x73    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Blink     ">`:
   \   00000000   0x42 0x6C          DC8 "Blink     "
   \              0x69 0x6E    
   \              0x6B 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FlipFlop">`:
   \   00000000   0x46 0x6C          DC8 "FlipFlop"
   \              0x69 0x70    
   \              0x46 0x6C    
   \              0x6F 0x70    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Vibratory">`:
   \   00000000   0x56 0x69          DC8 "Vibratory"
   \              0x62 0x72    
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x79 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Milandr MDR32F9Q1   ">`:
   \   00000000   0x20 0x20          DC8 "   Milandr MDR32F9Q1   "
   \              0x20 0x4D    
   \              0x69 0x6C    
   \              0x61 0x6E    
   \              0x64 0x72    
   \              0x20 0x4D    
   \              0x44 0x52    
   \              0x33 0x32    
   \              0x46 0x39    
   \              0x51 0x31    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Evaluation board  ">`:
   \   00000000   0x20 0x20          DC8 "   Evaluation board  "
   \              0x20 0x45    
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x62 0x6F    
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "          ">`:
   \   00000000   0x20 0x20          DC8 "          "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Appl. example v.3.0">`:
   \   00000000   0x20 0x41          DC8 " Appl. example v.3.0"
   \              0x70 0x70    
   \              0x6C 0x2E    
   \              0x20 0x65    
   \              0x78 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x76    
   \              0x2E 0x33    
   \              0x2E 0x30    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "     Phyton 2011   ">`:
   \   00000000   0x20 0x20          DC8 "     Phyton 2011   "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x68 0x79    
   \              0x74 0x6F    
   \              0x6E 0x20    
   \              0x32 0x30    
   \              0x31 0x31    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    www.phyton.ru  ">`:
   \   00000000   0x20 0x20          DC8 "    www.phyton.ru  "
   \              0x20 0x20    
   \              0x77 0x77    
   \              0x77 0x2E    
   \              0x70 0x68    
   \              0x79 0x74    
   \              0x6F 0x6E    
   \              0x2E 0x72    
   \              0x75 0x20    
   \              0x20 0x00    
    244          
    245          /** @} */ /* End of group Menu_Text_Private_Functions */
    246          
    247          /** @} */ /* End of group Menu_Text */
    248          
    249          /** @} */ /* End of group Menu */
    250          
    251          /** @} */ /* End of group __MDR32F9Qx_Eval_Demo */
    252          
    253          /******************* (C) COPYRIGHT 2011 Phyton *********************************
    254          *
    255          * END OF FILE Menu_text.c */
    256          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  AboutFunc
              0 -> BackToMenuOnSel
             16 -> LCD_CLS
             16 -> LCD_PUTS
       24  BookFunc
              0 -> DisplayMenu
             24 -> GetKey
             24 -> LCD_CLS
             24 -> LCD_PUTS
       16  FontFunc
              0 -> BackToMenuOnSel
             16 -> DisplayMenuTitle
             16 -> GetKey
             16 -> LCD_CLS
             16 -> LCD_PUTS
       16  StyleFunc
             16 -> ADC1_Cmd
             16 -> ADC_Config
              0 -> DisplayMenu
             16 -> DisplayMenuTitle
             16 -> GetKey
             16 -> LCD_CLS
             16 -> LCD_PUTS
             16 -> LCD_PUTS_Ex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "          ">
      20  ?<Constant "     Phyton 2011   ">
      20  ?<Constant "    www.phyton.ru  ">
      24  ?<Constant "   Evaluation board  ">
      24  ?<Constant "   Milandr MDR32F9Q1   ">
      24  ?<Constant " Appl. example v.3.0">
      12  ?<Constant "Blink     ">
      12  ?<Constant "FlipFlop">
      16  ?<Constant "Font examples">
      12  ?<Constant "Font12X16">
       8  ?<Constant "Font6X8">
      16  ?<Constant "Font7X10 bold">
      12  ?<Constant "Font7X10">
      24  ?<Constant "Push JoyStick SEL to">
      16  ?<Constant "Style examples">
      24  ?<Constant "Turn the Trimmer TRIM">
      12  ?<Constant "Vibratory">
      24  ?<Constant "between style frames.">
      16  ?<Constant "start or stop.">
      24  ?<Constant "to control the delay">
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_2
       4  ??DataTable23_3
       4  ??DataTable23_4
       4  ??DataTable23_5
       4  ??DataTable23_6
       8  ?Subroutine0
      10  ?Subroutine1
      12  ?Subroutine2
       8  ?Subroutine3
     132  AboutFunc
     352  Book
     114  BookFunc
      82  FontFunc
     176  StyleFunc

 
 352 bytes in section .data
 922 bytes in section .text
 
 922 bytes of CODE memory
 352 bytes of DATA memory

Errors: none
Warnings: none
