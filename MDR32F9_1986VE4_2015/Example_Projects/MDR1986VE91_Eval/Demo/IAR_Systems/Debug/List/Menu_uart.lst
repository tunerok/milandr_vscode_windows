###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:26:01 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu_uart.c                              #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu_uart.c --preprocess                 #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\Menu_uart.lst    #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\Menu_uart.o       #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR1986VE91_Eval\src\Menu_uart.c
      1          /**
      2            ******************************************************************************
      3            * @file    Menu_uart.c
      4            * @author  Phyton Application Team
      5            * @version V1.2.0
      6            * @date    09.09.2010
      7            * @brief   This file contains all the "UART" menu handlers.
      8            *          Only UART1 is used in this example; output transmitter line
      9            *          UARTTXD is shortcutted to UARTRXD receiver input.
     10            ******************************************************************************
     11            * <br><br>
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
     20            */
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "MDR32F9Qx_config.h"
     23          #include <MDR32Fx.h>
     24          #include <MDR32F9Qx_port.h>
     25          #include <MDR32F9Qx_rst_clk.h>
     26          #include <MDR32F9Qx_uart.h>
     27          #include "Menu.h"
     28          #include "Menu_items.h"
     29          #include "leds.h"
     30          #include "lcd.h"
     31          #include "text.h"
     32          #include "joystick.h"
     33          #include "MDR32F9Qx_it.h"
     34          
     35          /** @addtogroup __MDR32F9Qx_Eval_Demo MDR32F9Qx Demonstration Example
     36            * @{
     37            */
     38          
     39          /** @addtogroup Menu Menu
     40            * @{
     41            */
     42          
     43          /** @addtogroup Menu_UART Menu UART
     44            * @{
     45            */
     46          
     47          /** @defgroup Menu_UART_Private_Constants Menu UART Private Constants
     48            * @{
     49            */
     50          
     51          #define SEND_STRING_START_COLUMN         6
     52          #define SEND_STRING_LINE                 4
     53          #define SEND_STRING_LINE_OFFS            8
     54          #define RECEIVE_STRING_START_COLUMN      6
     55          #define RECEIVE_STRING_LINE              5
     56          #define RECEIVE_STRING_LINE_OFFS         10
     57          
     58          #define SEND_STRING_SIZE                 14
     59          #define SEND_BUFFER_SIZE                 (SEND_STRING_SIZE * SEND_STRING_SIZE)
     60          
     61          #define RECEIVE_BUFFER_SIZE              SEND_BUFFER_SIZE
     62          
     63          /* FIFO DMA Interrupt levels (possible values: 2,4,8,12,14) */
     64          #define SEND_FIFO_LVL                    4
     65          #define RECEIVE_FIFO_LVL                 12
     66          
     67          /** @} */ /* End of group Menu_UART_Private_Constants */
     68          
     69          /** @defgroup Menu_UART_Private_Types Menu UART Private Types
     70            * @{
     71            */
     72          
     73          typedef enum {IT_On = 0, IT_Off = !IT_On} ITState;
     74          
     75          /** @} */ /* End of group Menu_UART_Private_Types */
     76          
     77          /** @defgroup Menu_UART_Private_Macros Menu UART Private Macros
     78            * @{
     79            */
     80          
     81          #define FIFO_IT_LVL_TO_UART_IT_CONST(lvl) ((lvl) == 2  ? UART_IT_FIFO_LVL_2words :  \
     82                                                     (lvl) == 4  ? UART_IT_FIFO_LVL_4words :  \
     83                                                     (lvl) == 8  ? UART_IT_FIFO_LVL_8words :  \
     84                                                     (lvl) == 12 ? UART_IT_FIFO_LVL_12words : \
     85                                                     (lvl) == 14 ? UART_IT_FIFO_LVL_14words : \
     86                                                     0xFFFF)    /* To invoke assert_param */
     87          
     88          /** @} */ /* End of group Menu_UART_Private_Macros */
     89          
     90          /** @defgroup Menu_UART_Private_Variables Menu UART Private Variables
     91            * @{
     92            */
     93          

   \                                 In section .bss, align 4
     94          static vuint8_t SendBuffer[SEND_BUFFER_SIZE];
   \                     SendBuffer:
   \   00000000                      DS8 196

   \                                 In section .bss, align 4
     95          static vuint8_t ReceiveBuffer[RECEIVE_BUFFER_SIZE];
   \                     ReceiveBuffer:
   \   00000000                      DS8 196
     96          

   \                                 In section .data, align 4
     97          static vuint32_t send_buffer_pos = 0;
     98          static vuint32_t receive_buffer_pos = 0;
     99          
    100          static vuint32_t error_flag = 0;
    101          
    102          static uint8_t * SendData [4] = {
    103            "UP pressed    ",
    104            "DOWN pressed  ",
    105            "LEFT pressed  ",
    106            "RIGHT pressed "
    107          };
    108          
    109          static uint8_t * ErrorMessage [4] = {
    110            "Frame error   ",
    111            "Parity error  ",
    112            "Break line    ",
    113            "Overflow error"
    114          };
    115          
    116          static UART_InitTypeDef UARTInitStructure;
   \                     UARTInitStructure:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000010   0x00000000         DC32 0
   \   00000014   0x00000000         DC32 0
   \   00000018   0x00000000         DC32 0
   \   0000001C   0x........         DC32 `?<Constant "UP pressed    ">`, `?<Constant "DOWN pressed  ">`
   \              0x........   
   \   00000024   0x........         DC32 `?<Constant "LEFT pressed  ">`, `?<Constant "RIGHT pressed ">`
   \              0x........   

   \                                 In section .data, align 4
   \                     ErrorMessage:
   \   00000000   0x........         DC32 `?<Constant "Frame error   ">`, `?<Constant "Parity error  ">`
   \              0x........   
   \   00000008   0x........         DC32 `?<Constant "Break line    ">`, `?<Constant "Overflow error">`
   \              0x........   
    117          
    118          /** @} */ /* End of group Menu_UART_Private_Variables */
    119          
    120          /** @defgroup Menu_UART_Private_Functions Menu UART Private Functions
    121            * @{
    122            */
    123          
    124          /*******************************************************************************
    125          * Function Name  : UARTConfiguration
    126          * Description    : Configures the UART1.
    127          *                : Configures the HCLK division factor and RTCHSE clock for UART1.
    128          * Input          : IT_Flag - Interrupt status. This parameter can be one of the
    129          *                : following values: IT_On, IT_Off.
    130          * Output         : None
    131          * Return         : None
    132          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    133          void UARTConfiguration(ITState IT_Flag)
    134          {
   \                     UARTConfiguration:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    135            /* Enable the RTCHSE clock on UART1 */
    136            RST_CLK_PCLKcmd(RST_CLK_PCLK_UART1, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2040             MOVS     R0,#+64
   \   00000008   0x.... 0x....      BL       RST_CLK_PCLKcmd
    137          
    138            /* Set the UART1 HCLK division factor */
    139            UART_BRGInit(MDR_UART1, UART_HCLKdiv1);
   \   0000000C   0x.... 0x....      LDR.W    R5,??DataTable20  ;; 0x40030000
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       UART_BRGInit
    140          
    141            UART_DeInit(MDR_UART1);
   \   00000018   0x4628             MOV      R0,R5
   \   0000001A   0x.... 0x....      BL       UART_DeInit
    142          
    143            if (IT_Flag == IT_On)
   \   0000001E   0x2C00             CMP      R4,#+0
   \   00000020   0xBF0C             ITE      EQ 
   \   00000022   0x.... 0x....      LDREQ.W  R0,??DataTable20_1  ;; 0xe000e100
   \   00000026   0x.... 0x....      LDRNE.W  R0,??DataTable20_2  ;; 0xe000e180
    144            {
    145              /* Enable interrupt on UART1 */
    146              NVIC_EnableIRQ(UART1_IRQn);
    147            }
    148            else
    149            {
    150              /* Disable interrupt on UART1 */
    151              NVIC_DisableIRQ(UART1_IRQn);
   \   0000002A   0x2140             MOVS     R1,#+64
   \   0000002C   0x6001             STR      R1,[R0, #+0]
    152            }
    153          }
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    154          
    155          /*******************************************************************************
    156          * Function Name  : UARTHelp
    157          * Description    : Prints hint to the screen.
    158          * Input          : None
    159          * Output         : None
    160          * Return         : None
    161          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    162          void UARTHelp(void)
    163          {
   \                     UARTHelp:
   \   00000000   0xB510             PUSH     {R4,LR}
    164            LCD_CLS();
   \   00000002   0x.... 0x....      BL       LCD_CLS
    165            CurrentMethod = MET_AND;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   0000000A   0x2104             MOVS     R1,#+4
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    166            CurrentFont = &Font_6x8;
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable20_4
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable20_5
   \   00000016   0x6020             STR      R0,[R4, #+0]
    167            LCD_PUTS(0, 0,                           "Press: DOWN, LEFT, UP");
   \   00000018   0x.... 0x....      ADR.W    R2,`?<Constant "Press: DOWN, LEFT, UP">`
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       LCD_PUTS
    168            LCD_PUTS(0, CurrentFont->Height + 2,     "or RIGHT keys, for   ");
   \   00000024   0x.... 0x....      ADR.W    R2,`?<Constant "or RIGHT keys, for   ">`
   \   00000028   0x6820             LDR      R0,[R4, #+0]
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x1C81             ADDS     R1,R0,#+2
   \   0000002E   0x.... 0x....      BL       ?Subroutine2
    169            LCD_PUTS(0, CurrentFont->Height * 2 + 4, "start sending.       ");
   \                     ??CrossCallReturnLabel_7:
   \   00000032   0x.... 0x....      ADR.W    R2,`?<Constant "start sending.       ">`
   \   00000036   0x6820             LDR      R0,[R4, #+0]
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x0040             LSLS     R0,R0,#+1
   \   0000003C   0x1D01             ADDS     R1,R0,#+4
   \   0000003E   0x.... 0x....      BL       ?Subroutine2
    170            LCD_PUTS(0, CurrentFont->Height * 3 + 6, "Press SEL for return.");
   \                     ??CrossCallReturnLabel_6:
   \   00000042   0x.... 0x....      ADR.W    R2,`?<Constant "Press SEL for return.">`
   \   00000046   0x6820             LDR      R0,[R4, #+0]
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0xEB00 0x0040      ADD      R0,R0,R0, LSL #+1
   \   0000004E   0x1D81             ADDS     R1,R0,#+6
   \   00000050   0x.... 0x....      BL       ?Subroutine2
    171          
    172            LCD_PUTS(0, CurrentFont->Height * 4 + 8, "Send:                ");
   \                     ??CrossCallReturnLabel_5:
   \   00000054   0x.... 0x....      ADR.W    R2,`?<Constant "Send:                ">`
   \   00000058   0x6820             LDR      R0,[R4, #+0]
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x0080             LSLS     R0,R0,#+2
   \   0000005E   0xF100 0x0108      ADD      R1,R0,#+8
   \   00000062   0x.... 0x....      BL       ?Subroutine2
    173            LCD_PUTS(0, CurrentFont->Height * 5 + 8, "Rec.:                ");
   \                     ??CrossCallReturnLabel_4:
   \   00000066   0x.... 0x....      ADR.W    R2,`?<Constant "Rec.:                ">`
   \   0000006A   0x6820             LDR      R0,[R4, #+0]
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0xEB00 0x0080      ADD      R0,R0,R0, LSL #+2
   \   00000072   0xF100 0x0108      ADD      R1,R0,#+8
   \   00000076   0xB2C9             UXTB     R1,R1
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000007E   0x.... 0x....      B.W      LCD_PUTS
    174          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0xB2C9             UXTB     R1,R1
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      B.W      LCD_PUTS
    175          
    176          
    177          /*******************************************************************************
    178          * Function Name  : UARTDisplayError
    179          * Description    : Prints the message about UART error on LCD
    180          * Input          : flags - UART flags.
    181          * Output         : None
    182          * Return         : None
    183          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    184          void UARTDisplayError(uint8_t flags)
    185          {
   \                     UARTDisplayError:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4606             MOV      R6,R0
    186            uint32_t i, j;
    187          
    188            for (i = flags, j = 0; i > 0; j++, i >>= 1)
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable20_6
   \   0000000A   0x2E00             CMP      R6,#+0
   \   0000000C   0xE01B             B.N      ??UARTDisplayError_0
    189            {
    190              if ((i & 0x01) != 0)
   \                     ??UARTDisplayError_1:
   \   0000000E   0x07F0             LSLS     R0,R6,#+31
   \   00000010   0xD517             BPL.N    ??UARTDisplayError_2
    191              {
    192                LCD_PUTS(CurrentFont->Width * RECEIVE_STRING_START_COLUMN,
    193                         CurrentFont->Height * RECEIVE_STRING_LINE + RECEIVE_STRING_LINE_OFFS,
    194                         ErrorMessage[j]);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable20_4
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF855 0x2024      LDR      R2,[R5, R4, LSL #+2]
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0xEB01 0x0181      ADD      R1,R1,R1, LSL #+2
   \   00000022   0x310A             ADDS     R1,R1,#+10
   \   00000024   0xB2C9             UXTB     R1,R1
   \   00000026   0x6840             LDR      R0,[R0, #+4]
   \   00000028   0x2306             MOVS     R3,#+6
   \   0000002A   0x4358             MULS     R0,R3,R0
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x.... 0x....      BL       LCD_PUTS
    195                while (!KEY_PRESSED(SEL));
   \                     ??UARTDisplayError_3:
   \   00000032   0x.... 0x....      BL       GetKey
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD1FB             BNE.N    ??UARTDisplayError_3
    196                WAIT_UNTIL_KEY_RELEASED(SEL);
   \                     ??UARTDisplayError_4:
   \   0000003A   0x.... 0x....      BL       GetKey
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD0FB             BEQ.N    ??UARTDisplayError_4
    197              }
    198            }
   \                     ??UARTDisplayError_2:
   \   00000042   0x1C64             ADDS     R4,R4,#+1
   \   00000044   0x0876             LSRS     R6,R6,#+1
   \                     ??UARTDisplayError_0:
   \   00000046   0xD1E2             BNE.N    ??UARTDisplayError_1
    199          }
   \   00000048   0xBD70             POP      {R4-R6,PC}       ;; return
    200          
    201          /*******************************************************************************
    202          * Function Name  : SenderFuncFIFODemo
    203          * Description    : Sender interrupt handler.
    204          * Input          : None
    205          * Output         : None
    206          * Return         : None
    207          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    208          void SenderFuncFIFODemo(void)
    209          {
   \                     SenderFuncFIFODemo:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    210            if (error_flag == 0)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20_7
   \   00000006   0x69A0             LDR      R0,[R4, #+24]
   \   00000008   0xB990             CBNZ.N   R0,??SenderFuncFIFODemo_0
   \   0000000A   0x....             LDR.N    R5,??DataTable20  ;; 0x40030000
   \   0000000C   0xE008             B.N      ??SenderFuncFIFODemo_1
    211            {
    212              for (; ((UART_GetFlagStatus (MDR_UART1, UART_FLAG_TXFF) == RESET) && (send_buffer_pos < SEND_BUFFER_SIZE)); send_buffer_pos++)
    213              {
    214                UART_SendData(MDR_UART1, SendBuffer[send_buffer_pos]);
   \                     ??SenderFuncFIFODemo_2:
   \   0000000E   0x6920             LDR      R0,[R4, #+16]
   \   00000010   0x....             LDR.N    R1,??DataTable20_8
   \   00000012   0x5C41             LDRB     R1,[R0, R1]
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0x.... 0x....      BL       UART_SendData
    215              }
   \   0000001A   0x6920             LDR      R0,[R4, #+16]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x6120             STR      R0,[R4, #+16]
   \                     ??SenderFuncFIFODemo_1:
   \   00000020   0x2120             MOVS     R1,#+32
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0x.... 0x....      BL       UART_GetFlagStatus
   \   00000028   0xB910             CBNZ.N   R0,??SenderFuncFIFODemo_0
   \   0000002A   0x6920             LDR      R0,[R4, #+16]
   \   0000002C   0x28C4             CMP      R0,#+196
   \   0000002E   0xD3EE             BCC.N    ??SenderFuncFIFODemo_2
    216            }
    217          }
   \                     ??SenderFuncFIFODemo_0:
   \   00000030   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    218          
    219          /*******************************************************************************
    220          * Function Name  : ReceiverFuncFIFODemo
    221          * Description    : Receiver interrupt handler.
    222          * Input          : None
    223          * Output         : None
    224          * Return         : None
    225          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    226          void ReceiverFuncFIFODemo(void)
    227          {
   \                     ReceiverFuncFIFODemo:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    228            uint16_t receive_data;
    229          
    230            if (error_flag == 0)
   \   00000002   0x....             LDR.N    R4,??DataTable20_7
   \   00000004   0x69A0             LDR      R0,[R4, #+24]
   \   00000006   0xB130             CBZ.N    R0,??ReceiverFuncFIFODemo_0
    231            {
    232              for (; ((UART_GetFlagStatus(MDR_UART1, UART_FLAG_RXFE) == RESET) && (receive_buffer_pos < RECEIVE_BUFFER_SIZE) && (error_flag == 0));
    233                       receive_buffer_pos++)
    234              {
    235                receive_data = UART_ReceiveData(MDR_UART1);
    236          
    237                /* Check for errors */
    238                if (UART_Flags(receive_data) != 0)
    239                {
    240                  /* Print appropriate messages on LCD in case of errors */
    241                  UARTDisplayError(UART_Flags(receive_data));
    242                  error_flag = 1;
    243                }
    244                else
    245                {
    246                  ReceiveBuffer[receive_buffer_pos] = UART_Data(receive_data);
    247                }
    248              }
    249            }
    250          }
   \                     ??ReceiverFuncFIFODemo_1:
   \   00000008   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \                     ??ReceiverFuncFIFODemo_2:
   \   0000000A   0x6961             LDR      R1,[R4, #+20]
   \   0000000C   0x....             LDR.N    R2,??DataTable20_9
   \   0000000E   0x5488             STRB     R0,[R1, R2]
   \                     ??ReceiverFuncFIFODemo_3:
   \   00000010   0x6960             LDR      R0,[R4, #+20]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x6160             STR      R0,[R4, #+20]
   \                     ??ReceiverFuncFIFODemo_0:
   \   00000016   0x....             LDR.N    R5,??DataTable20  ;; 0x40030000
   \   00000018   0x2110             MOVS     R1,#+16
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0x.... 0x....      BL       UART_GetFlagStatus
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD1F1             BNE.N    ??ReceiverFuncFIFODemo_1
   \   00000024   0x6960             LDR      R0,[R4, #+20]
   \   00000026   0x28C4             CMP      R0,#+196
   \   00000028   0xD2EE             BCS.N    ??ReceiverFuncFIFODemo_1
   \   0000002A   0x69A0             LDR      R0,[R4, #+24]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD1EB             BNE.N    ??ReceiverFuncFIFODemo_1
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0x.... 0x....      BL       UART_ReceiveData
   \   00000036   0x0401             LSLS     R1,R0,#+16
   \   00000038   0x0E09             LSRS     R1,R1,#+24
   \   0000003A   0xD0E6             BEQ.N    ??ReceiverFuncFIFODemo_2
   \   0000003C   0x4608             MOV      R0,R1
   \   0000003E   0x.... 0x....      BL       UARTDisplayError
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x61A0             STR      R0,[R4, #+24]
   \   00000046   0xE7E3             B.N      ??ReceiverFuncFIFODemo_3
    251          
    252          /*******************************************************************************
    253          * Function Name  : UARTwFIFOFunc
    254          * Description    : Demonstration of UART utilization with FIFO and interrupts.
    255          *                : Waits for joystick key press and calls sender interrupt
    256          *                : handler to initiate send/receive process. Prints sent and
    257          *                : received data on LCD.
    258          * Input          : None
    259          * Output         : None
    260          * Return         : None
    261          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    262          void UARTwFIFOFunc(void) {
   \                     UARTwFIFOFunc:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
    263            uint8_t *pdata;
    264            uint8_t  lcd_string[SEND_STRING_SIZE + 1];
    265            uint32_t key, i, data_size;
    266            uint32_t send_string_pos, receive_string_pos;
    267          
    268            UARTConfiguration(IT_On);
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       UARTConfiguration
    269          
    270            /* UART1 configuration */
    271            UARTInitStructure.UART_BaudRate                = 115200;
   \   0000000C   0x....             LDR.N    R4,??DataTable20_7
   \   0000000E   0xF44F 0x30E1      MOV      R0,#+115200
   \   00000012   0x6020             STR      R0,[R4, #+0]
    272            UARTInitStructure.UART_WordLength              = UART_WordLength8b;
   \   00000014   0x2060             MOVS     R0,#+96
   \   00000016   0x80A0             STRH     R0,[R4, #+4]
    273            UARTInitStructure.UART_StopBits                = UART_StopBits2;
   \   00000018   0x2008             MOVS     R0,#+8
   \   0000001A   0x80E0             STRH     R0,[R4, #+6]
    274            UARTInitStructure.UART_Parity                  = UART_Parity_Even;
   \   0000001C   0x2006             MOVS     R0,#+6
   \   0000001E   0x8120             STRH     R0,[R4, #+8]
    275            UARTInitStructure.UART_FIFOMode                = UART_FIFO_ON;
   \   00000020   0x2010             MOVS     R0,#+16
   \   00000022   0x8160             STRH     R0,[R4, #+10]
    276            /* With LBE bit set, output line of UARTTXD transmitter becomes to be bound to
    277             * UARTRXD receiver input */
    278            UARTInitStructure.UART_HardwareFlowControl     = UART_HardwareFlowControl_RXE | \
    279                                                             UART_HardwareFlowControl_TXE | \
    280                                                             UART_HardwareFlowControl_LBE;
   \   00000024   0xF44F 0x7060      MOV      R0,#+896
   \   00000028   0x81A0             STRH     R0,[R4, #+12]
   \   0000002A   0x4621             MOV      R1,R4
   \   0000002C   0x....             LDR.N    R0,??DataTable20  ;; 0x40030000
    281          
    282            UART_Init (MDR_UART1,&UARTInitStructure);
   \   0000002E   0x.... 0x....      BL       UART_Init
    283          
    284            /* Set interrupt handlers */
    285            pfUARTReceiverFunc = ReceiverFuncFIFODemo;
   \   00000032   0x....             LDR.N    R0,??DataTable20_10
   \   00000034   0x....             LDR.N    R1,??DataTable20_11
   \   00000036   0x6001             STR      R1,[R0, #+0]
    286            pfUARTSenderFunc = SenderFuncFIFODemo;
   \   00000038   0x....             LDR.N    R0,??DataTable20_12
   \   0000003A   0x....             LDR.N    R1,??DataTable20_13
   \   0000003C   0x6001             STR      R1,[R0, #+0]
    287          
    288            /* Enable sender and receiver interrupts */
    289            UART_ITConfig (MDR_UART1, UART_IT_TX | UART_IT_RX, ENABLE);
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0x2130             MOVS     R1,#+48
   \   00000042   0x....             LDR.N    R0,??DataTable20  ;; 0x40030000
   \   00000044   0x.... 0x....      BL       UART_ITConfig
    290          
    291            /* Adjust sender and receiver interrupt levels */
    292            UART_DMAConfig (MDR_UART1, FIFO_IT_LVL_TO_UART_IT_CONST(RECEIVE_FIFO_LVL),
    293                                   FIFO_IT_LVL_TO_UART_IT_CONST(SEND_FIFO_LVL));
   \   00000048   0x2201             MOVS     R2,#+1
   \   0000004A   0x2103             MOVS     R1,#+3
   \   0000004C   0x....             LDR.N    R0,??DataTable20  ;; 0x40030000
   \   0000004E   0x.... 0x....      BL       UART_DMAConfig
    294            /* Enable DMA interrupts */
    295            UART_DMACmd(MDR_UART1, UART_DMA_TXE | UART_DMA_RXE, ENABLE);
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0x2103             MOVS     R1,#+3
   \   00000056   0x....             LDR.N    R0,??DataTable20  ;; 0x40030000
   \   00000058   0x.... 0x....      BL       UART_DMACmd
    296          
    297            UART_Cmd(MDR_UART1,ENABLE);
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x....             LDR.N    R0,??DataTable20  ;; 0x40030000
   \   00000060   0x.... 0x....      BL       UART_Cmd
    298          
    299            UARTHelp();
   \   00000064   0x.... 0x....      BL       UARTHelp
    300          
    301            key = GetKey();
   \   00000068   0x.... 0x....      BL       GetKey
   \   0000006C   0x4680             MOV      R8,R0
   \   0000006E   0x.... 0x....      LDR.W    R9,??DataTable20_4
   \   00000072   0x.... 0x....      LDR.W    R10,??DataTable20_8
   \   00000076   0xAF00             ADD      R7,SP,#+0
   \   00000078   0x2606             MOVS     R6,#+6
   \   0000007A   0xE006             B.N      ??UARTwFIFOFunc_0
    302            for (; key != SEL; key = GetKey())
    303            {
    304              if ((key != NOKEY) && (key != MULTIPLE))
    305              {
    306                /* Form strings to be transmitted in the buffer.
    307                 * An algorithm is the following: copy data_size symbols
    308                 * from the corresponding SendData array element;
    309                 * fill the rest with '#' symbols. */
    310                pdata = SendData[key - 1];
    311                for (send_string_pos = 0, data_size = 1; send_string_pos < SEND_BUFFER_SIZE; data_size++)
    312                {
    313                  for (i = 0; i < data_size; send_string_pos++, i++)
    314                  {
    315                    SendBuffer[send_string_pos] = pdata[i];
    316                  }
    317                  for (; ((i < SEND_STRING_SIZE) && (send_string_pos < SEND_BUFFER_SIZE)); send_string_pos++, i++)
    318                  {
    319                    SendBuffer[send_string_pos] = '#';
    320                  }
    321                }
    322          
    323                error_flag = 0;
    324          
    325                receive_string_pos = 0;
    326                receive_buffer_pos = 0;
    327                send_string_pos = 0;
    328                send_buffer_pos = 0;
    329          
    330                /* Initiate transmit */
    331                SenderFuncFIFODemo();
    332          
    333                /* Interrupt-based processing */
    334                while ((receive_buffer_pos < (RECEIVE_BUFFER_SIZE - RECEIVE_FIFO_LVL)) && (error_flag == 0))
    335                {
    336                  /* Process send buffer to output transmitted strings to LCD */
    337                  if ((send_buffer_pos - send_string_pos) >= SEND_STRING_SIZE)
    338                  {
    339                    for (i = 0; i < SEND_STRING_SIZE; i++, send_string_pos++)
    340                    {
    341                      lcd_string[i] = SendBuffer[send_string_pos];
    342                    }
    343                    lcd_string[i] = 0x00;
    344                    /* Print string on LCD */
    345                    LCD_PUTS(CurrentFont->Width * (SEND_STRING_START_COLUMN),
    346                             CurrentFont->Height * SEND_STRING_LINE + SEND_STRING_LINE_OFFS,
    347                             lcd_string);
    348                  }
    349          
    350                  /* Process receiver buffer to output transmitted strings to LCD */
    351                  if ((receive_buffer_pos - receive_string_pos) >= SEND_STRING_SIZE)
    352                  {
    353                    for (i = 0; i < SEND_STRING_SIZE; i++, receive_string_pos++)
    354                    {
    355                      lcd_string[i] = ReceiveBuffer[receive_string_pos];
    356                    }
    357                    lcd_string[i] = 0x00;
    358                    /* Print string on LCD */
    359                    LCD_PUTS(CurrentFont->Width * (RECEIVE_STRING_START_COLUMN),
    360                             CurrentFont->Height * RECEIVE_STRING_LINE + RECEIVE_STRING_LINE_OFFS,
    361                             lcd_string);
    362                  }
    363                }
    364                /* Print on LCD remaining strings (from send buffer) */
    365                while ((send_buffer_pos - send_string_pos) >= SEND_STRING_SIZE)
    366                {
    367                  for (i = 0; i < SEND_STRING_SIZE; i++, send_string_pos++)
    368                  {
    369                    lcd_string[i] = SendBuffer[send_string_pos];
    370                  }
    371                  lcd_string[i] = 0x00;
    372                  /* Print string on LCD */
    373                  LCD_PUTS(CurrentFont->Width * (SEND_STRING_START_COLUMN),
    374                           CurrentFont->Height * SEND_STRING_LINE + SEND_STRING_LINE_OFFS,
    375                           lcd_string);
    376                }
    377                /* Read data not handled by interrupts */
    378                while ((receive_buffer_pos < RECEIVE_BUFFER_SIZE) && (error_flag == 0))
    379                {
    380                  ReceiverFuncFIFODemo();
    381                }
    382                while ((receive_string_pos < receive_buffer_pos) && (error_flag == 0))
    383                {
    384                    for (i = 0; ((i < SEND_STRING_SIZE) && (receive_string_pos < receive_buffer_pos)); i++, receive_string_pos++)
    385                    {
    386                      lcd_string[i] = ReceiveBuffer[receive_string_pos];
    387                    }
    388                    lcd_string[i] = 0x00;
    389                    /* Print string on LCD */
    390                    LCD_PUTS(CurrentFont->Width * (RECEIVE_STRING_START_COLUMN),
    391                             CurrentFont->Height * RECEIVE_STRING_LINE + RECEIVE_STRING_LINE_OFFS,
    392                             lcd_string);
    393                }
    394          
    395              }
    396              WAIT_UNTIL_KEY_RELEASED(key);
   \                     ??UARTwFIFOFunc_1:
   \   0000007C   0x.... 0x....      BL       GetKey
   \   00000080   0x4540             CMP      R0,R8
   \   00000082   0xD0FB             BEQ.N    ??UARTwFIFOFunc_1
   \   00000084   0x.... 0x....      BL       GetKey
   \   00000088   0x4680             MOV      R8,R0
   \                     ??UARTwFIFOFunc_0:
   \   0000008A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000008E   0xD06E             BEQ.N    ??UARTwFIFOFunc_2
   \   00000090   0xF1B8 0x0F05      CMP      R8,#+5
   \   00000094   0xBF18             IT       NE 
   \   00000096   0xF1B8 0x0F06      CMPNE    R8,#+6
   \   0000009A   0xD0EF             BEQ.N    ??UARTwFIFOFunc_1
   \   0000009C   0xEB04 0x0088      ADD      R0,R4,R8, LSL #+2
   \   000000A0   0x6981             LDR      R1,[R0, #+24]
   \   000000A2   0x2200             MOVS     R2,#+0
   \   000000A4   0x2301             MOVS     R3,#+1
   \                     ??UARTwFIFOFunc_3:
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xE004             B.N      ??UARTwFIFOFunc_4
   \                     ??UARTwFIFOFunc_5:
   \   000000AA   0x5C45             LDRB     R5,[R0, R1]
   \   000000AC   0xF802 0x500A      STRB     R5,[R2, R10]
   \   000000B0   0x1C52             ADDS     R2,R2,#+1
   \   000000B2   0x1C40             ADDS     R0,R0,#+1
   \                     ??UARTwFIFOFunc_4:
   \   000000B4   0x4298             CMP      R0,R3
   \   000000B6   0xD3F8             BCC.N    ??UARTwFIFOFunc_5
   \                     ??UARTwFIFOFunc_6:
   \   000000B8   0x280E             CMP      R0,#+14
   \   000000BA   0xBF38             IT       CC 
   \   000000BC   0x2AC4             CMPCC    R2,#+196
   \   000000BE   0xBF3F             ITTTT    CC 
   \   000000C0   0x2523             MOVCC    R5,#+35
   \   000000C2   0xF802 0x500A      STRBCC   R5,[R2, R10]
   \   000000C6   0x1C52             ADDCC    R2,R2,#+1
   \   000000C8   0x1C40             ADDCC    R0,R0,#+1
   \   000000CA   0xD3F5             BCC.N    ??UARTwFIFOFunc_6
   \   000000CC   0x1C5B             ADDS     R3,R3,#+1
   \   000000CE   0x2AC4             CMP      R2,#+196
   \   000000D0   0xD3E9             BCC.N    ??UARTwFIFOFunc_3
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x61A0             STR      R0,[R4, #+24]
   \   000000D6   0x2500             MOVS     R5,#+0
   \   000000D8   0x6160             STR      R0,[R4, #+20]
   \   000000DA   0x4683             MOV      R11,R0
   \   000000DC   0x6120             STR      R0,[R4, #+16]
   \   000000DE   0x.... 0x....      BL       SenderFuncFIFODemo
   \   000000E2   0xE017             B.N      ??CrossCallReturnLabel_3
   \                     ??UARTwFIFOFunc_7:
   \   000000E4   0x6920             LDR      R0,[R4, #+16]
   \   000000E6   0xEBA0 0x000B      SUB      R0,R0,R11
   \   000000EA   0x280E             CMP      R0,#+14
   \   000000EC   0xD303             BCC.N    ??CrossCallReturnLabel_1
   \   000000EE   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_14:
   \   000000F2   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   000000F6   0x6960             LDR      R0,[R4, #+20]
   \   000000F8   0x1B40             SUBS     R0,R0,R5
   \   000000FA   0x280E             CMP      R0,#+14
   \   000000FC   0xD30A             BCC.N    ??CrossCallReturnLabel_3
   \   000000FE   0x220E             MOVS     R2,#+14
   \   00000100   0x....             LDR.N    R0,??DataTable20_9
   \   00000102   0x1829             ADDS     R1,R5,R0
   \   00000104   0xA800             ADD      R0,SP,#+0
   \   00000106   0x.... 0x....      BL       __aeabi_memcpy
   \   0000010A   0x350E             ADDS     R5,R5,#+14
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x73B8             STRB     R0,[R7, #+14]
   \   00000110   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   00000114   0x6960             LDR      R0,[R4, #+20]
   \   00000116   0x28B8             CMP      R0,#+184
   \   00000118   0xD202             BCS.N    ??UARTwFIFOFunc_8
   \   0000011A   0x69A0             LDR      R0,[R4, #+24]
   \   0000011C   0x2800             CMP      R0,#+0
   \   0000011E   0xD0E1             BEQ.N    ??UARTwFIFOFunc_7
   \                     ??UARTwFIFOFunc_8:
   \   00000120   0x6920             LDR      R0,[R4, #+16]
   \   00000122   0xEBA0 0x000B      SUB      R0,R0,R11
   \   00000126   0x280E             CMP      R0,#+14
   \   00000128   0xD306             BCC.N    ??UARTwFIFOFunc_9
   \   0000012A   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_15:
   \   0000012E   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000132   0xE7F5             B.N      ??UARTwFIFOFunc_8
   \                     ??UARTwFIFOFunc_10:
   \   00000134   0x.... 0x....      BL       ReceiverFuncFIFODemo
   \                     ??UARTwFIFOFunc_9:
   \   00000138   0x6960             LDR      R0,[R4, #+20]
   \   0000013A   0x28C4             CMP      R0,#+196
   \   0000013C   0xD202             BCS.N    ??UARTwFIFOFunc_11
   \   0000013E   0x69A0             LDR      R0,[R4, #+24]
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD0F7             BEQ.N    ??UARTwFIFOFunc_10
   \                     ??UARTwFIFOFunc_11:
   \   00000144   0x6960             LDR      R0,[R4, #+20]
   \   00000146   0x4285             CMP      R5,R0
   \   00000148   0xD298             BCS.N    ??UARTwFIFOFunc_1
   \   0000014A   0x69A0             LDR      R0,[R4, #+24]
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0xD195             BNE.N    ??UARTwFIFOFunc_1
   \                     ??UARTwFIFOFunc_12:
   \   00000150   0x6961             LDR      R1,[R4, #+20]
   \   00000152   0x428D             CMP      R5,R1
   \   00000154   0xD206             BCS.N    ??UARTwFIFOFunc_13
   \   00000156   0x....             LDR.N    R1,??DataTable20_9
   \   00000158   0x5C69             LDRB     R1,[R5, R1]
   \   0000015A   0x55C1             STRB     R1,[R0, R7]
   \   0000015C   0x1C40             ADDS     R0,R0,#+1
   \   0000015E   0x1C6D             ADDS     R5,R5,#+1
   \   00000160   0x280E             CMP      R0,#+14
   \   00000162   0xD3F5             BCC.N    ??UARTwFIFOFunc_12
   \                     ??UARTwFIFOFunc_13:
   \   00000164   0x2100             MOVS     R1,#+0
   \   00000166   0x55C1             STRB     R1,[R0, R7]
   \   00000168   0x.... 0x....      BL       ?Subroutine1
    397            }
   \                     ??CrossCallReturnLabel_2:
   \   0000016C   0xE7EA             B.N      ??UARTwFIFOFunc_11
    398          
    399            UART_Cmd(MDR_UART1,DISABLE);
   \                     ??UARTwFIFOFunc_2:
   \   0000016E   0x2100             MOVS     R1,#+0
   \   00000170   0x....             LDR.N    R0,??DataTable20  ;; 0x40030000
   \   00000172   0x.... 0x....      BL       UART_Cmd
    400            DisplayMenu();
   \   00000176   0x.... 0x....      BL       DisplayMenu
    401          }
   \   0000017A   0xB005             ADD      SP,SP,#+20
   \   0000017C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x220E             MOVS     R2,#+14
   \   00000002   0xEB0B 0x010A      ADD      R1,R11,R10
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x.... 0x....      B.W      __aeabi_memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0xEB01 0x0181      ADD      R1,R1,R1, LSL #+2
   \   0000000C   0x310A             ADDS     R1,R1,#+10
   \   0000000E   0xB2C9             UXTB     R1,R1
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x4370             MULS     R0,R0,R6
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0x.... 0x....      B.W      LCD_PUTS

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xF10B 0x0B0E      ADD      R11,R11,#+14
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x73B8             STRB     R0,[R7, #+14]
   \   00000008   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   0000000C   0xAA00             ADD      R2,SP,#+0
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x0089             LSLS     R1,R1,#+2
   \   00000012   0x3108             ADDS     R1,R1,#+8
   \   00000014   0xB2C9             UXTB     R1,R1
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0x4370             MULS     R0,R0,R6
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x.... 0x....      B.W      LCD_PUTS
    402          
    403          /*******************************************************************************
    404          * Function Name  : UARTFunc
    405          * Description    : Demonstration of UART utilization without FIFO and interrupts.
    406          *                : Waits for joystick key press, then sends byte-per-byte
    407          *                : corresponding string to LCD (Send: string) and to UART1 transmitter.
    408          *                : Reads data from UART1 receiver and prints it on LCD (Rec.: string)
    409          *                : If error is detected, aborts the transmition.
    410          * Input          : None
    411          * Output         : None
    412          * Return         : None
    413          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    414          void UARTFunc(void) {
   \                     UARTFunc:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    415            uint32_t key, i;
    416            uint8_t * pdata;
    417            uint16_t receive_data;
    418          
    419            UARTConfiguration(IT_Off);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       UARTConfiguration
    420          
    421            /* UART1 configuration */
    422            UARTInitStructure.UART_BaudRate                = 220;
   \   0000000A   0x....             LDR.N    R4,??DataTable20_7
   \   0000000C   0x20DC             MOVS     R0,#+220
   \   0000000E   0x6020             STR      R0,[R4, #+0]
    423            UARTInitStructure.UART_WordLength              = UART_WordLength8b;
   \   00000010   0x2060             MOVS     R0,#+96
   \   00000012   0x80A0             STRH     R0,[R4, #+4]
    424            UARTInitStructure.UART_StopBits                = UART_StopBits1;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x80E0             STRH     R0,[R4, #+6]
    425            UARTInitStructure.UART_Parity                  = UART_Parity_No;
   \   00000018   0x60A0             STR      R0,[R4, #+8]
    426            UARTInitStructure.UART_FIFOMode                = UART_FIFO_OFF;
    427            /* With LBE bit set, output line of UARTTXD transmitter becomes to be bound to
    428             * UARTRXD receiver input */
    429            UARTInitStructure.UART_HardwareFlowControl     = UART_HardwareFlowControl_RXE | \
    430                                                             UART_HardwareFlowControl_TXE | \
    431                                                             UART_HardwareFlowControl_LBE;
   \   0000001A   0xF44F 0x7060      MOV      R0,#+896
   \   0000001E   0x81A0             STRH     R0,[R4, #+12]
    432          
    433            UART_Init (MDR_UART1,&UARTInitStructure);
   \   00000020   0x.... 0x....      LDR.W    R8,??DataTable20  ;; 0x40030000
   \   00000024   0x4621             MOV      R1,R4
   \   00000026   0x4640             MOV      R0,R8
   \   00000028   0x.... 0x....      BL       UART_Init
    434            UART_Cmd(MDR_UART1,ENABLE);
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x4640             MOV      R0,R8
   \   00000030   0x.... 0x....      BL       UART_Cmd
    435          
    436            UARTHelp();
   \   00000034   0x.... 0x....      BL       UARTHelp
    437          
    438            key = GetKey();
   \   00000038   0x.... 0x....      BL       GetKey
   \   0000003C   0xEA5F 0x0A00      MOVS     R10,R0
   \   00000040   0x.... 0x....      LDR.W    R9,??DataTable20_4
   \   00000044   0xE007             B.N      ??UARTFunc_0
    439            for (; key != SEL; key = GetKey())
    440            {
    441              if ((key != NOKEY) && (key != MULTIPLE))
    442              {
    443                /* The receiver buffer may be non-empty, so clean it */
    444                while (UART_GetFlagStatus (MDR_UART1, UART_FLAG_RXFF) == SET)
    445                {
    446                  UART_ReceiveData (MDR_UART1);
    447                }
    448          
    449                error_flag = 0;
    450                for (pdata = SendData[key - 1], i = 0; ((*pdata != 0) && (error_flag == 0)); pdata++, i++)
    451                {
    452                  LCD_PUTC(CurrentFont->Width * (SEND_STRING_START_COLUMN + i),
    453                           CurrentFont->Height * SEND_STRING_LINE + SEND_STRING_LINE_OFFS,
    454                           *pdata);
    455                  UART_SendData (MDR_UART1, *pdata);
    456                  /* Wait for transmition end */
    457                  while (UART_GetFlagStatus (MDR_UART1, UART_FLAG_TXFF) == SET);
    458                  while (UART_GetFlagStatus (MDR_UART1, UART_FLAG_BUSY) == SET);
    459                  /* Wait for any data in the receiver buffer */
    460                  while (UART_GetFlagStatus (MDR_UART1, UART_FLAG_RXFE) == SET);
    461                  receive_data = UART_ReceiveData (MDR_UART1);
    462          
    463                  /* Check for errors */
    464                  if (UART_Flags(receive_data) != 0)
    465                  {
    466                    /* If there are an error, print error message on LCD */
    467                    UARTDisplayError(UART_Flags(receive_data));
    468                    error_flag = 1;
    469                  }
    470                  else
    471                  {
    472                    /* If there are no errors, print the symbol */
    473                    LCD_PUTC(CurrentFont->Width * (RECEIVE_STRING_START_COLUMN + i),
    474                             CurrentFont->Height * RECEIVE_STRING_LINE + RECEIVE_STRING_LINE_OFFS,
    475                             UART_Data(receive_data));
    476                  }
    477                }
    478              }
    479              WAIT_UNTIL_KEY_RELEASED(key);
   \                     ??UARTFunc_1:
   \   00000046   0x.... 0x....      BL       GetKey
   \   0000004A   0x4550             CMP      R0,R10
   \   0000004C   0xD0FB             BEQ.N    ??UARTFunc_1
   \   0000004E   0x.... 0x....      BL       GetKey
   \   00000052   0xEA5F 0x0A00      MOVS     R10,R0
   \                     ??UARTFunc_0:
   \   00000056   0xD04D             BEQ.N    ??UARTFunc_2
   \   00000058   0xF1BA 0x0F05      CMP      R10,#+5
   \   0000005C   0xD0F3             BEQ.N    ??UARTFunc_1
   \   0000005E   0xF1BA 0x0F06      CMP      R10,#+6
   \   00000062   0xD103             BNE.N    ??UARTFunc_3
   \   00000064   0xE7EF             B.N      ??UARTFunc_1
   \                     ??UARTFunc_4:
   \   00000066   0x4640             MOV      R0,R8
   \   00000068   0x.... 0x....      BL       UART_ReceiveData
   \                     ??UARTFunc_3:
   \   0000006C   0x2140             MOVS     R1,#+64
   \   0000006E   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_13:
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD0F7             BEQ.N    ??UARTFunc_4
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x61A0             STR      R0,[R4, #+24]
   \   0000007A   0xEB04 0x008A      ADD      R0,R4,R10, LSL #+2
   \   0000007E   0x6985             LDR      R5,[R0, #+24]
   \   00000080   0x2600             MOVS     R6,#+0
   \   00000082   0xE00A             B.N      ??UARTFunc_5
   \                     ??UARTFunc_6:
   \   00000084   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000088   0xB2D2             UXTB     R2,R2
   \   0000008A   0x6801             LDR      R1,[R0, #+0]
   \   0000008C   0xEB01 0x0181      ADD      R1,R1,R1, LSL #+2
   \   00000090   0x310A             ADDS     R1,R1,#+10
   \   00000092   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   00000096   0x1C6D             ADDS     R5,R5,#+1
   \   00000098   0x1C76             ADDS     R6,R6,#+1
   \                     ??UARTFunc_5:
   \   0000009A   0x782A             LDRB     R2,[R5, #+0]
   \   0000009C   0x2A00             CMP      R2,#+0
   \   0000009E   0xD0D2             BEQ.N    ??UARTFunc_1
   \   000000A0   0x69A0             LDR      R0,[R4, #+24]
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD1CF             BNE.N    ??UARTFunc_1
   \   000000A6   0x1DB7             ADDS     R7,R6,#+6
   \   000000A8   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000AC   0x6801             LDR      R1,[R0, #+0]
   \   000000AE   0x0089             LSLS     R1,R1,#+2
   \   000000B0   0x3108             ADDS     R1,R1,#+8
   \   000000B2   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000000B6   0x7829             LDRB     R1,[R5, #+0]
   \   000000B8   0x4640             MOV      R0,R8
   \   000000BA   0x.... 0x....      BL       UART_SendData
   \                     ??UARTFunc_7:
   \   000000BE   0x2120             MOVS     R1,#+32
   \   000000C0   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_12:
   \   000000C4   0x2801             CMP      R0,#+1
   \   000000C6   0xD0FA             BEQ.N    ??UARTFunc_7
   \                     ??UARTFunc_8:
   \   000000C8   0x2108             MOVS     R1,#+8
   \   000000CA   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_11:
   \   000000CE   0x2801             CMP      R0,#+1
   \   000000D0   0xD0FA             BEQ.N    ??UARTFunc_8
   \                     ??UARTFunc_9:
   \   000000D2   0x2110             MOVS     R1,#+16
   \   000000D4   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_10:
   \   000000D8   0x2801             CMP      R0,#+1
   \   000000DA   0xD0FA             BEQ.N    ??UARTFunc_9
   \   000000DC   0x4640             MOV      R0,R8
   \   000000DE   0x.... 0x....      BL       UART_ReceiveData
   \   000000E2   0x4602             MOV      R2,R0
   \   000000E4   0x0410             LSLS     R0,R2,#+16
   \   000000E6   0x0E00             LSRS     R0,R0,#+24
   \   000000E8   0xD0CC             BEQ.N    ??UARTFunc_6
   \   000000EA   0x.... 0x....      BL       UARTDisplayError
   \   000000EE   0x2001             MOVS     R0,#+1
   \   000000F0   0x61A0             STR      R0,[R4, #+24]
   \   000000F2   0xE7D0             B.N      ??CrossCallReturnLabel_9
    480            }
    481          
    482            UART_Cmd(MDR_UART1,DISABLE);
   \                     ??UARTFunc_2:
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x4640             MOV      R0,R8
   \   000000F8   0x.... 0x....      BL       UART_Cmd
    483            DisplayMenu();
   \   000000FC   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   00000100   0x.... 0x....      B.W      DisplayMenu
    484          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x4640             MOV      R0,R8
   \   00000002   0x.... 0x....      B.W      UART_GetFlagStatus

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0xB2C9             UXTB     R1,R1
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x4378             MULS     R0,R0,R7
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x.... 0x....      B.W      LCD_PUTC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x40030000         DC32     0x40030000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x........         DC32     CurrentMethod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x........         DC32     CurrentFont

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x........         DC32     Font_6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x........         DC32     ErrorMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x........         DC32     UARTInitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     SendBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x........         DC32     ReceiveBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x........         DC32     pfUARTReceiverFunc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x........         DC32     ReceiverFuncFIFODemo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0x........         DC32     pfUARTSenderFunc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   0x........         DC32     SenderFuncFIFODemo

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Press: DOWN, LEFT, UP">`:
   \   00000000   0x50 0x72          DC8 "Press: DOWN, LEFT, UP"
   \              0x65 0x73    
   \              0x73 0x3A    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2C    
   \              0x20 0x4C    
   \              0x45 0x46    
   \              0x54 0x2C    
   \              0x20 0x55    
   \              0x50 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UP pressed    ">`:
   \   00000000   0x55 0x50          DC8 "UP pressed    "
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "DOWN pressed  ">`:
   \   00000000   0x44 0x4F          DC8 "DOWN pressed  "
   \              0x57 0x4E    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "LEFT pressed  ">`:
   \   00000000   0x4C 0x45          DC8 "LEFT pressed  "
   \              0x46 0x54    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "RIGHT pressed ">`:
   \   00000000   0x52 0x49          DC8 "RIGHT pressed "
   \              0x47 0x48    
   \              0x54 0x20    
   \              0x70 0x72    
   \              0x65 0x73    
   \              0x73 0x65    
   \              0x64 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Frame error   ">`:
   \   00000000   0x46 0x72          DC8 "Frame error   "
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x20 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Parity error  ">`:
   \   00000000   0x50 0x61          DC8 "Parity error  "
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Break line    ">`:
   \   00000000   0x42 0x72          DC8 "Break line    "
   \              0x65 0x61    
   \              0x6B 0x20    
   \              0x6C 0x69    
   \              0x6E 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Overflow error">`:
   \   00000000   0x4F 0x76          DC8 "Overflow error"
   \              0x65 0x72    
   \              0x66 0x6C    
   \              0x6F 0x77    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "or RIGHT keys, for   ">`:
   \   00000000   0x6F 0x72          DC8 "or RIGHT keys, for   "
   \              0x20 0x52    
   \              0x49 0x47    
   \              0x48 0x54    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x73 0x2C    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "start sending.       ">`:
   \   00000000   0x73 0x74          DC8 "start sending.       "
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x2E    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Press SEL for return.">`:
   \   00000000   0x50 0x72          DC8 "Press SEL for return."
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x53 0x45    
   \              0x4C 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x74 0x75    
   \              0x72 0x6E    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Send:                ">`:
   \   00000000   0x53 0x65          DC8 "Send:                "
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rec.:                ">`:
   \   00000000   0x52 0x65          DC8 "Rec.:                "
   \              0x63 0x2E    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0
    485          
    486          /** @} */ /* End of group Menu_UART_Private_Functions */
    487          
    488          /** @} */ /* End of group Menu_UART */
    489          
    490          /** @} */ /* End of group Menu */
    491          
    492          /** @} */ /* End of group __MDR32F9Qx_Eval_Demo */
    493          
    494          /******************* (C) COPYRIGHT 2010 Phyton *******************
    495          *
    496          * END OF FILE Menu_uart.c */
    497          
    498          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  ReceiverFuncFIFODemo
             16 -> UARTDisplayError
             16 -> UART_GetFlagStatus
             16 -> UART_ReceiveData
       16  SenderFuncFIFODemo
             16 -> UART_GetFlagStatus
             16 -> UART_SendData
       16  UARTConfiguration
             16 -> RST_CLK_PCLKcmd
             16 -> UART_BRGInit
             16 -> UART_DeInit
       16  UARTDisplayError
             16 -> GetKey
             16 -> LCD_PUTS
       32  UARTFunc
              0 -> DisplayMenu
             32 -> GetKey
             32 -> LCD_PUTC
             32 -> UARTConfiguration
             32 -> UARTDisplayError
             32 -> UARTHelp
             32 -> UART_Cmd
             32 -> UART_GetFlagStatus
             32 -> UART_Init
             32 -> UART_ReceiveData
             32 -> UART_SendData
        8  UARTHelp
              8 -> LCD_CLS
              0 -> LCD_PUTS
              8 -> LCD_PUTS
       56  UARTwFIFOFunc
             56 -> DisplayMenu
             56 -> GetKey
             56 -> LCD_PUTS
             56 -> ReceiverFuncFIFODemo
             56 -> SenderFuncFIFODemo
             56 -> UARTConfiguration
             56 -> UARTHelp
             56 -> UART_Cmd
             56 -> UART_DMACmd
             56 -> UART_DMAConfig
             56 -> UART_ITConfig
             56 -> UART_Init
             56 -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "Break line    ">
      16  ?<Constant "DOWN pressed  ">
      16  ?<Constant "Frame error   ">
      16  ?<Constant "LEFT pressed  ">
      16  ?<Constant "Overflow error">
      16  ?<Constant "Parity error  ">
      24  ?<Constant "Press SEL for return.">
      24  ?<Constant "Press: DOWN, LEFT, UP">
      16  ?<Constant "RIGHT pressed ">
      24  ?<Constant "Rec.:                ">
      24  ?<Constant "Send:                ">
      16  ?<Constant "UP pressed    ">
      24  ?<Constant "or RIGHT keys, for   ">
      24  ?<Constant "start sending.       ">
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_2
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
      32  ?Subroutine0
      26  ?Subroutine1
       8  ?Subroutine2
      12  ?Subroutine3
       6  ?Subroutine4
      12  ?Subroutine5
      16  ErrorMessage
     196  ReceiveBuffer
      72  ReceiverFuncFIFODemo
     196  SendBuffer
      50  SenderFuncFIFODemo
      48  UARTConfiguration
      74  UARTDisplayError
     260  UARTFunc
     130  UARTHelp
      44  UARTInitStructure
          send_buffer_pos
          receive_buffer_pos
          error_flag
          SendData
     384  UARTwFIFOFunc

 
   392 bytes in section .bss
    60 bytes in section .data
   128 bytes in section .rodata
 1 314 bytes in section .text
 
 1 314 bytes of CODE  memory
   128 bytes of CONST memory
   452 bytes of DATA  memory

Errors: none
Warnings: none
