###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:25:59 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu.c                                   #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\Menu.c --preprocess                      #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\Menu.lst         #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\Menu.o            #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR1986VE91_Eval\src\Menu.c
      1          /**
      2            ******************************************************************************
      3            * @file    Menu.c
      4            * @author  Phyton Application Team
      5            * @version V3.0.0
      6            * @date    10.09.2011
      7            * @brief   This file contains all the functions for hierarchical text menu.
      8            ******************************************************************************
      9            * <br><br>
     10            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     11            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     12            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY
     13            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     14            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     15            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     16            *
     17            * <h2><center>&copy; COPYRIGHT 2011 Phyton</center></h2>
     18            */
     19          
     20          /* Includes ------------------------------------------------------------------*/
     21          #include <string.h>
     22          #include <stddef.h>
     23          #include "Menu.h"
     24          #include "Menu_items.h"
     25          #include "types.h"
     26          #include "lcd.h"
     27          #include "gl.h"
     28          #include "text.h"
     29          #include "joystick.h"
     30          #include "leds.h"
     31          
     32          /** @addtogroup __MDR32F9Qx_Eval_Demo MDR32F9Qx Demonstration Example
     33            * @{
     34            */
     35          
     36          /** @addtogroup Menu Menu
     37            * @{
     38            */
     39          
     40          /** @defgroup Menu_Private_Types Menu Private Types
     41            * @{
     42            */
     43          
     44          /* Menu description */
     45          typedef void (* tMenuFunc)(void);
     46          typedef struct sMenuItem *tMenuItem;
     47          typedef struct sMenu *tMenu;
     48          
     49          /**
     50            * @brief  Menu item structure definition
     51            */
     52          struct sMenuItem
     53          {
     54            ucint8_t* psTitle;
     55            tMenuFunc pfMenuFunc;
     56            tMenu psSubMenu;
     57          };
     58          
     59          /**
     60            * @brief  Menu structure definition
     61            */
     62          struct sMenu
     63          {
     64            ucint8_t* psTitle;
     65            tMenuItem psItems;
     66            uint32_t nItems;
     67          };
     68          
     69          /** @} */ /* End of group Menu_Private_Types */
     70          
     71          /* Service function and handler prototypes */
     72          static void DisplayMenuItemString(uint32_t y, ucint8_t *ptr);
     73          static void IdleFunc(void);
     74          static void SelFunc(void);
     75          static void UpFunc(void);
     76          static void DownFunc(void);
     77          static void ReturnFunc(void);
     78          
     79          /** @defgroup Menu_Private_Variables Menu Private Variables
     80            * @{
     81            */
     82          

   \                                 In section .data, align 4
     83          static uint32_t MenuItemIndex = 0, nMenuLevel = 0;
   \                     MenuItemIndex:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00000000         DC32 0
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     84          
     85          static tMenuItem psMenuItem, psCurrentMenuItem;
     86          static tMenu psPrevMenu[MAX_MENU_LEVELS];
     87          static tMenu psCurrentMenu;
     88          
     89          /* Fourth level menu */
     90          struct sMenuItem TimeMenuItems[] = {{"Adjust", TimeAdjustFunc, NULL},
     91                                              {"Show", TimeShowFunc, NULL},
     92                                              {"Return", ReturnFunc, NULL}};
     93          struct sMenu TimeMenu = {"Time", TimeMenuItems, countof(TimeMenuItems)};
     94          
     95          struct sMenuItem DateMenuItems[] = {{"Adjust", DateAdjustFunc, NULL},
     96                                              {"Show", DateShowFunc, NULL},
     97                                              {"Return", ReturnFunc, NULL}};
     98          struct sMenu DateMenu = {"Date", DateMenuItems, countof(DateMenuItems)};
     99          
    100          struct sMenuItem AlarmMenuItems[] = {{"Adjust", AlarmAdjustFunc, NULL},
    101                                               {"Show", AlarmShowFunc, NULL},
    102                                               {"Return", ReturnFunc, NULL}};
    103          struct sMenu AlarmMenu = {"Alarm", AlarmMenuItems, countof(AlarmMenuItems)};
    104          
    105          struct sMenuItem STOPMenuItems[] = {{"Exit on RTC Alarm", STOPMode_RTCAlarm, NULL},
    106                                              {"Return", ReturnFunc, NULL}};
    107          struct sMenu STOPMenu = {"STOP Mode", STOPMenuItems, countof(STOPMenuItems)};
    108          
    109          struct sMenuItem STANDBYMenuItems[] = {
    110          #if !defined (USE_MDR32F9Q3_Rev0) && !defined (USE_MDR32F9Q3_Rev1)
    111          																			 {"Exit on Wakeup", STANDBYMode_WAKEUP, NULL},
    112          #endif
    113          																			 {"Exit on RTC Alarm", STANDBYMode_RTCAlarm, NULL},
    114                                                 {"Return", ReturnFunc, NULL}};
    115          struct sMenu STANDBYMenu = {"STANDBY Mode", STANDBYMenuItems, countof(STANDBYMenuItems)};
    116          
    117          struct sMenuItem UARTMenuItems[] = {{"With FIFO", UARTwFIFOFunc, NULL},
    118                                              {"Without FIFO", UARTFunc, NULL},
    119                                              {"Return", ReturnFunc, NULL}};
    120          struct sMenu UARTMenu = {"UART", UARTMenuItems, countof(UARTMenuItems)};
    121          
    122          struct sMenuItem RTCMenuItems[] = {{"Time", IdleFunc, &TimeMenu},
    123                                             {"Date", IdleFunc, &DateMenu},
    124                                             {"Alarm", IdleFunc, &AlarmMenu},
    125                                             {"Return", ReturnFunc, NULL}};
    126          struct sMenu RTCMenu = {"Real Time Clock", RTCMenuItems, countof(RTCMenuItems)};
    127          
    128          struct sMenuItem LowPowerMenuItems[] = {{"STOP", IdleFunc, &STOPMenu},
    129                                                  {"STANDBY", IdleFunc, &STANDBYMenu},
    130                                                  {"Return", ReturnFunc, NULL}};
    131          struct sMenu LowPowerMenu = {"Low Power Mode", LowPowerMenuItems, countof(LowPowerMenuItems)};
    132          
    133          /* Third level menu */
    134          struct sMenuItem TextMenuItems[] = {{"Font", FontFunc, NULL},
    135                                              {"Style", StyleFunc, NULL},
    136                                              {"Book", BookFunc, NULL},
    137                                              {"Return", ReturnFunc, NULL}};
    138          struct sMenu TextMenu = {"Text", TextMenuItems, countof(TextMenuItems)};
    139          
    140          struct sMenuItem GraphicMenuItems[] = {{"Elements", ElementsFunc, NULL},
    141                                                 {"Indicators", IndicatorsFunc, NULL},
    142                                                 {"Return", ReturnFunc, NULL}};
    143          struct sMenu GraphicMenu = {"Graphics", GraphicMenuItems, countof(GraphicMenuItems)};
    144          
    145          struct sMenuItem LEDsMenuItems[] = {{"On", LightsOnFunc, NULL},
    146                                              {"Return", ReturnFunc, NULL}};
    147          struct sMenu LEDsMenu = {"LEDs", LEDsMenuItems, countof(LEDsMenuItems)};
    148          
    149          struct sMenuItem CommMenuItems[] = {{"UART", IdleFunc, &UARTMenu},
    150                                              {"USB. Virtual COM", VCOMFunc, NULL},
    151                                              {"Return", ReturnFunc, NULL}};
    152          struct sMenu CommMenu = {"Communication", CommMenuItems, countof(CommMenuItems)};
    153          
    154          struct sMenuItem OtherMenuItems[] = {{"Thermometer", TSENSORFunc, NULL},
    155                                               {"Real Time Clock", IdleFunc, &RTCMenu},
    156                                               {"Low Power", IdleFunc, &LowPowerMenu},
    157                                               {"Return", ReturnFunc, NULL}};
    158          struct sMenu OtherMenu = {"Other devices", OtherMenuItems, countof(OtherMenuItems)};
    159          
    160          /* Second level menu */
    161          struct sMenuItem LCDMenuItems[] = {{"Text", IdleFunc, &TextMenu},
    162                                             {"Graphics", IdleFunc, &GraphicMenu},
    163                                             {"LEDs", IdleFunc, &LEDsMenu},
    164                                             {"Return", ReturnFunc, NULL}};
    165          struct sMenu LCDMenu = {"Display", LCDMenuItems, countof(LCDMenuItems)};
    166          
    167          struct sMenuItem DevMenuItems[] = {{"Communication", IdleFunc, &CommMenu},
    168                                             {"Other", IdleFunc, &OtherMenu},
    169                                             {"Return", ReturnFunc, NULL}};
    170          struct sMenu DevMenu = {"Devices", DevMenuItems, countof(DevMenuItems)};
    171          
    172          /* Main menu */
    173          struct sMenuItem MainMenuItems[] = {
   \                     MainMenuItems:
   \   00000024   0x........         DC32 `?<Constant "Display">`, IdleFunc, LCDMenu
   \              0x........   
   \              0x........   
   \   00000030   0x........         DC32 `?<Constant "Devices">`, IdleFunc, DevMenu, `?<Constant "About">`
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000040   0x........         DC32 AboutFunc, 0H
   \              0x00000000   
    174            {"Display", IdleFunc, &LCDMenu},
    175            {"Devices", IdleFunc, &DevMenu},
    176            {"About", AboutFunc, NULL}};
    177          struct sMenu MainMenu = {"Main menu", MainMenuItems, countof(MainMenuItems)};
   \                     MainMenu:
   \   00000048   0x........         DC32 `?<Constant "Main menu">`, MainMenuItems, 3
   \              0x........   
   \              0x00000003   

   \                                 In section .data, align 4
   \                     TimeMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Adjust">`, TimeAdjustFunc, 0H, `?<Constant "Show">`
   \              0x........   
   \              0x00000000   
   \              0x........   
   \   00000010   0x........         DC32 TimeShowFunc, 0H, `?<Constant "Return">`, ReturnFunc, 0H
   \              0x00000000   
   \              0x........   
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     TimeMenu:
   \   00000000   0x........         DC32 `?<Constant "Time">`, TimeMenuItems, 3
   \              0x........   
   \              0x00000003   

   \                                 In section .data, align 4
   \                     DateMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Adjust">`, DateAdjustFunc, 0H, `?<Constant "Show">`
   \              0x........   
   \              0x00000000   
   \              0x........   
   \   00000010   0x........         DC32 DateShowFunc, 0H, `?<Constant "Return">`, ReturnFunc, 0H
   \              0x00000000   
   \              0x........   
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     DateMenu:
   \   00000000   0x........         DC32 `?<Constant "Date">`, DateMenuItems, 3
   \              0x........   
   \              0x00000003   

   \                                 In section .data, align 4
   \                     AlarmMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Adjust">`, AlarmAdjustFunc, 0H, `?<Constant "Show">`
   \              0x........   
   \              0x00000000   
   \              0x........   
   \   00000010   0x........         DC32 AlarmShowFunc, 0H, `?<Constant "Return">`, ReturnFunc, 0H
   \              0x00000000   
   \              0x........   
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     AlarmMenu:
   \   00000000   0x........         DC32 `?<Constant "Alarm">`, AlarmMenuItems, 3
   \              0x........   
   \              0x00000003   

   \                                 In section .data, align 4
   \                     STOPMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Exit on RTC Alarm">`, STOPMode_RTCAlarm, 0H
   \              0x........   
   \              0x00000000   
   \   0000000C   0x........         DC32 `?<Constant "Return">`, ReturnFunc, 0H
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     STOPMenu:
   \   00000000   0x........         DC32 `?<Constant "STOP Mode">`, STOPMenuItems, 2
   \              0x........   
   \              0x00000002   

   \                                 In section .data, align 4
   \                     STANDBYMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Exit on Wakeup">`, STANDBYMode_WAKEUP, 0H
   \              0x........   
   \              0x00000000   
   \   0000000C   0x........         DC32 `?<Constant "Exit on RTC Alarm">`, STANDBYMode_RTCAlarm, 0H
   \              0x........   
   \              0x00000000   
   \   00000018   0x........         DC32 `?<Constant "Return">`, ReturnFunc, 0H
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     STANDBYMenu:
   \   00000000   0x........         DC32 `?<Constant "STANDBY Mode">`, STANDBYMenuItems, 3
   \              0x........   
   \              0x00000003   

   \                                 In section .data, align 4
   \                     UARTMenuItems:
   \   00000000   0x........         DC32 `?<Constant "With FIFO">`, UARTwFIFOFunc, 0H
   \              0x........   
   \              0x00000000   
   \   0000000C   0x........         DC32 `?<Constant "Without FIFO">`, UARTFunc, 0H, `?<Constant "Return">`
   \              0x........   
   \              0x00000000   
   \              0x........   
   \   0000001C   0x........         DC32 ReturnFunc, 0H
   \              0x00000000   

   \                                 In section .data, align 4
   \                     UARTMenu:
   \   00000000   0x........         DC32 `?<Constant "UART">`, UARTMenuItems, 3
   \              0x........   
   \              0x00000003   

   \                                 In section .data, align 4
   \                     RTCMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Time">`, IdleFunc, TimeMenu, `?<Constant "Date">`
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 IdleFunc, DateMenu, `?<Constant "Alarm">`, IdleFunc, AlarmMenu
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000024   0x........         DC32 `?<Constant "Return">`, ReturnFunc, 0H
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     RTCMenu:
   \   00000000   0x........         DC32 `?<Constant "Real Time Clock">`, RTCMenuItems, 4
   \              0x........   
   \              0x00000004   

   \                                 In section .data, align 4
   \                     LowPowerMenuItems:
   \   00000000   0x........         DC32 `?<Constant "STOP">`, IdleFunc, STOPMenu, `?<Constant "STANDBY">`
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 IdleFunc, STANDBYMenu, `?<Constant "Return">`, ReturnFunc, 0H
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     LowPowerMenu:
   \   00000000   0x........         DC32 `?<Constant "Low Power Mode">`, LowPowerMenuItems, 3
   \              0x........   
   \              0x00000003   

   \                                 In section .data, align 4
   \                     TextMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Font">`, FontFunc, 0H, `?<Constant "Style">`
   \              0x........   
   \              0x00000000   
   \              0x........   
   \   00000010   0x........         DC32 StyleFunc, 0H, `?<Constant "Book">`, BookFunc, 0H
   \              0x00000000   
   \              0x........   
   \              0x........   
   \              0x00000000   
   \   00000024   0x........         DC32 `?<Constant "Return">`, ReturnFunc, 0H
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     TextMenu:
   \   00000000   0x........         DC32 `?<Constant "Text">`, TextMenuItems, 4
   \              0x........   
   \              0x00000004   

   \                                 In section .data, align 4
   \                     GraphicMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Elements">`, ElementsFunc, 0H
   \              0x........   
   \              0x00000000   
   \   0000000C   0x........         DC32 `?<Constant "Indicators">`, IndicatorsFunc, 0H
   \              0x........   
   \              0x00000000   
   \   00000018   0x........         DC32 `?<Constant "Return">`, ReturnFunc, 0H
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     GraphicMenu:
   \   00000000   0x........         DC32 `?<Constant "Graphics">`, GraphicMenuItems, 3
   \              0x........   
   \              0x00000003   

   \                                 In section .data, align 4
   \                     LEDsMenuItems:
   \   00000000   0x........         DC32 `?<Constant "On">`, LightsOnFunc, 0H, `?<Constant "Return">`
   \              0x........   
   \              0x00000000   
   \              0x........   
   \   00000010   0x........         DC32 ReturnFunc, 0H
   \              0x00000000   

   \                                 In section .data, align 4
   \                     LEDsMenu:
   \   00000000   0x........         DC32 `?<Constant "LEDs">`, LEDsMenuItems, 2
   \              0x........   
   \              0x00000002   

   \                                 In section .data, align 4
   \                     CommMenuItems:
   \   00000000   0x........         DC32 `?<Constant "UART">`, IdleFunc, UARTMenu
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 `?<Constant "USB. Virtual COM">`, VCOMFunc, 0H
   \              0x........   
   \              0x00000000   
   \   00000018   0x........         DC32 `?<Constant "Return">`, ReturnFunc, 0H
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     CommMenu:
   \   00000000   0x........         DC32 `?<Constant "Communication">`, CommMenuItems, 3
   \              0x........   
   \              0x00000003   

   \                                 In section .data, align 4
   \                     OtherMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Thermometer">`, TSENSORFunc, 0H
   \              0x........   
   \              0x00000000   
   \   0000000C   0x........         DC32 `?<Constant "Real Time Clock">`, IdleFunc, RTCMenu
   \              0x........   
   \              0x........   
   \   00000018   0x........         DC32 `?<Constant "Low Power">`, IdleFunc, LowPowerMenu
   \              0x........   
   \              0x........   
   \   00000024   0x........         DC32 `?<Constant "Return">`, ReturnFunc, 0H
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     OtherMenu:
   \   00000000   0x........         DC32 `?<Constant "Other devices">`, OtherMenuItems, 4
   \              0x........   
   \              0x00000004   

   \                                 In section .data, align 4
   \                     LCDMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Text">`, IdleFunc, TextMenu, `?<Constant "Graphics">`
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 IdleFunc, GraphicMenu, `?<Constant "LEDs">`, IdleFunc, LEDsMenu
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000024   0x........         DC32 `?<Constant "Return">`, ReturnFunc, 0H
   \              0x........   
   \              0x00000000   

   \                                 In section .data, align 4
   \                     LCDMenu:
   \   00000000   0x........         DC32 `?<Constant "Display">`, LCDMenuItems, 4
   \              0x........   
   \              0x00000004   

   \                                 In section .data, align 4
   \                     DevMenuItems:
   \   00000000   0x........         DC32 `?<Constant "Communication">`, IdleFunc, CommMenu
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 `?<Constant "Other">`, IdleFunc, OtherMenu, `?<Constant "Return">`
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000001C   0x........         DC32 ReturnFunc, 0H
   \              0x00000000   

   \                                 In section .data, align 4
   \                     DevMenu:
   \   00000000   0x........         DC32 `?<Constant "Devices">`, DevMenuItems, 3
   \              0x........   
   \              0x00000003   
    178          
    179          /** @} */ /* End of group Menu_Private_Variables */
    180          
    181          /** @defgroup Menu_Private_Functions Menu Private Functions
    182            * @{
    183            */
    184          
    185          /** @defgroup Menu_Service_Functions Menu Service Functions
    186            * @{
    187            */
    188          
    189          /* Service functions for menu drawing */
    190          
    191          /*******************************************************************************
    192          * Function Name  : DisplayMenuItemString
    193          * Description    : Prints menu line
    194          * Input          : y   - line y-coordinate
    195          *                : ptr - pointer to string
    196          * Output         : None
    197          * Return         : None
    198          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    199          void DisplayMenuItemString(uint32_t y, ucint8_t *ptr)
    200          {
   \                     DisplayMenuItemString:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    201            uint32_t x;
    202          
    203            LCD_PUTS(0, y, "                                        ");
   \   00000006   0x.... 0x....      ADR.W    R2,`?<Constant "                     ...">`
   \   0000000A   0xB2E1             UXTB     R1,R4
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       LCD_PUTS
    204            x = (MAX_X - (CurrentFont->Width * strlen((const char *)ptr))) / 2;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       strlen
    205            LCD_PUTS(x, y, ptr);
   \   00000018   0x462A             MOV      R2,R5
   \   0000001A   0xB2E1             UXTB     R1,R4
   \   0000001C   0x....             LDR.N    R3,??DataTable42
   \   0000001E   0x681B             LDR      R3,[R3, #+0]
   \   00000020   0x685B             LDR      R3,[R3, #+4]
   \   00000022   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   00000026   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   0000002A   0x.... 0x....      B.W      LCD_PUTS
    206          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x4358             MULS     R0,R0,R3
   \   00000002   0xF1C0 0x007F      RSB      R0,R0,#+127
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0x0E00             LSRS     R0,R0,#+24
   \   0000000A   0x4770             BX       LR
    207          
    208          /* Service handlers */
    209          
    210          /*******************************************************************************
    211          * Function Name  : IdleFunc
    212          * Description    : Booby
    213          * Input          : None
    214          * Output         : None
    215          * Return         : None
    216          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    217          void IdleFunc(void)
    218          {
    219          }
   \                     IdleFunc:
   \   00000000   0x4770             BX       LR               ;; return
    220          
    221          /*******************************************************************************
    222          * Function Name  : SelFunc
    223          * Description    : SEL - jumps to the submenu and/or calls corresponding handler
    224          * Input          : None
    225          * Output         : None
    226          * Return         : None
    227          *******************************************************************************/
    228          void SelFunc(void)
    229          {
    230            psCurrentMenuItem = psMenuItem;
    231          
    232            if(psMenuItem->psSubMenu != NULL)
    233            {
    234              MenuItemIndex = 0;
    235              psCurrentMenu = psMenuItem->psSubMenu;
    236              psMenuItem = &(psCurrentMenu->psItems)[MenuItemIndex];
    237              DisplayMenu();
    238              nMenuLevel++;
    239              psPrevMenu[nMenuLevel] = psCurrentMenu;
    240            }
    241            psCurrentMenuItem->pfMenuFunc();
    242          }
    243          
    244          /*******************************************************************************
    245          * Function Name  : UpFunc
    246          * Description    : UP - steps one one item up
    247          * Input          : None
    248          * Output         : None
    249          * Return         : None
    250          *******************************************************************************/
    251          void UpFunc(void)
    252          {
    253            /* Display current menu item as non-selected */
    254            psMenuItem = &psCurrentMenu->psItems[MenuItemIndex];
    255            CurrentMethod = MET_AND;
    256            DisplayMenuItemString((MenuItemIndex * (CurrentFont->Height + 2) + CurrentFont->Height + 4), psMenuItem->psTitle);
    257          
    258            /* Determine new menu item (iteratively) */
    259            if(MenuItemIndex > 0)
    260            {
    261              MenuItemIndex--;
    262            }
    263            else
    264            {
    265              MenuItemIndex = psCurrentMenu->nItems - 1;
    266            }
    267          
    268            /* Display new menu item as selected */
    269            psMenuItem = &psCurrentMenu->psItems[MenuItemIndex];
    270            CurrentMethod = MET_NOT_XOR;
    271            LCD_PUTS(0, (MenuItemIndex * (CurrentFont->Height + 2) + CurrentFont->Height + 4), "                                        ");
    272          }
    273          
    274          /*******************************************************************************
    275          * Function Name  : DownFunc
    276          * Description    : DOWN - steps one one item down
    277          * Input          : None
    278          * Output         : None
    279          * Return         : None
    280          *******************************************************************************/
    281          void DownFunc(void)
    282          {
    283            /* Display current menu item as non-selected */
    284            psMenuItem = &psCurrentMenu->psItems[MenuItemIndex];
    285            CurrentMethod = MET_AND;
    286          
    287            DisplayMenuItemString((MenuItemIndex * (CurrentFont->Height + 2) + CurrentFont->Height + 4), psMenuItem->psTitle);
    288          
    289            /* Determine new menu item (iteratively) */
    290            if(MenuItemIndex >= ((psCurrentMenu->nItems)-1))
    291            {
    292              MenuItemIndex = 0;
    293            }
    294            else
    295            {
    296              MenuItemIndex++;
    297            }
    298            psMenuItem = &(psCurrentMenu->psItems[MenuItemIndex]);
    299          
    300            /* Display new menu item as selected */
    301            CurrentMethod = MET_NOT_XOR;
    302            LCD_PUTS(0, (MenuItemIndex * (CurrentFont->Height + 2) + CurrentFont->Height + 4), "                                        ");
    303          }
    304          
    305          /*******************************************************************************
    306          * Function Name  : ReturnFunc
    307          * Description    : Jumps to upper level menu
    308          * Input          : None
    309          * Output         : None
    310          * Return         : None
    311          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    312          void ReturnFunc(void) {
    313            if(nMenuLevel == 0)
   \                     ReturnFunc:
   \   00000000   0x....             LDR.N    R0,??DataTable42_1
   \   00000002   0x6841             LDR      R1,[R0, #+4]
   \   00000004   0xB909             CBNZ.N   R1,??ReturnFunc_0
    314            {
    315              nMenuLevel++;
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x6041             STR      R1,[R0, #+4]
    316            }
    317          
    318            psCurrentMenu = psPrevMenu[nMenuLevel-1];
   \                     ??ReturnFunc_0:
   \   0000000A   0x6841             LDR      R1,[R0, #+4]
   \   0000000C   0xEB00 0x0281      ADD      R2,R0,R1, LSL #+2
   \   00000010   0x68D2             LDR      R2,[R2, #+12]
   \   00000012   0x6202             STR      R2,[R0, #+32]
    319            psMenuItem = &psCurrentMenu->psItems[0];
   \   00000014   0x6852             LDR      R2,[R2, #+4]
   \   00000016   0x6082             STR      R2,[R0, #+8]
    320            MenuItemIndex = 0;
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x6002             STR      R2,[R0, #+0]
    321            nMenuLevel--;
   \   0000001C   0x1E49             SUBS     R1,R1,#+1
   \   0000001E   0x6041             STR      R1,[R0, #+4]
    322          
    323            DisplayMenu();
   \   00000020   0x....             B.N      DisplayMenu
    324          }
    325          
    326          /*******************************************************************************
    327          * Function Name  : BackToMenuOnSel
    328          * Description    : Waits for SEL pressed and returns to the menu
    329          * Input          : None
    330          * Output         : None
    331          * Return         : None
    332          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    333          void BackToMenuOnSel(void)
    334          {
   \                     BackToMenuOnSel:
   \   00000000   0xB580             PUSH     {R7,LR}
    335            WAIT_UNTIL_KEY_PRESSED(SEL);
   \                     ??BackToMenuOnSel_0:
   \   00000002   0x.... 0x....      BL       GetKey
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD1FB             BNE.N    ??BackToMenuOnSel_0
    336            DisplayMenu();
   \   0000000A   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000E   0x....             B.N      DisplayMenu
    337          }
    338          
    339          /*******************************************************************************
    340          * Function Name  : ReadKey
    341          * Description    : Dispatcher function
    342          * Input          : None
    343          * Output         : None
    344          * Return         : None
    345          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    346          void ReadKey(void)
    347          {
   \                     ReadKey:
   \   00000000   0x.... 0x....      ADR.W    R4,`?<Constant "                     ...">`
   \   00000004   0x....             LDR.N    R5,??DataTable42
   \   00000006   0x....             LDR.N    R6,??DataTable42_2
   \   00000008   0x270C             MOVS     R7,#+12
   \   0000000A   0x.... 0x....      LDR.W    R8,??DataTable42_1
    348            uint32_t key;
    349          
    350            while (1)
    351            {
    352              key = GetKey();
   \                     ??ReadKey_0:
   \   0000000E   0x.... 0x....      BL       GetKey
   \   00000012   0xEA5F 0x0900      MOVS     R9,R0
    353              switch (key)
   \   00000016   0xD004             BEQ.N    ??ReadKey_1
   \   00000018   0xF1B9 0x0F02      CMP      R9,#+2
   \   0000001C   0xD02A             BEQ.N    ??ReadKey_2
   \   0000001E   0xD31F             BCC.N    ??ReadKey_3
   \   00000020   0xE048             B.N      ??ReadKey_4
    354              {
    355                case SEL:   SelFunc();  break;
   \                     ??ReadKey_1:
   \   00000022   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   00000026   0xF8C8 0x000C      STR      R0,[R8, #+12]
   \   0000002A   0x6880             LDR      R0,[R0, #+8]
   \   0000002C   0xB198             CBZ.N    R0,??ReadKey_5
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0xF8C8 0x1000      STR      R1,[R8, #+0]
   \   00000034   0xF8C8 0x0020      STR      R0,[R8, #+32]
   \   00000038   0x6840             LDR      R0,[R0, #+4]
   \   0000003A   0xF8C8 0x0008      STR      R0,[R8, #+8]
   \   0000003E   0x.... 0x....      BL       DisplayMenu
   \   00000042   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0xF8C8 0x0004      STR      R0,[R8, #+4]
   \   0000004C   0xEB08 0x0080      ADD      R0,R8,R0, LSL #+2
   \   00000050   0xF8D8 0x1020      LDR      R1,[R8, #+32]
   \   00000054   0x6101             STR      R1,[R0, #+16]
   \                     ??ReadKey_5:
   \   00000056   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   0000005A   0x6840             LDR      R0,[R0, #+4]
   \   0000005C   0x4780             BLX      R0
   \   0000005E   0xE029             B.N      ??ReadKey_4
    356                case UP:    UpFunc();   break;
   \                     ??ReadKey_3:
   \   00000060   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00000064   0xF8D8 0x1020      LDR      R1,[R8, #+32]
   \   00000068   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   0000006C   0xB900             CBNZ.N   R0,??ReadKey_6
   \   0000006E   0x6888             LDR      R0,[R1, #+8]
   \                     ??ReadKey_6:
   \   00000070   0x1E40             SUBS     R0,R0,#+1
   \   00000072   0xE00B             B.N      ??ReadKey_7
    357                case DOWN:  DownFunc(); break;
   \                     ??ReadKey_2:
   \   00000074   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000078   0xF8D8 0x1020      LDR      R1,[R8, #+32]
   \   0000007C   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000080   0x688A             LDR      R2,[R1, #+8]
   \   00000082   0x1E52             SUBS     R2,R2,#+1
   \   00000084   0x4290             CMP      R0,R2
   \   00000086   0xBF2C             ITE      CS 
   \   00000088   0x2000             MOVCS    R0,#+0
   \   0000008A   0x1C40             ADDCC    R0,R0,#+1
   \                     ??ReadKey_7:
   \   0000008C   0xF8C8 0x0000      STR      R0,[R8, #+0]
   \   00000090   0x6849             LDR      R1,[R1, #+4]
   \   00000092   0xFB07 0x1100      MLA      R1,R7,R0,R1
   \   00000096   0xF8C8 0x1008      STR      R1,[R8, #+8]
   \   0000009A   0x2103             MOVS     R1,#+3
   \   0000009C   0x7031             STRB     R1,[R6, #+0]
   \   0000009E   0x6829             LDR      R1,[R5, #+0]
   \   000000A0   0x6809             LDR      R1,[R1, #+0]
   \   000000A2   0x4622             MOV      R2,R4
   \   000000A4   0x1C8B             ADDS     R3,R1,#+2
   \   000000A6   0xFB03 0x1000      MLA      R0,R3,R0,R1
   \   000000AA   0x1D01             ADDS     R1,R0,#+4
   \   000000AC   0xB2C9             UXTB     R1,R1
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      BL       LCD_PUTS
    358              }
    359            WAIT_UNTIL_KEY_RELEASED(key);
   \                     ??ReadKey_4:
   \   000000B4   0x.... 0x....      BL       GetKey
   \   000000B8   0x4548             CMP      R0,R9
   \   000000BA   0xD0FB             BEQ.N    ??ReadKey_4
   \   000000BC   0xE7A7             B.N      ??ReadKey_0
    360            }
    361          }
    362          
    363          /** @} */ /* End of group Menu_Service_Functions */
    364          
    365          /** @defgroup Menu_Functions Menu Functions
    366            * @{
    367            */
    368          
    369          /*----------------- Interface functions -----------------*/
    370          
    371          /*******************************************************************************
    372          * Function Name  : DisplayMenuTitle
    373          * Description    : Prints menu header
    374          * Input          : ptr - pointer to header string
    375          * Output         : None
    376          * Return         : None
    377          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    378          void DisplayMenuTitle(ucint8_t *ptr)
    379          {
   \                     DisplayMenuTitle:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
    380            uint32_t x, y;
    381            sFONT *OldFont = CurrentFont;
   \   00000006   0x....             LDR.N    R4,??DataTable42
   \   00000008   0x6825             LDR      R5,[R4, #+0]
    382            LCD_Method OldMethod = CurrentMethod;
   \   0000000A   0x....             LDR.N    R6,??DataTable42_2
   \   0000000C   0x7837             LDRB     R7,[R6, #+0]
    383          
    384            CurrentFont = &Font_6x8;
   \   0000000E   0x.... 0x....      LDR.W    R9,??DataTable42_3
   \   00000012   0xF8C4 0x9000      STR      R9,[R4, #+0]
    385            CurrentMethod = MET_AND;
   \   00000016   0x2004             MOVS     R0,#+4
   \   00000018   0x7030             STRB     R0,[R6, #+0]
    386          
    387            x = (MAX_X - (CurrentFont->Width * strlen((const char *)ptr))) / 2;
   \   0000001A   0x4640             MOV      R0,R8
   \   0000001C   0x.... 0x....      BL       strlen
    388            LCD_PUTS(x, 0, ptr);
   \   00000020   0x4642             MOV      R2,R8
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0xF8D9 0x3004      LDR      R3,[R9, #+4]
   \   00000028   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   0000002C   0x.... 0x....      BL       LCD_PUTS
    389          
    390            y = CurrentFont->Height + 1;
   \   00000030   0x6820             LDR      R0,[R4, #+0]
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x1C41             ADDS     R1,R0,#+1
    391            CurrentMethod = MET_OR;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x7030             STRB     R0,[R6, #+0]
    392            LCD_Line(0, y, MAX_X, y);
   \   0000003A   0x460B             MOV      R3,R1
   \   0000003C   0x227F             MOVS     R2,#+127
   \   0000003E   0x.... 0x....      BL       LCD_Line
    393          
    394            CurrentFont = OldFont;
   \   00000042   0x6025             STR      R5,[R4, #+0]
    395            CurrentMethod = OldMethod;
   \   00000044   0x7037             STRB     R7,[R6, #+0]
    396          }
   \   00000046   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    397          
    398          /*******************************************************************************
    399          * Function Name  : Menu_Init
    400          * Description    : Menu initialization
    401          * Input          : None
    402          * Output         : None
    403          * Return         : None
    404          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    405          void Menu_Init(void)
    406          {
    407            psCurrentMenu = &MainMenu;
   \                     Menu_Init:
   \   00000000   0x....             LDR.N    R0,??DataTable42_1
   \   00000002   0xF100 0x0148      ADD      R1,R0,#+72
   \   00000006   0x6201             STR      R1,[R0, #+32]
    408            psPrevMenu[nMenuLevel] = psCurrentMenu;
   \   00000008   0x6841             LDR      R1,[R0, #+4]
   \   0000000A   0xEB00 0x0181      ADD      R1,R0,R1, LSL #+2
   \   0000000E   0xF100 0x0248      ADD      R2,R0,#+72
   \   00000012   0x610A             STR      R2,[R1, #+16]
    409            psMenuItem = MainMenuItems;
   \   00000014   0xF100 0x0124      ADD      R1,R0,#+36
   \   00000018   0x6081             STR      R1,[R0, #+8]
    410            CurrentFont = &Font_6x8;
   \   0000001A   0x....             LDR.N    R0,??DataTable42
   \   0000001C   0x....             LDR.N    R1,??DataTable42_3
   \   0000001E   0x6001             STR      R1,[R0, #+0]
    411          }
   \   00000020   0x4770             BX       LR               ;; return
    412          
    413          /*******************************************************************************
    414          * Function Name  : DisplayMenu
    415          * Description    : Displays the current menu
    416          * Input          : None
    417          * Output         : None
    418          * Return         : None
    419          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    420          void DisplayMenu(void)
    421          {
   \                     DisplayMenu:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
    422            uint32_t y, index;
    423            tMenuItem psMenuItem2;
    424          
    425            LCD_CLS();
   \   00000004   0x.... 0x....      BL       LCD_CLS
    426            CurrentMethod = MET_AND;
   \   00000008   0x....             LDR.N    R4,??DataTable42_2
   \   0000000A   0x2004             MOVS     R0,#+4
   \   0000000C   0x7020             STRB     R0,[R4, #+0]
    427          
    428            /* Display menu header */
    429            DisplayMenuTitle(psCurrentMenu->psTitle);
   \   0000000E   0x....             LDR.N    R5,??DataTable42_1
   \   00000010   0x6A28             LDR      R0,[R5, #+32]
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       DisplayMenuTitle
    430            /* Display menu items */
    431            for (index = 0, y = CurrentFont->Height + 4;
   \   00000018   0x2700             MOVS     R7,#+0
   \   0000001A   0x....             LDR.N    R6,??DataTable42
   \   0000001C   0x6830             LDR      R0,[R6, #+0]
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF100 0x0904      ADD      R9,R0,#+4
   \   00000024   0xF04F 0x080C      MOV      R8,#+12
   \   00000028   0xE00A             B.N      ??DisplayMenu_0
    432                 index < psCurrentMenu->nItems;
    433                 index++, y += CurrentFont->Height + 2)
    434            {
    435              psMenuItem2 = &(psCurrentMenu->psItems[index]);
    436              DisplayMenuItemString(y, psMenuItem2->psTitle);
   \                     ??DisplayMenu_1:
   \   0000002A   0xFB08 0x0007      MLA      R0,R8,R7,R0
   \   0000002E   0x6801             LDR      R1,[R0, #+0]
   \   00000030   0x4648             MOV      R0,R9
   \   00000032   0x.... 0x....      BL       DisplayMenuItemString
    437            }
   \   00000036   0x1C7F             ADDS     R7,R7,#+1
   \   00000038   0x6830             LDR      R0,[R6, #+0]
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x1C80             ADDS     R0,R0,#+2
   \   0000003E   0x4481             ADD      R9,R0,R9
   \                     ??DisplayMenu_0:
   \   00000040   0x6A29             LDR      R1,[R5, #+32]
   \   00000042   0x6848             LDR      R0,[R1, #+4]
   \   00000044   0x6889             LDR      R1,[R1, #+8]
   \   00000046   0x428F             CMP      R7,R1
   \   00000048   0xD3EF             BCC.N    ??DisplayMenu_1
    438          
    439            /* Determine current item */
    440            psMenuItem = &(psCurrentMenu->psItems[MenuItemIndex]);
   \   0000004A   0x6829             LDR      R1,[R5, #+0]
   \   0000004C   0xFB08 0x0001      MLA      R0,R8,R1,R0
   \   00000050   0x60A8             STR      R0,[R5, #+8]
    441            CurrentMethod = MET_NOT_XOR;
   \   00000052   0x2003             MOVS     R0,#+3
   \   00000054   0x7020             STRB     R0,[R4, #+0]
    442            LCD_PUTS(0, (MenuItemIndex * (CurrentFont->Height + 2) + CurrentFont->Height + 4), "                                        ");
   \   00000056   0x6830             LDR      R0,[R6, #+0]
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x.... 0x....      ADR.W    R2,`?<Constant "                     ...">`
   \   0000005E   0x1C83             ADDS     R3,R0,#+2
   \   00000060   0xFB03 0x0001      MLA      R0,R3,R1,R0
   \   00000064   0x1D01             ADDS     R1,R0,#+4
   \   00000066   0xB2C9             UXTB     R1,R1
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0xE8BD 0x43F8      POP      {R3-R9,LR}
   \   0000006E   0x.... 0x....      B.W      LCD_PUTS
    443          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xF8D8 0x1020      LDR      R1,[R8, #+32]
   \   00000004   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000008   0x6849             LDR      R1,[R1, #+4]
   \   0000000A   0xFB07 0x1100      MLA      R1,R7,R0,R1
   \   0000000E   0xF8C8 0x1008      STR      R1,[R8, #+8]
   \   00000012   0x2204             MOVS     R2,#+4
   \   00000014   0x7032             STRB     R2,[R6, #+0]
   \   00000016   0x682A             LDR      R2,[R5, #+0]
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0x1C93             ADDS     R3,R2,#+2
   \   0000001E   0xFB03 0x2000      MLA      R0,R3,R0,R2
   \   00000022   0x1D00             ADDS     R0,R0,#+4
   \   00000024   0x....             B.N      DisplayMenuItemString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   0x........         DC32     CurrentFont

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_1:
   \   00000000   0x........         DC32     MenuItemIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_2:
   \   00000000   0x........         DC32     CurrentMethod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_3:
   \   00000000   0x........         DC32     Font_6x8

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "                     ...">`:
   \   00000000   0x20 0x20          DC8 "                                        "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Adjust">`:
   \   00000000   0x41 0x64          DC8 "Adjust"
   \              0x6A 0x75    
   \              0x73 0x74    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Show">`:
   \   00000000   0x53 0x68          DC8 "Show"
   \              0x6F 0x77    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Return">`:
   \   00000000   0x52 0x65          DC8 "Return"
   \              0x74 0x75    
   \              0x72 0x6E    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Time">`:
   \   00000000   0x54 0x69          DC8 "Time"
   \              0x6D 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Date">`:
   \   00000000   0x44 0x61          DC8 "Date"
   \              0x74 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Alarm">`:
   \   00000000   0x41 0x6C          DC8 "Alarm"
   \              0x61 0x72    
   \              0x6D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Exit on RTC Alarm">`:
   \   00000000   0x45 0x78          DC8 "Exit on RTC Alarm"
   \              0x69 0x74    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x52 0x54    
   \              0x43 0x20    
   \              0x41 0x6C    
   \              0x61 0x72    
   \              0x6D 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "STOP Mode">`:
   \   00000000   0x53 0x54          DC8 "STOP Mode"
   \              0x4F 0x50    
   \              0x20 0x4D    
   \              0x6F 0x64    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Exit on Wakeup">`:
   \   00000000   0x45 0x78          DC8 "Exit on Wakeup"
   \              0x69 0x74    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x57 0x61    
   \              0x6B 0x65    
   \              0x75 0x70    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "STANDBY Mode">`:
   \   00000000   0x53 0x54          DC8 "STANDBY Mode"
   \              0x41 0x4E    
   \              0x44 0x42    
   \              0x59 0x20    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "With FIFO">`:
   \   00000000   0x57 0x69          DC8 "With FIFO"
   \              0x74 0x68    
   \              0x20 0x46    
   \              0x49 0x46    
   \              0x4F 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Without FIFO">`:
   \   00000000   0x57 0x69          DC8 "Without FIFO"
   \              0x74 0x68    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x46 0x49    
   \              0x46 0x4F    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UART">`:
   \   00000000   0x55 0x41          DC8 "UART"
   \              0x52 0x54    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Real Time Clock">`:
   \   00000000   0x52 0x65          DC8 "Real Time Clock"
   \              0x61 0x6C    
   \              0x20 0x54    
   \              0x69 0x6D    
   \              0x65 0x20    
   \              0x43 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "STOP">`:
   \   00000000   0x53 0x54          DC8 "STOP"
   \              0x4F 0x50    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "STANDBY">`:
   \   00000000   0x53 0x54          DC8 "STANDBY"
   \              0x41 0x4E    
   \              0x44 0x42    
   \              0x59 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Low Power Mode">`:
   \   00000000   0x4C 0x6F          DC8 "Low Power Mode"
   \              0x77 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Font">`:
   \   00000000   0x46 0x6F          DC8 "Font"
   \              0x6E 0x74    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Style">`:
   \   00000000   0x53 0x74          DC8 "Style"
   \              0x79 0x6C    
   \              0x65 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Book">`:
   \   00000000   0x42 0x6F          DC8 "Book"
   \              0x6F 0x6B    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Text">`:
   \   00000000   0x54 0x65          DC8 "Text"
   \              0x78 0x74    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Elements">`:
   \   00000000   0x45 0x6C          DC8 "Elements"
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Indicators">`:
   \   00000000   0x49 0x6E          DC8 "Indicators"
   \              0x64 0x69    
   \              0x63 0x61    
   \              0x74 0x6F    
   \              0x72 0x73    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Graphics">`:
   \   00000000   0x47 0x72          DC8 "Graphics"
   \              0x61 0x70    
   \              0x68 0x69    
   \              0x63 0x73    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "On">`:
   \   00000000   0x4F 0x6E          DC8 "On"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "LEDs">`:
   \   00000000   0x4C 0x45          DC8 "LEDs"
   \              0x44 0x73    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "USB. Virtual COM">`:
   \   00000000   0x55 0x53          DC8 "USB. Virtual COM"
   \              0x42 0x2E    
   \              0x20 0x56    
   \              0x69 0x72    
   \              0x74 0x75    
   \              0x61 0x6C    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Communication">`:
   \   00000000   0x43 0x6F          DC8 "Communication"
   \              0x6D 0x6D    
   \              0x75 0x6E    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Thermometer">`:
   \   00000000   0x54 0x68          DC8 "Thermometer"
   \              0x65 0x72    
   \              0x6D 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Low Power">`:
   \   00000000   0x4C 0x6F          DC8 "Low Power"
   \              0x77 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Other devices">`:
   \   00000000   0x4F 0x74          DC8 "Other devices"
   \              0x68 0x65    
   \              0x72 0x20    
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x73 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Display">`:
   \   00000000   0x44 0x69          DC8 "Display"
   \              0x73 0x70    
   \              0x6C 0x61    
   \              0x79 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Other">`:
   \   00000000   0x4F 0x74          DC8 "Other"
   \              0x68 0x65    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Devices">`:
   \   00000000   0x44 0x65          DC8 "Devices"
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x73 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "About">`:
   \   00000000   0x41 0x62          DC8 "About"
   \              0x6F 0x75    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Main menu">`:
   \   00000000   0x4D 0x61          DC8 "Main menu"
   \              0x69 0x6E    
   \              0x20 0x6D    
   \              0x65 0x6E    
   \              0x75 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0
    444          
    445          /** @} */ /* End of group Menu_Functions */
    446          
    447          /** @} */ /* End of group Menu_Private_Functions */
    448          
    449          /** @} */ /* End of group Menu */
    450          
    451          /** @} */ /* End of group __MDR32F9Qx_Eval_Demo */
    452          
    453          /******************* (C) COPYRIGHT 2011 Phyton *********************************
    454          *
    455          * END OF FILE Menu.c */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  BackToMenuOnSel
              0 -> DisplayMenu
              8 -> GetKey
       32  DisplayMenu
             32 -> DisplayMenuItemString
             32 -> DisplayMenuTitle
             32 -> LCD_CLS
              0 -> LCD_PUTS
       16  DisplayMenuItemString
              0 -> LCD_PUTS
             16 -> LCD_PUTS
             16 -> strlen
       32  DisplayMenuTitle
             32 -> LCD_Line
             32 -> LCD_PUTS
             32 -> strlen
        0  IdleFunc
        0  Menu_Init
        0  ReadKey
              0 -- Indirect call
              0 -> DisplayMenu
              0 -> DisplayMenuItemString
              0 -> GetKey
              0 -> LCD_PUTS
        0  ReturnFunc
              0 -> DisplayMenu


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      44  ?<Constant "                     ...">
       8  ?<Constant "About">
       8  ?<Constant "Adjust">
       8  ?<Constant "Alarm">
       8  ?<Constant "Book">
      16  ?<Constant "Communication">
       8  ?<Constant "Date">
       8  ?<Constant "Devices">
       8  ?<Constant "Display">
      12  ?<Constant "Elements">
      20  ?<Constant "Exit on RTC Alarm">
      16  ?<Constant "Exit on Wakeup">
       8  ?<Constant "Font">
      12  ?<Constant "Graphics">
      12  ?<Constant "Indicators">
       8  ?<Constant "LEDs">
      16  ?<Constant "Low Power Mode">
      12  ?<Constant "Low Power">
      12  ?<Constant "Main menu">
       4  ?<Constant "On">
      16  ?<Constant "Other devices">
       8  ?<Constant "Other">
      16  ?<Constant "Real Time Clock">
       8  ?<Constant "Return">
      16  ?<Constant "STANDBY Mode">
       8  ?<Constant "STANDBY">
      12  ?<Constant "STOP Mode">
       8  ?<Constant "STOP">
       8  ?<Constant "Show">
       8  ?<Constant "Style">
       8  ?<Constant "Text">
      12  ?<Constant "Thermometer">
       8  ?<Constant "Time">
       8  ?<Constant "UART">
      20  ?<Constant "USB. Virtual COM">
      12  ?<Constant "With FIFO">
      16  ?<Constant "Without FIFO">
       4  ??DataTable42
       4  ??DataTable42_1
       4  ??DataTable42_2
       4  ??DataTable42_3
      38  ?Subroutine0
      12  ?Subroutine1
      12  AlarmMenu
      36  AlarmMenuItems
      16  BackToMenuOnSel
      12  CommMenu
      36  CommMenuItems
      12  DateMenu
      36  DateMenuItems
      12  DevMenu
      36  DevMenuItems
     114  DisplayMenu
      46  DisplayMenuItemString
      74  DisplayMenuTitle
      12  GraphicMenu
      36  GraphicMenuItems
       2  IdleFunc
      12  LCDMenu
      48  LCDMenuItems
      12  LEDsMenu
      24  LEDsMenuItems
      12  LowPowerMenu
      36  LowPowerMenuItems
      84  MenuItemIndex
          nMenuLevel
          psMenuItem
          psCurrentMenuItem
          psPrevMenu
          psCurrentMenu
          MainMenuItems
          MainMenu
      34  Menu_Init
      12  OtherMenu
      48  OtherMenuItems
      12  RTCMenu
      48  RTCMenuItems
     190  ReadKey
      34  ReturnFunc
      12  STANDBYMenu
      36  STANDBYMenuItems
      12  STOPMenu
      24  STOPMenuItems
      12  TextMenu
      48  TextMenuItems
      12  TimeMenu
      36  TimeMenuItems
      12  UARTMenu
      36  UARTMenuItems

 
 828 bytes in section .data
 396 bytes in section .rodata
 620 bytes in section .text
 
 620 bytes of CODE  memory
 396 bytes of CONST memory
 828 bytes of DATA  memory

Errors: none
Warnings: none
