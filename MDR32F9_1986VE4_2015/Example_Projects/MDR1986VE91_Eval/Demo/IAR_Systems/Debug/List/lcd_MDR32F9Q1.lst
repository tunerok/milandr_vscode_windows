###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     22/Sep/2015  17:26:03 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\lcd_MDR32F9Q1.c                          #
#    Command line =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\src\lcd_MDR32F9Q1.c --preprocess             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lCN            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -lB             #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\ -o              #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\ --debug          #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Proj #
#                    ects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\config\ -I  #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\ -I                            #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\MDR32 #
#                    F9Qx_StdPeriph_Driver\inc\USB_Library\ -I                #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CMSIS #
#                    \CM3\CoreSupport\ -I C:\WORK\Milandr.MDR1986BExx.1.4.0\E #
#                    xample_Projects\MDR1986VE91_Eval\Demo\IAR_Systems\..\..\ #
#                    ..\..\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc\   #
#                    -I C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MD #
#                    R1986VE91_Eval\Demo\IAR_Systems\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\MDR32F9Qx\startup\iar\ -I          #
#                    C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\..\..\..\..\Example_Project #
#                    s\MDR1986VE91_Eval\inc\ -Ohz                             #
#    List file    =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\List\lcd_MDR32F9Q1.ls #
#                    t                                                        #
#    Object file  =  C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR19 #
#                    86VE91_Eval\Demo\IAR_Systems\Debug\Obj\lcd_MDR32F9Q1.o   #
#                                                                             #
#                                                                             #
###############################################################################

C:\WORK\Milandr.MDR1986BExx.1.4.0\Example_Projects\MDR1986VE91_Eval\src\lcd_MDR32F9Q1.c
      1          /**
      2            ******************************************************************************
      3            * @file    lcd_MDR32F9Q1.c
      4            * @author  Phyton Application Team
      5            * @version V3.0.0
      6            * @date    10.09.2011
      7            * @brief   This file provides all the LCD driver functions for MDR32F9Q1_Rev0
      8            *          and MDR32F9Q1_Rev1 evaluation boards (LCD is connected to EBC).
      9            ******************************************************************************
     10            * <br><br>
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 Phyton</center></h2>
     19            */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "lcd.h"
     23          
     24          #if defined (USE_MDR32F9Q1_Rev0) || defined (USE_MDR32F9Q1_Rev1)
     25          
     26          /** @addtogroup __MDR32F9Qx_Eval_Demo MDR32F9Qx Demonstration Example
     27            * @{
     28            */
     29          
     30          /** @addtogroup LCD_Driver LCD Driver
     31            * @{
     32            */
     33          
     34          /** @defgroup __MDR32F9Q1_LCD MDR32F9Q1 evaluation boards specific
     35            * @{
     36            */
     37          
     38          /** @defgroup __MDR32F9Q1_LCD_Private_Constants MDR32F9Q1 LCD Private Constants
     39            * @{
     40            */
     41          
     42          #define EXTBUS_BASE         0x10000000
     43          #define LCD_CRYSTAL1_OFFS   0x100000
     44          #define LCD_CRYSTAL2_OFFS   0x200000
     45          #define LCD_DATA_OFFS       0x8000000
     46          #define LCD_CRYSTAL1_CMD    EXTBUS_BASE + LCD_CRYSTAL1_OFFS
     47          #define LCD_CRYSTAL2_CMD    EXTBUS_BASE + LCD_CRYSTAL2_OFFS
     48          #define LCD_CRYSTAL1_DATA   EXTBUS_BASE + LCD_CRYSTAL1_OFFS + LCD_DATA_OFFS
     49          #define LCD_CRYSTAL2_DATA   EXTBUS_BASE + LCD_CRYSTAL2_OFFS + LCD_DATA_OFFS
     50          
     51          /** @} */ /* End of group __MDR32F9Q1_LCD_Private_Constants */
     52          
     53          /** @defgroup __MDR32F9Q1_LCD_Private_Macros MDR32F9Q1 LCD Private Macros
     54            * @{
     55            */
     56          
     57          #define WAIT_BUSY           WhileStatus(LCD_BUSY_Msk)
     58          #define WAIT_RESET          WhileStatus(LCD_RESET_Msk)
     59          #define WAIT_ON             WhileStatus(LCD_ONOFF_Msk)
     60          
     61          /** @} */ /* End of group __MDR32F9Q1_LCD_Private_Macros */
     62          
     63          /** @defgroup __MDR32F9Q1_LCD_Variables MDR32F9Q1 LCD Variables
     64            * @{
     65            */
     66          
     67          /* LCD ports */

   \                                 In section .text, align 4, keep-with-next
     68          const LCD_Ports CrystalPorts[NUM_LCD_CRYSTALS] = {
   \                     CrystalPorts:
   \   00000000   0x18100000         DC32 403701760, 269484032, 404750336, 270532608
   \              0x10100000   
   \              0x18200000   
   \              0x10200000   
     69            /* Crystal #1 */
     70            { LCD_CRYSTAL1_DATA,
     71              LCD_CRYSTAL1_CMD },
     72            /* Crystal #2 */
     73            { LCD_CRYSTAL2_DATA,
     74              LCD_CRYSTAL2_CMD }
     75          };
     76          
     77          /* Display context */

   \                                 In section .bss, align 1
     78          LCD_Crystal CurrentCrystal = LCD_CRYSTAL1;  /*!< Currently selected crystal */
   \                     CurrentCrystal:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     79          LCD_Method CurrentMethod = MET_AND;         /*!< Current display method    */
   \                     CurrentMethod:
   \   00000000   0x04               DC8 4
     80          
     81          /** @} */ /* End of group __MDR32F9Q1_LCD_Variables */
     82          
     83          /** @defgroup __MDR32F9Q1_LCD_Private_Functions MDR32F9Q1 LCD Private Functions
     84            * @{
     85            */
     86          
     87          /* Private function prototypes -----------------------------------------------*/
     88          static uint32_t GetStatus(void);
     89          static void WhileStatus(uint32_t status);
     90          static void Pause(void);
     91          
     92          /* Private functions ---------------------------------------------------------*/
     93          
     94          /*******************************************************************************
     95          * Function Name  : ResetLCD
     96          * Description    : Resets the LCD.
     97          * Input          : None
     98          * Output         : None
     99          * Return         : None
    100          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    101          void ResetLCD(void)
    102          {
   \                     ResetLCD:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    103            PORT_SetBits(MDR_PORTC, PORT_Pin_9);
   \   00000004   0x....             LDR.N    R4,??DataTable5  ;; 0x400b8000
   \   00000006   0x.... 0x....      BL       ?Subroutine2
    104            PORT_ResetBits(MDR_PORTC, PORT_Pin_9);
   \                     ??CrossCallReturnLabel_6:
   \   0000000A   0xF44F 0x7100      MOV      R1,#+512
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       PORT_ResetBits
    105            Pause();
   \   00000014   0x200F             MOVS     R0,#+15
   \   00000016   0xE001             B.N      ??ResetLCD_0
   \                     ??ResetLCD_1:
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x1E40             SUBS     R0,R0,#+1
   \                     ??ResetLCD_0:
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD1F9             BNE.N    ??ResetLCD_1
    106            PORT_SetBits(MDR_PORTC, PORT_Pin_9);
   \   00000024   0x.... 0x....      BL       ?Subroutine2
    107            WhileStatus(LCD_BUSY_Msk | LCD_RESET_Msk);
   \                     ??CrossCallReturnLabel_5:
   \   00000028   0x2090             MOVS     R0,#+144
   \   0000002A   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   0000002E   0x....             B.N      WhileStatus
    108          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0xF44F 0x7100      MOV      R1,#+512
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      B.W      PORT_SetBits
    109          
    110          /*******************************************************************************
    111          * Function Name  : SetCrystal
    112          * Description    : Sets the current LCD crystal.
    113          * Input          : None
    114          * Output         : None
    115          * Return         : None
    116          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    117          void SetCrystal(LCD_Crystal num)
    118          {
   \                     SetCrystal:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    119            PORT_Write(MDR_PORTE, ((num + 1) << 4));
   \   00000004   0x1C60             ADDS     R0,R4,#+1
   \   00000006   0x0101             LSLS     R1,R0,#+4
   \   00000008   0x....             LDR.N    R0,??DataTable5_1  ;; 0x400c8000
   \   0000000A   0x.... 0x....      BL       PORT_Write
    120            WAIT_BUSY;
   \   0000000E   0x.... 0x....      BL       ?Subroutine1
    121            CurrentCrystal = num;
   \                     ??CrossCallReturnLabel_4:
   \   00000012   0x....             LDR.N    R0,??DataTable5_2
   \   00000014   0x7004             STRB     R4,[R0, #+0]
    122          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x2080             MOVS     R0,#+128
   \   00000002   0x....             B.N      WhileStatus
    123          
    124          /*******************************************************************************
    125          * Function Name  : WriteLCD_Cmd
    126          * Description    : Writes command to the current LCD crystal.
    127          * Input          : LCD command
    128          * Output         : None
    129          * Return         : None
    130          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    131          void WriteLCD_Cmd(uint32_t val)
    132          {
    133            LCD_CMD(CurrentCrystal) = val;
   \                     WriteLCD_Cmd:
   \   00000000   0x....             LDR.N    R1,??DataTable5_2
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x.... 0x....      ADR.W    R2,CrystalPorts
   \   00000008   0xEB02 0x01C1      ADD      R1,R2,R1, LSL #+3
   \   0000000C   0x6849             LDR      R1,[R1, #+4]
   \   0000000E   0x....             B.N      ?Subroutine0
    134            WAIT_BUSY;
    135          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x6008             STR      R0,[R1, #+0]
   \   00000002   0x2080             MOVS     R0,#+128
   \   00000004   0x....             B.N      WhileStatus
    136          
    137          /*******************************************************************************
    138          * Function Name  : WriteLCD_Data
    139          * Description    : Writes data to the current LCD crystal.
    140          * Input          : Data
    141          * Output         : None
    142          * Return         : None
    143          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    144          void WriteLCD_Data(uint32_t val)
    145          {
    146            LCD_DATA(CurrentCrystal) = val;
   \                     WriteLCD_Data:
   \   00000000   0x....             LDR.N    R1,??DataTable5_2
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x.... 0x....      ADR.W    R2,CrystalPorts
   \   00000008   0xF852 0x1031      LDR      R1,[R2, R1, LSL #+3]
   \   0000000C                      REQUIRE ?Subroutine0
   \   0000000C                      ;; // Fall through to label ?Subroutine0
    147            WAIT_BUSY;
    148          }
    149          
    150          /*******************************************************************************
    151          * Function Name  : ReadLCD_Cmd
    152          * Description    : Reads command from the current LCD crystal.
    153          * Input          : None
    154          * Output         : None
    155          * Return         : LCD command
    156          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    157          uint32_t ReadLCD_Cmd(void)
    158          {
    159            uint32_t ret = LCD_CMD(CurrentCrystal);
   \                     ReadLCD_Cmd:
   \   00000000   0x....             LDR.N    R0,??DataTable5_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x.... 0x....      ADR.W    R1,CrystalPorts
   \   00000008   0xEB01 0x00C0      ADD      R0,R1,R0, LSL #+3
   \   0000000C   0x6840             LDR      R0,[R0, #+4]
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
    160          
    161            return ret;
   \   00000010   0x4770             BX       LR               ;; return
    162          }
    163          
    164          /*******************************************************************************
    165          * Function Name  : ReadLCD_Data
    166          * Description    : Reads data from the current LCD crystal.
    167          * Input          : None
    168          * Output         : None
    169          * Return         : LCD data
    170          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    171          uint32_t ReadLCD_Data()
    172          {
   \                     ReadLCD_Data:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             LDR.N    R0,??DataTable5_2
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x.... 0x....      ADR.W    R1,CrystalPorts
   \   0000000A   0xF851 0x4030      LDR      R4,[R1, R0, LSL #+3]
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
    173            uint32_t ret;
    174            LCD_DATA(CurrentCrystal);     /* First reading is necessary to get correct data */
    175            WAIT_BUSY;
   \   00000010   0x.... 0x....      BL       ?Subroutine1
    176            ret = LCD_DATA(CurrentCrystal);
   \                     ??CrossCallReturnLabel_3:
   \   00000014   0x6824             LDR      R4,[R4, #+0]
    177            WAIT_BUSY;
   \   00000016   0x.... 0x....      BL       ?Subroutine1
    178            return ret;
   \                     ??CrossCallReturnLabel_2:
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    179          }
    180          
    181          /*******************************************************************************
    182          * Function Name  : LCD_INIT
    183          * Description    : Initializes all LCD crystals.
    184          * Input          : None
    185          * Output         : None
    186          * Return         : None
    187          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    188          void LCD_INIT(void)
    189          {
   \                     LCD_INIT:
   \   00000000   0xB510             PUSH     {R4,LR}
    190            uint32_t crystal;
    191          
    192            ResetLCD();
   \   00000002   0x.... 0x....      BL       ResetLCD
    193          
    194            for (crystal = LCD_CRYSTAL1; crystal < NUM_LCD_CRYSTALS; crystal++)
   \   00000006   0x2400             MOVS     R4,#+0
    195            {
    196              SetCrystal((LCD_Crystal)crystal);
   \                     ??LCD_INIT_0:
   \   00000008   0xB2E0             UXTB     R0,R4
   \   0000000A   0x.... 0x....      BL       SetCrystal
    197              WAIT_BUSY;
   \   0000000E   0x.... 0x....      BL       ?Subroutine1
    198              LCD_ON;
   \                     ??CrossCallReturnLabel_1:
   \   00000012   0x203F             MOVS     R0,#+63
   \   00000014   0x.... 0x....      BL       WriteLCD_Cmd
    199              WAIT_ON;
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0x.... 0x....      BL       WhileStatus
    200              LCD_START_LINE(0);
   \   0000001E   0x20C0             MOVS     R0,#+192
   \   00000020   0x.... 0x....      BL       WriteLCD_Cmd
    201            }
   \   00000024   0x1C64             ADDS     R4,R4,#+1
   \   00000026   0x2C02             CMP      R4,#+2
   \   00000028   0xD3EE             BCC.N    ??LCD_INIT_0
    202          }
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    203          
    204          /*******************************************************************************
    205          * Function Name  : LCD_CLS
    206          * Description    : Clears the LCD screen.
    207          * Input          : None
    208          * Output         : None
    209          * Return         : None
    210          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    211          void LCD_CLS(void)
    212          {
   \                     LCD_CLS:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    213            uint32_t i, j, crystal;
    214          
    215            for (crystal = LCD_CRYSTAL1; crystal < NUM_LCD_CRYSTALS; crystal++)
   \   00000002   0x2400             MOVS     R4,#+0
    216            {
    217              SetCrystal((LCD_Crystal)crystal);
   \                     ??LCD_CLS_0:
   \   00000004   0xB2E0             UXTB     R0,R4
   \   00000006   0x.... 0x....      BL       SetCrystal
    218              WAIT_BUSY;
   \   0000000A   0x.... 0x....      BL       ?Subroutine1
    219              LCD_OFF;
   \                     ??CrossCallReturnLabel_0:
   \   0000000E   0x203E             MOVS     R0,#+62
   \   00000010   0x.... 0x....      BL       WriteLCD_Cmd
    220              LCD_SET_ADDRESS(0);
   \   00000014   0x2040             MOVS     R0,#+64
   \   00000016   0x.... 0x....      BL       WriteLCD_Cmd
    221              for (i = 0; i < 8; i++)
   \   0000001A   0x2500             MOVS     R5,#+0
    222              {
    223                LCD_SET_PAGE(i);
   \                     ??LCD_CLS_1:
   \   0000001C   0xF045 0x00B8      ORR      R0,R5,#0xB8
   \   00000020   0x.... 0x....      BL       WriteLCD_Cmd
    224                for (j = 0; j < 64; j++)
   \   00000024   0x2640             MOVS     R6,#+64
    225                {
    226                  WriteLCD_Data(0x00);
   \                     ??LCD_CLS_2:
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       WriteLCD_Data
    227                }
   \   0000002C   0x1E76             SUBS     R6,R6,#+1
   \   0000002E   0xD1FA             BNE.N    ??LCD_CLS_2
    228              }
   \   00000030   0x1C6D             ADDS     R5,R5,#+1
   \   00000032   0x2D08             CMP      R5,#+8
   \   00000034   0xD3F2             BCC.N    ??LCD_CLS_1
    229              LCD_ON;
   \   00000036   0x203F             MOVS     R0,#+63
   \   00000038   0x.... 0x....      BL       WriteLCD_Cmd
    230            }
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \   0000003E   0x2C02             CMP      R4,#+2
   \   00000040   0xD3E0             BCC.N    ??LCD_CLS_0
    231          }
   \   00000042   0xBD70             POP      {R4-R6,PC}       ;; return
    232          
    233          /*******************************************************************************
    234          * Function Name  : GetStatus
    235          * Description    : Returns the current LCD status.
    236          * Input          : None
    237          * Output         : None
    238          * Return         : LCD status
    239          *******************************************************************************/
    240          static uint32_t GetStatus(void)
    241          {
    242            uint32_t ret;
    243          
    244            ret = ReadLCD_Cmd();
    245            return ret;
    246          }
    247          
    248          /*******************************************************************************
    249          * Function Name  : WhileStatus
    250          * Description    : Wait until the specific LCD status changes.
    251          * Input          : LCD status. This parameter can be one of the following
    252          *                : values: LCD_BUSY, LCD_ONOFF, LCD_RESET.
    253          * Output         : None
    254          * Return         : None
    255          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    256          static void WhileStatus(uint32_t status)
    257          {
   \                     WhileStatus:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    258          
    259            uint32_t stat;
    260            for (stat = GetStatus(); (stat & status) != 0; stat = GetStatus())
   \                     ??WhileStatus_0:
   \   00000004   0x.... 0x....      BL       ReadLCD_Cmd
   \   00000008   0x4220             TST      R0,R4
   \   0000000A   0xD1FB             BNE.N    ??WhileStatus_0
    261            {
    262            }
    263          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x400C8000         DC32     0x400c8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     CurrentCrystal
    264          
    265          /*******************************************************************************
    266          * Function Name  : Pause
    267          * Description    : Delay for approx. 15*3 CPU clocks.
    268          * Input          : None
    269          * Output         : None
    270          * Return         : None
    271          *******************************************************************************/
    272          static void Pause(void)
    273          {
    274            vuint32_t i;
    275          
    276            for (i = 15; i > 0; i--);
    277          }
    278          
    279          /** @} */ /* End of group __MDR32F9Q1_LCD_Private_Functions */
    280          
    281          /** @} */ /* End of group __MDR32F9Q1_LCD */
    282          
    283          /** @} */ /* End of group __MDR32F9Q1_LCD_Driver */
    284          
    285          /** @} */ /* End of group __MDR32F9Qx_Eval_Demo */
    286          
    287          #endif /* USE_MDR32F9Q1_Rev0 || USE_MDR32F9Q1_Rev1 */
    288          
    289          /******************* (C) COPYRIGHT 2011 Phyton *********************************
    290          *
    291          * END OF FILE lcd_MDR32F9Q1.c */
    292          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  LCD_CLS
             16 -> SetCrystal
             16 -> WhileStatus
             16 -> WriteLCD_Cmd
             16 -> WriteLCD_Data
        8  LCD_INIT
              8 -> ResetLCD
              8 -> SetCrystal
              8 -> WhileStatus
              8 -> WriteLCD_Cmd
        0  ReadLCD_Cmd
        8  ReadLCD_Data
              8 -> WhileStatus
       16  ResetLCD
             16 -> PORT_ResetBits
             16 -> PORT_SetBits
              0 -> WhileStatus
        8  SetCrystal
              8 -> PORT_Write
              8 -> WhileStatus
        8  WhileStatus
              8 -> ReadLCD_Cmd
        0  WriteLCD_Cmd
              0 -> WhileStatus
        0  WriteLCD_Data
              0 -> WhileStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       6  ?Subroutine0
       4  ?Subroutine1
      10  ?Subroutine2
      16  CrystalPorts
       1  CurrentCrystal
       1  CurrentMethod
      68  LCD_CLS
      44  LCD_INIT
      18  ReadLCD_Cmd
      30  ReadLCD_Data
      48  ResetLCD
      24  SetCrystal
      14  WhileStatus
      16  WriteLCD_Cmd
      12  WriteLCD_Data

 
   1 byte  in section .bss
   1 byte  in section .data
 322 bytes in section .text
 
 322 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
